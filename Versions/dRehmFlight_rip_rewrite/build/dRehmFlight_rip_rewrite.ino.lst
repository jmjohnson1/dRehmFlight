
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_rip_rewrite/build/dRehmFlight_rip_rewrite.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fd03 	bl	60001f60 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcd6 	bl	60001f58 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fccd 	bl	60001f70 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcc7 	bl	60001f68 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021a4 	.word	0x600021a4
600015ec:	000152e8 	.word	0x000152e8
600015f0:	20000000 	.word	0x20000000
600015f4:	60017490 	.word	0x60017490
600015f8:	20003ec0 	.word	0x20003ec0
600015fc:	20003ebf 	.word	0x20003ebf
60001600:	20003ec0 	.word	0x20003ec0
60001604:	20005320 	.word	0x20005320
60001608:	2000531f 	.word	0x2000531f
6000160c:	20003c00 	.word	0x20003c00
60001610:	0000db7d 	.word	0x0000db7d
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000bda5 	.word	0x0000bda5
60001628:	0000bdad 	.word	0x0000bdad
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	200052a4 	.word	0x200052a4
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	200052a8 	.word	0x200052a8
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	200026d0 	.word	0x200026d0
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	200026d0 	.word	0x200026d0

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	200026d0 	.word	0x200026d0
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	200026d0 	.word	0x200026d0

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbc7 	bl	60001f80 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	200052e9 	.word	0x200052e9

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005320 	.word	0x20005320
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9b2 	bl	60001f48 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	20004fa8 	.word	0x20004fa8
60001c44:	200052ec 	.word	0x200052ec
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	2000510c 	.word	0x2000510c
60001dd4:	20005108 	.word	0x20005108
60001dd8:	20005110 	.word	0x20005110
60001ddc:	20005114 	.word	0x20005114
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20003c00 	.word	0x20003c00
60001df4:	0000dd5b 	.word	0x0000dd5b

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8c0 	bl	60001f88 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f884 	bl	60001f78 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f860 	bl	60001f50 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20003c00 	.word	0x20003c00
60001ee0:	0000e055 	.word	0x0000e055

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <__sm_set_pool_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <__sm_set_pool_veneer+0x4>
60001f4c:	0000ef5d 	.word	0x0000ef5d

60001f50 <__memset_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <__memset_veneer+0x4>
60001f54:	000112b5 	.word	0x000112b5

60001f58 <__pwm_init_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__pwm_init_veneer+0x4>
60001f5c:	0000dad1 	.word	0x0000dad1

60001f60 <__set_arm_clock_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__set_arm_clock_veneer+0x4>
60001f64:	0000cd09 	.word	0x0000cd09

60001f68 <__main_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__main_veneer+0x4>
60001f6c:	0000d111 	.word	0x0000d111

60001f70 <____libc_init_array_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <____libc_init_array_veneer+0x4>
60001f74:	00011371 	.word	0x00011371

60001f78 <__delay_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__delay_veneer+0x4>
60001f7c:	0000cff9 	.word	0x0000cff9

60001f80 <___ZN7TwoWire8setClockEm_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f84:	00004629 	.word	0x00004629

60001f88 <__usb_init_serialnumber_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__usb_init_serialnumber_veneer+0x4>
60001f8c:	0000e61d 	.word	0x0000e61d

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 000038cd 000046c9 00004c0d     E....8...F...L..
60001fa0:	0000541d 0000c45d                       .T..]...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	20003ec0 	.word	0x20003ec0
      3c:	20003ec0 	.word	0x20003ec0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	2000504c 	.word	0x2000504c
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001c000 	.word	0x6001c000

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	4770      	bx	lr

0000006e <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6e:	6900      	ldr	r0, [r0, #16]
      70:	b120      	cbz	r0, 7c <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      72:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      74:	6803      	ldr	r3, [r0, #0]
      76:	68db      	ldr	r3, [r3, #12]
      78:	4798      	blx	r3
	}
      7a:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7c:	2000      	movs	r0, #0
	}
      7e:	4770      	bx	lr

00000080 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      80:	6900      	ldr	r0, [r0, #16]
      82:	b120      	cbz	r0, 8e <File::available()+0xe>
	int available() {
      84:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      86:	6803      	ldr	r3, [r0, #0]
      88:	691b      	ldr	r3, [r3, #16]
      8a:	4798      	blx	r3
	}
      8c:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8e:	2000      	movs	r0, #0
	}
      90:	4770      	bx	lr

00000092 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      92:	6900      	ldr	r0, [r0, #16]
      94:	b120      	cbz	r0, a0 <File::peek()+0xe>
	int peek() {
      96:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      98:	6803      	ldr	r3, [r0, #0]
      9a:	695b      	ldr	r3, [r3, #20]
      9c:	4798      	blx	r3
	}
      9e:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a4:	4770      	bx	lr

000000a6 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a6:	6900      	ldr	r0, [r0, #16]
      a8:	b120      	cbz	r0, b4 <File::flush()+0xe>
	void flush() {
      aa:	b508      	push	{r3, lr}
		if (f) f->flush();
      ac:	6803      	ldr	r3, [r0, #0]
      ae:	699b      	ldr	r3, [r3, #24]
      b0:	4798      	blx	r3
	}
      b2:	bd08      	pop	{r3, pc}
      b4:	4770      	bx	lr

000000b6 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b6:	6900      	ldr	r0, [r0, #16]
      b8:	b168      	cbz	r0, d6 <File::read()+0x20>
	int read() {
      ba:	b500      	push	{lr}
      bc:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      be:	6803      	ldr	r3, [r0, #0]
      c0:	689b      	ldr	r3, [r3, #8]
      c2:	2201      	movs	r2, #1
      c4:	f10d 0107 	add.w	r1, sp, #7
      c8:	4798      	blx	r3
      ca:	b138      	cbz	r0, dc <File::read()+0x26>
		return b;
      cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      d0:	b003      	add	sp, #12
      d2:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      da:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      e0:	e7f6      	b.n	d0 <File::read()+0x1a>

000000e2 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e2:	b500      	push	{lr}
      e4:	b083      	sub	sp, #12
      e6:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      ea:	6900      	ldr	r0, [r0, #16]
      ec:	b140      	cbz	r0, 100 <File::write(unsigned char)+0x1e>
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	68db      	ldr	r3, [r3, #12]
      f2:	2201      	movs	r2, #1
      f4:	f10d 0107 	add.w	r1, sp, #7
      f8:	4798      	blx	r3
	}
      fa:	b003      	add	sp, #12
      fc:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     100:	2000      	movs	r0, #0
     102:	e7fa      	b.n	fa <File::write(unsigned char)+0x18>

00000104 <SDFile::available()>:
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
     104:	6d03      	ldr	r3, [r0, #80]	; 0x50
     106:	b153      	cbz	r3, 11e <SDFile::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     108:	781a      	ldrb	r2, [r3, #0]
     10a:	f012 0f08 	tst.w	r2, #8
     10e:	d020      	beq.n	152 <SDFile::available()+0x4e>
     110:	69d8      	ldr	r0, [r3, #28]
     112:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     114:	1ac0      	subs	r0, r0, r3
     116:	bf48      	it	mi
     118:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     11c:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     11e:	6d43      	ldr	r3, [r0, #84]	; 0x54
     120:	b1cb      	cbz	r3, 156 <SDFile::available()+0x52>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     122:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     126:	f012 0f08 	tst.w	r2, #8
     12a:	d016      	beq.n	15a <SDFile::available()+0x56>
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     12c:	b410      	push	{r4}
     12e:	691a      	ldr	r2, [r3, #16]
     130:	6959      	ldr	r1, [r3, #20]
     132:	6818      	ldr	r0, [r3, #0]
     134:	685c      	ldr	r4, [r3, #4]
     136:	1a13      	subs	r3, r2, r0
     138:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     13c:	4618      	mov	r0, r3
     13e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     142:	f172 0200 	sbcs.w	r2, r2, #0
     146:	d301      	bcc.n	14c <SDFile::available()+0x48>
     148:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
		return sdfatfile.available();
	}
     14c:	f85d 4b04 	ldr.w	r4, [sp], #4
     150:	4770      	bx	lr
     152:	2000      	movs	r0, #0
     154:	4770      	bx	lr
     156:	2000      	movs	r0, #0
		return sdfatfile.available();
     158:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     15a:	2300      	movs	r3, #0
     15c:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     15e:	4618      	mov	r0, r3
     160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     164:	f172 0200 	sbcs.w	r2, r2, #0
     168:	bf28      	it	cs
     16a:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     16e:	4770      	bx	lr

00000170 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     170:	6d03      	ldr	r3, [r0, #80]	; 0x50
     172:	b113      	cbz	r3, 17a <SDFile::position()+0xa>
     174:	6958      	ldr	r0, [r3, #20]
     176:	2100      	movs	r1, #0
     178:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     17a:	6d43      	ldr	r3, [r0, #84]	; 0x54
     17c:	b113      	cbz	r3, 184 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     17e:	6818      	ldr	r0, [r3, #0]
     180:	6859      	ldr	r1, [r3, #4]
     182:	4770      	bx	lr
     184:	2000      	movs	r0, #0
     186:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     188:	4770      	bx	lr

0000018a <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     18a:	6d03      	ldr	r3, [r0, #80]	; 0x50
     18c:	b113      	cbz	r3, 194 <SDFile::size()+0xa>
     18e:	69d8      	ldr	r0, [r3, #28]
     190:	2100      	movs	r1, #0
     192:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     194:	6d43      	ldr	r3, [r0, #84]	; 0x54
     196:	b113      	cbz	r3, 19e <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     198:	6918      	ldr	r0, [r3, #16]
     19a:	6959      	ldr	r1, [r3, #20]
     19c:	4770      	bx	lr
     19e:	2000      	movs	r0, #0
     1a0:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     1a2:	4770      	bx	lr

000001a4 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     1a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     1a6:	b10b      	cbz	r3, 1ac <SDFile::isOpen()+0x8>
     1a8:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     1aa:	4770      	bx	lr
     1ac:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1ae:	3800      	subs	r0, #0
     1b0:	bf18      	it	ne
     1b2:	2001      	movne	r0, #1
     1b4:	4770      	bx	lr

000001b6 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     1b6:	798a      	ldrb	r2, [r1, #6]
     1b8:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     1bc:	f013 0f80 	tst.w	r3, #128	; 0x80
     1c0:	d120      	bne.n	204 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c4:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     1c6:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     1ca:	794b      	ldrb	r3, [r1, #5]
     1cc:	3301      	adds	r3, #1
     1ce:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     1d0:	790d      	ldrb	r5, [r1, #4]
     1d2:	788e      	ldrb	r6, [r1, #2]
     1d4:	784f      	ldrb	r7, [r1, #1]
     1d6:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     1d8:	6d04      	ldr	r4, [r0, #80]	; 0x50
     1da:	b14c      	cbz	r4, 1f0 <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     1dc:	9103      	str	r1, [sp, #12]
     1de:	9702      	str	r7, [sp, #8]
     1e0:	9601      	str	r6, [sp, #4]
     1e2:	9500      	str	r5, [sp, #0]
     1e4:	2102      	movs	r1, #2
     1e6:	4620      	mov	r0, r4
     1e8:	f007 ffc0 	bl	816c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     1ec:	b005      	add	sp, #20
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     1f0:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1f2:	b148      	cbz	r0, 208 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     1f4:	9103      	str	r1, [sp, #12]
     1f6:	9702      	str	r7, [sp, #8]
     1f8:	9601      	str	r6, [sp, #4]
     1fa:	9500      	str	r5, [sp, #0]
     1fc:	2102      	movs	r1, #2
     1fe:	f006 f8da 	bl	63b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     202:	e7f3      	b.n	1ec <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     204:	2000      	movs	r0, #0
	}
     206:	4770      	bx	lr
           m_xFile ?
     208:	2000      	movs	r0, #0
     20a:	e7ef      	b.n	1ec <SDFile::setCreateTime(DateTimeFields const&)+0x36>

0000020c <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     20c:	b510      	push	{r4, lr}
     20e:	b082      	sub	sp, #8
     210:	4603      	mov	r3, r0
     212:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     214:	6d00      	ldr	r0, [r0, #80]	; 0x50
     216:	b310      	cbz	r0, 25e <SDFile::getModifyTime(DateTimeFields&)+0x52>
     218:	aa01      	add	r2, sp, #4
     21a:	f10d 0106 	add.w	r1, sp, #6
     21e:	f007 fd7f 	bl	7d20 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     222:	b1d0      	cbz	r0, 25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     224:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     228:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     22c:	ea53 0102 	orrs.w	r1, r3, r2
     230:	d01f      	beq.n	272 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     232:	f002 011f 	and.w	r1, r2, #31
     236:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     238:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     23a:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     23e:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     240:	0ad2      	lsrs	r2, r2, #11
     242:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     244:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     248:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     24a:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     24e:	3a01      	subs	r2, #1
     250:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     252:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     254:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     258:	71a3      	strb	r3, [r4, #6]
	}
     25a:	b002      	add	sp, #8
     25c:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     25e:	6d58      	ldr	r0, [r3, #84]	; 0x54
     260:	b128      	cbz	r0, 26e <SDFile::getModifyTime(DateTimeFields&)+0x62>
     262:	aa01      	add	r2, sp, #4
     264:	f10d 0106 	add.w	r1, sp, #6
     268:	f005 f94e 	bl	5508 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     26c:	e7d9      	b.n	222 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     26e:	2000      	movs	r0, #0
     270:	e7f3      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     272:	2000      	movs	r0, #0
     274:	e7f1      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>

00000276 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     276:	b510      	push	{r4, lr}
     278:	b082      	sub	sp, #8
     27a:	4603      	mov	r3, r0
     27c:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     27e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     280:	b310      	cbz	r0, 2c8 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     282:	aa01      	add	r2, sp, #4
     284:	f10d 0106 	add.w	r1, sp, #6
     288:	f007 fd3a 	bl	7d00 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     28c:	b1d0      	cbz	r0, 2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     28e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     292:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     296:	ea53 0102 	orrs.w	r1, r3, r2
     29a:	d01f      	beq.n	2dc <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     29c:	f002 011f 	and.w	r1, r2, #31
     2a0:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     2a2:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     2a4:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     2a8:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     2aa:	0ad2      	lsrs	r2, r2, #11
     2ac:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     2ae:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     2b2:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     2b4:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     2b8:	3a01      	subs	r2, #1
     2ba:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     2bc:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     2be:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     2c2:	71a3      	strb	r3, [r4, #6]
	}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     2c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
     2ca:	b128      	cbz	r0, 2d8 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     2cc:	aa01      	add	r2, sp, #4
     2ce:	f10d 0106 	add.w	r1, sp, #6
     2d2:	f005 f907 	bl	54e4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     2d6:	e7d9      	b.n	28c <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     2d8:	2000      	movs	r0, #0
     2da:	e7f3      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     2dc:	2000      	movs	r0, #0
     2de:	e7f1      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

000002e0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2e0:	b510      	push	{r4, lr}
     2e2:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     2e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
     2e6:	b120      	cbz	r0, 2f2 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2e8:	7803      	ldrb	r3, [r0, #0]
     2ea:	f013 0f70 	tst.w	r3, #112	; 0x70
     2ee:	d10e      	bne.n	30e <SDFile::rewindDirectory()+0x2e>
	}
     2f0:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     2f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0fb      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     2f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     2fc:	f013 0f50 	tst.w	r3, #80	; 0x50
     300:	d0f6      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     302:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     304:	2200      	movs	r2, #0
     306:	2300      	movs	r3, #0
     308:	f005 fa59 	bl	57be <ExFatFile::seekSet(unsigned long long)>
     30c:	e7f0      	b.n	2f0 <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     30e:	2100      	movs	r1, #0
     310:	f007 fabe 	bl	7890 <FatFile::seekSet(unsigned long)>
     314:	6d60      	ldr	r0, [r4, #84]	; 0x54
     316:	2800      	cmp	r0, #0
     318:	d0ea      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     31a:	e7f3      	b.n	304 <SDFile::rewindDirectory()+0x24>

0000031c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     31c:	b508      	push	{r3, lr}
     31e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     320:	6c80      	ldr	r0, [r0, #72]	; 0x48
     322:	b110      	cbz	r0, 32a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     324:	f007 fa7e 	bl	7824 <FatFile::peek()>
  }
     328:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     32a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     32c:	b110      	cbz	r0, 334 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     32e:	f005 fa30 	bl	5792 <ExFatFile::peek()>
     332:	e7f9      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     338:	e7f6      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

0000033a <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     33a:	b500      	push	{lr}
     33c:	b083      	sub	sp, #12
     33e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     340:	6c80      	ldr	r0, [r0, #72]	; 0x48
     342:	b158      	cbz	r0, 35c <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     344:	2201      	movs	r2, #1
     346:	f10d 0107 	add.w	r1, sp, #7
     34a:	f007 f996 	bl	767a <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     34e:	2801      	cmp	r0, #1
     350:	d10f      	bne.n	372 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     352:	f89d 0007 	ldrb.w	r0, [sp, #7]
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return BaseFile::read();
  }
     356:	b003      	add	sp, #12
     358:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     35c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     35e:	b128      	cbz	r0, 36c <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     360:	2201      	movs	r2, #1
     362:	f10d 0107 	add.w	r1, sp, #7
     366:	f005 f949 	bl	55fc <ExFatFile::read(void*, unsigned int)>
     36a:	e7f0      	b.n	34e <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     370:	e7f1      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     376:	e7ee      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000378 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     378:	b508      	push	{r3, lr}
     37a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     37c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     37e:	b110      	cbz	r0, 386 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     380:	f007 fbd4 	bl	7b2c <FatFile::sync()>
  }
     384:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     386:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     388:	2800      	cmp	r0, #0
     38a:	d0fb      	beq.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     38c:	f005 fe8c 	bl	60a8 <ExFatFile::sync()>
     390:	e7f8      	b.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000392 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     392:	b500      	push	{lr}
     394:	b083      	sub	sp, #12
     396:	4603      	mov	r3, r0
     398:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     39c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     39e:	b138      	cbz	r0, 3b0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3a0:	2201      	movs	r2, #1
     3a2:	f10d 0107 	add.w	r1, sp, #7
     3a6:	f007 ff99 	bl	82dc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3aa:	b003      	add	sp, #12
     3ac:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     3b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     3b2:	b128      	cbz	r0, 3c0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     3b4:	2201      	movs	r2, #1
     3b6:	f10d 0107 	add.w	r1, sp, #7
     3ba:	f006 f929 	bl	6610 <ExFatFile::write(void const*, unsigned int)>
     3be:	e7f4      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     3c0:	2000      	movs	r0, #0
    return BaseFile::write(b);
     3c2:	e7f2      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>

000003c4 <SDFile::name()>:
	virtual const char * name() {
     3c4:	b510      	push	{r4, lr}
     3c6:	4604      	mov	r4, r0
		if (!filename) {
     3c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     3ca:	b10b      	cbz	r3, 3d0 <SDFile::name()+0xc>
	}
     3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
     3ce:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     3d0:	f44f 7080 	mov.w	r0, #256	; 0x100
     3d4:	f010 fbe2 	bl	10b9c <malloc>
     3d8:	4601      	mov	r1, r0
     3da:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     3dc:	b180      	cbz	r0, 400 <SDFile::name()+0x3c>
    *name = 0;
     3de:	2300      	movs	r3, #0
     3e0:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     3e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
     3e4:	b120      	cbz	r0, 3f0 <SDFile::name()+0x2c>
     3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3ea:	f009 f88d 	bl	9508 <FatFile::getName(char*, unsigned int)>
     3ee:	e7ed      	b.n	3cc <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     3f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3f2:	2800      	cmp	r0, #0
     3f4:	d0ea      	beq.n	3cc <SDFile::name()+0x8>
    return getName8(name, size);
     3f6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3fa:	f006 fda9 	bl	6f50 <ExFatFile::getName8(char*, unsigned int)>
     3fe:	e7e5      	b.n	3cc <SDFile::name()+0x8>
				filename = &zeroterm;
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <SDFile::name()+0x44>)
     402:	65a3      	str	r3, [r4, #88]	; 0x58
     404:	e7e2      	b.n	3cc <SDFile::name()+0x8>
     406:	bf00      	nop
     408:	200052e7 	.word	0x200052e7

0000040c <SDFile::close()>:
	virtual void close() {
     40c:	b510      	push	{r4, lr}
     40e:	4604      	mov	r4, r0
		if (filename) {
     410:	6d80      	ldr	r0, [r0, #88]	; 0x58
     412:	b118      	cbz	r0, 41c <SDFile::close()+0x10>
			free(filename);
     414:	f010 fbca 	bl	10bac <free>
			filename = nullptr;
     418:	2300      	movs	r3, #0
     41a:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     41c:	6d23      	ldr	r3, [r4, #80]	; 0x50
     41e:	b123      	cbz	r3, 42a <SDFile::close()+0x1e>
			sdfatfile.close();
     420:	f104 0018 	add.w	r0, r4, #24
     424:	f009 fb8a 	bl	9b3c <FsBaseFile::close()>
	}
     428:	bd10      	pop	{r4, pc}
     42a:	6d63      	ldr	r3, [r4, #84]	; 0x54
     42c:	2b00      	cmp	r3, #0
     42e:	d1f7      	bne.n	420 <SDFile::close()+0x14>
     430:	e7fa      	b.n	428 <SDFile::close()+0x1c>

00000432 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     432:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     434:	6d04      	ldr	r4, [r0, #80]	; 0x50
     436:	b194      	cbz	r4, 45e <SDFile::truncate(unsigned long long)+0x2c>
     438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     43c:	4291      	cmp	r1, r2
     43e:	f04f 0100 	mov.w	r1, #0
     442:	4199      	sbcs	r1, r3
     444:	d201      	bcs.n	44a <SDFile::truncate(unsigned long long)+0x18>
     446:	2000      	movs	r0, #0
	}
     448:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     44a:	4611      	mov	r1, r2
     44c:	4620      	mov	r0, r4
     44e:	f007 fa1f 	bl	7890 <FatFile::seekSet(unsigned long)>
     452:	2800      	cmp	r0, #0
     454:	d0f8      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     456:	4620      	mov	r0, r4
     458:	f007 ff06 	bl	8268 <FatFile::truncate()>
     45c:	e7f4      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     45e:	6d44      	ldr	r4, [r0, #84]	; 0x54
     460:	b144      	cbz	r4, 474 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     462:	4620      	mov	r0, r4
     464:	f005 f9ab 	bl	57be <ExFatFile::seekSet(unsigned long long)>
     468:	2800      	cmp	r0, #0
     46a:	d0ed      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     46c:	4620      	mov	r0, r4
     46e:	f006 f85c 	bl	652a <ExFatFile::truncate()>
     472:	e7e9      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
     474:	2000      	movs	r0, #0
     476:	e7e7      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>

00000478 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	b094      	sub	sp, #80	; 0x50
     47c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     47e:	2200      	movs	r2, #0
     480:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     486:	9302      	str	r3, [sp, #8]
     488:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     48c:	9212      	str	r2, [sp, #72]	; 0x48
     48e:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     490:	4b1f      	ldr	r3, [pc, #124]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     492:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     494:	3118      	adds	r1, #24
     496:	a804      	add	r0, sp, #16
     498:	f009 fb9e 	bl	9bd8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
     49e:	2b00      	cmp	r3, #0
     4a0:	d02a      	beq.n	4f8 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     4a2:	205c      	movs	r0, #92	; 0x5c
     4a4:	f00c fed6 	bl	d254 <operator new(unsigned int)>
     4a8:	4604      	mov	r4, r0
class FileImpl {
     4aa:	2600      	movs	r6, #0
     4ac:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     4ae:	4b19      	ldr	r3, [pc, #100]	; (514 <SDFile::openNextFile(unsigned char)+0x9c>)
     4b0:	6003      	str	r3, [r0, #0]
class Print
     4b2:	9b01      	ldr	r3, [sp, #4]
     4b4:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <SDFile::openNextFile(unsigned char)+0xa0>)
     4b8:	6083      	str	r3, [r0, #8]
     4ba:	9b02      	ldr	r3, [sp, #8]
     4bc:	6103      	str	r3, [r0, #16]
     4be:	f89d 300c 	ldrb.w	r3, [sp, #12]
     4c2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     4c4:	a904      	add	r1, sp, #16
     4c6:	3018      	adds	r0, #24
     4c8:	f009 faf7 	bl	9aba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     4cc:	4b10      	ldr	r3, [pc, #64]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     4ce:	60a3      	str	r3, [r4, #8]
     4d0:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     4d2:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     4d8:	60ab      	str	r3, [r5, #8]
     4da:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     4dc:	4b0f      	ldr	r3, [pc, #60]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     4de:	602b      	str	r3, [r5, #0]
		f = file;
     4e0:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     4e2:	6863      	ldr	r3, [r4, #4]
     4e4:	3301      	adds	r3, #1
     4e6:	6063      	str	r3, [r4, #4]
     4e8:	4b0d      	ldr	r3, [pc, #52]	; (520 <SDFile::openNextFile(unsigned char)+0xa8>)
     4ea:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     4ec:	a804      	add	r0, sp, #16
     4ee:	f009 fb25 	bl	9b3c <FsBaseFile::close()>
	}
     4f2:	4628      	mov	r0, r5
     4f4:	b014      	add	sp, #80	; 0x50
     4f6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     4fa:	2b00      	cmp	r3, #0
     4fc:	d1d1      	bne.n	4a2 <SDFile::openNextFile(unsigned char)+0x2a>
     4fe:	606b      	str	r3, [r5, #4]
     500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     504:	60aa      	str	r2, [r5, #8]
     506:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     508:	4a04      	ldr	r2, [pc, #16]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     50a:	602a      	str	r2, [r5, #0]
     50c:	612b      	str	r3, [r5, #16]
     50e:	e7eb      	b.n	4e8 <SDFile::openNextFile(unsigned char)+0x70>
     510:	200022b8 	.word	0x200022b8
     514:	200022dc 	.word	0x200022dc
     518:	20002338 	.word	0x20002338
     51c:	2000228c 	.word	0x2000228c
     520:	200021ac 	.word	0x200021ac

00000524 <SDFile::peek()>:
	virtual int peek() {
     524:	b508      	push	{r3, lr}
     526:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     528:	6d00      	ldr	r0, [r0, #80]	; 0x50
     52a:	b110      	cbz	r0, 532 <SDFile::peek()+0xe>
     52c:	f007 f97a 	bl	7824 <FatFile::peek()>
	}
     530:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     532:	6d58      	ldr	r0, [r3, #84]	; 0x54
     534:	b110      	cbz	r0, 53c <SDFile::peek()+0x18>
     536:	f005 f92c 	bl	5792 <ExFatFile::peek()>
     53a:	e7f9      	b.n	530 <SDFile::peek()+0xc>
     53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     540:	e7f6      	b.n	530 <SDFile::peek()+0xc>

00000542 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     542:	6d03      	ldr	r3, [r0, #80]	; 0x50
     544:	b133      	cbz	r3, 554 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     546:	781b      	ldrb	r3, [r3, #0]
     548:	f013 0f70 	tst.w	r3, #112	; 0x70
     54c:	bf14      	ite	ne
     54e:	2001      	movne	r0, #1
     550:	2000      	moveq	r0, #0
     552:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     554:	6d43      	ldr	r3, [r0, #84]	; 0x54
     556:	b13b      	cbz	r3, 568 <SDFile::isDirectory()+0x26>
     558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     55c:	f013 0f50 	tst.w	r3, #80	; 0x50
     560:	bf14      	ite	ne
     562:	2001      	movne	r0, #1
     564:	2000      	moveq	r0, #0
     566:	4770      	bx	lr
     568:	2000      	movs	r0, #0
	}
     56a:	4770      	bx	lr

0000056c <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     56c:	b508      	push	{r3, lr}
     56e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     570:	6d00      	ldr	r0, [r0, #80]	; 0x50
     572:	b110      	cbz	r0, 57a <SDFile::read(void*, unsigned int)+0xe>
     574:	f007 f881 	bl	767a <FatFile::read(void*, unsigned int)>
	}
     578:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     57a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     57c:	b110      	cbz	r0, 584 <SDFile::read(void*, unsigned int)+0x18>
     57e:	f005 f83d 	bl	55fc <ExFatFile::read(void*, unsigned int)>
     582:	e7f9      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>
     584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     588:	e7f6      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>

0000058a <SDFile::flush()>:
	virtual void flush() {
     58a:	b508      	push	{r3, lr}
     58c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     58e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     590:	b110      	cbz	r0, 598 <SDFile::flush()+0xe>
     592:	f007 facb 	bl	7b2c <FatFile::sync()>
	}
     596:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     598:	6d58      	ldr	r0, [r3, #84]	; 0x54
     59a:	2800      	cmp	r0, #0
     59c:	d0fb      	beq.n	596 <SDFile::flush()+0xc>
     59e:	f005 fd83 	bl	60a8 <ExFatFile::sync()>
     5a2:	e7f8      	b.n	596 <SDFile::flush()+0xc>

000005a4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5a4:	b510      	push	{r4, lr}
     5a6:	4604      	mov	r4, r0
     5a8:	4b0c      	ldr	r3, [pc, #48]	; (5dc <SDFile::~SDFile()+0x38>)
     5aa:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ac:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ae:	b118      	cbz	r0, 5b8 <SDFile::~SDFile()+0x14>
			free(filename);
     5b0:	f010 fafc 	bl	10bac <free>
			filename = nullptr;
     5b4:	2300      	movs	r3, #0
     5b6:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     5b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5ba:	b15b      	cbz	r3, 5d4 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     5bc:	f104 0018 	add.w	r0, r4, #24
     5c0:	f009 fabc 	bl	9b3c <FsBaseFile::close()>
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <SDFile::~SDFile()+0x3c>)
     5c6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     5c8:	f104 0018 	add.w	r0, r4, #24
     5cc:	f009 fab6 	bl	9b3c <FsBaseFile::close()>
	}
     5d0:	4620      	mov	r0, r4
     5d2:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     5d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     5d6:	2b00      	cmp	r3, #0
     5d8:	d1f0      	bne.n	5bc <SDFile::~SDFile()+0x18>
     5da:	e7f3      	b.n	5c4 <SDFile::~SDFile()+0x20>
     5dc:	200022dc 	.word	0x200022dc
     5e0:	200021ac 	.word	0x200021ac

000005e4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5e4:	b510      	push	{r4, lr}
     5e6:	4604      	mov	r4, r0
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <SDFile::~SDFile()+0x40>)
     5ea:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ec:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ee:	b118      	cbz	r0, 5f8 <SDFile::~SDFile()+0x14>
			free(filename);
     5f0:	f010 fadc 	bl	10bac <free>
			filename = nullptr;
     5f4:	2300      	movs	r3, #0
     5f6:	65a3      	str	r3, [r4, #88]	; 0x58
     5f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5fa:	b17b      	cbz	r3, 61c <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     5fc:	f104 0018 	add.w	r0, r4, #24
     600:	f009 fa9c 	bl	9b3c <FsBaseFile::close()>
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <SDFile::~SDFile()+0x44>)
     606:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     608:	f104 0018 	add.w	r0, r4, #24
     60c:	f009 fa96 	bl	9b3c <FsBaseFile::close()>
	}
     610:	215c      	movs	r1, #92	; 0x5c
     612:	4620      	mov	r0, r4
     614:	f00c fe22 	bl	d25c <operator delete(void*, unsigned int)>
     618:	4620      	mov	r0, r4
     61a:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     61c:	6d63      	ldr	r3, [r4, #84]	; 0x54
     61e:	2b00      	cmp	r3, #0
     620:	d1ec      	bne.n	5fc <SDFile::~SDFile()+0x18>
     622:	e7ef      	b.n	604 <SDFile::~SDFile()+0x20>
     624:	200022dc 	.word	0x200022dc
     628:	200021ac 	.word	0x200021ac

0000062c <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     62c:	b508      	push	{r3, lr}
     62e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     630:	6d00      	ldr	r0, [r0, #80]	; 0x50
     632:	b110      	cbz	r0, 63a <SDFile::write(void const*, unsigned int)+0xe>
     634:	f007 fe52 	bl	82dc <FatFile::write(void const*, unsigned int)>
	}
     638:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     63a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     63c:	b110      	cbz	r0, 644 <SDFile::write(void const*, unsigned int)+0x18>
     63e:	f005 ffe7 	bl	6610 <ExFatFile::write(void const*, unsigned int)>
     642:	e7f9      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>
     644:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     646:	e7f7      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>

00000648 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     648:	b508      	push	{r3, lr}
     64a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     64c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     64e:	b110      	cbz	r0, 656 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     650:	f007 fe44 	bl	82dc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     654:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     656:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     658:	b110      	cbz	r0, 660 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     65a:	f005 ffd9 	bl	6610 <ExFatFile::write(void const*, unsigned int)>
     65e:	e7f9      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     660:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     662:	e7f7      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000664 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     664:	798a      	ldrb	r2, [r1, #6]
     666:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     66a:	f013 0f80 	tst.w	r3, #128	; 0x80
     66e:	d120      	bne.n	6b2 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
     672:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     674:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     678:	794b      	ldrb	r3, [r1, #5]
     67a:	3301      	adds	r3, #1
     67c:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     67e:	790d      	ldrb	r5, [r1, #4]
     680:	788e      	ldrb	r6, [r1, #2]
     682:	784f      	ldrb	r7, [r1, #1]
     684:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     686:	6d04      	ldr	r4, [r0, #80]	; 0x50
     688:	b14c      	cbz	r4, 69e <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     68a:	9103      	str	r1, [sp, #12]
     68c:	9702      	str	r7, [sp, #8]
     68e:	9601      	str	r6, [sp, #4]
     690:	9500      	str	r5, [sp, #0]
     692:	2104      	movs	r1, #4
     694:	4620      	mov	r0, r4
     696:	f007 fd69 	bl	816c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     69a:	b005      	add	sp, #20
     69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     69e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     6a0:	b148      	cbz	r0, 6b6 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     6a2:	9103      	str	r1, [sp, #12]
     6a4:	9702      	str	r7, [sp, #8]
     6a6:	9601      	str	r6, [sp, #4]
     6a8:	9500      	str	r5, [sp, #0]
     6aa:	2104      	movs	r1, #4
     6ac:	f005 fe83 	bl	63b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     6b0:	e7f3      	b.n	69a <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     6b2:	2000      	movs	r0, #0
	}
     6b4:	4770      	bx	lr
           m_xFile ?
     6b6:	2000      	movs	r0, #0
     6b8:	e7ef      	b.n	69a <SDFile::setModifyTime(DateTimeFields const&)+0x36>

000006ba <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     6ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6bc:	b153      	cbz	r3, 6d4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6be:	781a      	ldrb	r2, [r3, #0]
     6c0:	f012 0f08 	tst.w	r2, #8
     6c4:	d020      	beq.n	708 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     6c6:	69d8      	ldr	r0, [r3, #28]
     6c8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6ca:	1ac0      	subs	r0, r0, r3
     6cc:	bf48      	it	mi
     6ce:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     6d2:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     6d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     6d6:	b1cb      	cbz	r3, 70c <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     6d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     6dc:	f012 0f08 	tst.w	r2, #8
     6e0:	d016      	beq.n	710 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  int available() {
     6e2:	b410      	push	{r4}
     6e4:	691a      	ldr	r2, [r3, #16]
     6e6:	6959      	ldr	r1, [r3, #20]
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	685c      	ldr	r4, [r3, #4]
     6ec:	1a13      	subs	r3, r2, r0
     6ee:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     6f2:	4618      	mov	r0, r3
     6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     6f8:	f172 0200 	sbcs.w	r2, r2, #0
     6fc:	d301      	bcc.n	702 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     6fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  }
     702:	f85d 4b04 	ldr.w	r4, [sp], #4
     706:	4770      	bx	lr
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr
     70c:	2000      	movs	r0, #0
    return BaseFile::available();
     70e:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     710:	2300      	movs	r3, #0
     712:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     714:	4618      	mov	r0, r3
     716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     71a:	f172 0200 	sbcs.w	r2, r2, #0
     71e:	bf28      	it	cs
     720:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     724:	4770      	bx	lr

00000726 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     726:	b510      	push	{r4, lr}
     728:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     72a:	b12c      	cbz	r4, 738 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     72c:	2c01      	cmp	r4, #1
     72e:	d019      	beq.n	764 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     730:	2c02      	cmp	r4, #2
     732:	d034      	beq.n	79e <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     734:	2000      	movs	r0, #0
	}
     736:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     738:	6d04      	ldr	r4, [r0, #80]	; 0x50
     73a:	b16c      	cbz	r4, 758 <SDFile::seek(unsigned long long, int)+0x32>
     73c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     740:	4291      	cmp	r1, r2
     742:	f04f 0100 	mov.w	r1, #0
     746:	4199      	sbcs	r1, r3
     748:	d201      	bcs.n	74e <SDFile::seek(unsigned long long, int)+0x28>
     74a:	2000      	movs	r0, #0
     74c:	e7f3      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     74e:	4611      	mov	r1, r2
     750:	4620      	mov	r0, r4
     752:	f007 f89d 	bl	7890 <FatFile::seekSet(unsigned long)>
     756:	e7ee      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     758:	6d40      	ldr	r0, [r0, #84]	; 0x54
     75a:	2800      	cmp	r0, #0
     75c:	d03c      	beq.n	7d8 <SDFile::seek(unsigned long long, int)+0xb2>
     75e:	f005 f82e 	bl	57be <ExFatFile::seekSet(unsigned long long)>
     762:	e7e8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     764:	6d04      	ldr	r4, [r0, #80]	; 0x50
     766:	b164      	cbz	r4, 782 <SDFile::seek(unsigned long long, int)+0x5c>
     768:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     76a:	1889      	adds	r1, r1, r2
     76c:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     774:	428a      	cmp	r2, r1
     776:	f04f 0200 	mov.w	r2, #0
     77a:	419a      	sbcs	r2, r3
     77c:	d20b      	bcs.n	796 <SDFile::seek(unsigned long long, int)+0x70>
     77e:	2000      	movs	r0, #0
     780:	e7d9      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     782:	6d40      	ldr	r0, [r0, #84]	; 0x54
     784:	b350      	cbz	r0, 7dc <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     786:	6801      	ldr	r1, [r0, #0]
     788:	6844      	ldr	r4, [r0, #4]
     78a:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     78c:	eb43 0304 	adc.w	r3, r3, r4
     790:	f005 f815 	bl	57be <ExFatFile::seekSet(unsigned long long)>
     794:	e7cf      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     796:	4620      	mov	r0, r4
     798:	f007 f87a 	bl	7890 <FatFile::seekSet(unsigned long)>
     79c:	e7cb      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     79e:	6d04      	ldr	r4, [r0, #80]	; 0x50
     7a0:	b164      	cbz	r4, 7bc <SDFile::seek(unsigned long long, int)+0x96>
     7a2:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     7a4:	1889      	adds	r1, r1, r2
     7a6:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7ae:	428a      	cmp	r2, r1
     7b0:	f04f 0200 	mov.w	r2, #0
     7b4:	419a      	sbcs	r2, r3
     7b6:	d20b      	bcs.n	7d0 <SDFile::seek(unsigned long long, int)+0xaa>
     7b8:	2000      	movs	r0, #0
     7ba:	e7bc      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     7bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     7be:	b178      	cbz	r0, 7e0 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     7c0:	6901      	ldr	r1, [r0, #16]
     7c2:	6944      	ldr	r4, [r0, #20]
     7c4:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     7c6:	eb43 0304 	adc.w	r3, r3, r4
     7ca:	f004 fff8 	bl	57be <ExFatFile::seekSet(unsigned long long)>
     7ce:	e7b2      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7d0:	4620      	mov	r0, r4
     7d2:	f007 f85d 	bl	7890 <FatFile::seekSet(unsigned long)>
     7d6:	e7ae      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     7d8:	2000      	movs	r0, #0
     7da:	e7ac      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7dc:	2000      	movs	r0, #0
     7de:	e7aa      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7e0:	2000      	movs	r0, #0
     7e2:	e7a8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>

000007e4 <File::~File()>:
	virtual ~File() {
     7e4:	b510      	push	{r4, lr}
     7e6:	4604      	mov	r4, r0
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <File::~File()+0x2c>)
     7ea:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     7ec:	6903      	ldr	r3, [r0, #16]
     7ee:	b163      	cbz	r3, 80a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     7f0:	685a      	ldr	r2, [r3, #4]
     7f2:	3a01      	subs	r2, #1
     7f4:	605a      	str	r2, [r3, #4]
     7f6:	b942      	cbnz	r2, 80a <File::~File()+0x26>
			f->close();
     7f8:	6900      	ldr	r0, [r0, #16]
     7fa:	6803      	ldr	r3, [r0, #0]
     7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     7fe:	4798      	blx	r3
			delete f;
     800:	6920      	ldr	r0, [r4, #16]
     802:	b110      	cbz	r0, 80a <File::~File()+0x26>
     804:	6803      	ldr	r3, [r0, #0]
     806:	685b      	ldr	r3, [r3, #4]
     808:	4798      	blx	r3
	}
     80a:	4620      	mov	r0, r4
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	2000228c 	.word	0x2000228c

00000814 <File::~File()>:
	virtual ~File() {
     814:	b510      	push	{r4, lr}
     816:	4604      	mov	r4, r0
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <File::~File()+0x34>)
     81a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     81c:	6903      	ldr	r3, [r0, #16]
     81e:	b163      	cbz	r3, 83a <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     820:	685a      	ldr	r2, [r3, #4]
     822:	3a01      	subs	r2, #1
     824:	605a      	str	r2, [r3, #4]
     826:	b942      	cbnz	r2, 83a <File::~File()+0x26>
			f->close();
     828:	6900      	ldr	r0, [r0, #16]
     82a:	6803      	ldr	r3, [r0, #0]
     82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     82e:	4798      	blx	r3
			delete f;
     830:	6920      	ldr	r0, [r4, #16]
     832:	b110      	cbz	r0, 83a <File::~File()+0x26>
     834:	6803      	ldr	r3, [r0, #0]
     836:	685b      	ldr	r3, [r3, #4]
     838:	4798      	blx	r3
	}
     83a:	2114      	movs	r1, #20
     83c:	4620      	mov	r0, r4
     83e:	f00c fd0d 	bl	d25c <operator delete(void*, unsigned int)>
     842:	4620      	mov	r0, r4
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop
     848:	2000228c 	.word	0x2000228c

0000084c <controlMixer()>:
	 command passthrough *channel_6_pwm - free auxillary channel, can be used to toggle things with an
	 'if' statement
   */
   
  //Quad mixing - EXAMPLE
  m1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     84c:	4b21      	ldr	r3, [pc, #132]	; (8d4 <controlMixer()+0x88>)
     84e:	edd3 6a00 	vldr	s13, [r3]
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <controlMixer()+0x8c>)
     854:	ed93 6a00 	vldr	s12, [r3]
     858:	ee36 7ac6 	vsub.f32	s14, s13, s12
     85c:	4b1f      	ldr	r3, [pc, #124]	; (8dc <controlMixer()+0x90>)
     85e:	edd3 7a00 	vldr	s15, [r3]
     862:	4b1f      	ldr	r3, [pc, #124]	; (8e0 <controlMixer()+0x94>)
     864:	ed93 5a00 	vldr	s10, [r3]
     868:	ee77 5a27 	vadd.f32	s11, s14, s15
     86c:	ee75 5a85 	vadd.f32	s11, s11, s10
     870:	4b1c      	ldr	r3, [pc, #112]	; (8e4 <controlMixer()+0x98>)
     872:	edc3 5a00 	vstr	s11, [r3]
  m2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     876:	ee37 7a67 	vsub.f32	s14, s14, s15
     87a:	ee37 7a45 	vsub.f32	s14, s14, s10
     87e:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <controlMixer()+0x9c>)
     880:	ed83 7a00 	vstr	s14, [r3]
  m3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     884:	ee76 6a86 	vadd.f32	s13, s13, s12
     888:	ee36 6ae7 	vsub.f32	s12, s13, s15
     88c:	ee36 6a05 	vadd.f32	s12, s12, s10
     890:	4b16      	ldr	r3, [pc, #88]	; (8ec <controlMixer()+0xa0>)
     892:	ed83 6a00 	vstr	s12, [r3]
  m4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     896:	ee77 7aa6 	vadd.f32	s15, s15, s13
     89a:	ee77 7ac5 	vsub.f32	s15, s15, s10
     89e:	4b14      	ldr	r3, [pc, #80]	; (8f0 <controlMixer()+0xa4>)
     8a0:	edc3 7a00 	vstr	s15, [r3]
  m5_command_scaled = 0;
     8a4:	2300      	movs	r3, #0
     8a6:	4a13      	ldr	r2, [pc, #76]	; (8f4 <controlMixer()+0xa8>)
     8a8:	6013      	str	r3, [r2, #0]
  m6_command_scaled = 0;
     8aa:	4a13      	ldr	r2, [pc, #76]	; (8f8 <controlMixer()+0xac>)
     8ac:	6013      	str	r3, [r2, #0]

  //0.5 is centered servo, 0.0 is zero throttle if connecting to ESC for conventional PWM, 1.0 is max throttle
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     8ae:	4a13      	ldr	r2, [pc, #76]	; (8fc <controlMixer()+0xb0>)
     8b0:	edc2 5a00 	vstr	s11, [r2]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     8b4:	4a12      	ldr	r2, [pc, #72]	; (900 <controlMixer()+0xb4>)
     8b6:	ed82 7a00 	vstr	s14, [r2]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     8ba:	4a12      	ldr	r2, [pc, #72]	; (904 <controlMixer()+0xb8>)
     8bc:	ed82 6a00 	vstr	s12, [r2]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     8c0:	4a11      	ldr	r2, [pc, #68]	; (908 <controlMixer()+0xbc>)
     8c2:	edc2 7a00 	vstr	s15, [r2]
  s5_command_scaled = 0;
     8c6:	4a11      	ldr	r2, [pc, #68]	; (90c <controlMixer()+0xc0>)
     8c8:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     8ca:	4a11      	ldr	r2, [pc, #68]	; (910 <controlMixer()+0xc4>)
     8cc:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     8ce:	4a11      	ldr	r2, [pc, #68]	; (914 <controlMixer()+0xc8>)
     8d0:	6013      	str	r3, [r2, #0]
}
     8d2:	4770      	bx	lr
     8d4:	200052b0 	.word	0x200052b0
     8d8:	20005068 	.word	0x20005068
     8dc:	20005094 	.word	0x20005094
     8e0:	200052cc 	.word	0x200052cc
     8e4:	20005010 	.word	0x20005010
     8e8:	20005018 	.word	0x20005018
     8ec:	20005020 	.word	0x20005020
     8f0:	20005028 	.word	0x20005028
     8f4:	20005030 	.word	0x20005030
     8f8:	20005038 	.word	0x20005038
     8fc:	200050d4 	.word	0x200050d4
     900:	200050dc 	.word	0x200050dc
     904:	200050e4 	.word	0x200050e4
     908:	200050ec 	.word	0x200050ec
     90c:	200050f4 	.word	0x200050f4
     910:	200050fc 	.word	0x200050fc
     914:	20005104 	.word	0x20005104

00000918 <IMUinit()>:

void IMUinit() {
     918:	b510      	push	{r4, lr}
  //DESCRIPTION: Initialize IMU
  /*
   * Don't worry about how this works.
   */
  #if defined USE_MPU6050_I2C
    Wire.begin();
     91a:	4c17      	ldr	r4, [pc, #92]	; (978 <IMUinit()+0x60>)
     91c:	4620      	mov	r0, r4
     91e:	f014 fcdb 	bl	152d8 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     922:	4916      	ldr	r1, [pc, #88]	; (97c <IMUinit()+0x64>)
     924:	4620      	mov	r0, r4
     926:	f003 fe7f 	bl	4628 <TwoWire::setClock(unsigned long)>
    
    mpu6050.initialize();
     92a:	4c15      	ldr	r4, [pc, #84]	; (980 <IMUinit()+0x68>)
     92c:	4620      	mov	r0, r4
     92e:	f003 f9cf 	bl	3cd0 <MPU6050::initialize()>
    
    if (mpu6050.testConnection() == false) {
     932:	4620      	mov	r0, r4
     934:	f003 f9f2 	bl	3d1c <MPU6050::testConnection()>
     938:	b998      	cbnz	r0, 962 <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     93a:	4c12      	ldr	r4, [pc, #72]	; (984 <IMUinit()+0x6c>)
     93c:	6823      	ldr	r3, [r4, #0]
     93e:	685b      	ldr	r3, [r3, #4]
     940:	2223      	movs	r2, #35	; 0x23
     942:	4911      	ldr	r1, [pc, #68]	; (988 <IMUinit()+0x70>)
     944:	4620      	mov	r0, r4
     946:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     948:	4620      	mov	r0, r4
     94a:	f00b fdfc 	bl	c546 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     94e:	6823      	ldr	r3, [r4, #0]
     950:	685b      	ldr	r3, [r3, #4]
     952:	2229      	movs	r2, #41	; 0x29
     954:	490d      	ldr	r1, [pc, #52]	; (98c <IMUinit()+0x74>)
     956:	4620      	mov	r0, r4
     958:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     95a:	4620      	mov	r0, r4
     95c:	f00b fdf3 	bl	c546 <Print::println()>
      Serial.println("MPU6050 initialization unsuccessful");
      Serial.println("Check MPU6050 wiring or try cycling power");
      while(1) {}
     960:	e7fe      	b.n	960 <IMUinit()+0x48>
    }

    //From the reset state all registers should be 0x00, so we should be at
    //max sample rate with digital low pass filter(s) off.  All we need to
    //do is set the desired fullscale ranges
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     962:	4c07      	ldr	r4, [pc, #28]	; (980 <IMUinit()+0x68>)
     964:	2100      	movs	r1, #0
     966:	4620      	mov	r0, r4
     968:	f003 f950 	bl	3c0c <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     96c:	2100      	movs	r1, #0
     96e:	4620      	mov	r0, r4
     970:	f003 f958 	bl	3c24 <MPU6050::setFullScaleAccelRange(unsigned char)>
    mpu9250.setMagCalX(MagErrorX, MagScaleX);
    mpu9250.setMagCalY(MagErrorY, MagScaleY);
    mpu9250.setMagCalZ(MagErrorZ, MagScaleZ);
    mpu9250.setSrd(0); //sets gyro and accel read to 1khz, magnetometer read to 100hz
  #endif
}
     974:	bd10      	pop	{r4, pc}
     976:	bf00      	nop
     978:	20004700 	.word	0x20004700
     97c:	000f4240 	.word	0x000f4240
     980:	2000503c 	.word	0x2000503c
     984:	20003170 	.word	0x20003170
     988:	20001d28 	.word	0x20001d28
     98c:	20001d4c 	.word	0x20001d4c

00000990 <getIMUdata()>:

void getIMUdata() {
     990:	b500      	push	{lr}
     992:	b089      	sub	sp, #36	; 0x24
   * the constant errors found in calculate_IMU_error() on startup are subtracted from the accelerometer and gyro readings.
   */
  int16_t AcX,AcY,AcZ,GyX,GyY,GyZ,MgX,MgY,MgZ;

  #if defined USE_MPU6050_I2C
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     994:	ab05      	add	r3, sp, #20
     996:	9302      	str	r3, [sp, #8]
     998:	f10d 0316 	add.w	r3, sp, #22
     99c:	9301      	str	r3, [sp, #4]
     99e:	ab06      	add	r3, sp, #24
     9a0:	9300      	str	r3, [sp, #0]
     9a2:	f10d 031a 	add.w	r3, sp, #26
     9a6:	aa07      	add	r2, sp, #28
     9a8:	f10d 011e 	add.w	r1, sp, #30
     9ac:	48a2      	ldr	r0, [pc, #648]	; (c38 <getIMUdata()+0x2a8>)
     9ae:	f003 f945 	bl	3c3c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
    mpu9250.getMotion9(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ, &MgX, &MgY, &MgZ);
  #endif

 //Accelerometer
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
  AccY = AcY / ACCEL_SCALE_FACTOR;
     9b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     9b6:	ee03 3a10 	vmov	s6, r3
     9ba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     9be:	ed9f 2b9a 	vldr	d2, [pc, #616]	; c28 <getIMUdata()+0x298>
     9c2:	ee23 3b02 	vmul.f64	d3, d3, d2
     9c6:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  AccX = AccX - AccErrorX;
  AccY = AccY - AccErrorY;
     9ca:	4b9c      	ldr	r3, [pc, #624]	; (c3c <getIMUdata()+0x2ac>)
     9cc:	edd3 7a00 	vldr	s15, [r3]
     9d0:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     9d4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     9d8:	ee06 3a10 	vmov	s12, r3
     9dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     9e0:	ee26 6b02 	vmul.f64	d6, d6, d2
     9e4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     9e8:	4b95      	ldr	r3, [pc, #596]	; (c40 <getIMUdata()+0x2b0>)
     9ea:	edd3 7a00 	vldr	s15, [r3]
     9ee:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter accelerometer data
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     9f2:	4b94      	ldr	r3, [pc, #592]	; (c44 <getIMUdata()+0x2b4>)
     9f4:	edd3 6a00 	vldr	s13, [r3]
     9f8:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     9fc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     a00:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     a04:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     a08:	ee07 3a10 	vmov	s14, r3
     a0c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a10:	ee27 7b02 	vmul.f64	d7, d7, d2
     a14:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     a18:	4b8b      	ldr	r3, [pc, #556]	; (c48 <getIMUdata()+0x2b8>)
     a1a:	edd3 7a00 	vldr	s15, [r3]
     a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a22:	ee27 7a26 	vmul.f32	s14, s14, s13
     a26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     a2a:	4988      	ldr	r1, [pc, #544]	; (c4c <getIMUdata()+0x2bc>)
     a2c:	ed91 2a00 	vldr	s4, [r1]
     a30:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a34:	ee02 7b04 	vmla.f64	d7, d2, d4
     a38:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     a3c:	4b84      	ldr	r3, [pc, #528]	; (c50 <getIMUdata()+0x2c0>)
     a3e:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     a42:	4a84      	ldr	r2, [pc, #528]	; (c54 <getIMUdata()+0x2c4>)
     a44:	ed92 2a00 	vldr	s4, [r2]
     a48:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a4c:	ee23 3a26 	vmul.f32	s6, s6, s13
     a50:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     a54:	ee02 3b04 	vmla.f64	d3, d2, d4
     a58:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     a5c:	4b7e      	ldr	r3, [pc, #504]	; (c58 <getIMUdata()+0x2c8>)
     a5e:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     a62:	4b7e      	ldr	r3, [pc, #504]	; (c5c <getIMUdata()+0x2cc>)
     a64:	ed93 2a00 	vldr	s4, [r3]
     a68:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a6c:	ee26 6a26 	vmul.f32	s12, s12, s13
     a70:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     a74:	ee02 6b04 	vmla.f64	d6, d2, d4
     a78:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     a7c:	4878      	ldr	r0, [pc, #480]	; (c60 <getIMUdata()+0x2d0>)
     a7e:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     a82:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     a86:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     a8a:	ed83 6a00 	vstr	s12, [r3]

  //Gyro
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
  GyroY = GyY / GYRO_SCALE_FACTOR;
     a8e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     a92:	ee07 3a10 	vmov	s14, r3
     a96:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a9a:	ed9f 2b65 	vldr	d2, [pc, #404]	; c30 <getIMUdata()+0x2a0>
     a9e:	ee87 3b02 	vdiv.f64	d3, d7, d2
     aa2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  GyroX = GyroX - GyroErrorX;
  GyroY = GyroY - GyroErrorY;
     aa6:	4b6f      	ldr	r3, [pc, #444]	; (c64 <getIMUdata()+0x2d4>)
     aa8:	edd3 7a00 	vldr	s15, [r3]
     aac:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     ab0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     ab4:	ee07 3a10 	vmov	s14, r3
     ab8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     abc:	ee87 6b02 	vdiv.f64	d6, d7, d2
     ac0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     ac4:	4b68      	ldr	r3, [pc, #416]	; (c68 <getIMUdata()+0x2d8>)
     ac6:	edd3 7a00 	vldr	s15, [r3]
     aca:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter gyro data
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     ace:	4b67      	ldr	r3, [pc, #412]	; (c6c <getIMUdata()+0x2dc>)
     ad0:	edd3 6a00 	vldr	s13, [r3]
     ad4:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     ad8:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     adc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     ae0:	ee01 3a10 	vmov	s2, r3
     ae4:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     ae8:	ee81 7b02 	vdiv.f64	d7, d1, d2
     aec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     af0:	4b5f      	ldr	r3, [pc, #380]	; (c70 <getIMUdata()+0x2e0>)
     af2:	edd3 7a00 	vldr	s15, [r3]
     af6:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     afa:	ee27 7a26 	vmul.f32	s14, s14, s13
     afe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     b02:	495c      	ldr	r1, [pc, #368]	; (c74 <getIMUdata()+0x2e4>)
     b04:	ed91 2a00 	vldr	s4, [r1]
     b08:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b0c:	ee02 7b04 	vmla.f64	d7, d2, d4
     b10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     b14:	4b58      	ldr	r3, [pc, #352]	; (c78 <getIMUdata()+0x2e8>)
     b16:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     b1a:	4a58      	ldr	r2, [pc, #352]	; (c7c <getIMUdata()+0x2ec>)
     b1c:	ed92 2a00 	vldr	s4, [r2]
     b20:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b24:	ee23 3a26 	vmul.f32	s6, s6, s13
     b28:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     b2c:	ee02 3b04 	vmla.f64	d3, d2, d4
     b30:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     b34:	4b52      	ldr	r3, [pc, #328]	; (c80 <getIMUdata()+0x2f0>)
     b36:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
     b3a:	4b52      	ldr	r3, [pc, #328]	; (c84 <getIMUdata()+0x2f4>)
     b3c:	ed93 2a00 	vldr	s4, [r3]
     b40:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b44:	ee26 6a26 	vmul.f32	s12, s12, s13
     b48:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     b4c:	ee02 6b04 	vmla.f64	d6, d2, d4
     b50:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     b54:	484c      	ldr	r0, [pc, #304]	; (c88 <getIMUdata()+0x2f8>)
     b56:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
     b5a:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
     b5e:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
     b62:	ed83 6a00 	vstr	s12, [r3]

  //Magnetometer
  MagX = MgX/6.0; //uT
  MagY = MgY/6.0;
     b66:	ed9f 7a49 	vldr	s14, [pc, #292]	; c8c <getIMUdata()+0x2fc>
  MagZ = MgZ/6.0;
  //Correct the outputs with the calculated error values
  MagX = (MagX - MagErrorX)*MagScaleX;
  MagY = (MagY - MagErrorY)*MagScaleY;
     b6a:	4b49      	ldr	r3, [pc, #292]	; (c90 <getIMUdata()+0x300>)
     b6c:	ed93 6a00 	vldr	s12, [r3]
     b70:	ee37 6a46 	vsub.f32	s12, s14, s12
     b74:	4b47      	ldr	r3, [pc, #284]	; (c94 <getIMUdata()+0x304>)
     b76:	edd3 7a00 	vldr	s15, [r3]
     b7a:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
     b7e:	4b46      	ldr	r3, [pc, #280]	; (c98 <getIMUdata()+0x308>)
     b80:	ed93 4a00 	vldr	s8, [r3]
     b84:	ee37 4a44 	vsub.f32	s8, s14, s8
     b88:	4b44      	ldr	r3, [pc, #272]	; (c9c <getIMUdata()+0x30c>)
     b8a:	edd3 7a00 	vldr	s15, [r3]
     b8e:	ee24 4a27 	vmul.f32	s8, s8, s15
  //LP filter magnetometer data
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     b92:	4b43      	ldr	r3, [pc, #268]	; (ca0 <getIMUdata()+0x310>)
     b94:	edd3 4a00 	vldr	s9, [r3]
     b98:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
     b9c:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
     ba0:	4b40      	ldr	r3, [pc, #256]	; (ca4 <getIMUdata()+0x314>)
     ba2:	edd3 7a00 	vldr	s15, [r3]
     ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
     baa:	4b3f      	ldr	r3, [pc, #252]	; (ca8 <getIMUdata()+0x318>)
     bac:	edd3 7a00 	vldr	s15, [r3]
     bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     bb4:	ee27 7a24 	vmul.f32	s14, s14, s9
     bb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     bbc:	493b      	ldr	r1, [pc, #236]	; (cac <getIMUdata()+0x31c>)
     bbe:	ed91 3a00 	vldr	s6, [r1]
     bc2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bc6:	ee03 7b05 	vmla.f64	d7, d3, d5
     bca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     bce:	4b38      	ldr	r3, [pc, #224]	; (cb0 <getIMUdata()+0x320>)
     bd0:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
     bd4:	4a37      	ldr	r2, [pc, #220]	; (cb4 <getIMUdata()+0x324>)
     bd6:	ed92 3a00 	vldr	s6, [r2]
     bda:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bde:	ee26 6a24 	vmul.f32	s12, s12, s9
     be2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     be6:	ee03 6b05 	vmla.f64	d6, d3, d5
     bea:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     bee:	4b32      	ldr	r3, [pc, #200]	; (cb8 <getIMUdata()+0x328>)
     bf0:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
     bf4:	4b31      	ldr	r3, [pc, #196]	; (cbc <getIMUdata()+0x32c>)
     bf6:	ed93 3a00 	vldr	s6, [r3]
     bfa:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bfe:	ee24 4a24 	vmul.f32	s8, s8, s9
     c02:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     c06:	ee03 4b05 	vmla.f64	d4, d3, d5
     c0a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     c0e:	482c      	ldr	r0, [pc, #176]	; (cc0 <getIMUdata()+0x330>)
     c10:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
     c14:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
     c18:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
     c1c:	ed83 4a00 	vstr	s8, [r3]
}
     c20:	b009      	add	sp, #36	; 0x24
     c22:	f85d fb04 	ldr.w	pc, [sp], #4
     c26:	bf00      	nop
     c28:	00000000 	.word	0x00000000
     c2c:	3f100000 	.word	0x3f100000
     c30:	00000000 	.word	0x00000000
     c34:	40606000 	.word	0x40606000
     c38:	2000503c 	.word	0x2000503c
     c3c:	20003114 	.word	0x20003114
     c40:	20003118 	.word	0x20003118
     c44:	2000311c 	.word	0x2000311c
     c48:	20003110 	.word	0x20003110
     c4c:	2000408c 	.word	0x2000408c
     c50:	20004088 	.word	0x20004088
     c54:	20004094 	.word	0x20004094
     c58:	20004090 	.word	0x20004090
     c5c:	2000409c 	.word	0x2000409c
     c60:	20004098 	.word	0x20004098
     c64:	20003138 	.word	0x20003138
     c68:	2000313c 	.word	0x2000313c
     c6c:	20003120 	.word	0x20003120
     c70:	20003134 	.word	0x20003134
     c74:	200040a4 	.word	0x200040a4
     c78:	200040a0 	.word	0x200040a0
     c7c:	200040ac 	.word	0x200040ac
     c80:	200040a8 	.word	0x200040a8
     c84:	200040b4 	.word	0x200040b4
     c88:	200040b0 	.word	0x200040b0
     c8c:	00000000 	.word	0x00000000
     c90:	200040bc 	.word	0x200040bc
     c94:	20003168 	.word	0x20003168
     c98:	200040c0 	.word	0x200040c0
     c9c:	2000316c 	.word	0x2000316c
     ca0:	20003128 	.word	0x20003128
     ca4:	200040b8 	.word	0x200040b8
     ca8:	20003164 	.word	0x20003164
     cac:	200040c8 	.word	0x200040c8
     cb0:	200040c4 	.word	0x200040c4
     cb4:	200040d0 	.word	0x200040d0
     cb8:	200040cc 	.word	0x200040cc
     cbc:	200040d8 	.word	0x200040d8
     cc0:	200040d4 	.word	0x200040d4
     cc4:	00000000 	.word	0x00000000

00000cc8 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
     cc8:	b538      	push	{r3, r4, r5, lr}
     cca:	ed2d 8b02 	vpush	{d8}
     cce:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     cd0:	f00d feda 	bl	ea88 <usb_serial_available>
			===     					====		=====
			controlledAxis 		int 		The axis about which the user's serial inputs set the desired angle.
																1: roll
																2: pitch
	*/
	if (Serial.available()) {
     cd4:	bb50      	cbnz	r0, d2c <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
     cd6:	4b24      	ldr	r3, [pc, #144]	; (d68 <setDesStateSerial(int)+0xa0>)
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	b3ab      	cbz	r3, d48 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
     cdc:	4b23      	ldr	r3, [pc, #140]	; (d6c <setDesStateSerial(int)+0xa4>)
     cde:	ed93 7a00 	vldr	s14, [r3]
     ce2:	4b23      	ldr	r3, [pc, #140]	; (d70 <setDesStateSerial(int)+0xa8>)
     ce4:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
     ce8:	4d22      	ldr	r5, [pc, #136]	; (d74 <setDesStateSerial(int)+0xac>)
     cea:	ed95 8a00 	vldr	s16, [r5]
     cee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     cf2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; d60 <setDesStateSerial(int)+0x98>
     cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
     cfa:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     cfe:	ee27 0b00 	vmul.f64	d0, d7, d0
     d02:	f00e fc81 	bl	f608 <sin>
     d06:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     d0a:	ee20 0b07 	vmul.f64	d0, d0, d7
     d0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
     d12:	eddf 7a19 	vldr	s15, [pc, #100]	; d78 <setDesStateSerial(int)+0xb0>
     d16:	ee78 7a27 	vadd.f32	s15, s16, s15
     d1a:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
     d1e:	2c01      	cmp	r4, #1
     d20:	d016      	beq.n	d50 <setDesStateSerial(int)+0x88>
     d22:	2c02      	cmp	r4, #2
     d24:	d018      	beq.n	d58 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     d26:	ecbd 8b02 	vpop	{d8}
     d2a:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
     d2c:	4813      	ldr	r0, [pc, #76]	; (d7c <setDesStateSerial(int)+0xb4>)
     d2e:	f00b fda9 	bl	c884 <Stream::parseFloat()>
     d32:	4b0e      	ldr	r3, [pc, #56]	; (d6c <setDesStateSerial(int)+0xa4>)
     d34:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
     d38:	e001      	b.n	d3e <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     d3a:	f00d fee3 	bl	eb04 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     d3e:	f00d fea3 	bl	ea88 <usb_serial_available>
     d42:	2800      	cmp	r0, #0
     d44:	d1f9      	bne.n	d3a <setDesStateSerial(int)+0x72>
     d46:	e7c6      	b.n	cd6 <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <setDesStateSerial(int)+0xa4>)
     d4a:	ed93 0a00 	vldr	s0, [r3]
     d4e:	e7e6      	b.n	d1e <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
     d50:	4b0b      	ldr	r3, [pc, #44]	; (d80 <setDesStateSerial(int)+0xb8>)
     d52:	ed83 0a00 	vstr	s0, [r3]
			break;
     d56:	e7e6      	b.n	d26 <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <setDesStateSerial(int)+0xbc>)
     d5a:	ed83 0a00 	vstr	s0, [r3]
}
     d5e:	e7e2      	b.n	d26 <setDesStateSerial(int)+0x5e>
     d60:	54442d18 	.word	0x54442d18
     d64:	401921fb 	.word	0x401921fb
     d68:	200038be 	.word	0x200038be
     d6c:	20005278 	.word	0x20005278
     d70:	2000529c 	.word	0x2000529c
     d74:	200052a0 	.word	0x200052a0
     d78:	3a03126f 	.word	0x3a03126f
     d7c:	20003170 	.word	0x20003170
     d80:	20005098 	.word	0x20005098
     d84:	2000506c 	.word	0x2000506c

00000d88 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
     d88:	b510      	push	{r4, lr}
     d8a:	ed2d 8b06 	vpush	{d8-d10}
     d8e:	4604      	mov	r4, r0
  //  while (Serial.available() !=0) {
  //      Serial.read();
  //    }
	//}
  //if (sweepFlag){
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     d90:	4b2d      	ldr	r3, [pc, #180]	; (e48 <performSineSweep(int)+0xc0>)
     d92:	edd3 aa00 	vldr	s21, [r3]
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <performSineSweep(int)+0xc4>)
     d98:	edd3 8a00 	vldr	s17, [r3]
     d9c:	4b2c      	ldr	r3, [pc, #176]	; (e50 <performSineSweep(int)+0xc8>)
     d9e:	ed93 aa00 	vldr	s20, [r3]
     da2:	4b2c      	ldr	r3, [pc, #176]	; (e54 <performSineSweep(int)+0xcc>)
     da4:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     da8:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
     dac:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
     db0:	eeb0 0b49 	vmov.f64	d0, d9
     db4:	f00e f930 	bl	f018 <pow>
    if (sineTime > sweepTime) {
     db8:	eeb4 aac8 	vcmpe.f32	s20, s16
     dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dc0:	d42f      	bmi.n	e22 <performSineSweep(int)+0x9a>
     dc2:	eeb0 5b40 	vmov.f64	d5, d0
     dc6:	eeb7 7aca 	vcvt.f64.f32	d7, s20
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     dca:	ee3a 6ae8 	vsub.f32	s12, s21, s17
     dce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     dd2:	ed9f 4b19 	vldr	d4, [pc, #100]	; e38 <performSineSweep(int)+0xb0>
     dd6:	ee26 6b04 	vmul.f64	d6, d6, d4
     dda:	ee27 7b07 	vmul.f64	d7, d7, d7
     dde:	ee86 4b07 	vdiv.f64	d4, d6, d7
     de2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     de6:	ed9f 6b16 	vldr	d6, [pc, #88]	; e40 <performSineSweep(int)+0xb8>
     dea:	ee27 7b06 	vmul.f64	d7, d7, d6
     dee:	ee27 0b09 	vmul.f64	d0, d7, d9
     df2:	ee04 0b05 	vmla.f64	d0, d4, d5
     df6:	f00e fc07 	bl	f608 <sin>
     dfa:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     dfe:	ee20 0b07 	vmul.f64	d0, d0, d7
     e02:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
      desiredAngle = 0;
    }
    sineTime = sineTime + 1/2000.0f;
     e06:	eddf 7a14 	vldr	s15, [pc, #80]	; e58 <performSineSweep(int)+0xd0>
     e0a:	ee38 8a27 	vadd.f32	s16, s16, s15
     e0e:	4b11      	ldr	r3, [pc, #68]	; (e54 <performSineSweep(int)+0xcc>)
     e10:	ed83 8a00 	vstr	s16, [r3]
  //}

	switch (controlledAxis) {
     e14:	2c01      	cmp	r4, #1
     e16:	d007      	beq.n	e28 <performSineSweep(int)+0xa0>
     e18:	2c02      	cmp	r4, #2
     e1a:	d009      	beq.n	e30 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     e1c:	ecbd 8b06 	vpop	{d8-d10}
     e20:	bd10      	pop	{r4, pc}
      desiredAngle = 0;
     e22:	ed9f 0a0e 	vldr	s0, [pc, #56]	; e5c <performSineSweep(int)+0xd4>
     e26:	e7ee      	b.n	e06 <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <performSineSweep(int)+0xd8>)
     e2a:	ed83 0a00 	vstr	s0, [r3]
			break;
     e2e:	e7f5      	b.n	e1c <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
     e30:	4b0c      	ldr	r3, [pc, #48]	; (e64 <performSineSweep(int)+0xdc>)
     e32:	ed83 0a00 	vstr	s0, [r3]
}
     e36:	e7f1      	b.n	e1c <performSineSweep(int)+0x94>
     e38:	54442d18 	.word	0x54442d18
     e3c:	400921fb 	.word	0x400921fb
     e40:	54442d18 	.word	0x54442d18
     e44:	401921fb 	.word	0x401921fb
     e48:	20003834 	.word	0x20003834
     e4c:	20003880 	.word	0x20003880
     e50:	200038a0 	.word	0x200038a0
     e54:	200052a0 	.word	0x200052a0
     e58:	3a03126f 	.word	0x3a03126f
     e5c:	00000000 	.word	0x00000000
     e60:	20005098 	.word	0x20005098
     e64:	2000506c 	.word	0x2000506c

00000e68 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <rollStep()+0x2c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	f240 42e1 	movw	r2, #1249	; 0x4e1
     e70:	4293      	cmp	r3, r2
     e72:	dd0c      	ble.n	e8e <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     e74:	f240 62d6 	movw	r2, #1750	; 0x6d6
     e78:	4293      	cmp	r3, r2
     e7a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     e7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; e98 <rollStep()+0x30>
     e82:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <rollStep()+0x34>)
     e88:	edc3 7a00 	vstr	s15, [r3]
}
     e8c:	4770      	bx	lr
		desiredAngle = 15.0f;
     e8e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     e92:	e7f8      	b.n	e86 <rollStep()+0x1e>
     e94:	20004f54 	.word	0x20004f54
     e98:	00000000 	.word	0x00000000
     e9c:	20005098 	.word	0x20005098

00000ea0 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <pitchStep()+0x2c>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	f240 42e1 	movw	r2, #1249	; 0x4e1
     ea8:	4293      	cmp	r3, r2
     eaa:	dd0c      	ble.n	ec6 <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eac:	f240 62d6 	movw	r2, #1750	; 0x6d6
     eb0:	4293      	cmp	r3, r2
     eb2:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     eb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; ed0 <pitchStep()+0x30>
     eba:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <pitchStep()+0x34>)
     ec0:	edc3 7a00 	vstr	s15, [r3]
}
     ec4:	4770      	bx	lr
		desiredAngle = 15.0f;
     ec6:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     eca:	e7f8      	b.n	ebe <pitchStep()+0x1e>
     ecc:	20004f54 	.word	0x20004f54
     ed0:	00000000 	.word	0x00000000
     ed4:	2000506c 	.word	0x2000506c

00000ed8 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
     ed8:	4baf      	ldr	r3, [pc, #700]	; (1198 <getDesState()+0x2c0>)
     eda:	ed93 7a00 	vldr	s14, [r3]
     ede:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     ee2:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 1178 <getDesState()+0x2a0>
     ee6:	ee37 7b45 	vsub.f64	d7, d7, d5
     eea:	ee87 6b05 	vdiv.f64	d6, d7, d5
     eee:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
     ef2:	4baa      	ldr	r3, [pc, #680]	; (119c <getDesState()+0x2c4>)
     ef4:	ed93 5a00 	vldr	s10, [r3]
     ef8:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     efc:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 1180 <getDesState()+0x2a8>
     f00:	ee35 5b43 	vsub.f64	d5, d5, d3
     f04:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1188 <getDesState()+0x2b0>
     f08:	ee85 7b04 	vdiv.f64	d7, d5, d4
     f0c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
     f10:	4ba3      	ldr	r3, [pc, #652]	; (11a0 <getDesState()+0x2c8>)
     f12:	ed93 5a00 	vldr	s10, [r3]
     f16:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f1a:	ee35 5b43 	vsub.f64	d5, d5, d3
     f1e:	ee85 1b04 	vdiv.f64	d1, d5, d4
     f22:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
     f26:	4b9f      	ldr	r3, [pc, #636]	; (11a4 <getDesState()+0x2cc>)
     f28:	ed93 5a00 	vldr	s10, [r3]
     f2c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f30:	ee35 5b43 	vsub.f64	d5, d5, d3
     f34:	ee85 2b04 	vdiv.f64	d2, d5, d4
     f38:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
     f3c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
     f40:	ee27 5a03 	vmul.f32	s10, s14, s6
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
     f44:	ee61 1a03 	vmul.f32	s3, s2, s6
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
     f48:	ee22 3a03 	vmul.f32	s6, s4, s6

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
     f4c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
     f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f54:	d40c      	bmi.n	f70 <getDesState()+0x98>
     f56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     f5a:	eeb4 6ae7 	vcmpe.f32	s12, s15
     f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f62:	dd02      	ble.n	f6a <getDesState()+0x92>
     f64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     f68:	e004      	b.n	f74 <getDesState()+0x9c>
     f6a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     f6e:	e001      	b.n	f74 <getDesState()+0x9c>
     f70:	ed9f 6b87 	vldr	d6, [pc, #540]	; 1190 <getDesState()+0x2b8>
     f74:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     f78:	4b8b      	ldr	r3, [pc, #556]	; (11a8 <getDesState()+0x2d0>)
     f7a:	ed83 6a00 	vstr	s12, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
     f7e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
     f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
     f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f8a:	d40c      	bmi.n	fa6 <getDesState()+0xce>
     f8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
     f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f98:	dd02      	ble.n	fa0 <getDesState()+0xc8>
     f9a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
     f9e:	e004      	b.n	faa <getDesState()+0xd2>
     fa0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     fa4:	e001      	b.n	faa <getDesState()+0xd2>
     fa6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
     faa:	4b80      	ldr	r3, [pc, #512]	; (11ac <getDesState()+0x2d4>)
     fac:	ed93 4a00 	vldr	s8, [r3]
     fb0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     fb4:	ee24 4b07 	vmul.f64	d4, d4, d7
     fb8:	eef7 3bc4 	vcvt.f32.f64	s7, d4
     fbc:	4b7c      	ldr	r3, [pc, #496]	; (11b0 <getDesState()+0x2d8>)
     fbe:	edc3 3a00 	vstr	s7, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
     fc2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
     fc6:	eeb4 1ae7 	vcmpe.f32	s2, s15
     fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fce:	d40c      	bmi.n	fea <getDesState()+0x112>
     fd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fd4:	eeb4 1ae7 	vcmpe.f32	s2, s15
     fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fdc:	dd02      	ble.n	fe4 <getDesState()+0x10c>
     fde:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
     fe2:	e004      	b.n	fee <getDesState()+0x116>
     fe4:	eeb7 7ac1 	vcvt.f64.f32	d7, s2
     fe8:	e001      	b.n	fee <getDesState()+0x116>
     fea:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
     fee:	4b71      	ldr	r3, [pc, #452]	; (11b4 <getDesState()+0x2dc>)
     ff0:	ed93 4a00 	vldr	s8, [r3]
     ff4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     ff8:	ee24 4b07 	vmul.f64	d4, d4, d7
     ffc:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1000:	4b6d      	ldr	r3, [pc, #436]	; (11b8 <getDesState()+0x2e0>)
    1002:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    1006:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    100a:	eeb4 2ae7 	vcmpe.f32	s4, s15
    100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1012:	d40c      	bmi.n	102e <getDesState()+0x156>
    1014:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1018:	eeb4 2ae7 	vcmpe.f32	s4, s15
    101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1020:	dd02      	ble.n	1028 <getDesState()+0x150>
    1022:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    1026:	e004      	b.n	1032 <getDesState()+0x15a>
    1028:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    102c:	e001      	b.n	1032 <getDesState()+0x15a>
    102e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    1032:	4b62      	ldr	r3, [pc, #392]	; (11bc <getDesState()+0x2e4>)
    1034:	ed93 7a00 	vldr	s14, [r3]
    1038:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    103c:	ee27 7b02 	vmul.f64	d7, d7, d2
    1040:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1044:	4b5e      	ldr	r3, [pc, #376]	; (11c0 <getDesState()+0x2e8>)
    1046:	ed83 7a00 	vstr	s14, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    104a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    104e:	eeb4 5ae7 	vcmpe.f32	s10, s15
    1052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1056:	d409      	bmi.n	106c <getDesState()+0x194>
    1058:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    105c:	eeb4 5ae7 	vcmpe.f32	s10, s15
    1060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1064:	dc1a      	bgt.n	109c <getDesState()+0x1c4>
    1066:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    106a:	e001      	b.n	1070 <getDesState()+0x198>
    106c:	eebe 5b00 	vmov.f64	d5, #224	; 0xbf000000 -0.5
    1070:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    1074:	4b53      	ldr	r3, [pc, #332]	; (11c4 <getDesState()+0x2ec>)
    1076:	ed83 5a00 	vstr	s10, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    107a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    107e:	eef4 1ae7 	vcmpe.f32	s3, s15
    1082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1086:	d40c      	bmi.n	10a2 <getDesState()+0x1ca>
    1088:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    108c:	eef4 1ae7 	vcmpe.f32	s3, s15
    1090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1094:	dc1d      	bgt.n	10d2 <getDesState()+0x1fa>
    1096:	eeb7 6ae1 	vcvt.f64.f32	d6, s3
    109a:	e004      	b.n	10a6 <getDesState()+0x1ce>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    109c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    10a0:	e7e6      	b.n	1070 <getDesState()+0x198>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10a2:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10a6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    10aa:	4b47      	ldr	r3, [pc, #284]	; (11c8 <getDesState()+0x2f0>)
    10ac:	ed83 6a00 	vstr	s12, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    10b0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    10b4:	eeb4 3ae7 	vcmpe.f32	s6, s15
    10b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10bc:	d40c      	bmi.n	10d8 <getDesState()+0x200>
    10be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    10c2:	eeb4 3ae7 	vcmpe.f32	s6, s15
    10c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ca:	dc1d      	bgt.n	1108 <getDesState()+0x230>
    10cc:	eeb7 7ac3 	vcvt.f64.f32	d7, s6
    10d0:	e004      	b.n	10dc <getDesState()+0x204>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    10d6:	e7e6      	b.n	10a6 <getDesState()+0x1ce>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    10d8:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    10dc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    10e0:	4b3a      	ldr	r3, [pc, #232]	; (11cc <getDesState()+0x2f4>)
    10e2:	ed83 7a00 	vstr	s14, [r3]

	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    10e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    10ea:	eef4 3ae7 	vcmpe.f32	s7, s15
    10ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10f2:	d40f      	bmi.n	1114 <getDesState()+0x23c>
    10f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    10f8:	eef4 3ae7 	vcmpe.f32	s7, s15
    10fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1100:	dd05      	ble.n	110e <getDesState()+0x236>
    1102:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1106:	e007      	b.n	1118 <getDesState()+0x240>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1108:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    110c:	e7e6      	b.n	10dc <getDesState()+0x204>
	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    110e:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    1112:	e001      	b.n	1118 <getDesState()+0x240>
    1114:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
    1118:	4b2d      	ldr	r3, [pc, #180]	; (11d0 <getDesState()+0x2f8>)
    111a:	ed93 7a00 	vldr	s14, [r3]
    111e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1122:	ee27 7b06 	vmul.f64	d7, d7, d6
    1126:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    112a:	4b2a      	ldr	r3, [pc, #168]	; (11d4 <getDesState()+0x2fc>)
    112c:	ed83 7a00 	vstr	s14, [r3]
	betaPitch_des = constrain(pitch_des, -1.0, 1.0)*maxBetaPitch;
    1130:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1134:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    113c:	d40c      	bmi.n	1158 <getDesState()+0x280>
    113e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1142:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    114a:	dd02      	ble.n	1152 <getDesState()+0x27a>
    114c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    1150:	e004      	b.n	115c <getDesState()+0x284>
    1152:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1156:	e001      	b.n	115c <getDesState()+0x284>
    1158:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    115c:	4b1e      	ldr	r3, [pc, #120]	; (11d8 <getDesState()+0x300>)
    115e:	ed93 7a00 	vldr	s14, [r3]
    1162:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1166:	ee27 7b04 	vmul.f64	d7, d7, d4
    116a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    116e:	4b1b      	ldr	r3, [pc, #108]	; (11dc <getDesState()+0x304>)
    1170:	ed83 7a00 	vstr	s14, [r3]
}
    1174:	4770      	bx	lr
    1176:	bf00      	nop
    1178:	00000000 	.word	0x00000000
    117c:	408f4000 	.word	0x408f4000
    1180:	00000000 	.word	0x00000000
    1184:	40977000 	.word	0x40977000
    1188:	00000000 	.word	0x00000000
    118c:	407f4000 	.word	0x407f4000
	...
    1198:	20004f14 	.word	0x20004f14
    119c:	20004f20 	.word	0x20004f20
    11a0:	20004f2c 	.word	0x20004f2c
    11a4:	20004f38 	.word	0x20004f38
    11a8:	200052b0 	.word	0x200052b0
    11ac:	2000383c 	.word	0x2000383c
    11b0:	20005098 	.word	0x20005098
    11b4:	20003838 	.word	0x20003838
    11b8:	2000506c 	.word	0x2000506c
    11bc:	20003840 	.word	0x20003840
    11c0:	200052d0 	.word	0x200052d0
    11c4:	2000509c 	.word	0x2000509c
    11c8:	20005070 	.word	0x20005070
    11cc:	200052d4 	.word	0x200052d4
    11d0:	2000382c 	.word	0x2000382c
    11d4:	20004ed4 	.word	0x20004ed4
    11d8:	20003830 	.word	0x20003830
    11dc:	20004ee8 	.word	0x20004ee8

000011e0 <ripPID()>:



void ripPID() {
  // --- Alpha --- //
  float error_alphaRoll = alphaRoll_des - alphaRoll;
    11e0:	4b51      	ldr	r3, [pc, #324]	; (1328 <ripPID()+0x148>)
    11e2:	ed93 7a00 	vldr	s14, [r3]
    11e6:	4b51      	ldr	r3, [pc, #324]	; (132c <ripPID()+0x14c>)
    11e8:	edd3 7a00 	vldr	s15, [r3]
    11ec:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    11f0:	4b4f      	ldr	r3, [pc, #316]	; (1330 <ripPID()+0x150>)
    11f2:	ed93 5a00 	vldr	s10, [r3]
    11f6:	4b4f      	ldr	r3, [pc, #316]	; (1334 <ripPID()+0x154>)
    11f8:	edd3 7a00 	vldr	s15, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    11fc:	4b4e      	ldr	r3, [pc, #312]	; (1338 <ripPID()+0x158>)
    11fe:	681b      	ldr	r3, [r3, #0]
    1200:	f240 4223 	movw	r2, #1059	; 0x423
    1204:	4293      	cmp	r3, r2
    1206:	f340 8085 	ble.w	1314 <ripPID()+0x134>
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    120a:	ee25 6a07 	vmul.f32	s12, s10, s14
    120e:	ee36 6a27 	vadd.f32	s12, s12, s15
    integral_alphaRoll = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    1212:	4a4a      	ldr	r2, [pc, #296]	; (133c <ripPID()+0x15c>)
    1214:	edd2 4a00 	vldr	s9, [r2]
    1218:	eef1 5a64 	vneg.f32	s11, s9
    121c:	eeb4 6ae5 	vcmpe.f32	s12, s11
    1220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1224:	d479      	bmi.n	131a <ripPID()+0x13a>
    1226:	eef4 4a46 	vcmp.f32	s9, s12
    122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    122e:	bf48      	it	mi
    1230:	eeb0 6a64 	vmovmi.f32	s12, s9
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;

  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    1234:	4a42      	ldr	r2, [pc, #264]	; (1340 <ripPID()+0x160>)
    1236:	edd2 7a00 	vldr	s15, [r2]
    123a:	ed9f 4a42 	vldr	s8, [pc, #264]	; 1344 <ripPID()+0x164>
    123e:	ee67 7a84 	vmul.f32	s15, s15, s8
    1242:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_alphaRoll*iScaleAlpha*integral_alphaRoll 
    1246:	4a40      	ldr	r2, [pc, #256]	; (1348 <ripPID()+0x168>)
    1248:	edd2 6a00 	vldr	s13, [r2]
    124c:	ee66 6a84 	vmul.f32	s13, s13, s8
    1250:	ee66 6a86 	vmul.f32	s13, s13, s12
    1254:	ee77 7aa6 	vadd.f32	s15, s15, s13
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;
    1258:	4a3c      	ldr	r2, [pc, #240]	; (134c <ripPID()+0x16c>)
    125a:	edd2 6a00 	vldr	s13, [r2]
    125e:	ee37 7a66 	vsub.f32	s14, s14, s13
    1262:	eec7 6a05 	vdiv.f32	s13, s14, s10
							- Kd_alphaRoll*dScaleAlpha*derivative_alphaRoll); 
    1266:	4a3a      	ldr	r2, [pc, #232]	; (1350 <ripPID()+0x170>)
    1268:	ed92 7a00 	vldr	s14, [r2]
    126c:	ed9f 6a39 	vldr	s12, [pc, #228]	; 1354 <ripPID()+0x174>
    1270:	ee27 7a06 	vmul.f32	s14, s14, s12
    1274:	ee26 7a87 	vmul.f32	s14, s13, s14
    1278:	ee77 7a87 	vadd.f32	s15, s15, s14
  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    127c:	4a36      	ldr	r2, [pc, #216]	; (1358 <ripPID()+0x178>)
    127e:	edc2 7a00 	vstr	s15, [r2]

  // --- Beta --- //
  float error_betaPitch = betaPitch_des - betaPitch;
    1282:	4a36      	ldr	r2, [pc, #216]	; (135c <ripPID()+0x17c>)
    1284:	ed92 7a00 	vldr	s14, [r2]
    1288:	4a35      	ldr	r2, [pc, #212]	; (1360 <ripPID()+0x180>)
    128a:	edd2 7a00 	vldr	s15, [r2]
    128e:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    1292:	4a34      	ldr	r2, [pc, #208]	; (1364 <ripPID()+0x184>)
    1294:	edd2 6a00 	vldr	s13, [r2]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    1298:	f240 4223 	movw	r2, #1059	; 0x423
    129c:	4293      	cmp	r3, r2
    129e:	dd3f      	ble.n	1320 <ripPID()+0x140>
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    12a0:	ee65 7a07 	vmul.f32	s15, s10, s14
    12a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    integral_betaPitch = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_betaPitch = constrain(integral_betaPitch, -i_limit, i_limit);
    12a8:	eef4 7ae5 	vcmpe.f32	s15, s11
    12ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12b0:	d408      	bmi.n	12c4 <ripPID()+0xe4>
    12b2:	eef4 4ae7 	vcmpe.f32	s9, s15
    12b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12ba:	bf54      	ite	pl
    12bc:	eef0 5a67 	vmovpl.f32	s11, s15
    12c0:	eef0 5a64 	vmovmi.f32	s11, s9
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;

  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    12c4:	4b28      	ldr	r3, [pc, #160]	; (1368 <ripPID()+0x188>)
    12c6:	edd3 7a00 	vldr	s15, [r3]
    12ca:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 1344 <ripPID()+0x164>
    12ce:	ee67 7a86 	vmul.f32	s15, s15, s12
    12d2:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_betaPitch*iScaleBeta*integral_betaPitch 
    12d6:	4b25      	ldr	r3, [pc, #148]	; (136c <ripPID()+0x18c>)
    12d8:	edd3 6a00 	vldr	s13, [r3]
    12dc:	ee66 6a86 	vmul.f32	s13, s13, s12
    12e0:	ee66 6aa5 	vmul.f32	s13, s13, s11
    12e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;
    12e8:	4b21      	ldr	r3, [pc, #132]	; (1370 <ripPID()+0x190>)
    12ea:	edd3 6a00 	vldr	s13, [r3]
    12ee:	ee37 7a66 	vsub.f32	s14, s14, s13
    12f2:	eec7 6a05 	vdiv.f32	s13, s14, s10
							- Kd_betaPitch*dScaleBeta*derivative_betaPitch); 
    12f6:	4b1f      	ldr	r3, [pc, #124]	; (1374 <ripPID()+0x194>)
    12f8:	ed93 7a00 	vldr	s14, [r3]
    12fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 1354 <ripPID()+0x174>
    1300:	ee27 7a06 	vmul.f32	s14, s14, s12
    1304:	ee26 7a87 	vmul.f32	s14, s13, s14
    1308:	ee77 7a87 	vadd.f32	s15, s15, s14
  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    130c:	4b1a      	ldr	r3, [pc, #104]	; (1378 <ripPID()+0x198>)
    130e:	edc3 7a00 	vstr	s15, [r3]
}
    1312:	4770      	bx	lr
    integral_alphaRoll = 0;
    1314:	ed9f 6a19 	vldr	s12, [pc, #100]	; 137c <ripPID()+0x19c>
    1318:	e77b      	b.n	1212 <ripPID()+0x32>
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    131a:	eeb0 6a65 	vmov.f32	s12, s11
    131e:	e789      	b.n	1234 <ripPID()+0x54>
    integral_betaPitch = 0;
    1320:	eddf 7a16 	vldr	s15, [pc, #88]	; 137c <ripPID()+0x19c>
    1324:	e7c0      	b.n	12a8 <ripPID()+0xc8>
    1326:	bf00      	nop
    1328:	20004ed4 	.word	0x20004ed4
    132c:	20004ed0 	.word	0x20004ed0
    1330:	20004f78 	.word	0x20004f78
    1334:	20004fe8 	.word	0x20004fe8
    1338:	20004f14 	.word	0x20004f14
    133c:	20003828 	.word	0x20003828
    1340:	20003884 	.word	0x20003884
    1344:	bdcccccd 	.word	0xbdcccccd
    1348:	20003814 	.word	0x20003814
    134c:	20004f90 	.word	0x20004f90
    1350:	200037d8 	.word	0x200037d8
    1354:	3dcccccd 	.word	0x3dcccccd
    1358:	20005098 	.word	0x20005098
    135c:	20004ee8 	.word	0x20004ee8
    1360:	20004ee4 	.word	0x20004ee4
    1364:	20004fec 	.word	0x20004fec
    1368:	20003888 	.word	0x20003888
    136c:	20003818 	.word	0x20003818
    1370:	20004f94 	.word	0x20004f94
    1374:	200037dc 	.word	0x200037dc
    1378:	2000506c 	.word	0x2000506c
    137c:	00000000 	.word	0x00000000

00001380 <controlANGLE()>:
   * terms will always start from 0 on takeoff. This function updates the variables roll_PID, pitch_PID, and yaw_PID which
   * can be thought of as 1-D stablized signals. They are mixed to the configuration of the vehicle in controlMixer().
   */
  
  //Roll
  error_roll = roll_des - roll_IMU;
    1380:	4ba5      	ldr	r3, [pc, #660]	; (1618 <controlANGLE()+0x298>)
    1382:	edd3 7a00 	vldr	s15, [r3]
    1386:	4ba5      	ldr	r3, [pc, #660]	; (161c <controlANGLE()+0x29c>)
    1388:	ed93 7a00 	vldr	s14, [r3]
    138c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1390:	4ba3      	ldr	r3, [pc, #652]	; (1620 <controlANGLE()+0x2a0>)
    1392:	edc3 7a00 	vstr	s15, [r3]
  integral_roll = integral_roll_prev + error_roll*dt;
    1396:	4ba3      	ldr	r3, [pc, #652]	; (1624 <controlANGLE()+0x2a4>)
    1398:	ed93 4a00 	vldr	s8, [r3]
    139c:	ee27 7a84 	vmul.f32	s14, s15, s8
    13a0:	4ba1      	ldr	r3, [pc, #644]	; (1628 <controlANGLE()+0x2a8>)
    13a2:	edd3 6a00 	vldr	s13, [r3]
    13a6:	ee37 7a26 	vadd.f32	s14, s14, s13
    13aa:	4ba0      	ldr	r3, [pc, #640]	; (162c <controlANGLE()+0x2ac>)
    13ac:	ed83 7a00 	vstr	s14, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    13b0:	4b9f      	ldr	r3, [pc, #636]	; (1630 <controlANGLE()+0x2b0>)
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	f240 4223 	movw	r2, #1059	; 0x423
    13b8:	4293      	cmp	r3, r2
    13ba:	dc02      	bgt.n	13c2 <controlANGLE()+0x42>
    integral_roll = 0;
    13bc:	4a9b      	ldr	r2, [pc, #620]	; (162c <controlANGLE()+0x2ac>)
    13be:	2100      	movs	r1, #0
    13c0:	6011      	str	r1, [r2, #0]
  }
  integral_roll = constrain(integral_roll, -i_limit, i_limit); //Saturate integrator to prevent unsafe buildup
    13c2:	4a9a      	ldr	r2, [pc, #616]	; (162c <controlANGLE()+0x2ac>)
    13c4:	ed92 6a00 	vldr	s12, [r2]
    13c8:	4a9a      	ldr	r2, [pc, #616]	; (1634 <controlANGLE()+0x2b4>)
    13ca:	edd2 4a00 	vldr	s9, [r2]
    13ce:	eef1 6a64 	vneg.f32	s13, s9
    13d2:	eeb4 6ae6 	vcmpe.f32	s12, s13
    13d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13da:	d456      	bmi.n	148a <controlANGLE()+0x10a>
    13dc:	eef4 4a46 	vcmp.f32	s9, s12
    13e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    13e4:	bf48      	it	mi
    13e6:	eeb0 6a64 	vmovmi.f32	s12, s9
    13ea:	4a90      	ldr	r2, [pc, #576]	; (162c <controlANGLE()+0x2ac>)
    13ec:	ed82 6a00 	vstr	s12, [r2]
  derivative_roll = GyroX;
    13f0:	4a91      	ldr	r2, [pc, #580]	; (1638 <controlANGLE()+0x2b8>)
    13f2:	edd2 5a00 	vldr	s11, [r2]
    13f6:	4a91      	ldr	r2, [pc, #580]	; (163c <controlANGLE()+0x2bc>)
    13f8:	edc2 5a00 	vstr	s11, [r2]
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    13fc:	4a90      	ldr	r2, [pc, #576]	; (1640 <controlANGLE()+0x2c0>)
    13fe:	ed92 7a00 	vldr	s14, [r2]
    1402:	4a90      	ldr	r2, [pc, #576]	; (1644 <controlANGLE()+0x2c4>)
    1404:	ed92 5a00 	vldr	s10, [r2]
    1408:	ee27 7a05 	vmul.f32	s14, s14, s10
    140c:	ee27 7a27 	vmul.f32	s14, s14, s15
									 + Ki_roll_angle*iScaleRoll*integral_roll 
    1410:	4a8d      	ldr	r2, [pc, #564]	; (1648 <controlANGLE()+0x2c8>)
    1412:	edd2 7a00 	vldr	s15, [r2]
    1416:	4a8d      	ldr	r2, [pc, #564]	; (164c <controlANGLE()+0x2cc>)
    1418:	ed92 5a00 	vldr	s10, [r2]
    141c:	ee67 7a85 	vmul.f32	s15, s15, s10
    1420:	ee67 7a86 	vmul.f32	s15, s15, s12
    1424:	ee37 7a27 	vadd.f32	s14, s14, s15
									 - Kd_roll_angle*dScaleRoll*derivative_roll); //Scaled by .01 to bring within -1 to 1 range
    1428:	4a89      	ldr	r2, [pc, #548]	; (1650 <controlANGLE()+0x2d0>)
    142a:	edd2 7a00 	vldr	s15, [r2]
    142e:	4a89      	ldr	r2, [pc, #548]	; (1654 <controlANGLE()+0x2d4>)
    1430:	ed92 5a00 	vldr	s10, [r2]
    1434:	ee67 7a85 	vmul.f32	s15, s15, s10
    1438:	ee67 7aa5 	vmul.f32	s15, s15, s11
    143c:	ee37 7a67 	vsub.f32	s14, s14, s15
    1440:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    1444:	ed9f 5b72 	vldr	d5, [pc, #456]	; 1610 <controlANGLE()+0x290>
    1448:	ee27 7b05 	vmul.f64	d7, d7, d5
    144c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1450:	4a81      	ldr	r2, [pc, #516]	; (1658 <controlANGLE()+0x2d8>)
    1452:	ed82 7a00 	vstr	s14, [r2]

  //Pitch
  error_pitch = pitch_des - pitch_IMU;
    1456:	4a81      	ldr	r2, [pc, #516]	; (165c <controlANGLE()+0x2dc>)
    1458:	edd2 7a00 	vldr	s15, [r2]
    145c:	4a80      	ldr	r2, [pc, #512]	; (1660 <controlANGLE()+0x2e0>)
    145e:	ed92 7a00 	vldr	s14, [r2]
    1462:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1466:	4a7f      	ldr	r2, [pc, #508]	; (1664 <controlANGLE()+0x2e4>)
    1468:	edc2 7a00 	vstr	s15, [r2]
  integral_pitch = integral_pitch_prev + error_pitch*dt;
    146c:	4a7e      	ldr	r2, [pc, #504]	; (1668 <controlANGLE()+0x2e8>)
    146e:	edd2 5a00 	vldr	s11, [r2]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    1472:	f240 4223 	movw	r2, #1059	; 0x423
    1476:	4293      	cmp	r3, r2
    1478:	dd0a      	ble.n	1490 <controlANGLE()+0x110>
  integral_pitch = integral_pitch_prev + error_pitch*dt;
    147a:	ee24 7a27 	vmul.f32	s14, s8, s15
    147e:	ee37 7a25 	vadd.f32	s14, s14, s11
    1482:	4a7a      	ldr	r2, [pc, #488]	; (166c <controlANGLE()+0x2ec>)
    1484:	ed82 7a00 	vstr	s14, [r2]
    1488:	e005      	b.n	1496 <controlANGLE()+0x116>
  integral_roll = constrain(integral_roll, -i_limit, i_limit); //Saturate integrator to prevent unsafe buildup
    148a:	eeb0 6a66 	vmov.f32	s12, s13
    148e:	e7ac      	b.n	13ea <controlANGLE()+0x6a>
    integral_pitch = 0;
    1490:	4a76      	ldr	r2, [pc, #472]	; (166c <controlANGLE()+0x2ec>)
    1492:	2100      	movs	r1, #0
    1494:	6011      	str	r1, [r2, #0]
  }
  integral_pitch = constrain(integral_pitch, -i_limit, i_limit); //Saturate integrator to prevent unsafe buildup
    1496:	4a75      	ldr	r2, [pc, #468]	; (166c <controlANGLE()+0x2ec>)
    1498:	ed92 5a00 	vldr	s10, [r2]
    149c:	eef4 6ac5 	vcmpe.f32	s13, s10
    14a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14a4:	dc56      	bgt.n	1554 <controlANGLE()+0x1d4>
    14a6:	eef4 4a45 	vcmp.f32	s9, s10
    14aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14ae:	bf48      	it	mi
    14b0:	eeb0 5a64 	vmovmi.f32	s10, s9
    14b4:	4a6d      	ldr	r2, [pc, #436]	; (166c <controlANGLE()+0x2ec>)
    14b6:	ed82 5a00 	vstr	s10, [r2]
  derivative_pitch = GyroY;
    14ba:	4a6d      	ldr	r2, [pc, #436]	; (1670 <controlANGLE()+0x2f0>)
    14bc:	edd2 5a00 	vldr	s11, [r2]
    14c0:	4a6c      	ldr	r2, [pc, #432]	; (1674 <controlANGLE()+0x2f4>)
    14c2:	edc2 5a00 	vstr	s11, [r2]
  pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    14c6:	4a6c      	ldr	r2, [pc, #432]	; (1678 <controlANGLE()+0x2f8>)
    14c8:	ed92 7a00 	vldr	s14, [r2]
    14cc:	4a6b      	ldr	r2, [pc, #428]	; (167c <controlANGLE()+0x2fc>)
    14ce:	edd2 3a00 	vldr	s7, [r2]
    14d2:	ee27 7a23 	vmul.f32	s14, s14, s7
    14d6:	ee27 7a27 	vmul.f32	s14, s14, s15
									 	+ Ki_pitch_angle*iScalePitch*integral_pitch 
    14da:	4a69      	ldr	r2, [pc, #420]	; (1680 <controlANGLE()+0x300>)
    14dc:	edd2 7a00 	vldr	s15, [r2]
    14e0:	4a68      	ldr	r2, [pc, #416]	; (1684 <controlANGLE()+0x304>)
    14e2:	edd2 3a00 	vldr	s7, [r2]
    14e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
    14ea:	ee67 7a85 	vmul.f32	s15, s15, s10
    14ee:	ee37 7a27 	vadd.f32	s14, s14, s15
									 	- Kd_pitch_angle*dScalePitch*derivative_pitch); //Scaled by .01 to bring within -1 to 1 range
    14f2:	4a65      	ldr	r2, [pc, #404]	; (1688 <controlANGLE()+0x308>)
    14f4:	edd2 7a00 	vldr	s15, [r2]
    14f8:	4a64      	ldr	r2, [pc, #400]	; (168c <controlANGLE()+0x30c>)
    14fa:	edd2 3a00 	vldr	s7, [r2]
    14fe:	ee67 7aa3 	vmul.f32	s15, s15, s7
    1502:	ee67 7aa5 	vmul.f32	s15, s15, s11
    1506:	ee37 7a67 	vsub.f32	s14, s14, s15
    150a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    150e:	ed9f 3b40 	vldr	d3, [pc, #256]	; 1610 <controlANGLE()+0x290>
    1512:	ee27 7b03 	vmul.f64	d7, d7, d3
    1516:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    151a:	4a5d      	ldr	r2, [pc, #372]	; (1690 <controlANGLE()+0x310>)
    151c:	ed82 7a00 	vstr	s14, [r2]

  //Yaw, stablize on rate from GyroZ
  error_yaw = yaw_des - GyroZ;
    1520:	4a5c      	ldr	r2, [pc, #368]	; (1694 <controlANGLE()+0x314>)
    1522:	edd2 5a00 	vldr	s11, [r2]
    1526:	4a5c      	ldr	r2, [pc, #368]	; (1698 <controlANGLE()+0x318>)
    1528:	edd2 7a00 	vldr	s15, [r2]
    152c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    1530:	4a5a      	ldr	r2, [pc, #360]	; (169c <controlANGLE()+0x31c>)
    1532:	edc2 5a00 	vstr	s11, [r2]
  integral_yaw = integral_yaw_prev + error_yaw*dt;
    1536:	4a5a      	ldr	r2, [pc, #360]	; (16a0 <controlANGLE()+0x320>)
    1538:	ed92 7a00 	vldr	s14, [r2]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    153c:	f240 4223 	movw	r2, #1059	; 0x423
    1540:	4293      	cmp	r3, r2
    1542:	dd0a      	ble.n	155a <controlANGLE()+0x1da>
  integral_yaw = integral_yaw_prev + error_yaw*dt;
    1544:	ee64 7a25 	vmul.f32	s15, s8, s11
    1548:	ee77 7a87 	vadd.f32	s15, s15, s14
    154c:	4b55      	ldr	r3, [pc, #340]	; (16a4 <controlANGLE()+0x324>)
    154e:	edc3 7a00 	vstr	s15, [r3]
    1552:	e005      	b.n	1560 <controlANGLE()+0x1e0>
  integral_pitch = constrain(integral_pitch, -i_limit, i_limit); //Saturate integrator to prevent unsafe buildup
    1554:	eeb0 5a66 	vmov.f32	s10, s13
    1558:	e7ac      	b.n	14b4 <controlANGLE()+0x134>
    integral_yaw = 0;
    155a:	4b52      	ldr	r3, [pc, #328]	; (16a4 <controlANGLE()+0x324>)
    155c:	2200      	movs	r2, #0
    155e:	601a      	str	r2, [r3, #0]
  }
  integral_yaw = constrain(integral_yaw, -i_limit, i_limit); //Saturate integrator to prevent unsafe buildup
    1560:	4b50      	ldr	r3, [pc, #320]	; (16a4 <controlANGLE()+0x324>)
    1562:	edd3 7a00 	vldr	s15, [r3]
    1566:	eef4 6ae7 	vcmpe.f32	s13, s15
    156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    156e:	dc08      	bgt.n	1582 <controlANGLE()+0x202>
    1570:	eef4 4ae7 	vcmpe.f32	s9, s15
    1574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1578:	bf54      	ite	pl
    157a:	eef0 6a67 	vmovpl.f32	s13, s15
    157e:	eef0 6a64 	vmovmi.f32	s13, s9
    1582:	4b48      	ldr	r3, [pc, #288]	; (16a4 <controlANGLE()+0x324>)
    1584:	edc3 6a00 	vstr	s13, [r3]
  derivative_yaw = (error_yaw - error_yaw_prev)/dt; 
    1588:	4b47      	ldr	r3, [pc, #284]	; (16a8 <controlANGLE()+0x328>)
    158a:	edd3 7a00 	vldr	s15, [r3]
    158e:	ee75 7ae7 	vsub.f32	s15, s11, s15
    1592:	eec7 4a84 	vdiv.f32	s9, s15, s8
    1596:	4a45      	ldr	r2, [pc, #276]	; (16ac <controlANGLE()+0x32c>)
    1598:	edc2 4a00 	vstr	s9, [r2]
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    159c:	4a44      	ldr	r2, [pc, #272]	; (16b0 <controlANGLE()+0x330>)
    159e:	ed92 7a00 	vldr	s14, [r2]
    15a2:	4a44      	ldr	r2, [pc, #272]	; (16b4 <controlANGLE()+0x334>)
    15a4:	edd2 7a00 	vldr	s15, [r2]
    15a8:	ee27 7a27 	vmul.f32	s14, s14, s15
    15ac:	ee27 7a25 	vmul.f32	s14, s14, s11
									+ Ki_yaw*iScaleYaw*integral_yaw 
    15b0:	4a41      	ldr	r2, [pc, #260]	; (16b8 <controlANGLE()+0x338>)
    15b2:	edd2 7a00 	vldr	s15, [r2]
    15b6:	4a41      	ldr	r2, [pc, #260]	; (16bc <controlANGLE()+0x33c>)
    15b8:	ed92 4a00 	vldr	s8, [r2]
    15bc:	ee67 7a84 	vmul.f32	s15, s15, s8
    15c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    15c4:	ee37 7a27 	vadd.f32	s14, s14, s15
									+ Kd_yaw*dScaleYaw*derivative_yaw); //Scaled by .01 to bring within -1 to 1 range
    15c8:	4a3d      	ldr	r2, [pc, #244]	; (16c0 <controlANGLE()+0x340>)
    15ca:	edd2 7a00 	vldr	s15, [r2]
    15ce:	4a3d      	ldr	r2, [pc, #244]	; (16c4 <controlANGLE()+0x344>)
    15d0:	ed92 4a00 	vldr	s8, [r2]
    15d4:	ee67 7a84 	vmul.f32	s15, s15, s8
    15d8:	ee67 7aa4 	vmul.f32	s15, s15, s9
    15dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    15e0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    15e4:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 1610 <controlANGLE()+0x290>
    15e8:	ee27 7b04 	vmul.f64	d7, d7, d4
    15ec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    15f0:	4a35      	ldr	r2, [pc, #212]	; (16c8 <controlANGLE()+0x348>)
    15f2:	ed82 7a00 	vstr	s14, [r2]

  //Update roll variables
  integral_roll_prev = integral_roll;
    15f6:	4a0c      	ldr	r2, [pc, #48]	; (1628 <controlANGLE()+0x2a8>)
    15f8:	ed82 6a00 	vstr	s12, [r2]
  //Update pitch variables
  integral_pitch_prev = integral_pitch;
    15fc:	4a1a      	ldr	r2, [pc, #104]	; (1668 <controlANGLE()+0x2e8>)
    15fe:	ed82 5a00 	vstr	s10, [r2]
  //Update yaw variables
  error_yaw_prev = error_yaw;
    1602:	edc3 5a00 	vstr	s11, [r3]
  integral_yaw_prev = integral_yaw;
    1606:	4b26      	ldr	r3, [pc, #152]	; (16a0 <controlANGLE()+0x320>)
    1608:	edc3 6a00 	vstr	s13, [r3]
}
    160c:	4770      	bx	lr
    160e:	bf00      	nop
    1610:	47ae147b 	.word	0x47ae147b
    1614:	3f847ae1 	.word	0x3f847ae1
    1618:	20005098 	.word	0x20005098
    161c:	20005090 	.word	0x20005090
    1620:	20004f9c 	.word	0x20004f9c
    1624:	20004f78 	.word	0x20004f78
    1628:	20004ffc 	.word	0x20004ffc
    162c:	20004ff8 	.word	0x20004ff8
    1630:	20004f14 	.word	0x20004f14
    1634:	20003828 	.word	0x20003828
    1638:	200040a0 	.word	0x200040a0
    163c:	20004f70 	.word	0x20004f70
    1640:	2000315c 	.word	0x2000315c
    1644:	20003890 	.word	0x20003890
    1648:	20003150 	.word	0x20003150
    164c:	20003820 	.word	0x20003820
    1650:	20003144 	.word	0x20003144
    1654:	200037e4 	.word	0x200037e4
    1658:	20005094 	.word	0x20005094
    165c:	2000506c 	.word	0x2000506c
    1660:	20005064 	.word	0x20005064
    1664:	20004f98 	.word	0x20004f98
    1668:	20004ff4 	.word	0x20004ff4
    166c:	20004ff0 	.word	0x20004ff0
    1670:	200040a8 	.word	0x200040a8
    1674:	20004f6c 	.word	0x20004f6c
    1678:	20003158 	.word	0x20003158
    167c:	2000388c 	.word	0x2000388c
    1680:	2000314c 	.word	0x2000314c
    1684:	2000381c 	.word	0x2000381c
    1688:	20003140 	.word	0x20003140
    168c:	200037e0 	.word	0x200037e0
    1690:	20005068 	.word	0x20005068
    1694:	200052d0 	.word	0x200052d0
    1698:	200040b0 	.word	0x200040b0
    169c:	20004fa0 	.word	0x20004fa0
    16a0:	20005004 	.word	0x20005004
    16a4:	20005000 	.word	0x20005000
    16a8:	20004fa4 	.word	0x20004fa4
    16ac:	20004f74 	.word	0x20004f74
    16b0:	20003160 	.word	0x20003160
    16b4:	20003894 	.word	0x20003894
    16b8:	20003154 	.word	0x20003154
    16bc:	20003824 	.word	0x20003824
    16c0:	20003148 	.word	0x20003148
    16c4:	200037e8 	.word	0x200037e8
    16c8:	200052cc 	.word	0x200052cc

000016cc <scaleCommands()>:
  //Update yaw variables
  error_yaw_prev = error_yaw;
  integral_yaw_prev = integral_yaw;
}

void scaleCommands() {
    16cc:	b4f0      	push	{r4, r5, r6, r7}
   * mX_command_PWM are updated here which are used to command the motors in commandMotors(). sX_command_PWM are updated 
   * which are used to command the servos.
   */
  //Scaled to 125us - 250us for oneshot125 protocol
  m1_command_PWM = m1_command_scaled*125 + 125;
  m2_command_PWM = m2_command_scaled*125 + 125;
    16ce:	4b74      	ldr	r3, [pc, #464]	; (18a0 <scaleCommands()+0x1d4>)
    16d0:	ed93 7a00 	vldr	s14, [r3]
    16d4:	eddf 7a73 	vldr	s15, [pc, #460]	; 18a4 <scaleCommands()+0x1d8>
    16d8:	ee27 7a27 	vmul.f32	s14, s14, s15
    16dc:	ee37 7a27 	vadd.f32	s14, s14, s15
    16e0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    16e4:	ee17 4a10 	vmov	r4, s14
  m3_command_PWM = m3_command_scaled*125 + 125;
    16e8:	4b6f      	ldr	r3, [pc, #444]	; (18a8 <scaleCommands()+0x1dc>)
    16ea:	ed93 7a00 	vldr	s14, [r3]
    16ee:	ee27 7a27 	vmul.f32	s14, s14, s15
    16f2:	ee37 7a27 	vadd.f32	s14, s14, s15
    16f6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    16fa:	ee17 0a10 	vmov	r0, s14
  m4_command_PWM = m4_command_scaled*125 + 125;
    16fe:	4b6b      	ldr	r3, [pc, #428]	; (18ac <scaleCommands()+0x1e0>)
    1700:	ed93 7a00 	vldr	s14, [r3]
    1704:	ee27 7a27 	vmul.f32	s14, s14, s15
    1708:	ee37 7a27 	vadd.f32	s14, s14, s15
    170c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    1710:	ee17 1a10 	vmov	r1, s14
  m5_command_PWM = m5_command_scaled*125 + 125;
    1714:	4b66      	ldr	r3, [pc, #408]	; (18b0 <scaleCommands()+0x1e4>)
    1716:	ed93 7a00 	vldr	s14, [r3]
    171a:	ee27 7a27 	vmul.f32	s14, s14, s15
    171e:	ee37 7a27 	vadd.f32	s14, s14, s15
    1722:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    1726:	ee17 2a10 	vmov	r2, s14
  m6_command_PWM = m6_command_scaled*125 + 125;
    172a:	4b62      	ldr	r3, [pc, #392]	; (18b4 <scaleCommands()+0x1e8>)
    172c:	ed93 7a00 	vldr	s14, [r3]
    1730:	ee27 7a27 	vmul.f32	s14, s14, s15
    1734:	ee37 7a27 	vadd.f32	s14, s14, s15
    1738:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    173c:	ee17 3a10 	vmov	r3, s14
  m1_command_PWM = m1_command_scaled*125 + 125;
    1740:	4d5d      	ldr	r5, [pc, #372]	; (18b8 <scaleCommands()+0x1ec>)
    1742:	ed95 7a00 	vldr	s14, [r5]
    1746:	ee27 7a27 	vmul.f32	s14, s14, s15
    174a:	ee77 7a27 	vadd.f32	s15, s14, s15
    174e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1752:	ee17 5a90 	vmov	r5, s15
  //Constrain commands to motors within oneshot125 bounds
  m1_command_PWM = constrain(m1_command_PWM, 125, 250);
    1756:	2dfa      	cmp	r5, #250	; 0xfa
    1758:	bfa8      	it	ge
    175a:	25fa      	movge	r5, #250	; 0xfa
    175c:	2d7d      	cmp	r5, #125	; 0x7d
    175e:	bfb8      	it	lt
    1760:	257d      	movlt	r5, #125	; 0x7d
    1762:	4e56      	ldr	r6, [pc, #344]	; (18bc <scaleCommands()+0x1f0>)
    1764:	6035      	str	r5, [r6, #0]
  m2_command_PWM = constrain(m2_command_PWM, 125, 250);
    1766:	2cfa      	cmp	r4, #250	; 0xfa
    1768:	bfa8      	it	ge
    176a:	24fa      	movge	r4, #250	; 0xfa
    176c:	2c7d      	cmp	r4, #125	; 0x7d
    176e:	bfb8      	it	lt
    1770:	247d      	movlt	r4, #125	; 0x7d
    1772:	4d53      	ldr	r5, [pc, #332]	; (18c0 <scaleCommands()+0x1f4>)
    1774:	602c      	str	r4, [r5, #0]
  m3_command_PWM = constrain(m3_command_PWM, 125, 250);
    1776:	28fa      	cmp	r0, #250	; 0xfa
    1778:	bfa8      	it	ge
    177a:	20fa      	movge	r0, #250	; 0xfa
    177c:	287d      	cmp	r0, #125	; 0x7d
    177e:	bfb8      	it	lt
    1780:	207d      	movlt	r0, #125	; 0x7d
    1782:	4c50      	ldr	r4, [pc, #320]	; (18c4 <scaleCommands()+0x1f8>)
    1784:	6020      	str	r0, [r4, #0]
  m4_command_PWM = constrain(m4_command_PWM, 125, 250);
    1786:	29fa      	cmp	r1, #250	; 0xfa
    1788:	bfa8      	it	ge
    178a:	21fa      	movge	r1, #250	; 0xfa
    178c:	297d      	cmp	r1, #125	; 0x7d
    178e:	bfb8      	it	lt
    1790:	217d      	movlt	r1, #125	; 0x7d
    1792:	484d      	ldr	r0, [pc, #308]	; (18c8 <scaleCommands()+0x1fc>)
    1794:	6001      	str	r1, [r0, #0]
  m5_command_PWM = constrain(m5_command_PWM, 125, 250);
    1796:	2afa      	cmp	r2, #250	; 0xfa
    1798:	bfa8      	it	ge
    179a:	22fa      	movge	r2, #250	; 0xfa
    179c:	2a7d      	cmp	r2, #125	; 0x7d
    179e:	bfb8      	it	lt
    17a0:	227d      	movlt	r2, #125	; 0x7d
    17a2:	494a      	ldr	r1, [pc, #296]	; (18cc <scaleCommands()+0x200>)
    17a4:	600a      	str	r2, [r1, #0]
  m6_command_PWM = constrain(m6_command_PWM, 125, 250);
    17a6:	2bfa      	cmp	r3, #250	; 0xfa
    17a8:	bfa8      	it	ge
    17aa:	23fa      	movge	r3, #250	; 0xfa
    17ac:	2b7d      	cmp	r3, #125	; 0x7d
    17ae:	bfb8      	it	lt
    17b0:	237d      	movlt	r3, #125	; 0x7d
    17b2:	4a47      	ldr	r2, [pc, #284]	; (18d0 <scaleCommands()+0x204>)
    17b4:	6013      	str	r3, [r2, #0]

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    17b6:	4b47      	ldr	r3, [pc, #284]	; (18d4 <scaleCommands()+0x208>)
    17b8:	edd3 7a00 	vldr	s15, [r3]
    17bc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 18d8 <scaleCommands()+0x20c>
    17c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    17c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    17c8:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    17cc:	4b43      	ldr	r3, [pc, #268]	; (18dc <scaleCommands()+0x210>)
    17ce:	edd3 7a00 	vldr	s15, [r3]
    17d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    17d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    17da:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    17de:	4b40      	ldr	r3, [pc, #256]	; (18e0 <scaleCommands()+0x214>)
    17e0:	edd3 7a00 	vldr	s15, [r3]
    17e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    17e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    17ec:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    17f0:	4b3c      	ldr	r3, [pc, #240]	; (18e4 <scaleCommands()+0x218>)
    17f2:	edd3 7a00 	vldr	s15, [r3]
    17f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    17fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    17fe:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    1802:	4b39      	ldr	r3, [pc, #228]	; (18e8 <scaleCommands()+0x21c>)
    1804:	edd3 7a00 	vldr	s15, [r3]
    1808:	ee67 7a87 	vmul.f32	s15, s15, s14
    180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1810:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    1814:	4b35      	ldr	r3, [pc, #212]	; (18ec <scaleCommands()+0x220>)
    1816:	edd3 7a00 	vldr	s15, [r3]
    181a:	ee67 7a87 	vmul.f32	s15, s15, s14
    181e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1822:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    1826:	4e32      	ldr	r6, [pc, #200]	; (18f0 <scaleCommands()+0x224>)
    1828:	edd6 7a00 	vldr	s15, [r6]
    182c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1834:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    1838:	2eb4      	cmp	r6, #180	; 0xb4
    183a:	bfa8      	it	ge
    183c:	26b4      	movge	r6, #180	; 0xb4
    183e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    1842:	4f2c      	ldr	r7, [pc, #176]	; (18f4 <scaleCommands()+0x228>)
    1844:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    1846:	2db4      	cmp	r5, #180	; 0xb4
    1848:	bfa8      	it	ge
    184a:	25b4      	movge	r5, #180	; 0xb4
    184c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    1850:	4e29      	ldr	r6, [pc, #164]	; (18f8 <scaleCommands()+0x22c>)
    1852:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    1854:	2cb4      	cmp	r4, #180	; 0xb4
    1856:	bfa8      	it	ge
    1858:	24b4      	movge	r4, #180	; 0xb4
    185a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    185e:	4d27      	ldr	r5, [pc, #156]	; (18fc <scaleCommands()+0x230>)
    1860:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    1862:	28b4      	cmp	r0, #180	; 0xb4
    1864:	bfa8      	it	ge
    1866:	20b4      	movge	r0, #180	; 0xb4
    1868:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    186c:	4c24      	ldr	r4, [pc, #144]	; (1900 <scaleCommands()+0x234>)
    186e:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    1870:	29b4      	cmp	r1, #180	; 0xb4
    1872:	bfa8      	it	ge
    1874:	21b4      	movge	r1, #180	; 0xb4
    1876:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    187a:	4822      	ldr	r0, [pc, #136]	; (1904 <scaleCommands()+0x238>)
    187c:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    187e:	2ab4      	cmp	r2, #180	; 0xb4
    1880:	bfa8      	it	ge
    1882:	22b4      	movge	r2, #180	; 0xb4
    1884:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1888:	491f      	ldr	r1, [pc, #124]	; (1908 <scaleCommands()+0x23c>)
    188a:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    188c:	2bb4      	cmp	r3, #180	; 0xb4
    188e:	bfa8      	it	ge
    1890:	23b4      	movge	r3, #180	; 0xb4
    1892:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1896:	4a1d      	ldr	r2, [pc, #116]	; (190c <scaleCommands()+0x240>)
    1898:	6013      	str	r3, [r2, #0]

}
    189a:	bcf0      	pop	{r4, r5, r6, r7}
    189c:	4770      	bx	lr
    189e:	bf00      	nop
    18a0:	20005018 	.word	0x20005018
    18a4:	42fa0000 	.word	0x42fa0000
    18a8:	20005020 	.word	0x20005020
    18ac:	20005028 	.word	0x20005028
    18b0:	20005030 	.word	0x20005030
    18b4:	20005038 	.word	0x20005038
    18b8:	20005010 	.word	0x20005010
    18bc:	2000500c 	.word	0x2000500c
    18c0:	20005014 	.word	0x20005014
    18c4:	2000501c 	.word	0x2000501c
    18c8:	20005024 	.word	0x20005024
    18cc:	2000502c 	.word	0x2000502c
    18d0:	20005034 	.word	0x20005034
    18d4:	200050dc 	.word	0x200050dc
    18d8:	43340000 	.word	0x43340000
    18dc:	200050e4 	.word	0x200050e4
    18e0:	200050ec 	.word	0x200050ec
    18e4:	200050f4 	.word	0x200050f4
    18e8:	200050fc 	.word	0x200050fc
    18ec:	20005104 	.word	0x20005104
    18f0:	200050d4 	.word	0x200050d4
    18f4:	200050d0 	.word	0x200050d0
    18f8:	200050d8 	.word	0x200050d8
    18fc:	200050e0 	.word	0x200050e0
    1900:	200050e8 	.word	0x200050e8
    1904:	200050f0 	.word	0x200050f0
    1908:	200050f8 	.word	0x200050f8
    190c:	20005100 	.word	0x20005100

00001910 <getCommands()>:

void getCommands() {
    1910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //  channel_4_pwm = getRadioPWM(4);
  //  channel_5_pwm = getRadioPWM(5);
  //  channel_6_pwm = getRadioPWM(6);
    
  #if defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    1912:	4bc5      	ldr	r3, [pc, #788]	; (1c28 <getCommands()+0x318>)
    1914:	4ac5      	ldr	r2, [pc, #788]	; (1c2c <getCommands()+0x31c>)
    1916:	49c6      	ldr	r1, [pc, #792]	; (1c30 <getCommands()+0x320>)
    1918:	48c6      	ldr	r0, [pc, #792]	; (1c34 <getCommands()+0x324>)
    191a:	f002 fab5 	bl	3e88 <SBUS::read(unsigned short*, bool*, bool*)>
    191e:	2800      	cmp	r0, #0
    1920:	f000 80bb 	beq.w	1a9a <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    1924:	4bc2      	ldr	r3, [pc, #776]	; (1c30 <getCommands()+0x320>)
    1926:	881a      	ldrh	r2, [r3, #0]
    1928:	ee06 2a90 	vmov	s13, r2
    192c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1930:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 1c38 <getCommands()+0x328>
    1934:	ee66 6a87 	vmul.f32	s13, s13, s14
    1938:	eddf 7ac0 	vldr	s15, [pc, #768]	; 1c3c <getCommands()+0x32c>
    193c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1940:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1944:	4abe      	ldr	r2, [pc, #760]	; (1c40 <getCommands()+0x330>)
    1946:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    194a:	885a      	ldrh	r2, [r3, #2]
    194c:	ee06 2a90 	vmov	s13, r2
    1950:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1954:	ee66 6a87 	vmul.f32	s13, s13, s14
    1958:	ee76 6aa7 	vadd.f32	s13, s13, s15
    195c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1960:	4ab8      	ldr	r2, [pc, #736]	; (1c44 <getCommands()+0x334>)
    1962:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    1966:	889a      	ldrh	r2, [r3, #4]
    1968:	ee06 2a90 	vmov	s13, r2
    196c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1970:	ee66 6a87 	vmul.f32	s13, s13, s14
    1974:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1978:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    197c:	4ab2      	ldr	r2, [pc, #712]	; (1c48 <getCommands()+0x338>)
    197e:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    1982:	88da      	ldrh	r2, [r3, #6]
    1984:	ee06 2a90 	vmov	s13, r2
    1988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    198c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1990:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1994:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1998:	4aac      	ldr	r2, [pc, #688]	; (1c4c <getCommands()+0x33c>)
    199a:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    199e:	891a      	ldrh	r2, [r3, #8]
    19a0:	ee06 2a90 	vmov	s13, r2
    19a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    19a8:	ee66 6a87 	vmul.f32	s13, s13, s14
    19ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
    19b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    19b4:	4aa6      	ldr	r2, [pc, #664]	; (1c50 <getCommands()+0x340>)
    19b6:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    19ba:	895a      	ldrh	r2, [r3, #10]
    19bc:	ee06 2a90 	vmov	s13, r2
    19c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    19c4:	ee66 6a87 	vmul.f32	s13, s13, s14
    19c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    19cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    19d0:	4aa0      	ldr	r2, [pc, #640]	; (1c54 <getCommands()+0x344>)
    19d2:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    19d6:	899a      	ldrh	r2, [r3, #12]
    19d8:	ee06 2a90 	vmov	s13, r2
    19dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    19e0:	ee66 6a87 	vmul.f32	s13, s13, s14
    19e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    19e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    19ec:	4a9a      	ldr	r2, [pc, #616]	; (1c58 <getCommands()+0x348>)
    19ee:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    19f2:	89da      	ldrh	r2, [r3, #14]
    19f4:	ee06 2a90 	vmov	s13, r2
    19f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    19fc:	ee66 6a87 	vmul.f32	s13, s13, s14
    1a00:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1a04:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1a08:	4a94      	ldr	r2, [pc, #592]	; (1c5c <getCommands()+0x34c>)
    1a0a:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    1a0e:	8a1a      	ldrh	r2, [r3, #16]
    1a10:	ee06 2a90 	vmov	s13, r2
    1a14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a18:	ee66 6a87 	vmul.f32	s13, s13, s14
    1a1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1a20:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1a24:	4a8e      	ldr	r2, [pc, #568]	; (1c60 <getCommands()+0x350>)
    1a26:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    1a2a:	8a5a      	ldrh	r2, [r3, #18]
    1a2c:	ee06 2a90 	vmov	s13, r2
    1a30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a34:	ee66 6a87 	vmul.f32	s13, s13, s14
    1a38:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1a3c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1a40:	4a88      	ldr	r2, [pc, #544]	; (1c64 <getCommands()+0x354>)
    1a42:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    1a46:	8a9a      	ldrh	r2, [r3, #20]
    1a48:	ee06 2a90 	vmov	s13, r2
    1a4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a50:	ee66 6a87 	vmul.f32	s13, s13, s14
    1a54:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1a58:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1a5c:	4a82      	ldr	r2, [pc, #520]	; (1c68 <getCommands()+0x358>)
    1a5e:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    1a62:	8ada      	ldrh	r2, [r3, #22]
    1a64:	ee06 2a90 	vmov	s13, r2
    1a68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a6c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1a70:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1a74:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1a78:	4a7c      	ldr	r2, [pc, #496]	; (1c6c <getCommands()+0x35c>)
    1a7a:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    1a7e:	8b1b      	ldrh	r3, [r3, #24]
    1a80:	ee06 3a90 	vmov	s13, r3
    1a84:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1a88:	ee26 7a87 	vmul.f32	s14, s13, s14
    1a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
    1a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1a94:	4b76      	ldr	r3, [pc, #472]	; (1c70 <getCommands()+0x360>)
    1a96:	edc3 7a00 	vstr	s15, [r3]
  //  }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    1a9a:	4b76      	ldr	r3, [pc, #472]	; (1c74 <getCommands()+0x364>)
    1a9c:	681d      	ldr	r5, [r3, #0]
    1a9e:	4b68      	ldr	r3, [pc, #416]	; (1c40 <getCommands()+0x330>)
    1aa0:	edd3 7a00 	vldr	s15, [r3]
    1aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1aa8:	eddf 5a73 	vldr	s11, [pc, #460]	; 1c78 <getCommands()+0x368>
    1aac:	ee27 7a25 	vmul.f32	s14, s14, s11
    1ab0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1ab4:	ee06 5a90 	vmov	s13, r5
    1ab8:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    1abc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 1c20 <getCommands()+0x310>
    1ac0:	ee04 7b06 	vmla.f64	d7, d4, d6
    1ac4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1ac8:	ee17 0a90 	vmov	r0, s15
    1acc:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    1ad0:	4b6a      	ldr	r3, [pc, #424]	; (1c7c <getCommands()+0x36c>)
    1ad2:	f8d3 c000 	ldr.w	ip, [r3]
    1ad6:	4b5b      	ldr	r3, [pc, #364]	; (1c44 <getCommands()+0x334>)
    1ad8:	edd3 7a00 	vldr	s15, [r3]
    1adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1ae0:	ee27 7a25 	vmul.f32	s14, s14, s11
    1ae4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1ae8:	ee05 ca10 	vmov	s10, ip
    1aec:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    1af0:	ee04 7b06 	vmla.f64	d7, d4, d6
    1af4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1af8:	ee17 1a90 	vmov	r1, s15
    1afc:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    1b00:	4b5f      	ldr	r3, [pc, #380]	; (1c80 <getCommands()+0x370>)
    1b02:	681f      	ldr	r7, [r3, #0]
    1b04:	4b50      	ldr	r3, [pc, #320]	; (1c48 <getCommands()+0x338>)
    1b06:	edd3 7a00 	vldr	s15, [r3]
    1b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1b0e:	ee27 7a25 	vmul.f32	s14, s14, s11
    1b12:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1b16:	ee05 7a10 	vmov	s10, r7
    1b1a:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    1b1e:	ee04 7b06 	vmla.f64	d7, d4, d6
    1b22:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1b26:	ee17 2a90 	vmov	r2, s15
    1b2a:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    1b2e:	4b55      	ldr	r3, [pc, #340]	; (1c84 <getCommands()+0x374>)
    1b30:	681e      	ldr	r6, [r3, #0]
    1b32:	4c46      	ldr	r4, [pc, #280]	; (1c4c <getCommands()+0x33c>)
    1b34:	edd4 7a00 	vldr	s15, [r4]
    1b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1b3c:	ee27 7a25 	vmul.f32	s14, s14, s11
    1b40:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1b44:	ee05 6a90 	vmov	s11, r6
    1b48:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    1b4c:	ee05 7b06 	vmla.f64	d7, d5, d6
    1b50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1b54:	ee17 3a90 	vmov	r3, s15
    1b58:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    1b5c:	1b44      	subs	r4, r0, r5
    1b5e:	f8df e154 	ldr.w	lr, [pc, #340]	; 1cb4 <getCommands()+0x3a4>
    1b62:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    1b66:	eba1 010c 	sub.w	r1, r1, ip
    1b6a:	f8df c134 	ldr.w	ip, [pc, #308]	; 1ca0 <getCommands()+0x390>
    1b6e:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    1b72:	1bd2      	subs	r2, r2, r7
    1b74:	4944      	ldr	r1, [pc, #272]	; (1c88 <getCommands()+0x378>)
    1b76:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    1b78:	1b9b      	subs	r3, r3, r6
    1b7a:	4a44      	ldr	r2, [pc, #272]	; (1c8c <getCommands()+0x37c>)
    1b7c:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < 5 && doneWithSetup) {
    1b7e:	2c00      	cmp	r4, #0
    1b80:	bfb8      	it	lt
    1b82:	4264      	neglt	r4, r4
    1b84:	4b42      	ldr	r3, [pc, #264]	; (1c90 <getCommands()+0x380>)
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	42a3      	cmp	r3, r4
    1b8a:	da08      	bge.n	1b9e <getCommands()+0x28e>
    1b8c:	4b41      	ldr	r3, [pc, #260]	; (1c94 <getCommands()+0x384>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	2b04      	cmp	r3, #4
    1b92:	dc04      	bgt.n	1b9e <getCommands()+0x28e>
    1b94:	4b40      	ldr	r3, [pc, #256]	; (1c98 <getCommands()+0x388>)
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	f040 80ad 	bne.w	1cf8 <getCommands()+0x3e8>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println("Radio command spike detected (CH1)");
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    1b9e:	4b3f      	ldr	r3, [pc, #252]	; (1c9c <getCommands()+0x38c>)
    1ba0:	6018      	str	r0, [r3, #0]
    1ba2:	2300      	movs	r3, #0
		ch1_CutCounter++;
    1ba4:	4a3b      	ldr	r2, [pc, #236]	; (1c94 <getCommands()+0x384>)
    1ba6:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < 5 && doneWithSetup) {
    1ba8:	4b3d      	ldr	r3, [pc, #244]	; (1ca0 <getCommands()+0x390>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	2b00      	cmp	r3, #0
    1bae:	bfb8      	it	lt
    1bb0:	425b      	neglt	r3, r3
    1bb2:	4a37      	ldr	r2, [pc, #220]	; (1c90 <getCommands()+0x380>)
    1bb4:	6812      	ldr	r2, [r2, #0]
    1bb6:	429a      	cmp	r2, r3
    1bb8:	da08      	bge.n	1bcc <getCommands()+0x2bc>
    1bba:	4b3a      	ldr	r3, [pc, #232]	; (1ca4 <getCommands()+0x394>)
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	2b04      	cmp	r3, #4
    1bc0:	dc04      	bgt.n	1bcc <getCommands()+0x2bc>
    1bc2:	4b35      	ldr	r3, [pc, #212]	; (1c98 <getCommands()+0x388>)
    1bc4:	781b      	ldrb	r3, [r3, #0]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	f040 80a6 	bne.w	1d18 <getCommands()+0x408>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println("Radio command spike detected (CH2)");
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    1bcc:	4b1d      	ldr	r3, [pc, #116]	; (1c44 <getCommands()+0x334>)
    1bce:	681a      	ldr	r2, [r3, #0]
    1bd0:	4b35      	ldr	r3, [pc, #212]	; (1ca8 <getCommands()+0x398>)
    1bd2:	601a      	str	r2, [r3, #0]
    1bd4:	2300      	movs	r3, #0
		ch2_CutCounter++;
    1bd6:	4a33      	ldr	r2, [pc, #204]	; (1ca4 <getCommands()+0x394>)
    1bd8:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < 5 && doneWithSetup) {
    1bda:	4b2b      	ldr	r3, [pc, #172]	; (1c88 <getCommands()+0x378>)
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	2b00      	cmp	r3, #0
    1be0:	bfb8      	it	lt
    1be2:	425b      	neglt	r3, r3
    1be4:	4a2a      	ldr	r2, [pc, #168]	; (1c90 <getCommands()+0x380>)
    1be6:	6812      	ldr	r2, [r2, #0]
    1be8:	429a      	cmp	r2, r3
    1bea:	da08      	bge.n	1bfe <getCommands()+0x2ee>
    1bec:	4b2f      	ldr	r3, [pc, #188]	; (1cac <getCommands()+0x39c>)
    1bee:	681b      	ldr	r3, [r3, #0]
    1bf0:	2b04      	cmp	r3, #4
    1bf2:	dc04      	bgt.n	1bfe <getCommands()+0x2ee>
    1bf4:	4b28      	ldr	r3, [pc, #160]	; (1c98 <getCommands()+0x388>)
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	f040 809f 	bne.w	1d3c <getCommands()+0x42c>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println("Radio command spike detected (CH3)");
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    1bfe:	4b12      	ldr	r3, [pc, #72]	; (1c48 <getCommands()+0x338>)
    1c00:	681a      	ldr	r2, [r3, #0]
    1c02:	4b2b      	ldr	r3, [pc, #172]	; (1cb0 <getCommands()+0x3a0>)
    1c04:	601a      	str	r2, [r3, #0]
    1c06:	2300      	movs	r3, #0
		ch3_CutCounter++;
    1c08:	4a28      	ldr	r2, [pc, #160]	; (1cac <getCommands()+0x39c>)
    1c0a:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < 5 && doneWithSetup) {
    1c0c:	4b1f      	ldr	r3, [pc, #124]	; (1c8c <getCommands()+0x37c>)
    1c0e:	681b      	ldr	r3, [r3, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	bfb8      	it	lt
    1c14:	425b      	neglt	r3, r3
    1c16:	4a1e      	ldr	r2, [pc, #120]	; (1c90 <getCommands()+0x380>)
    1c18:	6812      	ldr	r2, [r2, #0]
    1c1a:	429a      	cmp	r2, r3
    1c1c:	da54      	bge.n	1cc8 <getCommands()+0x3b8>
    1c1e:	e04b      	b.n	1cb8 <getCommands()+0x3a8>
    1c20:	40000000 	.word	0x40000000
    1c24:	3fd33333 	.word	0x3fd33333
    1c28:	200052f2 	.word	0x200052f2
    1c2c:	200052f1 	.word	0x200052f1
    1c30:	20005254 	.word	0x20005254
    1c34:	20005118 	.word	0x20005118
    1c38:	3f1d70a4 	.word	0x3f1d70a4
    1c3c:	445fc000 	.word	0x445fc000
    1c40:	20004f18 	.word	0x20004f18
    1c44:	20004f24 	.word	0x20004f24
    1c48:	20004f30 	.word	0x20004f30
    1c4c:	20004f3c 	.word	0x20004f3c
    1c50:	20004f44 	.word	0x20004f44
    1c54:	20004f48 	.word	0x20004f48
    1c58:	20004f4c 	.word	0x20004f4c
    1c5c:	20004f50 	.word	0x20004f50
    1c60:	20004f54 	.word	0x20004f54
    1c64:	20004f04 	.word	0x20004f04
    1c68:	20004f08 	.word	0x20004f08
    1c6c:	20004f0c 	.word	0x20004f0c
    1c70:	20004f10 	.word	0x20004f10
    1c74:	20004f1c 	.word	0x20004f1c
    1c78:	3f333333 	.word	0x3f333333
    1c7c:	20004f28 	.word	0x20004f28
    1c80:	20004f34 	.word	0x20004f34
    1c84:	20004f40 	.word	0x20004f40
    1c88:	20004f64 	.word	0x20004f64
    1c8c:	20004f68 	.word	0x20004f68
    1c90:	200037d4 	.word	0x200037d4
    1c94:	20004ef4 	.word	0x20004ef4
    1c98:	200052eb 	.word	0x200052eb
    1c9c:	20004f14 	.word	0x20004f14
    1ca0:	20004f60 	.word	0x20004f60
    1ca4:	20004ef8 	.word	0x20004ef8
    1ca8:	20004f20 	.word	0x20004f20
    1cac:	20004efc 	.word	0x20004efc
    1cb0:	20004f2c 	.word	0x20004f2c
    1cb4:	20004f5c 	.word	0x20004f5c
    1cb8:	4b32      	ldr	r3, [pc, #200]	; (1d84 <getCommands()+0x474>)
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	2b04      	cmp	r3, #4
    1cbe:	dc03      	bgt.n	1cc8 <getCommands()+0x3b8>
    1cc0:	4b31      	ldr	r3, [pc, #196]	; (1d88 <getCommands()+0x478>)
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d14b      	bne.n	1d60 <getCommands()+0x450>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println("Radio command spike detected (CH4)");
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    1cc8:	4b30      	ldr	r3, [pc, #192]	; (1d8c <getCommands()+0x47c>)
    1cca:	681a      	ldr	r2, [r3, #0]
    1ccc:	4b30      	ldr	r3, [pc, #192]	; (1d90 <getCommands()+0x480>)
    1cce:	601a      	str	r2, [r3, #0]
    1cd0:	2300      	movs	r3, #0
		ch4_CutCounter++;
    1cd2:	4a2c      	ldr	r2, [pc, #176]	; (1d84 <getCommands()+0x474>)
    1cd4:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    1cd6:	4b2f      	ldr	r3, [pc, #188]	; (1d94 <getCommands()+0x484>)
    1cd8:	681a      	ldr	r2, [r3, #0]
    1cda:	4b2f      	ldr	r3, [pc, #188]	; (1d98 <getCommands()+0x488>)
    1cdc:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    1cde:	4b2f      	ldr	r3, [pc, #188]	; (1d9c <getCommands()+0x48c>)
    1ce0:	681a      	ldr	r2, [r3, #0]
    1ce2:	4b2f      	ldr	r3, [pc, #188]	; (1da0 <getCommands()+0x490>)
    1ce4:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    1ce6:	4b2f      	ldr	r3, [pc, #188]	; (1da4 <getCommands()+0x494>)
    1ce8:	681a      	ldr	r2, [r3, #0]
    1cea:	4b2f      	ldr	r3, [pc, #188]	; (1da8 <getCommands()+0x498>)
    1cec:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    1cee:	4b28      	ldr	r3, [pc, #160]	; (1d90 <getCommands()+0x480>)
    1cf0:	681a      	ldr	r2, [r3, #0]
    1cf2:	4b2e      	ldr	r3, [pc, #184]	; (1dac <getCommands()+0x49c>)
    1cf4:	601a      	str	r2, [r3, #0]

	

}
    1cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    1cf8:	4b26      	ldr	r3, [pc, #152]	; (1d94 <getCommands()+0x484>)
    1cfa:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1cfc:	4c2c      	ldr	r4, [pc, #176]	; (1db0 <getCommands()+0x4a0>)
    1cfe:	6823      	ldr	r3, [r4, #0]
    1d00:	685b      	ldr	r3, [r3, #4]
    1d02:	2222      	movs	r2, #34	; 0x22
    1d04:	492b      	ldr	r1, [pc, #172]	; (1db4 <getCommands()+0x4a4>)
    1d06:	4620      	mov	r0, r4
    1d08:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1d0a:	4620      	mov	r0, r4
    1d0c:	f00a fc1b 	bl	c546 <Print::println()>
		ch1_CutCounter++;
    1d10:	4b29      	ldr	r3, [pc, #164]	; (1db8 <getCommands()+0x4a8>)
    1d12:	681b      	ldr	r3, [r3, #0]
    1d14:	3301      	adds	r3, #1
    1d16:	e745      	b.n	1ba4 <getCommands()+0x294>
		channel_2_pwm = channel_2_pwm_prev;
    1d18:	4b21      	ldr	r3, [pc, #132]	; (1da0 <getCommands()+0x490>)
    1d1a:	681a      	ldr	r2, [r3, #0]
    1d1c:	4b1f      	ldr	r3, [pc, #124]	; (1d9c <getCommands()+0x48c>)
    1d1e:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1d20:	4c23      	ldr	r4, [pc, #140]	; (1db0 <getCommands()+0x4a0>)
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	685b      	ldr	r3, [r3, #4]
    1d26:	2222      	movs	r2, #34	; 0x22
    1d28:	4924      	ldr	r1, [pc, #144]	; (1dbc <getCommands()+0x4ac>)
    1d2a:	4620      	mov	r0, r4
    1d2c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1d2e:	4620      	mov	r0, r4
    1d30:	f00a fc09 	bl	c546 <Print::println()>
		ch2_CutCounter++;
    1d34:	4b22      	ldr	r3, [pc, #136]	; (1dc0 <getCommands()+0x4b0>)
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	3301      	adds	r3, #1
    1d3a:	e74c      	b.n	1bd6 <getCommands()+0x2c6>
		channel_3_pwm = channel_3_pwm_prev;
    1d3c:	4b1a      	ldr	r3, [pc, #104]	; (1da8 <getCommands()+0x498>)
    1d3e:	681a      	ldr	r2, [r3, #0]
    1d40:	4b18      	ldr	r3, [pc, #96]	; (1da4 <getCommands()+0x494>)
    1d42:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1d44:	4c1a      	ldr	r4, [pc, #104]	; (1db0 <getCommands()+0x4a0>)
    1d46:	6823      	ldr	r3, [r4, #0]
    1d48:	685b      	ldr	r3, [r3, #4]
    1d4a:	2222      	movs	r2, #34	; 0x22
    1d4c:	491d      	ldr	r1, [pc, #116]	; (1dc4 <getCommands()+0x4b4>)
    1d4e:	4620      	mov	r0, r4
    1d50:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1d52:	4620      	mov	r0, r4
    1d54:	f00a fbf7 	bl	c546 <Print::println()>
		ch3_CutCounter++;
    1d58:	4b1b      	ldr	r3, [pc, #108]	; (1dc8 <getCommands()+0x4b8>)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	3301      	adds	r3, #1
    1d5e:	e753      	b.n	1c08 <getCommands()+0x2f8>
		channel_4_pwm = channel_4_pwm_prev;
    1d60:	4b12      	ldr	r3, [pc, #72]	; (1dac <getCommands()+0x49c>)
    1d62:	681a      	ldr	r2, [r3, #0]
    1d64:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <getCommands()+0x480>)
    1d66:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1d68:	4c11      	ldr	r4, [pc, #68]	; (1db0 <getCommands()+0x4a0>)
    1d6a:	6823      	ldr	r3, [r4, #0]
    1d6c:	685b      	ldr	r3, [r3, #4]
    1d6e:	2222      	movs	r2, #34	; 0x22
    1d70:	4916      	ldr	r1, [pc, #88]	; (1dcc <getCommands()+0x4bc>)
    1d72:	4620      	mov	r0, r4
    1d74:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1d76:	4620      	mov	r0, r4
    1d78:	f00a fbe5 	bl	c546 <Print::println()>
		ch4_CutCounter++;
    1d7c:	4b01      	ldr	r3, [pc, #4]	; (1d84 <getCommands()+0x474>)
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	3301      	adds	r3, #1
    1d82:	e7a6      	b.n	1cd2 <getCommands()+0x3c2>
    1d84:	20004f00 	.word	0x20004f00
    1d88:	200052eb 	.word	0x200052eb
    1d8c:	20004f3c 	.word	0x20004f3c
    1d90:	20004f38 	.word	0x20004f38
    1d94:	20004f14 	.word	0x20004f14
    1d98:	20004f1c 	.word	0x20004f1c
    1d9c:	20004f20 	.word	0x20004f20
    1da0:	20004f28 	.word	0x20004f28
    1da4:	20004f2c 	.word	0x20004f2c
    1da8:	20004f34 	.word	0x20004f34
    1dac:	20004f40 	.word	0x20004f40
    1db0:	20003170 	.word	0x20003170
    1db4:	20001c94 	.word	0x20001c94
    1db8:	20004ef4 	.word	0x20004ef4
    1dbc:	20001cb8 	.word	0x20001cb8
    1dc0:	20004ef8 	.word	0x20004ef8
    1dc4:	20001cdc 	.word	0x20001cdc
    1dc8:	20004efc 	.word	0x20004efc
    1dcc:	20001d00 	.word	0x20001d00

00001dd0 <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    1dd0:	4b28      	ldr	r3, [pc, #160]	; (1e74 <failSafe()+0xa4>)
    1dd2:	2200      	movs	r2, #0
    1dd4:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    1dd6:	4b28      	ldr	r3, [pc, #160]	; (1e78 <failSafe()+0xa8>)
    1dd8:	681a      	ldr	r2, [r3, #0]
    1dda:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    1dde:	4b27      	ldr	r3, [pc, #156]	; (1e7c <failSafe()+0xac>)
    1de0:	681b      	ldr	r3, [r3, #0]
    1de2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1de6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    1dea:	bf94      	ite	ls
    1dec:	2300      	movls	r3, #0
    1dee:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1df0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1df4:	bf88      	it	hi
    1df6:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    1df8:	4a21      	ldr	r2, [pc, #132]	; (1e80 <failSafe()+0xb0>)
    1dfa:	6812      	ldr	r2, [r2, #0]
    1dfc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1e00:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1e04:	bf88      	it	hi
    1e06:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    1e08:	4a1e      	ldr	r2, [pc, #120]	; (1e84 <failSafe()+0xb4>)
    1e0a:	6812      	ldr	r2, [r2, #0]
    1e0c:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1e10:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1e14:	bf88      	it	hi
    1e16:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    1e18:	4a1b      	ldr	r2, [pc, #108]	; (1e88 <failSafe()+0xb8>)
    1e1a:	6812      	ldr	r2, [r2, #0]
    1e1c:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1e20:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1e24:	bf88      	it	hi
    1e26:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    1e28:	4a18      	ldr	r2, [pc, #96]	; (1e8c <failSafe()+0xbc>)
    1e2a:	6812      	ldr	r2, [r2, #0]
    1e2c:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1e30:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1e34:	bf88      	it	hi
    1e36:	3301      	addhi	r3, #1
    1e38:	b1d3      	cbz	r3, 1e70 <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    1e3a:	4b15      	ldr	r3, [pc, #84]	; (1e90 <failSafe()+0xc0>)
    1e3c:	681a      	ldr	r2, [r3, #0]
    1e3e:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <failSafe()+0xac>)
    1e40:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    1e42:	4b14      	ldr	r3, [pc, #80]	; (1e94 <failSafe()+0xc4>)
    1e44:	681a      	ldr	r2, [r3, #0]
    1e46:	4b0c      	ldr	r3, [pc, #48]	; (1e78 <failSafe()+0xa8>)
    1e48:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    1e4a:	4b13      	ldr	r3, [pc, #76]	; (1e98 <failSafe()+0xc8>)
    1e4c:	681a      	ldr	r2, [r3, #0]
    1e4e:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <failSafe()+0xb0>)
    1e50:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    1e52:	4b12      	ldr	r3, [pc, #72]	; (1e9c <failSafe()+0xcc>)
    1e54:	681a      	ldr	r2, [r3, #0]
    1e56:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <failSafe()+0xb4>)
    1e58:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    1e5a:	4b11      	ldr	r3, [pc, #68]	; (1ea0 <failSafe()+0xd0>)
    1e5c:	681a      	ldr	r2, [r3, #0]
    1e5e:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <failSafe()+0xb8>)
    1e60:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    1e62:	4b10      	ldr	r3, [pc, #64]	; (1ea4 <failSafe()+0xd4>)
    1e64:	681a      	ldr	r2, [r3, #0]
    1e66:	4b09      	ldr	r3, [pc, #36]	; (1e8c <failSafe()+0xbc>)
    1e68:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    1e6a:	4b02      	ldr	r3, [pc, #8]	; (1e74 <failSafe()+0xa4>)
    1e6c:	2201      	movs	r2, #1
    1e6e:	701a      	strb	r2, [r3, #0]
  }
}
    1e70:	4770      	bx	lr
    1e72:	bf00      	nop
    1e74:	200052ed 	.word	0x200052ed
    1e78:	20004f20 	.word	0x20004f20
    1e7c:	20004f14 	.word	0x20004f14
    1e80:	20004f2c 	.word	0x20004f2c
    1e84:	20004f38 	.word	0x20004f38
    1e88:	20004f44 	.word	0x20004f44
    1e8c:	20004f48 	.word	0x20004f48
    1e90:	200037b0 	.word	0x200037b0
    1e94:	200037b4 	.word	0x200037b4
    1e98:	200037b8 	.word	0x200037b8
    1e9c:	200037bc 	.word	0x200037bc
    1ea0:	200037c0 	.word	0x200037c0
    1ea4:	200037c4 	.word	0x200037c4

00001ea8 <commandMotors()>:

void commandMotors() {
    1ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1eac:	b085      	sub	sp, #20
  int flagM4 = 0;
  int flagM5 = 0;
  int flagM6 = 0;
  
  //Write all motor pins high
  digitalWrite(m1Pin, HIGH);
    1eae:	2101      	movs	r1, #1
    1eb0:	2000      	movs	r0, #0
    1eb2:	f00b f8b7 	bl	d024 <digitalWrite>
  digitalWrite(m2Pin, HIGH);
    1eb6:	2101      	movs	r1, #1
    1eb8:	4608      	mov	r0, r1
    1eba:	f00b f8b3 	bl	d024 <digitalWrite>
  digitalWrite(m3Pin, HIGH);
    1ebe:	2101      	movs	r1, #1
    1ec0:	2002      	movs	r0, #2
    1ec2:	f00b f8af 	bl	d024 <digitalWrite>
  digitalWrite(m4Pin, HIGH);
    1ec6:	2101      	movs	r1, #1
    1ec8:	2003      	movs	r0, #3
    1eca:	f00b f8ab 	bl	d024 <digitalWrite>
  digitalWrite(m5Pin, HIGH);
    1ece:	2101      	movs	r1, #1
    1ed0:	2004      	movs	r0, #4
    1ed2:	f00b f8a7 	bl	d024 <digitalWrite>
  digitalWrite(m6Pin, HIGH);
    1ed6:	2101      	movs	r1, #1
    1ed8:	2005      	movs	r0, #5
    1eda:	f00b f8a3 	bl	d024 <digitalWrite>
  pulseStart = micros();
    1ede:	f00b f861 	bl	cfa4 <micros>
    1ee2:	4606      	mov	r6, r0
  int flagM6 = 0;
    1ee4:	f04f 0a00 	mov.w	sl, #0
  int flagM5 = 0;
    1ee8:	46d3      	mov	fp, sl
  int flagM4 = 0;
    1eea:	f8cd a00c 	str.w	sl, [sp, #12]
  int flagM3 = 0;
    1eee:	f8cd a008 	str.w	sl, [sp, #8]
  int flagM2 = 0;
    1ef2:	f8cd a004 	str.w	sl, [sp, #4]
  int flagM1 = 0;
    1ef6:	f8cd a000 	str.w	sl, [sp]
  int wentLow = 0;
    1efa:	4655      	mov	r5, sl

  //Write each motor pin low as correct pulse length is reached
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    timer = micros();
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1efc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1fdc <commandMotors()+0x134>
      digitalWrite(m1Pin, LOW);
      wentLow = wentLow + 1;
      flagM1 = 1;
    }
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1f00:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1fe0 <commandMotors()+0x138>
      digitalWrite(m2Pin, LOW);
      wentLow = wentLow + 1;
      flagM2 = 1;
    }
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1f04:	4f31      	ldr	r7, [pc, #196]	; (1fcc <commandMotors()+0x124>)
    1f06:	e029      	b.n	1f5c <commandMotors()+0xb4>
      digitalWrite(m1Pin, LOW);
    1f08:	2100      	movs	r1, #0
    1f0a:	4608      	mov	r0, r1
    1f0c:	f00b f88a 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1f10:	3501      	adds	r5, #1
      flagM1 = 1;
    1f12:	2301      	movs	r3, #1
    1f14:	9300      	str	r3, [sp, #0]
    1f16:	e02b      	b.n	1f70 <commandMotors()+0xc8>
      digitalWrite(m2Pin, LOW);
    1f18:	2100      	movs	r1, #0
    1f1a:	2001      	movs	r0, #1
    1f1c:	f00b f882 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1f20:	3501      	adds	r5, #1
      flagM2 = 1;
    1f22:	2301      	movs	r3, #1
    1f24:	9301      	str	r3, [sp, #4]
    1f26:	e02a      	b.n	1f7e <commandMotors()+0xd6>
      digitalWrite(m3Pin, LOW);
    1f28:	2100      	movs	r1, #0
    1f2a:	2002      	movs	r0, #2
    1f2c:	f00b f87a 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1f30:	3501      	adds	r5, #1
      flagM3 = 1;
    1f32:	2301      	movs	r3, #1
    1f34:	9302      	str	r3, [sp, #8]
    1f36:	e028      	b.n	1f8a <commandMotors()+0xe2>
    }
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
      digitalWrite(m4Pin, LOW);
    1f38:	2100      	movs	r1, #0
    1f3a:	2003      	movs	r0, #3
    1f3c:	f00b f872 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1f40:	3501      	adds	r5, #1
      flagM4 = 1;
    1f42:	2301      	movs	r3, #1
    1f44:	9303      	str	r3, [sp, #12]
    1f46:	e027      	b.n	1f98 <commandMotors()+0xf0>
    } 
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
      digitalWrite(m5Pin, LOW);
    1f48:	2100      	movs	r1, #0
    1f4a:	2004      	movs	r0, #4
    1f4c:	f00b f86a 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1f50:	3501      	adds	r5, #1
      flagM5 = 1;
    1f52:	f04f 0b01 	mov.w	fp, #1
    1f56:	e026      	b.n	1fa6 <commandMotors()+0xfe>
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    1f58:	2d05      	cmp	r5, #5
    1f5a:	dc33      	bgt.n	1fc4 <commandMotors()+0x11c>
    timer = micros();
    1f5c:	f00b f822 	bl	cfa4 <micros>
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1f60:	1b84      	subs	r4, r0, r6
    1f62:	f8d9 3000 	ldr.w	r3, [r9]
    1f66:	429c      	cmp	r4, r3
    1f68:	db02      	blt.n	1f70 <commandMotors()+0xc8>
    1f6a:	9b00      	ldr	r3, [sp, #0]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d0cb      	beq.n	1f08 <commandMotors()+0x60>
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1f70:	f8d8 3000 	ldr.w	r3, [r8]
    1f74:	429c      	cmp	r4, r3
    1f76:	db02      	blt.n	1f7e <commandMotors()+0xd6>
    1f78:	9b01      	ldr	r3, [sp, #4]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d0cc      	beq.n	1f18 <commandMotors()+0x70>
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1f7e:	683b      	ldr	r3, [r7, #0]
    1f80:	429c      	cmp	r4, r3
    1f82:	db02      	blt.n	1f8a <commandMotors()+0xe2>
    1f84:	9b02      	ldr	r3, [sp, #8]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d0ce      	beq.n	1f28 <commandMotors()+0x80>
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
    1f8a:	4b11      	ldr	r3, [pc, #68]	; (1fd0 <commandMotors()+0x128>)
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	429c      	cmp	r4, r3
    1f90:	db02      	blt.n	1f98 <commandMotors()+0xf0>
    1f92:	9b03      	ldr	r3, [sp, #12]
    1f94:	2b00      	cmp	r3, #0
    1f96:	d0cf      	beq.n	1f38 <commandMotors()+0x90>
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
    1f98:	4b0e      	ldr	r3, [pc, #56]	; (1fd4 <commandMotors()+0x12c>)
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	429c      	cmp	r4, r3
    1f9e:	db02      	blt.n	1fa6 <commandMotors()+0xfe>
    1fa0:	f1bb 0f00 	cmp.w	fp, #0
    1fa4:	d0d0      	beq.n	1f48 <commandMotors()+0xa0>
    } 
    if ((m6_command_PWM <= timer - pulseStart) && (flagM6==0)) {
    1fa6:	4b0c      	ldr	r3, [pc, #48]	; (1fd8 <commandMotors()+0x130>)
    1fa8:	681b      	ldr	r3, [r3, #0]
    1faa:	429c      	cmp	r4, r3
    1fac:	dbd4      	blt.n	1f58 <commandMotors()+0xb0>
    1fae:	f1ba 0f00 	cmp.w	sl, #0
    1fb2:	d1d1      	bne.n	1f58 <commandMotors()+0xb0>
      digitalWrite(m6Pin, LOW);
    1fb4:	2100      	movs	r1, #0
    1fb6:	2005      	movs	r0, #5
    1fb8:	f00b f834 	bl	d024 <digitalWrite>
      wentLow = wentLow + 1;
    1fbc:	3501      	adds	r5, #1
      flagM6 = 1;
    1fbe:	f04f 0a01 	mov.w	sl, #1
    1fc2:	e7c9      	b.n	1f58 <commandMotors()+0xb0>
    } 
  }
}
    1fc4:	b005      	add	sp, #20
    1fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fca:	bf00      	nop
    1fcc:	2000501c 	.word	0x2000501c
    1fd0:	20005024 	.word	0x20005024
    1fd4:	2000502c 	.word	0x2000502c
    1fd8:	20005034 	.word	0x20005034
    1fdc:	2000500c 	.word	0x2000500c
    1fe0:	20005014 	.word	0x20005014

00001fe4 <armMotors()>:

void armMotors() {
    1fe4:	b538      	push	{r3, r4, r5, lr}
    1fe6:	2433      	movs	r4, #51	; 0x33
   *  function is used in the main loop. Ensures motors arm within the void setup() where there are some delays
   *  for other processes that sometimes prevent motors from arming.
   */
  for (int i = 0; i <= 50; i++) {
    commandMotors();
    delay(2);
    1fe8:	2502      	movs	r5, #2
    commandMotors();
    1fea:	f7ff ff5d 	bl	1ea8 <commandMotors()>
    delay(2);
    1fee:	4628      	mov	r0, r5
    1ff0:	f00b f802 	bl	cff8 <delay>
  for (int i = 0; i <= 50; i++) {
    1ff4:	3c01      	subs	r4, #1
    1ff6:	d1f8      	bne.n	1fea <armMotors()+0x6>
  }
}
    1ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

00001ffc <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    1ffc:	4b0a      	ldr	r3, [pc, #40]	; (2028 <throttleCut()+0x2c>)
    1ffe:	681a      	ldr	r2, [r3, #0]
    2000:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2004:	429a      	cmp	r2, r3
    2006:	dd0e      	ble.n	2026 <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    2008:	2300      	movs	r3, #0
    200a:	4a08      	ldr	r2, [pc, #32]	; (202c <throttleCut()+0x30>)
    200c:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    200e:	4a08      	ldr	r2, [pc, #32]	; (2030 <throttleCut()+0x34>)
    2010:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    2012:	4a08      	ldr	r2, [pc, #32]	; (2034 <throttleCut()+0x38>)
    2014:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    2016:	4a08      	ldr	r2, [pc, #32]	; (2038 <throttleCut()+0x3c>)
    2018:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    201a:	4a08      	ldr	r2, [pc, #32]	; (203c <throttleCut()+0x40>)
    201c:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    201e:	4a08      	ldr	r2, [pc, #32]	; (2040 <throttleCut()+0x44>)
    2020:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    2022:	4a08      	ldr	r2, [pc, #32]	; (2044 <throttleCut()+0x48>)
    2024:	6013      	str	r3, [r2, #0]
  }
}
    2026:	4770      	bx	lr
    2028:	20004f44 	.word	0x20004f44
    202c:	200050d0 	.word	0x200050d0
    2030:	200050d8 	.word	0x200050d8
    2034:	200050e0 	.word	0x200050e0
    2038:	200050e8 	.word	0x200050e8
    203c:	200050f0 	.word	0x200050f0
    2040:	200050f8 	.word	0x200050f8
    2044:	20005100 	.word	0x20005100

00002048 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    2048:	b510      	push	{r4, lr}
    204a:	ed2d 8b02 	vpush	{d8}
    204e:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    2052:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    2056:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    205a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    205e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 20a8 <loopRate(int)+0x60>
    2062:	ee27 7b06 	vmul.f64	d7, d7, d6
    2066:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    206a:	f00a ff9b 	bl	cfa4 <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    206e:	4b10      	ldr	r3, [pc, #64]	; (20b0 <loopRate(int)+0x68>)
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	1ac0      	subs	r0, r0, r3
    2074:	ee07 0a90 	vmov	s15, r0
    2078:	eef8 7a67 	vcvt.f32.u32	s15, s15
    207c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2084:	dd0d      	ble.n	20a2 <loopRate(int)+0x5a>
    2086:	4c0a      	ldr	r4, [pc, #40]	; (20b0 <loopRate(int)+0x68>)
    checker = micros();
    2088:	f00a ff8c 	bl	cfa4 <micros>
  while (invFreq > (checker - current_time)) {
    208c:	6823      	ldr	r3, [r4, #0]
    208e:	1ac0      	subs	r0, r0, r3
    2090:	ee07 0a90 	vmov	s15, r0
    2094:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2098:	eef4 7ac8 	vcmpe.f32	s15, s16
    209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20a0:	d4f2      	bmi.n	2088 <loopRate(int)+0x40>
  }
}
    20a2:	ecbd 8b02 	vpop	{d8}
    20a6:	bd10      	pop	{r4, pc}
    20a8:	00000000 	.word	0x00000000
    20ac:	412e8480 	.word	0x412e8480
    20b0:	20004f58 	.word	0x20004f58

000020b4 <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    20b4:	4b11      	ldr	r3, [pc, #68]	; (20fc <loopBlink()+0x48>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	4a11      	ldr	r2, [pc, #68]	; (2100 <loopBlink()+0x4c>)
    20ba:	6812      	ldr	r2, [r2, #0]
    20bc:	1a9b      	subs	r3, r3, r2
    20be:	4a11      	ldr	r2, [pc, #68]	; (2104 <loopBlink()+0x50>)
    20c0:	6812      	ldr	r2, [r2, #0]
    20c2:	4293      	cmp	r3, r2
    20c4:	d800      	bhi.n	20c8 <loopBlink()+0x14>
    20c6:	4770      	bx	lr
void loopBlink() {
    20c8:	b510      	push	{r4, lr}
    blink_counter = micros();
    20ca:	f00a ff6b 	bl	cfa4 <micros>
    20ce:	4b0c      	ldr	r3, [pc, #48]	; (2100 <loopBlink()+0x4c>)
    20d0:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    20d2:	4c0d      	ldr	r4, [pc, #52]	; (2108 <loopBlink()+0x54>)
    20d4:	7821      	ldrb	r1, [r4, #0]
    20d6:	200d      	movs	r0, #13
    20d8:	f00a ffa4 	bl	d024 <digitalWrite>
    
    if (blinkAlternate == 1) {
    20dc:	7823      	ldrb	r3, [r4, #0]
    20de:	b12b      	cbz	r3, 20ec <loopBlink()+0x38>
      blinkAlternate = 0;
    20e0:	2200      	movs	r2, #0
    20e2:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    20e4:	4b07      	ldr	r3, [pc, #28]	; (2104 <loopBlink()+0x50>)
    20e6:	4a09      	ldr	r2, [pc, #36]	; (210c <loopBlink()+0x58>)
    20e8:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    20ea:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    20ec:	4b06      	ldr	r3, [pc, #24]	; (2108 <loopBlink()+0x54>)
    20ee:	2201      	movs	r2, #1
    20f0:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    20f2:	4b04      	ldr	r3, [pc, #16]	; (2104 <loopBlink()+0x50>)
    20f4:	4a06      	ldr	r2, [pc, #24]	; (2110 <loopBlink()+0x5c>)
    20f6:	601a      	str	r2, [r3, #0]
}
    20f8:	e7f7      	b.n	20ea <loopBlink()+0x36>
    20fa:	bf00      	nop
    20fc:	20004f58 	.word	0x20004f58
    2100:	20004eec 	.word	0x20004eec
    2104:	20004ef0 	.word	0x20004ef0
    2108:	200052e8 	.word	0x200052e8
    210c:	000186a0 	.word	0x000186a0
    2110:	001e8480 	.word	0x001e8480

00002114 <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    2114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    2118:	1e06      	subs	r6, r0, #0
    211a:	dd17      	ble.n	214c <setupBlink(int, int, int)+0x38>
    211c:	460f      	mov	r7, r1
    211e:	4690      	mov	r8, r2
    2120:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    2122:	f04f 0a00 	mov.w	sl, #0
    2126:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    2128:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    212a:	4651      	mov	r1, sl
    212c:	4628      	mov	r0, r5
    212e:	f00a ff79 	bl	d024 <digitalWrite>
    delay(downTime);
    2132:	4640      	mov	r0, r8
    2134:	f00a ff60 	bl	cff8 <delay>
    digitalWrite(13, HIGH);
    2138:	4649      	mov	r1, r9
    213a:	4628      	mov	r0, r5
    213c:	f00a ff72 	bl	d024 <digitalWrite>
    delay(upTime);
    2140:	4638      	mov	r0, r7
    2142:	f00a ff59 	bl	cff8 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    2146:	3401      	adds	r4, #1
    2148:	42a6      	cmp	r6, r4
    214a:	daee      	bge.n	212a <setupBlink(int, int, int)+0x16>
  }
}
    214c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002150 <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    2150:	b510      	push	{r4, lr}
	// Read the raw analog values (0 to 1023)
	alphaCounts = analogRead(joyAlphaPin);
    2152:	2029      	movs	r0, #41	; 0x29
    2154:	f00a fd8a 	bl	cc6c <analogRead>
    2158:	4c37      	ldr	r4, [pc, #220]	; (2238 <getJoyAngle()+0xe8>)
    215a:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    215c:	2028      	movs	r0, #40	; 0x28
    215e:	f00a fd85 	bl	cc6c <analogRead>
    2162:	4b36      	ldr	r3, [pc, #216]	; (223c <getJoyAngle()+0xec>)
    2164:	6018      	str	r0, [r3, #0]
	// Full range of analog input based on calibration
	float FR_alpha = alphaCounts_max - alphaCounts_min;
    2166:	4b36      	ldr	r3, [pc, #216]	; (2240 <getJoyAngle()+0xf0>)
    2168:	681a      	ldr	r2, [r3, #0]
    216a:	4b36      	ldr	r3, [pc, #216]	; (2244 <getJoyAngle()+0xf4>)
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	1a9b      	subs	r3, r3, r2
    2170:	ee07 3a90 	vmov	s15, r3
    2174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float FR_beta = betaCounts_max - alphaCounts_min;
    2178:	4b33      	ldr	r3, [pc, #204]	; (2248 <getJoyAngle()+0xf8>)
    217a:	681b      	ldr	r3, [r3, #0]
    217c:	1a9b      	subs	r3, r3, r2
    217e:	ee07 3a90 	vmov	s15, r3
    2182:	eeb8 6ae7 	vcvt.f32.s32	s12, s15

	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    2186:	edd4 7a00 	vldr	s15, [r4]
    218a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    218e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    2192:	ee67 6a25 	vmul.f32	s13, s14, s11
    2196:	ee77 7ae6 	vsub.f32	s15, s15, s13
    219a:	ee06 2a90 	vmov	s13, r2
    219e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    21a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    21a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    21aa:	4b28      	ldr	r3, [pc, #160]	; (224c <getJoyAngle()+0xfc>)
    21ac:	edd3 7a00 	vldr	s15, [r3]
    21b0:	4b27      	ldr	r3, [pc, #156]	; (2250 <getJoyAngle()+0x100>)
    21b2:	ed93 7a00 	vldr	s14, [r3]
    21b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    21ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
		alpha_max) + alphaOffset;
    21be:	4b25      	ldr	r3, [pc, #148]	; (2254 <getJoyAngle()+0x104>)
    21c0:	edd3 7a00 	vldr	s15, [r3]
    21c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    21c8:	4b23      	ldr	r3, [pc, #140]	; (2258 <getJoyAngle()+0x108>)
    21ca:	edc3 6a00 	vstr	s13, [r3]
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    21ce:	ee07 0a90 	vmov	s15, r0
    21d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    21d6:	ee66 5a25 	vmul.f32	s11, s12, s11
    21da:	ee77 7ae5 	vsub.f32	s15, s15, s11
    21de:	4b1f      	ldr	r3, [pc, #124]	; (225c <getJoyAngle()+0x10c>)
    21e0:	ed93 7a00 	vldr	s14, [r3]
    21e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    21e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    21ec:	ee87 7a86 	vdiv.f32	s14, s15, s12
    21f0:	4b1b      	ldr	r3, [pc, #108]	; (2260 <getJoyAngle()+0x110>)
    21f2:	edd3 7a00 	vldr	s15, [r3]
    21f6:	4b1b      	ldr	r3, [pc, #108]	; (2264 <getJoyAngle()+0x114>)
    21f8:	ed93 6a00 	vldr	s12, [r3]
    21fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
    2200:	ee67 7a27 	vmul.f32	s15, s14, s15
		beta_max) + betaOffset;
    2204:	4b18      	ldr	r3, [pc, #96]	; (2268 <getJoyAngle()+0x118>)
    2206:	ed93 7a00 	vldr	s14, [r3]
    220a:	ee77 7a87 	vadd.f32	s15, s15, s14
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    220e:	4b17      	ldr	r3, [pc, #92]	; (226c <getJoyAngle()+0x11c>)
    2210:	edc3 7a00 	vstr	s15, [r3]

	// Determine alpha and pitch in the inertial frame
	alphaRoll = alpha + roll_IMU;
    2214:	4b16      	ldr	r3, [pc, #88]	; (2270 <getJoyAngle()+0x120>)
    2216:	ed93 7a00 	vldr	s14, [r3]
    221a:	ee37 7a26 	vadd.f32	s14, s14, s13
    221e:	4b15      	ldr	r3, [pc, #84]	; (2274 <getJoyAngle()+0x124>)
    2220:	ed83 7a00 	vstr	s14, [r3]
	betaPitch = beta + pitch_IMU;
    2224:	4b14      	ldr	r3, [pc, #80]	; (2278 <getJoyAngle()+0x128>)
    2226:	ed93 7a00 	vldr	s14, [r3]
    222a:	ee77 7a27 	vadd.f32	s15, s14, s15
    222e:	4b13      	ldr	r3, [pc, #76]	; (227c <getJoyAngle()+0x12c>)
    2230:	edc3 7a00 	vstr	s15, [r3]
}
    2234:	bd10      	pop	{r4, pc}
    2236:	bf00      	nop
    2238:	20004ec8 	.word	0x20004ec8
    223c:	20004edc 	.word	0x20004edc
    2240:	20003780 	.word	0x20003780
    2244:	2000377c 	.word	0x2000377c
    2248:	20003790 	.word	0x20003790
    224c:	20003788 	.word	0x20003788
    2250:	20003784 	.word	0x20003784
    2254:	20004ecc 	.word	0x20004ecc
    2258:	20004ec4 	.word	0x20004ec4
    225c:	20003794 	.word	0x20003794
    2260:	2000379c 	.word	0x2000379c
    2264:	20003798 	.word	0x20003798
    2268:	20004ee0 	.word	0x20004ee0
    226c:	20004ed8 	.word	0x20004ed8
    2270:	20005090 	.word	0x20005090
    2274:	20004ed0 	.word	0x20004ed0
    2278:	20005064 	.word	0x20005064
    227c:	20004ee4 	.word	0x20004ee4

00002280 <openIris()>:

void openIris() {
    2280:	b508      	push	{r3, lr}
	iris.write(60);
    2282:	213c      	movs	r1, #60	; 0x3c
    2284:	4803      	ldr	r0, [pc, #12]	; (2294 <openIris()+0x14>)
    2286:	f002 fd37 	bl	4cf8 <PWMServo::write(int)>
	servoLoopCounter = 0;
    228a:	4b03      	ldr	r3, [pc, #12]	; (2298 <openIris()+0x18>)
    228c:	2200      	movs	r2, #0
    228e:	601a      	str	r2, [r3, #0]
}
    2290:	bd08      	pop	{r3, pc}
    2292:	bf00      	nop
    2294:	20005008 	.word	0x20005008
    2298:	20005298 	.word	0x20005298

0000229c <closeIris()>:

void closeIris() {
    229c:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    229e:	4b09      	ldr	r3, [pc, #36]	; (22c4 <closeIris()+0x28>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    22a6:	da08      	bge.n	22ba <closeIris()+0x1e>
		iris.write(138);
    22a8:	218a      	movs	r1, #138	; 0x8a
    22aa:	4807      	ldr	r0, [pc, #28]	; (22c8 <closeIris()+0x2c>)
    22ac:	f002 fd24 	bl	4cf8 <PWMServo::write(int)>
		servoLoopCounter++;
    22b0:	4a04      	ldr	r2, [pc, #16]	; (22c4 <closeIris()+0x28>)
    22b2:	6813      	ldr	r3, [r2, #0]
    22b4:	3301      	adds	r3, #1
    22b6:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(135);
	}
}
    22b8:	bd08      	pop	{r3, pc}
		iris.write(135);
    22ba:	2187      	movs	r1, #135	; 0x87
    22bc:	4802      	ldr	r0, [pc, #8]	; (22c8 <closeIris()+0x2c>)
    22be:	f002 fd1b 	bl	4cf8 <PWMServo::write(int)>
}
    22c2:	e7f9      	b.n	22b8 <closeIris()+0x1c>
    22c4:	20005298 	.word	0x20005298
    22c8:	20005008 	.word	0x20005008

000022cc <getDataString()>:
		//Serial.print("BetaCounts: ");
		//Serial.println(betaCounts);
	}
}

String getDataString() {
    22cc:	b570      	push	{r4, r5, r6, lr}
    22ce:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
    22d2:	4605      	mov	r5, r0
	String csvDataString;
    22d4:	2100      	movs	r1, #0
    22d6:	f00a fbe4 	bl	caa2 <String::String(char const*)>
	csvDataString = String(roll_IMU)
    22da:	2102      	movs	r1, #2
    22dc:	4bcc      	ldr	r3, [pc, #816]	; (2610 <getDataString()+0x344>)
    22de:	ed93 0a00 	vldr	s0, [r3]
    22e2:	a804      	add	r0, sp, #16
    22e4:	f00a fc46 	bl	cb74 <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    22e8:	a904      	add	r1, sp, #16
    22ea:	4668      	mov	r0, sp
    22ec:	f00a fc0b 	bl	cb06 <String::String(String const&)>
									+ ","
    22f0:	4cc8      	ldr	r4, [pc, #800]	; (2614 <getDataString()+0x348>)
    22f2:	4621      	mov	r1, r4
    22f4:	4668      	mov	r0, sp
    22f6:	f00a fc91 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    22fa:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    22fc:	2102      	movs	r1, #2
    22fe:	4bc6      	ldr	r3, [pc, #792]	; (2618 <getDataString()+0x34c>)
    2300:	ed93 0a00 	vldr	s0, [r3]
    2304:	a808      	add	r0, sp, #32
    2306:	f00a fc35 	bl	cb74 <String::String(float, unsigned char)>
    230a:	a908      	add	r1, sp, #32
    230c:	4630      	mov	r0, r6
    230e:	f00a fc7d 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2312:	4621      	mov	r1, r4
    2314:	f00a fc82 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2318:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    231a:	2102      	movs	r1, #2
    231c:	4bbf      	ldr	r3, [pc, #764]	; (261c <getDataString()+0x350>)
    231e:	ed93 0a00 	vldr	s0, [r3]
    2322:	a80c      	add	r0, sp, #48	; 0x30
    2324:	f00a fc26 	bl	cb74 <String::String(float, unsigned char)>
    2328:	a90c      	add	r1, sp, #48	; 0x30
    232a:	4630      	mov	r0, r6
    232c:	f00a fc6e 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2330:	4621      	mov	r1, r4
    2332:	f00a fc73 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2336:	4606      	mov	r6, r0
									+ String(alpha)
    2338:	2102      	movs	r1, #2
    233a:	4bb9      	ldr	r3, [pc, #740]	; (2620 <getDataString()+0x354>)
    233c:	ed93 0a00 	vldr	s0, [r3]
    2340:	a810      	add	r0, sp, #64	; 0x40
    2342:	f00a fc17 	bl	cb74 <String::String(float, unsigned char)>
    2346:	a910      	add	r1, sp, #64	; 0x40
    2348:	4630      	mov	r0, r6
    234a:	f00a fc5f 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    234e:	4621      	mov	r1, r4
    2350:	f00a fc64 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2354:	4606      	mov	r6, r0
									+ String(beta)
    2356:	2102      	movs	r1, #2
    2358:	4bb2      	ldr	r3, [pc, #712]	; (2624 <getDataString()+0x358>)
    235a:	ed93 0a00 	vldr	s0, [r3]
    235e:	a814      	add	r0, sp, #80	; 0x50
    2360:	f00a fc08 	bl	cb74 <String::String(float, unsigned char)>
    2364:	a914      	add	r1, sp, #80	; 0x50
    2366:	4630      	mov	r0, r6
    2368:	f00a fc50 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    236c:	4621      	mov	r1, r4
    236e:	f00a fc55 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2372:	4606      	mov	r6, r0
									+ String(roll_des)
    2374:	2102      	movs	r1, #2
    2376:	4bac      	ldr	r3, [pc, #688]	; (2628 <getDataString()+0x35c>)
    2378:	ed93 0a00 	vldr	s0, [r3]
    237c:	a818      	add	r0, sp, #96	; 0x60
    237e:	f00a fbf9 	bl	cb74 <String::String(float, unsigned char)>
    2382:	a918      	add	r1, sp, #96	; 0x60
    2384:	4630      	mov	r0, r6
    2386:	f00a fc41 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    238a:	4621      	mov	r1, r4
    238c:	f00a fc46 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2390:	4606      	mov	r6, r0
									+ String(pitch_des)
    2392:	2102      	movs	r1, #2
    2394:	4ba5      	ldr	r3, [pc, #660]	; (262c <getDataString()+0x360>)
    2396:	ed93 0a00 	vldr	s0, [r3]
    239a:	a81c      	add	r0, sp, #112	; 0x70
    239c:	f00a fbea 	bl	cb74 <String::String(float, unsigned char)>
    23a0:	a91c      	add	r1, sp, #112	; 0x70
    23a2:	4630      	mov	r0, r6
    23a4:	f00a fc32 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    23a8:	4621      	mov	r1, r4
    23aa:	f00a fc37 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    23ae:	4606      	mov	r6, r0
									+ String(yaw_des)
    23b0:	2102      	movs	r1, #2
    23b2:	4b9f      	ldr	r3, [pc, #636]	; (2630 <getDataString()+0x364>)
    23b4:	ed93 0a00 	vldr	s0, [r3]
    23b8:	a820      	add	r0, sp, #128	; 0x80
    23ba:	f00a fbdb 	bl	cb74 <String::String(float, unsigned char)>
    23be:	a920      	add	r1, sp, #128	; 0x80
    23c0:	4630      	mov	r0, r6
    23c2:	f00a fc23 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    23c6:	4621      	mov	r1, r4
    23c8:	f00a fc28 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    23cc:	4606      	mov	r6, r0
									+ String(thro_des)
    23ce:	2102      	movs	r1, #2
    23d0:	4b98      	ldr	r3, [pc, #608]	; (2634 <getDataString()+0x368>)
    23d2:	ed93 0a00 	vldr	s0, [r3]
    23d6:	a824      	add	r0, sp, #144	; 0x90
    23d8:	f00a fbcc 	bl	cb74 <String::String(float, unsigned char)>
    23dc:	a924      	add	r1, sp, #144	; 0x90
    23de:	4630      	mov	r0, r6
    23e0:	f00a fc14 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    23e4:	4621      	mov	r1, r4
    23e6:	f00a fc19 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    23ea:	4606      	mov	r6, r0
									+ String(roll_PID)
    23ec:	2102      	movs	r1, #2
    23ee:	4b92      	ldr	r3, [pc, #584]	; (2638 <getDataString()+0x36c>)
    23f0:	ed93 0a00 	vldr	s0, [r3]
    23f4:	a828      	add	r0, sp, #160	; 0xa0
    23f6:	f00a fbbd 	bl	cb74 <String::String(float, unsigned char)>
    23fa:	a928      	add	r1, sp, #160	; 0xa0
    23fc:	4630      	mov	r0, r6
    23fe:	f00a fc05 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2402:	4621      	mov	r1, r4
    2404:	f00a fc0a 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2408:	4606      	mov	r6, r0
									+ String(pitch_PID)
    240a:	2102      	movs	r1, #2
    240c:	4b8b      	ldr	r3, [pc, #556]	; (263c <getDataString()+0x370>)
    240e:	ed93 0a00 	vldr	s0, [r3]
    2412:	a82c      	add	r0, sp, #176	; 0xb0
    2414:	f00a fbae 	bl	cb74 <String::String(float, unsigned char)>
    2418:	a92c      	add	r1, sp, #176	; 0xb0
    241a:	4630      	mov	r0, r6
    241c:	f00a fbf6 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2420:	4621      	mov	r1, r4
    2422:	f00a fbfb 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2426:	4606      	mov	r6, r0
									+ String(yaw_PID)
    2428:	2102      	movs	r1, #2
    242a:	4b85      	ldr	r3, [pc, #532]	; (2640 <getDataString()+0x374>)
    242c:	ed93 0a00 	vldr	s0, [r3]
    2430:	a830      	add	r0, sp, #192	; 0xc0
    2432:	f00a fb9f 	bl	cb74 <String::String(float, unsigned char)>
    2436:	a930      	add	r1, sp, #192	; 0xc0
    2438:	4630      	mov	r0, r6
    243a:	f00a fbe7 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    243e:	4621      	mov	r1, r4
    2440:	f00a fbec 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2444:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    2446:	220a      	movs	r2, #10
    2448:	4b7e      	ldr	r3, [pc, #504]	; (2644 <getDataString()+0x378>)
    244a:	6819      	ldr	r1, [r3, #0]
    244c:	a834      	add	r0, sp, #208	; 0xd0
    244e:	f00a fb7e 	bl	cb4e <String::String(int, unsigned char)>
    2452:	a934      	add	r1, sp, #208	; 0xd0
    2454:	4630      	mov	r0, r6
    2456:	f00a fbd9 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    245a:	4621      	mov	r1, r4
    245c:	f00a fbde 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2460:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    2462:	220a      	movs	r2, #10
    2464:	4b78      	ldr	r3, [pc, #480]	; (2648 <getDataString()+0x37c>)
    2466:	6819      	ldr	r1, [r3, #0]
    2468:	a838      	add	r0, sp, #224	; 0xe0
    246a:	f00a fb70 	bl	cb4e <String::String(int, unsigned char)>
    246e:	a938      	add	r1, sp, #224	; 0xe0
    2470:	4630      	mov	r0, r6
    2472:	f00a fbcb 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2476:	4621      	mov	r1, r4
    2478:	f00a fbd0 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    247c:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    247e:	220a      	movs	r2, #10
    2480:	4b72      	ldr	r3, [pc, #456]	; (264c <getDataString()+0x380>)
    2482:	6819      	ldr	r1, [r3, #0]
    2484:	a83c      	add	r0, sp, #240	; 0xf0
    2486:	f00a fb62 	bl	cb4e <String::String(int, unsigned char)>
    248a:	a93c      	add	r1, sp, #240	; 0xf0
    248c:	4630      	mov	r0, r6
    248e:	f00a fbbd 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2492:	4621      	mov	r1, r4
    2494:	f00a fbc2 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2498:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    249a:	220a      	movs	r2, #10
    249c:	4b6c      	ldr	r3, [pc, #432]	; (2650 <getDataString()+0x384>)
    249e:	6819      	ldr	r1, [r3, #0]
    24a0:	a840      	add	r0, sp, #256	; 0x100
    24a2:	f00a fb54 	bl	cb4e <String::String(int, unsigned char)>
    24a6:	a940      	add	r1, sp, #256	; 0x100
    24a8:	4630      	mov	r0, r6
    24aa:	f00a fbaf 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    24ae:	4621      	mov	r1, r4
    24b0:	f00a fbb4 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    24b4:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    24b6:	220a      	movs	r2, #10
    24b8:	4b66      	ldr	r3, [pc, #408]	; (2654 <getDataString()+0x388>)
    24ba:	6819      	ldr	r1, [r3, #0]
    24bc:	a844      	add	r0, sp, #272	; 0x110
    24be:	f00a fb46 	bl	cb4e <String::String(int, unsigned char)>
    24c2:	a944      	add	r1, sp, #272	; 0x110
    24c4:	4630      	mov	r0, r6
    24c6:	f00a fba1 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    24ca:	4621      	mov	r1, r4
    24cc:	f00a fba6 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    24d0:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    24d2:	220a      	movs	r2, #10
    24d4:	4b60      	ldr	r3, [pc, #384]	; (2658 <getDataString()+0x38c>)
    24d6:	6819      	ldr	r1, [r3, #0]
    24d8:	a848      	add	r0, sp, #288	; 0x120
    24da:	f00a fb38 	bl	cb4e <String::String(int, unsigned char)>
    24de:	a948      	add	r1, sp, #288	; 0x120
    24e0:	4630      	mov	r0, r6
    24e2:	f00a fb93 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    24e6:	4621      	mov	r1, r4
    24e8:	f00a fb98 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    24ec:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    24ee:	220a      	movs	r2, #10
    24f0:	4b5a      	ldr	r3, [pc, #360]	; (265c <getDataString()+0x390>)
    24f2:	6819      	ldr	r1, [r3, #0]
    24f4:	a84c      	add	r0, sp, #304	; 0x130
    24f6:	f00a fb2a 	bl	cb4e <String::String(int, unsigned char)>
    24fa:	a94c      	add	r1, sp, #304	; 0x130
    24fc:	4630      	mov	r0, r6
    24fe:	f00a fb85 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2502:	4621      	mov	r1, r4
    2504:	f00a fb8a 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2508:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    250a:	220a      	movs	r2, #10
    250c:	4b54      	ldr	r3, [pc, #336]	; (2660 <getDataString()+0x394>)
    250e:	6819      	ldr	r1, [r3, #0]
    2510:	a850      	add	r0, sp, #320	; 0x140
    2512:	f00a fb1c 	bl	cb4e <String::String(int, unsigned char)>
    2516:	a950      	add	r1, sp, #320	; 0x140
    2518:	4630      	mov	r0, r6
    251a:	f00a fb77 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    251e:	4621      	mov	r1, r4
    2520:	f00a fb7c 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2524:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    2526:	220a      	movs	r2, #10
    2528:	4b4e      	ldr	r3, [pc, #312]	; (2664 <getDataString()+0x398>)
    252a:	6819      	ldr	r1, [r3, #0]
    252c:	a854      	add	r0, sp, #336	; 0x150
    252e:	f00a fb0e 	bl	cb4e <String::String(int, unsigned char)>
    2532:	a954      	add	r1, sp, #336	; 0x150
    2534:	4630      	mov	r0, r6
    2536:	f00a fb69 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    253a:	4621      	mov	r1, r4
    253c:	f00a fb6e 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2540:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    2542:	220a      	movs	r2, #10
    2544:	4b48      	ldr	r3, [pc, #288]	; (2668 <getDataString()+0x39c>)
    2546:	6819      	ldr	r1, [r3, #0]
    2548:	a858      	add	r0, sp, #352	; 0x160
    254a:	f00a fb00 	bl	cb4e <String::String(int, unsigned char)>
    254e:	a958      	add	r1, sp, #352	; 0x160
    2550:	4630      	mov	r0, r6
    2552:	f00a fb5b 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2556:	4621      	mov	r1, r4
    2558:	f00a fb60 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    255c:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    255e:	220a      	movs	r2, #10
    2560:	4b42      	ldr	r3, [pc, #264]	; (266c <getDataString()+0x3a0>)
    2562:	6819      	ldr	r1, [r3, #0]
    2564:	a85c      	add	r0, sp, #368	; 0x170
    2566:	f00a faf2 	bl	cb4e <String::String(int, unsigned char)>
    256a:	a95c      	add	r1, sp, #368	; 0x170
    256c:	4630      	mov	r0, r6
    256e:	f00a fb4d 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2572:	4621      	mov	r1, r4
    2574:	f00a fb52 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2578:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    257a:	220a      	movs	r2, #10
    257c:	4b3c      	ldr	r3, [pc, #240]	; (2670 <getDataString()+0x3a4>)
    257e:	6819      	ldr	r1, [r3, #0]
    2580:	a860      	add	r0, sp, #384	; 0x180
    2582:	f00a fae4 	bl	cb4e <String::String(int, unsigned char)>
    2586:	a960      	add	r1, sp, #384	; 0x180
    2588:	4630      	mov	r0, r6
    258a:	f00a fb3f 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    258e:	4621      	mov	r1, r4
    2590:	f00a fb44 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2594:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    2596:	220a      	movs	r2, #10
    2598:	4b36      	ldr	r3, [pc, #216]	; (2674 <getDataString()+0x3a8>)
    259a:	6819      	ldr	r1, [r3, #0]
    259c:	a864      	add	r0, sp, #400	; 0x190
    259e:	f00a fad6 	bl	cb4e <String::String(int, unsigned char)>
    25a2:	a964      	add	r1, sp, #400	; 0x190
    25a4:	4630      	mov	r0, r6
    25a6:	f00a fb31 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    25aa:	4621      	mov	r1, r4
    25ac:	f00a fb36 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    25b0:	4606      	mov	r6, r0
									+ String(GyroX)
    25b2:	2102      	movs	r1, #2
    25b4:	4b30      	ldr	r3, [pc, #192]	; (2678 <getDataString()+0x3ac>)
    25b6:	ed93 0a00 	vldr	s0, [r3]
    25ba:	a868      	add	r0, sp, #416	; 0x1a0
    25bc:	f00a fada 	bl	cb74 <String::String(float, unsigned char)>
    25c0:	a968      	add	r1, sp, #416	; 0x1a0
    25c2:	4630      	mov	r0, r6
    25c4:	f00a fb22 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    25c8:	4621      	mov	r1, r4
    25ca:	f00a fb27 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    25ce:	4606      	mov	r6, r0
									+ String(GyroY)
    25d0:	2102      	movs	r1, #2
    25d2:	4b2a      	ldr	r3, [pc, #168]	; (267c <getDataString()+0x3b0>)
    25d4:	ed93 0a00 	vldr	s0, [r3]
    25d8:	a86c      	add	r0, sp, #432	; 0x1b0
    25da:	f00a facb 	bl	cb74 <String::String(float, unsigned char)>
    25de:	a96c      	add	r1, sp, #432	; 0x1b0
    25e0:	4630      	mov	r0, r6
    25e2:	f00a fb13 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    25e6:	4621      	mov	r1, r4
    25e8:	f00a fb18 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    25ec:	4606      	mov	r6, r0
									+ String(GyroZ)
    25ee:	2102      	movs	r1, #2
    25f0:	4b23      	ldr	r3, [pc, #140]	; (2680 <getDataString()+0x3b4>)
    25f2:	ed93 0a00 	vldr	s0, [r3]
    25f6:	a870      	add	r0, sp, #448	; 0x1c0
    25f8:	f00a fabc 	bl	cb74 <String::String(float, unsigned char)>
    25fc:	a970      	add	r1, sp, #448	; 0x1c0
    25fe:	4630      	mov	r0, r6
    2600:	f00a fb04 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2604:	4621      	mov	r1, r4
    2606:	f00a fb09 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    260a:	4606      	mov	r6, r0
									+ String(AccX)
    260c:	2102      	movs	r1, #2
    260e:	e039      	b.n	2684 <getDataString()+0x3b8>
    2610:	20005090 	.word	0x20005090
    2614:	20001d24 	.word	0x20001d24
    2618:	20005064 	.word	0x20005064
    261c:	200052c8 	.word	0x200052c8
    2620:	20004ec4 	.word	0x20004ec4
    2624:	20004ed8 	.word	0x20004ed8
    2628:	20005098 	.word	0x20005098
    262c:	2000506c 	.word	0x2000506c
    2630:	200052d0 	.word	0x200052d0
    2634:	200052b0 	.word	0x200052b0
    2638:	20005094 	.word	0x20005094
    263c:	20005068 	.word	0x20005068
    2640:	200052cc 	.word	0x200052cc
    2644:	20004f14 	.word	0x20004f14
    2648:	20004f20 	.word	0x20004f20
    264c:	20004f2c 	.word	0x20004f2c
    2650:	20004f38 	.word	0x20004f38
    2654:	20004f44 	.word	0x20004f44
    2658:	20004f48 	.word	0x20004f48
    265c:	20004f4c 	.word	0x20004f4c
    2660:	20004f50 	.word	0x20004f50
    2664:	20004f54 	.word	0x20004f54
    2668:	20004f04 	.word	0x20004f04
    266c:	20004f08 	.word	0x20004f08
    2670:	20004f0c 	.word	0x20004f0c
    2674:	20004f10 	.word	0x20004f10
    2678:	200040a0 	.word	0x200040a0
    267c:	200040a8 	.word	0x200040a8
    2680:	200040b0 	.word	0x200040b0
    2684:	4bcc      	ldr	r3, [pc, #816]	; (29b8 <getDataString()+0x6ec>)
    2686:	ed93 0a00 	vldr	s0, [r3]
    268a:	a874      	add	r0, sp, #464	; 0x1d0
    268c:	f00a fa72 	bl	cb74 <String::String(float, unsigned char)>
    2690:	a974      	add	r1, sp, #464	; 0x1d0
    2692:	4630      	mov	r0, r6
    2694:	f00a faba 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2698:	4621      	mov	r1, r4
    269a:	f00a fabf 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    269e:	4606      	mov	r6, r0
									+ String(AccY)
    26a0:	2102      	movs	r1, #2
    26a2:	4bc6      	ldr	r3, [pc, #792]	; (29bc <getDataString()+0x6f0>)
    26a4:	ed93 0a00 	vldr	s0, [r3]
    26a8:	a878      	add	r0, sp, #480	; 0x1e0
    26aa:	f00a fa63 	bl	cb74 <String::String(float, unsigned char)>
    26ae:	a978      	add	r1, sp, #480	; 0x1e0
    26b0:	4630      	mov	r0, r6
    26b2:	f00a faab 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    26b6:	4621      	mov	r1, r4
    26b8:	f00a fab0 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    26bc:	4606      	mov	r6, r0
									+ String(AccZ)
    26be:	2102      	movs	r1, #2
    26c0:	4bbf      	ldr	r3, [pc, #764]	; (29c0 <getDataString()+0x6f4>)
    26c2:	ed93 0a00 	vldr	s0, [r3]
    26c6:	a87c      	add	r0, sp, #496	; 0x1f0
    26c8:	f00a fa54 	bl	cb74 <String::String(float, unsigned char)>
    26cc:	a97c      	add	r1, sp, #496	; 0x1f0
    26ce:	4630      	mov	r0, r6
    26d0:	f00a fa9c 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    26d4:	4621      	mov	r1, r4
    26d6:	f00a faa1 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    26da:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    26dc:	2102      	movs	r1, #2
    26de:	4bb9      	ldr	r3, [pc, #740]	; (29c4 <getDataString()+0x6f8>)
    26e0:	ed93 0a00 	vldr	s0, [r3]
    26e4:	a880      	add	r0, sp, #512	; 0x200
    26e6:	f00a fa45 	bl	cb74 <String::String(float, unsigned char)>
    26ea:	a980      	add	r1, sp, #512	; 0x200
    26ec:	4630      	mov	r0, r6
    26ee:	f00a fa8d 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    26f2:	4621      	mov	r1, r4
    26f4:	f00a fa92 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    26f8:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    26fa:	2102      	movs	r1, #2
    26fc:	4bb2      	ldr	r3, [pc, #712]	; (29c8 <getDataString()+0x6fc>)
    26fe:	ed93 0a00 	vldr	s0, [r3]
    2702:	a884      	add	r0, sp, #528	; 0x210
    2704:	f00a fa36 	bl	cb74 <String::String(float, unsigned char)>
    2708:	a984      	add	r1, sp, #528	; 0x210
    270a:	4630      	mov	r0, r6
    270c:	f00a fa7e 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2710:	4621      	mov	r1, r4
    2712:	f00a fa83 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2716:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    2718:	2102      	movs	r1, #2
    271a:	4bac      	ldr	r3, [pc, #688]	; (29cc <getDataString()+0x700>)
    271c:	ed93 0a00 	vldr	s0, [r3]
    2720:	a888      	add	r0, sp, #544	; 0x220
    2722:	f00a fa27 	bl	cb74 <String::String(float, unsigned char)>
    2726:	a988      	add	r1, sp, #544	; 0x220
    2728:	4630      	mov	r0, r6
    272a:	f00a fa6f 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    272e:	4621      	mov	r1, r4
    2730:	f00a fa74 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2734:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    2736:	2102      	movs	r1, #2
    2738:	4ba5      	ldr	r3, [pc, #660]	; (29d0 <getDataString()+0x704>)
    273a:	ed93 0a00 	vldr	s0, [r3]
    273e:	a88c      	add	r0, sp, #560	; 0x230
    2740:	f00a fa18 	bl	cb74 <String::String(float, unsigned char)>
    2744:	a98c      	add	r1, sp, #560	; 0x230
    2746:	4630      	mov	r0, r6
    2748:	f00a fa60 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    274c:	4621      	mov	r1, r4
    274e:	f00a fa65 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2752:	4606      	mov	r6, r0
									+ String(Kp_roll_angle*pScaleRoll)
    2754:	4b9f      	ldr	r3, [pc, #636]	; (29d4 <getDataString()+0x708>)
    2756:	ed93 0a00 	vldr	s0, [r3]
    275a:	4b9f      	ldr	r3, [pc, #636]	; (29d8 <getDataString()+0x70c>)
    275c:	edd3 7a00 	vldr	s15, [r3]
    2760:	2102      	movs	r1, #2
    2762:	ee20 0a27 	vmul.f32	s0, s0, s15
    2766:	a890      	add	r0, sp, #576	; 0x240
    2768:	f00a fa04 	bl	cb74 <String::String(float, unsigned char)>
    276c:	a990      	add	r1, sp, #576	; 0x240
    276e:	4630      	mov	r0, r6
    2770:	f00a fa4c 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2774:	4621      	mov	r1, r4
    2776:	f00a fa51 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    277a:	4606      	mov	r6, r0
									+ String(Ki_roll_angle*iScaleRoll)
    277c:	4b97      	ldr	r3, [pc, #604]	; (29dc <getDataString()+0x710>)
    277e:	ed93 0a00 	vldr	s0, [r3]
    2782:	4b97      	ldr	r3, [pc, #604]	; (29e0 <getDataString()+0x714>)
    2784:	edd3 7a00 	vldr	s15, [r3]
    2788:	2102      	movs	r1, #2
    278a:	ee20 0a27 	vmul.f32	s0, s0, s15
    278e:	a894      	add	r0, sp, #592	; 0x250
    2790:	f00a f9f0 	bl	cb74 <String::String(float, unsigned char)>
    2794:	a994      	add	r1, sp, #592	; 0x250
    2796:	4630      	mov	r0, r6
    2798:	f00a fa38 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    279c:	4621      	mov	r1, r4
    279e:	f00a fa3d 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    27a2:	4606      	mov	r6, r0
									+ String(Kd_roll_angle*dScaleRoll)	
    27a4:	4b8f      	ldr	r3, [pc, #572]	; (29e4 <getDataString()+0x718>)
    27a6:	ed93 0a00 	vldr	s0, [r3]
    27aa:	4b8f      	ldr	r3, [pc, #572]	; (29e8 <getDataString()+0x71c>)
    27ac:	edd3 7a00 	vldr	s15, [r3]
    27b0:	2102      	movs	r1, #2
    27b2:	ee20 0a27 	vmul.f32	s0, s0, s15
    27b6:	a898      	add	r0, sp, #608	; 0x260
    27b8:	f00a f9dc 	bl	cb74 <String::String(float, unsigned char)>
    27bc:	a998      	add	r1, sp, #608	; 0x260
    27be:	4630      	mov	r0, r6
    27c0:	f00a fa24 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    27c4:	4621      	mov	r1, r4
    27c6:	f00a fa29 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    27ca:	4606      	mov	r6, r0
									+ String(Kp_pitch_angle*pScalePitch)
    27cc:	4b87      	ldr	r3, [pc, #540]	; (29ec <getDataString()+0x720>)
    27ce:	ed93 0a00 	vldr	s0, [r3]
    27d2:	4b87      	ldr	r3, [pc, #540]	; (29f0 <getDataString()+0x724>)
    27d4:	edd3 7a00 	vldr	s15, [r3]
    27d8:	2102      	movs	r1, #2
    27da:	ee20 0a27 	vmul.f32	s0, s0, s15
    27de:	a89c      	add	r0, sp, #624	; 0x270
    27e0:	f00a f9c8 	bl	cb74 <String::String(float, unsigned char)>
    27e4:	a99c      	add	r1, sp, #624	; 0x270
    27e6:	4630      	mov	r0, r6
    27e8:	f00a fa10 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    27ec:	4621      	mov	r1, r4
    27ee:	f00a fa15 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    27f2:	4606      	mov	r6, r0
									+ String(Ki_pitch_angle*iScalePitch)
    27f4:	4b7f      	ldr	r3, [pc, #508]	; (29f4 <getDataString()+0x728>)
    27f6:	ed93 0a00 	vldr	s0, [r3]
    27fa:	4b7f      	ldr	r3, [pc, #508]	; (29f8 <getDataString()+0x72c>)
    27fc:	edd3 7a00 	vldr	s15, [r3]
    2800:	2102      	movs	r1, #2
    2802:	ee20 0a27 	vmul.f32	s0, s0, s15
    2806:	a8a0      	add	r0, sp, #640	; 0x280
    2808:	f00a f9b4 	bl	cb74 <String::String(float, unsigned char)>
    280c:	a9a0      	add	r1, sp, #640	; 0x280
    280e:	4630      	mov	r0, r6
    2810:	f00a f9fc 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2814:	4621      	mov	r1, r4
    2816:	f00a fa01 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    281a:	4606      	mov	r6, r0
									+ String(Kd_pitch_angle*dScalePitch)	
    281c:	4b77      	ldr	r3, [pc, #476]	; (29fc <getDataString()+0x730>)
    281e:	ed93 0a00 	vldr	s0, [r3]
    2822:	4b77      	ldr	r3, [pc, #476]	; (2a00 <getDataString()+0x734>)
    2824:	edd3 7a00 	vldr	s15, [r3]
    2828:	2102      	movs	r1, #2
    282a:	ee20 0a27 	vmul.f32	s0, s0, s15
    282e:	a8a4      	add	r0, sp, #656	; 0x290
    2830:	f00a f9a0 	bl	cb74 <String::String(float, unsigned char)>
    2834:	a9a4      	add	r1, sp, #656	; 0x290
    2836:	4630      	mov	r0, r6
    2838:	f00a f9e8 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    283c:	4621      	mov	r1, r4
    283e:	f00a f9ed 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2842:	4606      	mov	r6, r0
									+ String(Kp_yaw*pScaleYaw)
    2844:	4b6f      	ldr	r3, [pc, #444]	; (2a04 <getDataString()+0x738>)
    2846:	ed93 0a00 	vldr	s0, [r3]
    284a:	4b6f      	ldr	r3, [pc, #444]	; (2a08 <getDataString()+0x73c>)
    284c:	edd3 7a00 	vldr	s15, [r3]
    2850:	2102      	movs	r1, #2
    2852:	ee20 0a27 	vmul.f32	s0, s0, s15
    2856:	a8a8      	add	r0, sp, #672	; 0x2a0
    2858:	f00a f98c 	bl	cb74 <String::String(float, unsigned char)>
    285c:	a9a8      	add	r1, sp, #672	; 0x2a0
    285e:	4630      	mov	r0, r6
    2860:	f00a f9d4 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2864:	4621      	mov	r1, r4
    2866:	f00a f9d9 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    286a:	4606      	mov	r6, r0
									+ String(Ki_yaw*iScaleYaw)
    286c:	4b67      	ldr	r3, [pc, #412]	; (2a0c <getDataString()+0x740>)
    286e:	ed93 0a00 	vldr	s0, [r3]
    2872:	4b67      	ldr	r3, [pc, #412]	; (2a10 <getDataString()+0x744>)
    2874:	edd3 7a00 	vldr	s15, [r3]
    2878:	2102      	movs	r1, #2
    287a:	ee20 0a27 	vmul.f32	s0, s0, s15
    287e:	a8ac      	add	r0, sp, #688	; 0x2b0
    2880:	f00a f978 	bl	cb74 <String::String(float, unsigned char)>
    2884:	a9ac      	add	r1, sp, #688	; 0x2b0
    2886:	4630      	mov	r0, r6
    2888:	f00a f9c0 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    288c:	4621      	mov	r1, r4
    288e:	f00a f9c5 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    2892:	4606      	mov	r6, r0
									+ String(Kd_yaw*dScaleYaw)	
    2894:	4b5f      	ldr	r3, [pc, #380]	; (2a14 <getDataString()+0x748>)
    2896:	ed93 0a00 	vldr	s0, [r3]
    289a:	4b5f      	ldr	r3, [pc, #380]	; (2a18 <getDataString()+0x74c>)
    289c:	edd3 7a00 	vldr	s15, [r3]
    28a0:	2102      	movs	r1, #2
    28a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    28a6:	a8b0      	add	r0, sp, #704	; 0x2c0
    28a8:	f00a f964 	bl	cb74 <String::String(float, unsigned char)>
    28ac:	a9b0      	add	r1, sp, #704	; 0x2c0
    28ae:	4630      	mov	r0, r6
    28b0:	f00a f9ac 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    28b4:	4621      	mov	r1, r4
    28b6:	f00a f9b1 	bl	cc1c <operator+(StringSumHelper const&, char const*)>
    28ba:	4604      	mov	r4, r0
									+ String(failureFlag);	
    28bc:	220a      	movs	r2, #10
    28be:	4b57      	ldr	r3, [pc, #348]	; (2a1c <getDataString()+0x750>)
    28c0:	7819      	ldrb	r1, [r3, #0]
    28c2:	a8b4      	add	r0, sp, #720	; 0x2d0
    28c4:	f00a f943 	bl	cb4e <String::String(int, unsigned char)>
    28c8:	a9b4      	add	r1, sp, #720	; 0x2d0
    28ca:	4620      	mov	r0, r4
    28cc:	f00a f99e 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
    28d0:	4601      	mov	r1, r0
    28d2:	4628      	mov	r0, r5
    28d4:	f00a f90d 	bl	caf2 <String::operator=(String const&)>
    28d8:	a8b4      	add	r0, sp, #720	; 0x2d0
    28da:	f00a f899 	bl	ca10 <String::~String()>
									+ String(Kd_yaw*dScaleYaw)	
    28de:	a8b0      	add	r0, sp, #704	; 0x2c0
    28e0:	f00a f896 	bl	ca10 <String::~String()>
									+ String(Ki_yaw*iScaleYaw)
    28e4:	a8ac      	add	r0, sp, #688	; 0x2b0
    28e6:	f00a f893 	bl	ca10 <String::~String()>
									+ String(Kp_yaw*pScaleYaw)
    28ea:	a8a8      	add	r0, sp, #672	; 0x2a0
    28ec:	f00a f890 	bl	ca10 <String::~String()>
									+ String(Kd_pitch_angle*dScalePitch)	
    28f0:	a8a4      	add	r0, sp, #656	; 0x290
    28f2:	f00a f88d 	bl	ca10 <String::~String()>
									+ String(Ki_pitch_angle*iScalePitch)
    28f6:	a8a0      	add	r0, sp, #640	; 0x280
    28f8:	f00a f88a 	bl	ca10 <String::~String()>
									+ String(Kp_pitch_angle*pScalePitch)
    28fc:	a89c      	add	r0, sp, #624	; 0x270
    28fe:	f00a f887 	bl	ca10 <String::~String()>
									+ String(Kd_roll_angle*dScaleRoll)	
    2902:	a898      	add	r0, sp, #608	; 0x260
    2904:	f00a f884 	bl	ca10 <String::~String()>
									+ String(Ki_roll_angle*iScaleRoll)
    2908:	a894      	add	r0, sp, #592	; 0x250
    290a:	f00a f881 	bl	ca10 <String::~String()>
									+ String(Kp_roll_angle*pScaleRoll)
    290e:	a890      	add	r0, sp, #576	; 0x240
    2910:	f00a f87e 	bl	ca10 <String::~String()>
									+ String(s4_command_scaled)
    2914:	a88c      	add	r0, sp, #560	; 0x230
    2916:	f00a f87b 	bl	ca10 <String::~String()>
									+ String(s3_command_scaled)
    291a:	a888      	add	r0, sp, #544	; 0x220
    291c:	f00a f878 	bl	ca10 <String::~String()>
									+ String(s2_command_scaled)
    2920:	a884      	add	r0, sp, #528	; 0x210
    2922:	f00a f875 	bl	ca10 <String::~String()>
									+ String(s1_command_scaled)
    2926:	a880      	add	r0, sp, #512	; 0x200
    2928:	f00a f872 	bl	ca10 <String::~String()>
									+ String(AccZ)
    292c:	a87c      	add	r0, sp, #496	; 0x1f0
    292e:	f00a f86f 	bl	ca10 <String::~String()>
									+ String(AccY)
    2932:	a878      	add	r0, sp, #480	; 0x1e0
    2934:	f00a f86c 	bl	ca10 <String::~String()>
									+ String(AccX)
    2938:	a874      	add	r0, sp, #464	; 0x1d0
    293a:	f00a f869 	bl	ca10 <String::~String()>
									+ String(GyroZ)
    293e:	a870      	add	r0, sp, #448	; 0x1c0
    2940:	f00a f866 	bl	ca10 <String::~String()>
									+ String(GyroY)
    2944:	a86c      	add	r0, sp, #432	; 0x1b0
    2946:	f00a f863 	bl	ca10 <String::~String()>
									+ String(GyroX)
    294a:	a868      	add	r0, sp, #416	; 0x1a0
    294c:	f00a f860 	bl	ca10 <String::~String()>
									+ String(channel_13_pwm)
    2950:	a864      	add	r0, sp, #400	; 0x190
    2952:	f00a f85d 	bl	ca10 <String::~String()>
									+ String(channel_12_pwm)
    2956:	a860      	add	r0, sp, #384	; 0x180
    2958:	f00a f85a 	bl	ca10 <String::~String()>
									+ String(channel_11_pwm)
    295c:	a85c      	add	r0, sp, #368	; 0x170
    295e:	f00a f857 	bl	ca10 <String::~String()>
									+ String(channel_10_pwm)
    2962:	a858      	add	r0, sp, #352	; 0x160
    2964:	f00a f854 	bl	ca10 <String::~String()>
									+ String(channel_9_pwm)
    2968:	a854      	add	r0, sp, #336	; 0x150
    296a:	f00a f851 	bl	ca10 <String::~String()>
									+ String(channel_8_pwm)
    296e:	a850      	add	r0, sp, #320	; 0x140
    2970:	f00a f84e 	bl	ca10 <String::~String()>
									+ String(channel_7_pwm)
    2974:	a84c      	add	r0, sp, #304	; 0x130
    2976:	f00a f84b 	bl	ca10 <String::~String()>
									+ String(channel_6_pwm)
    297a:	a848      	add	r0, sp, #288	; 0x120
    297c:	f00a f848 	bl	ca10 <String::~String()>
									+ String(channel_5_pwm)
    2980:	a844      	add	r0, sp, #272	; 0x110
    2982:	f00a f845 	bl	ca10 <String::~String()>
									+ String(channel_4_pwm)
    2986:	a840      	add	r0, sp, #256	; 0x100
    2988:	f00a f842 	bl	ca10 <String::~String()>
									+ String(channel_3_pwm)
    298c:	a83c      	add	r0, sp, #240	; 0xf0
    298e:	f00a f83f 	bl	ca10 <String::~String()>
									+ String(channel_2_pwm)
    2992:	a838      	add	r0, sp, #224	; 0xe0
    2994:	f00a f83c 	bl	ca10 <String::~String()>
									+ String(channel_1_pwm)
    2998:	a834      	add	r0, sp, #208	; 0xd0
    299a:	f00a f839 	bl	ca10 <String::~String()>
									+ String(yaw_PID)
    299e:	a830      	add	r0, sp, #192	; 0xc0
    29a0:	f00a f836 	bl	ca10 <String::~String()>
									+ String(pitch_PID)
    29a4:	a82c      	add	r0, sp, #176	; 0xb0
    29a6:	f00a f833 	bl	ca10 <String::~String()>
									+ String(roll_PID)
    29aa:	a828      	add	r0, sp, #160	; 0xa0
    29ac:	f00a f830 	bl	ca10 <String::~String()>
									+ String(thro_des)
    29b0:	a824      	add	r0, sp, #144	; 0x90
    29b2:	f00a f82d 	bl	ca10 <String::~String()>
    29b6:	e033      	b.n	2a20 <getDataString()+0x754>
    29b8:	20004088 	.word	0x20004088
    29bc:	20004090 	.word	0x20004090
    29c0:	20004098 	.word	0x20004098
    29c4:	200050d4 	.word	0x200050d4
    29c8:	200050dc 	.word	0x200050dc
    29cc:	200050e4 	.word	0x200050e4
    29d0:	200050ec 	.word	0x200050ec
    29d4:	2000315c 	.word	0x2000315c
    29d8:	20003890 	.word	0x20003890
    29dc:	20003150 	.word	0x20003150
    29e0:	20003820 	.word	0x20003820
    29e4:	20003144 	.word	0x20003144
    29e8:	200037e4 	.word	0x200037e4
    29ec:	20003158 	.word	0x20003158
    29f0:	2000388c 	.word	0x2000388c
    29f4:	2000314c 	.word	0x2000314c
    29f8:	2000381c 	.word	0x2000381c
    29fc:	20003140 	.word	0x20003140
    2a00:	200037e0 	.word	0x200037e0
    2a04:	20003160 	.word	0x20003160
    2a08:	20003894 	.word	0x20003894
    2a0c:	20003154 	.word	0x20003154
    2a10:	20003824 	.word	0x20003824
    2a14:	20003148 	.word	0x20003148
    2a18:	200037e8 	.word	0x200037e8
    2a1c:	200052ed 	.word	0x200052ed
									+ String(yaw_des)
    2a20:	a820      	add	r0, sp, #128	; 0x80
    2a22:	f009 fff5 	bl	ca10 <String::~String()>
									+ String(pitch_des)
    2a26:	a81c      	add	r0, sp, #112	; 0x70
    2a28:	f009 fff2 	bl	ca10 <String::~String()>
									+ String(roll_des)
    2a2c:	a818      	add	r0, sp, #96	; 0x60
    2a2e:	f009 ffef 	bl	ca10 <String::~String()>
									+ String(beta)
    2a32:	a814      	add	r0, sp, #80	; 0x50
    2a34:	f009 ffec 	bl	ca10 <String::~String()>
									+ String(alpha)
    2a38:	a810      	add	r0, sp, #64	; 0x40
    2a3a:	f009 ffe9 	bl	ca10 <String::~String()>
									+ String(yaw_IMU)
    2a3e:	a80c      	add	r0, sp, #48	; 0x30
    2a40:	f009 ffe6 	bl	ca10 <String::~String()>
									+ String(pitch_IMU)
    2a44:	a808      	add	r0, sp, #32
    2a46:	f009 ffe3 	bl	ca10 <String::~String()>
class StringSumHelper : public String
    2a4a:	4668      	mov	r0, sp
    2a4c:	f009 ffe0 	bl	ca10 <String::~String()>
	csvDataString = String(roll_IMU)
    2a50:	a804      	add	r0, sp, #16
    2a52:	f009 ffdd 	bl	ca10 <String::~String()>
	return csvDataString;
}
    2a56:	4628      	mov	r0, r5
    2a58:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    2a5c:	bd70      	pop	{r4, r5, r6, pc}
    2a5e:	bf00      	nop

00002a60 <displayRoll()>:

void displayRoll() {
	if (current_time - print_counter > 10000) {
    2a60:	4b15      	ldr	r3, [pc, #84]	; (2ab8 <displayRoll()+0x58>)
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	4a15      	ldr	r2, [pc, #84]	; (2abc <displayRoll()+0x5c>)
    2a66:	6812      	ldr	r2, [r2, #0]
    2a68:	1a9b      	subs	r3, r3, r2
    2a6a:	f242 7210 	movw	r2, #10000	; 0x2710
    2a6e:	4293      	cmp	r3, r2
    2a70:	d800      	bhi.n	2a74 <displayRoll()+0x14>
    2a72:	4770      	bx	lr
void displayRoll() {
    2a74:	b510      	push	{r4, lr}
		print_counter = micros();
    2a76:	f00a fa95 	bl	cfa4 <micros>
    2a7a:	4b10      	ldr	r3, [pc, #64]	; (2abc <displayRoll()+0x5c>)
    2a7c:	6018      	str	r0, [r3, #0]
		Serial.print(roll_des);
    2a7e:	4b10      	ldr	r3, [pc, #64]	; (2ac0 <displayRoll()+0x60>)
    2a80:	ed93 0a00 	vldr	s0, [r3]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2a84:	4c0f      	ldr	r4, [pc, #60]	; (2ac4 <displayRoll()+0x64>)
    2a86:	2102      	movs	r1, #2
    2a88:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2a8c:	4620      	mov	r0, r4
    2a8e:	f009 fdbb 	bl	c608 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2a92:	6823      	ldr	r3, [r4, #0]
    2a94:	685b      	ldr	r3, [r3, #4]
    2a96:	2201      	movs	r2, #1
    2a98:	490b      	ldr	r1, [pc, #44]	; (2ac8 <displayRoll()+0x68>)
    2a9a:	4620      	mov	r0, r4
    2a9c:	4798      	blx	r3
		Serial.print(" ");
		Serial.println(roll_IMU);
    2a9e:	4b0b      	ldr	r3, [pc, #44]	; (2acc <displayRoll()+0x6c>)
    2aa0:	ed93 0a00 	vldr	s0, [r3]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2aa4:	2102      	movs	r1, #2
    2aa6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2aaa:	4620      	mov	r0, r4
    2aac:	f009 fdac 	bl	c608 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    2ab0:	4620      	mov	r0, r4
    2ab2:	f009 fd48 	bl	c546 <Print::println()>
	}
}
    2ab6:	bd10      	pop	{r4, pc}
    2ab8:	20004f58 	.word	0x20004f58
    2abc:	20005078 	.word	0x20005078
    2ac0:	20005098 	.word	0x20005098
    2ac4:	20003170 	.word	0x20003170
    2ac8:	20002c14 	.word	0x20002c14
    2acc:	20005090 	.word	0x20005090

00002ad0 <getPScale()>:
	}
}

void getPScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_10_pwm - 1500.0f)/500.0f * 0.8f;
    2ad0:	4b0d      	ldr	r3, [pc, #52]	; (2b08 <getPScale()+0x38>)
    2ad2:	ed93 7a00 	vldr	s14, [r3]
    2ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2ada:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2b0c <getPScale()+0x3c>
    2ade:	ee37 7a67 	vsub.f32	s14, s14, s15
    2ae2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2b10 <getPScale()+0x40>
    2ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2aea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2b14 <getPScale()+0x44>
    2aee:	ee67 7a87 	vmul.f32	s15, s15, s14
    2af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2af6:	ee77 7a87 	vadd.f32	s15, s15, s14
	pScaleRoll = scaleVal;
    2afa:	4b07      	ldr	r3, [pc, #28]	; (2b18 <getPScale()+0x48>)
    2afc:	edc3 7a00 	vstr	s15, [r3]
	pScalePitch = scaleVal;
    2b00:	4b06      	ldr	r3, [pc, #24]	; (2b1c <getPScale()+0x4c>)
    2b02:	edc3 7a00 	vstr	s15, [r3]
}
    2b06:	4770      	bx	lr
    2b08:	20004f04 	.word	0x20004f04
    2b0c:	44bb8000 	.word	0x44bb8000
    2b10:	43fa0000 	.word	0x43fa0000
    2b14:	3f4ccccd 	.word	0x3f4ccccd
    2b18:	20003890 	.word	0x20003890
    2b1c:	2000388c 	.word	0x2000388c

00002b20 <getDScale()>:

void getDScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_12_pwm - 1500.0f)/500.0f * 0.8f;
    2b20:	4b0d      	ldr	r3, [pc, #52]	; (2b58 <getDScale()+0x38>)
    2b22:	ed93 7a00 	vldr	s14, [r3]
    2b26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2b2a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2b5c <getDScale()+0x3c>
    2b2e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2b32:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2b60 <getDScale()+0x40>
    2b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2b3a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2b64 <getDScale()+0x44>
    2b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2b46:	ee77 7a87 	vadd.f32	s15, s15, s14
	dScaleRoll = scaleVal;
    2b4a:	4b07      	ldr	r3, [pc, #28]	; (2b68 <getDScale()+0x48>)
    2b4c:	edc3 7a00 	vstr	s15, [r3]
	dScalePitch = scaleVal;
    2b50:	4b06      	ldr	r3, [pc, #24]	; (2b6c <getDScale()+0x4c>)
    2b52:	edc3 7a00 	vstr	s15, [r3]
}
    2b56:	4770      	bx	lr
    2b58:	20004f0c 	.word	0x20004f0c
    2b5c:	44bb8000 	.word	0x44bb8000
    2b60:	43fa0000 	.word	0x43fa0000
    2b64:	3f4ccccd 	.word	0x3f4ccccd
    2b68:	200037e4 	.word	0x200037e4
    2b6c:	200037e0 	.word	0x200037e0

00002b70 <getIScale()>:

void getIScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_11_pwm - 1500.0f)/500.0f * 0.8f;
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <getIScale()+0x38>)
    2b72:	ed93 7a00 	vldr	s14, [r3]
    2b76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2b7a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2bac <getIScale()+0x3c>
    2b7e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2b82:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2bb0 <getIScale()+0x40>
    2b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2b8a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2bb4 <getIScale()+0x44>
    2b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2b96:	ee77 7a87 	vadd.f32	s15, s15, s14
	iScaleRoll = scaleVal;
    2b9a:	4b07      	ldr	r3, [pc, #28]	; (2bb8 <getIScale()+0x48>)
    2b9c:	edc3 7a00 	vstr	s15, [r3]
	iScalePitch = scaleVal;
    2ba0:	4b06      	ldr	r3, [pc, #24]	; (2bbc <getIScale()+0x4c>)
    2ba2:	edc3 7a00 	vstr	s15, [r3]
}
    2ba6:	4770      	bx	lr
    2ba8:	20004f08 	.word	0x20004f08
    2bac:	44bb8000 	.word	0x44bb8000
    2bb0:	43fa0000 	.word	0x43fa0000
    2bb4:	3f4ccccd 	.word	0x3f4ccccd
    2bb8:	20003820 	.word	0x20003820
    2bbc:	2000381c 	.word	0x2000381c

00002bc0 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    2bc0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    2bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bc8:	d406      	bmi.n	2bd8 <invSqrt(float)+0x18>
    2bca:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    2bce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2bd2:	ee80 0a27 	vdiv.f32	s0, s0, s15
    2bd6:	4770      	bx	lr
float invSqrt(float x) {
    2bd8:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    2bda:	f00c f9f9 	bl	efd0 <sqrtf>
    2bde:	eef0 7a40 	vmov.f32	s15, s0
}
    2be2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2be6:	ee80 0a27 	vdiv.f32	s0, s0, s15
    2bea:	bd08      	pop	{r3, pc}
    2bec:	0000      	movs	r0, r0
	...

00002bf0 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    2bf0:	b508      	push	{r3, lr}
    2bf2:	ed2d 8b0e 	vpush	{d8-d14}
    2bf6:	eeb0 ba61 	vmov.f32	s22, s3
    2bfa:	eef0 8a42 	vmov.f32	s17, s4
    2bfe:	eeb0 ea62 	vmov.f32	s28, s5
    2c02:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    2c06:	eddf 7acc 	vldr	s15, [pc, #816]	; 2f38 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    2c0a:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    2c0e:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    2c12:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    2c16:	4bc9      	ldr	r3, [pc, #804]	; (2f3c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2c18:	ed93 ca00 	vldr	s24, [r3]
    2c1c:	4bc8      	ldr	r3, [pc, #800]	; (2f40 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2c1e:	edd3 ba00 	vldr	s23, [r3]
    2c22:	4bc8      	ldr	r3, [pc, #800]	; (2f44 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2c24:	edd3 ca00 	vldr	s25, [r3]
    2c28:	ee2c aa40 	vnmul.f32	s20, s24, s0
    2c2c:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    2c30:	ee3a aa67 	vsub.f32	s20, s20, s15
    2c34:	ee6c 7a81 	vmul.f32	s15, s25, s2
    2c38:	ee3a aa67 	vsub.f32	s20, s20, s15
    2c3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2c40:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    2c44:	4bc0      	ldr	r3, [pc, #768]	; (2f48 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2c46:	edd3 da00 	vldr	s27, [r3]
    2c4a:	ee6d 9a80 	vmul.f32	s19, s27, s0
    2c4e:	ee2b 7a81 	vmul.f32	s14, s23, s2
    2c52:	ee79 9a87 	vadd.f32	s19, s19, s14
    2c56:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    2c5a:	ee79 9ac7 	vsub.f32	s19, s19, s14
    2c5e:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    2c62:	ee6d aaa0 	vmul.f32	s21, s27, s1
    2c66:	ee2c 7a01 	vmul.f32	s14, s24, s2
    2c6a:	ee7a aac7 	vsub.f32	s21, s21, s14
    2c6e:	ee2c 7a80 	vmul.f32	s14, s25, s0
    2c72:	ee7a aa87 	vadd.f32	s21, s21, s14
    2c76:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    2c7a:	ee2d 9a81 	vmul.f32	s18, s27, s2
    2c7e:	ee6c 0a20 	vmul.f32	s1, s24, s1
    2c82:	ee39 9a20 	vadd.f32	s18, s18, s1
    2c86:	ee2b 0a80 	vmul.f32	s0, s23, s0
    2c8a:	ee39 9a40 	vsub.f32	s18, s18, s0
    2c8e:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    2c92:	eeb5 2a40 	vcmp.f32	s4, #0.0
    2c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c9a:	bf14      	ite	ne
    2c9c:	2301      	movne	r3, #1
    2c9e:	2300      	moveq	r3, #0
    2ca0:	eef5 2a40 	vcmp.f32	s5, #0.0
    2ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ca8:	bf18      	it	ne
    2caa:	f043 0301 	orrne.w	r3, r3, #1
    2cae:	b92b      	cbnz	r3, 2cbc <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    2cb0:	eef5 1a40 	vcmp.f32	s3, #0.0
    2cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cb8:	f000 80b5 	beq.w	2e26 <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    2cbc:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    2cc0:	ee28 7aa8 	vmul.f32	s14, s17, s17
    2cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
    2cc8:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    2ccc:	ee37 0a80 	vadd.f32	s0, s15, s0
    2cd0:	f7ff ff76 	bl	2bc0 <invSqrt(float)>
    ax *= recipNorm;
    2cd4:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    2cd8:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    2cdc:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    2ce0:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    2ce4:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    2ce8:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    2cec:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    2cf0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    2cf4:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    2cf8:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    2cfc:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    2d00:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    2d04:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    2d08:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    2d0c:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    2d10:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    2d14:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    2d18:	ee67 eaa6 	vmul.f32	s29, s15, s13
    2d1c:	ee6b 0a05 	vmul.f32	s1, s22, s10
    2d20:	ee7e eaa0 	vadd.f32	s29, s29, s1
    2d24:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d28:	ee7e eaa7 	vadd.f32	s29, s29, s15
    2d2c:	ee66 7a24 	vmul.f32	s15, s12, s9
    2d30:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    2d34:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    2d38:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2d3c:	ee21 eaa2 	vmul.f32	s28, s3, s5
    2d40:	ee6b 0a03 	vmul.f32	s1, s22, s6
    2d44:	ee3e ea60 	vsub.f32	s28, s28, s1
    2d48:	ee6c 0a27 	vmul.f32	s1, s24, s15
    2d4c:	ee3e ea20 	vadd.f32	s28, s28, s1
    2d50:	ee66 0a02 	vmul.f32	s1, s12, s4
    2d54:	ee3e ea60 	vsub.f32	s28, s28, s1
    2d58:	ee3e ea61 	vsub.f32	s28, s28, s3
    2d5c:	ee61 0a07 	vmul.f32	s1, s2, s14
    2d60:	ee3e ea20 	vadd.f32	s28, s28, s1
    2d64:	ee21 1a26 	vmul.f32	s2, s2, s13
    2d68:	ee3e ea01 	vadd.f32	s28, s28, s2
    2d6c:	ee60 1a21 	vmul.f32	s3, s0, s3
    2d70:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    2d74:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    2d78:	ee2b 2a02 	vmul.f32	s4, s22, s4
    2d7c:	ee38 8a02 	vadd.f32	s16, s16, s4
    2d80:	ee64 2a22 	vmul.f32	s5, s8, s5
    2d84:	ee38 8a22 	vadd.f32	s16, s16, s5
    2d88:	ee26 3a03 	vmul.f32	s6, s12, s6
    2d8c:	ee38 8a43 	vsub.f32	s16, s16, s6
    2d90:	ee38 8a44 	vsub.f32	s16, s16, s8
    2d94:	ee63 7a87 	vmul.f32	s15, s7, s14
    2d98:	ee38 8a27 	vadd.f32	s16, s16, s15
    2d9c:	ee63 3aa6 	vmul.f32	s7, s7, s13
    2da0:	ee38 8a23 	vadd.f32	s16, s16, s7
    2da4:	ee20 0a04 	vmul.f32	s0, s0, s8
    2da8:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    2dac:	ee27 7a25 	vmul.f32	s14, s14, s11
    2db0:	ee27 7a2c 	vmul.f32	s14, s14, s25
    2db4:	ee2b ba24 	vmul.f32	s22, s22, s9
    2db8:	ee77 8a4b 	vsub.f32	s17, s14, s22
    2dbc:	ee66 6aa5 	vmul.f32	s13, s13, s11
    2dc0:	ee66 6aac 	vmul.f32	s13, s13, s25
    2dc4:	ee38 7aa6 	vadd.f32	s14, s17, s13
    2dc8:	ee66 8a05 	vmul.f32	s17, s12, s10
    2dcc:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    2dd0:	ee6e 7aae 	vmul.f32	s15, s29, s29
    2dd4:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    2dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
    2ddc:	ee28 7a08 	vmul.f32	s14, s16, s16
    2de0:	ee77 7a87 	vadd.f32	s15, s15, s14
    2de4:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2de8:	ee37 0a80 	vadd.f32	s0, s15, s0
    2dec:	f7ff fee8 	bl	2bc0 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    2df0:	4b56      	ldr	r3, [pc, #344]	; (2f4c <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    2df2:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    2df6:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    2dfa:	ee6e eaa7 	vmul.f32	s29, s29, s15
    2dfe:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    2e02:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    2e06:	ee2e ea27 	vmul.f32	s28, s28, s15
    2e0a:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    2e0e:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    2e12:	ee28 8a27 	vmul.f32	s16, s16, s15
    2e16:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    2e1a:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    2e1e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    2e22:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    2e26:	ee2a aa0d 	vmul.f32	s20, s20, s26
    2e2a:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    2e2e:	ee29 8a8d 	vmul.f32	s16, s19, s26
    2e32:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    2e36:	ee6a aa8d 	vmul.f32	s21, s21, s26
    2e3a:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    2e3e:	ee69 8a0d 	vmul.f32	s17, s18, s26
    2e42:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    2e46:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    2e4a:	ee28 7a08 	vmul.f32	s14, s16, s16
    2e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2e52:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    2e56:	ee77 7a87 	vadd.f32	s15, s15, s14
    2e5a:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2e5e:	ee37 0a80 	vadd.f32	s0, s15, s0
    2e62:	f7ff fead 	bl	2bc0 <invSqrt(float)>
  q0 *= recipNorm;
    2e66:	ee2a aa00 	vmul.f32	s20, s20, s0
    2e6a:	4b37      	ldr	r3, [pc, #220]	; (2f48 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2e6c:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    2e70:	ee28 8a00 	vmul.f32	s16, s16, s0
    2e74:	4b31      	ldr	r3, [pc, #196]	; (2f3c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2e76:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    2e7a:	ee6a aa80 	vmul.f32	s21, s21, s0
    2e7e:	4b30      	ldr	r3, [pc, #192]	; (2f40 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2e80:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    2e84:	ee68 8a80 	vmul.f32	s17, s17, s0
    2e88:	4b2e      	ldr	r3, [pc, #184]	; (2f44 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2e8a:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    2e8e:	ee6a baaa 	vmul.f32	s23, s21, s21
    2e92:	ee68 0a08 	vmul.f32	s1, s16, s16
    2e96:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    2e9a:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2e9e:	ee2a 0a08 	vmul.f32	s0, s20, s16
    2ea2:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    2ea6:	ee70 0aeb 	vsub.f32	s1, s1, s23
    2eaa:	ee30 0a27 	vadd.f32	s0, s0, s15
    2eae:	f00c fb9d 	bl	f5ec <atan2f>
    2eb2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2eb6:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 2f30 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    2eba:	ee20 0b09 	vmul.f64	d0, d0, d9
    2ebe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2ec2:	4b23      	ldr	r3, [pc, #140]	; (2f50 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    2ec4:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    2ec8:	ee68 7a28 	vmul.f32	s15, s16, s17
    2ecc:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    2ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    2ed4:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    2ed8:	ee27 0a80 	vmul.f32	s0, s15, s0
    2edc:	f00c fb5a 	bl	f594 <asinf>
    2ee0:	eeb1 7a40 	vneg.f32	s14, s0
    2ee4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2ee8:	ee27 7b09 	vmul.f64	d7, d7, d9
    2eec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2ef0:	4b18      	ldr	r3, [pc, #96]	; (2f54 <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    2ef2:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    2ef6:	ee3b ba6b 	vsub.f32	s22, s22, s23
    2efa:	ee68 0aa8 	vmul.f32	s1, s17, s17
    2efe:	ee28 8a2a 	vmul.f32	s16, s16, s21
    2f02:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    2f06:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2f0a:	ee38 0a00 	vadd.f32	s0, s16, s0
    2f0e:	f00c fb6d 	bl	f5ec <atan2f>
    2f12:	eeb1 0a40 	vneg.f32	s0, s0
    2f16:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2f1a:	ee20 0b09 	vmul.f64	d0, d0, d9
    2f1e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2f22:	4b0d      	ldr	r3, [pc, #52]	; (2f58 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    2f24:	ed83 0a00 	vstr	s0, [r3]
}
    2f28:	ecbd 8b0e 	vpop	{d8-d14}
    2f2c:	bd08      	pop	{r3, pc}
    2f2e:	bf00      	nop
    2f30:	1a5d2372 	.word	0x1a5d2372
    2f34:	404ca5dc 	.word	0x404ca5dc
    2f38:	3c8efa39 	.word	0x3c8efa39
    2f3c:	2000507c 	.word	0x2000507c
    2f40:	20005080 	.word	0x20005080
    2f44:	20005084 	.word	0x20005084
    2f48:	2000389c 	.word	0x2000389c
    2f4c:	20003124 	.word	0x20003124
    2f50:	20005090 	.word	0x20005090
    2f54:	20005064 	.word	0x20005064
    2f58:	200052c8 	.word	0x200052c8
    2f5c:	00000000 	.word	0x00000000

00002f60 <loop>:
void loop() {
    2f60:	b530      	push	{r4, r5, lr}
    2f62:	b09d      	sub	sp, #116	; 0x74
  prev_time = current_time;      
    2f64:	4caa      	ldr	r4, [pc, #680]	; (3210 <loop+0x2b0>)
    2f66:	4dab      	ldr	r5, [pc, #684]	; (3214 <loop+0x2b4>)
    2f68:	682b      	ldr	r3, [r5, #0]
    2f6a:	6023      	str	r3, [r4, #0]
  current_time = micros();      
    2f6c:	f00a f81a 	bl	cfa4 <micros>
    2f70:	6028      	str	r0, [r5, #0]
  dt = (current_time - prev_time)/1000000.0;
    2f72:	6823      	ldr	r3, [r4, #0]
    2f74:	1ac0      	subs	r0, r0, r3
    2f76:	ee07 0a90 	vmov	s15, r0
    2f7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    2f7e:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 3208 <loop+0x2a8>
    2f82:	ee87 6b05 	vdiv.f64	d6, d7, d5
    2f86:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    2f8a:	4ba3      	ldr	r3, [pc, #652]	; (3218 <loop+0x2b8>)
    2f8c:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    2f90:	f7ff f890 	bl	20b4 <loopBlink()>
	displayRoll();
    2f94:	f7ff fd64 	bl	2a60 <displayRoll()>
	if (channel_6_pwm < 1500) {
    2f98:	4ba0      	ldr	r3, [pc, #640]	; (321c <loop+0x2bc>)
    2f9a:	681a      	ldr	r2, [r3, #0]
    2f9c:	f240 53db 	movw	r3, #1499	; 0x5db
    2fa0:	429a      	cmp	r2, r3
    2fa2:	f300 809a 	bgt.w	30da <loop+0x17a>
		irisFlag = 0;
    2fa6:	4b9e      	ldr	r3, [pc, #632]	; (3220 <loop+0x2c0>)
    2fa8:	2200      	movs	r2, #0
    2faa:	701a      	strb	r2, [r3, #0]
		closeIris();
    2fac:	f7ff f976 	bl	229c <closeIris()>
	if (channel_7_pwm > 1750) {
    2fb0:	4b9c      	ldr	r3, [pc, #624]	; (3224 <loop+0x2c4>)
    2fb2:	681a      	ldr	r2, [r3, #0]
    2fb4:	f240 63d6 	movw	r3, #1750	; 0x6d6
    2fb8:	429a      	cmp	r2, r3
    2fba:	f340 8094 	ble.w	30e6 <loop+0x186>
		conductSineSweep = 1;
    2fbe:	4b9a      	ldr	r3, [pc, #616]	; (3228 <loop+0x2c8>)
    2fc0:	2201      	movs	r2, #1
    2fc2:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    2fc4:	4b99      	ldr	r3, [pc, #612]	; (322c <loop+0x2cc>)
    2fc6:	781b      	ldrb	r3, [r3, #0]
    2fc8:	b14b      	cbz	r3, 2fde <loop+0x7e>
    2fca:	4b92      	ldr	r3, [pc, #584]	; (3214 <loop+0x2b4>)
    2fcc:	681b      	ldr	r3, [r3, #0]
    2fce:	4a98      	ldr	r2, [pc, #608]	; (3230 <loop+0x2d0>)
    2fd0:	6812      	ldr	r2, [r2, #0]
    2fd2:	1a9b      	subs	r3, r3, r2
    2fd4:	f242 7210 	movw	r2, #10000	; 0x2710
    2fd8:	4293      	cmp	r3, r2
    2fda:	f200 808b 	bhi.w	30f4 <loop+0x194>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    2fde:	f7fd fcd7 	bl	990 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    2fe2:	4b94      	ldr	r3, [pc, #592]	; (3234 <loop+0x2d4>)
    2fe4:	edd3 1a00 	vldr	s3, [r3]
    2fe8:	4b93      	ldr	r3, [pc, #588]	; (3238 <loop+0x2d8>)
    2fea:	ed93 1a00 	vldr	s2, [r3]
    2fee:	4b93      	ldr	r3, [pc, #588]	; (323c <loop+0x2dc>)
    2ff0:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    2ff4:	4b88      	ldr	r3, [pc, #544]	; (3218 <loop+0x2b8>)
    2ff6:	ed93 3a00 	vldr	s6, [r3]
    2ffa:	4b91      	ldr	r3, [pc, #580]	; (3240 <loop+0x2e0>)
    2ffc:	edd3 2a00 	vldr	s5, [r3]
    3000:	4b90      	ldr	r3, [pc, #576]	; (3244 <loop+0x2e4>)
    3002:	ed93 2a00 	vldr	s4, [r3]
    3006:	eef1 1a61 	vneg.f32	s3, s3
    300a:	eeb1 1a41 	vneg.f32	s2, s2
    300e:	eef1 0a60 	vneg.f32	s1, s1
    3012:	4b8d      	ldr	r3, [pc, #564]	; (3248 <loop+0x2e8>)
    3014:	ed93 0a00 	vldr	s0, [r3]
    3018:	f7ff fdea 	bl	2bf0 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getJoyAngle();
    301c:	f7ff f898 	bl	2150 <getJoyAngle()>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    3020:	f7fd ff5a 	bl	ed8 <getDesState()>
	if (useSerialAngleCommands) {
    3024:	4b89      	ldr	r3, [pc, #548]	; (324c <loop+0x2ec>)
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	2b00      	cmp	r3, #0
    302a:	f040 80da 	bne.w	31e2 <loop+0x282>
	if (conductSineSweep) {
    302e:	4b7e      	ldr	r3, [pc, #504]	; (3228 <loop+0x2c8>)
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	2b00      	cmp	r3, #0
    3034:	f040 80da 	bne.w	31ec <loop+0x28c>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    3038:	4b85      	ldr	r3, [pc, #532]	; (3250 <loop+0x2f0>)
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    3040:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    3044:	f240 80d7 	bls.w	31f6 <loop+0x296>
	if (channel_8_pwm > 1750) {
    3048:	4b81      	ldr	r3, [pc, #516]	; (3250 <loop+0x2f0>)
    304a:	681a      	ldr	r2, [r3, #0]
    304c:	f240 63d6 	movw	r3, #1750	; 0x6d6
    3050:	429a      	cmp	r2, r3
    3052:	f300 80d3 	bgt.w	31fc <loop+0x29c>
	getPScale();
    3056:	f7ff fd3b 	bl	2ad0 <getPScale()>
	getIScale();
    305a:	f7ff fd89 	bl	2b70 <getIScale()>
	getDScale();
    305e:	f7ff fd5f 	bl	2b20 <getDScale()>
	if (irisFlag) {
    3062:	4b6f      	ldr	r3, [pc, #444]	; (3220 <loop+0x2c0>)
    3064:	781b      	ldrb	r3, [r3, #0]
    3066:	2b00      	cmp	r3, #0
    3068:	f040 80cb 	bne.w	3202 <loop+0x2a2>
	controlANGLE();
    306c:	f7fe f988 	bl	1380 <controlANGLE()>
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    3070:	f7fd fbec 	bl	84c <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    3074:	f7fe fb2a 	bl	16cc <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    3078:	f7fe ffc0 	bl	1ffc <throttleCut()>
  commandMotors(); //Sends command pulses to each motor pin using OneShot125 protocol
    307c:	f7fe ff14 	bl	1ea8 <commandMotors()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    3080:	4b74      	ldr	r3, [pc, #464]	; (3254 <loop+0x2f4>)
    3082:	6819      	ldr	r1, [r3, #0]
    3084:	4874      	ldr	r0, [pc, #464]	; (3258 <loop+0x2f8>)
    3086:	f001 fe37 	bl	4cf8 <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    308a:	4b74      	ldr	r3, [pc, #464]	; (325c <loop+0x2fc>)
    308c:	6819      	ldr	r1, [r3, #0]
    308e:	4874      	ldr	r0, [pc, #464]	; (3260 <loop+0x300>)
    3090:	f001 fe32 	bl	4cf8 <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    3094:	4b73      	ldr	r3, [pc, #460]	; (3264 <loop+0x304>)
    3096:	6819      	ldr	r1, [r3, #0]
    3098:	4873      	ldr	r0, [pc, #460]	; (3268 <loop+0x308>)
    309a:	f001 fe2d 	bl	4cf8 <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    309e:	4b73      	ldr	r3, [pc, #460]	; (326c <loop+0x30c>)
    30a0:	6819      	ldr	r1, [r3, #0]
    30a2:	4873      	ldr	r0, [pc, #460]	; (3270 <loop+0x310>)
    30a4:	f001 fe28 	bl	4cf8 <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    30a8:	4b72      	ldr	r3, [pc, #456]	; (3274 <loop+0x314>)
    30aa:	6819      	ldr	r1, [r3, #0]
    30ac:	4872      	ldr	r0, [pc, #456]	; (3278 <loop+0x318>)
    30ae:	f001 fe23 	bl	4cf8 <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    30b2:	4b72      	ldr	r3, [pc, #456]	; (327c <loop+0x31c>)
    30b4:	6819      	ldr	r1, [r3, #0]
    30b6:	4872      	ldr	r0, [pc, #456]	; (3280 <loop+0x320>)
    30b8:	f001 fe1e 	bl	4cf8 <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    30bc:	4b71      	ldr	r3, [pc, #452]	; (3284 <loop+0x324>)
    30be:	6819      	ldr	r1, [r3, #0]
    30c0:	4871      	ldr	r0, [pc, #452]	; (3288 <loop+0x328>)
    30c2:	f001 fe19 	bl	4cf8 <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    30c6:	f7fe fc23 	bl	1910 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    30ca:	f7fe fe81 	bl	1dd0 <failSafe()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    30ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    30d2:	f7fe ffb9 	bl	2048 <loopRate(int)>
}
    30d6:	b01d      	add	sp, #116	; 0x74
    30d8:	bd30      	pop	{r4, r5, pc}
		irisFlag = 1;
    30da:	4b51      	ldr	r3, [pc, #324]	; (3220 <loop+0x2c0>)
    30dc:	2201      	movs	r2, #1
    30de:	701a      	strb	r2, [r3, #0]
		openIris();
    30e0:	f7ff f8ce 	bl	2280 <openIris()>
    30e4:	e764      	b.n	2fb0 <loop+0x50>
		conductSineSweep = 0;
    30e6:	4b50      	ldr	r3, [pc, #320]	; (3228 <loop+0x2c8>)
    30e8:	2200      	movs	r2, #0
    30ea:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    30ec:	4b67      	ldr	r3, [pc, #412]	; (328c <loop+0x32c>)
    30ee:	2200      	movs	r2, #0
    30f0:	601a      	str	r2, [r3, #0]
    30f2:	e767      	b.n	2fc4 <loop+0x64>
    print_counterSD = micros();
    30f4:	f009 ff56 	bl	cfa4 <micros>
    30f8:	4b4d      	ldr	r3, [pc, #308]	; (3230 <loop+0x2d0>)
    30fa:	6018      	str	r0, [r3, #0]
    String dataString;
    30fc:	2100      	movs	r1, #0
    30fe:	4668      	mov	r0, sp
    3100:	f009 fccf 	bl	caa2 <String::String(char const*)>
    dataString = getDataString();
    3104:	a818      	add	r0, sp, #96	; 0x60
    3106:	f7ff f8e1 	bl	22cc <getDataString()>
    310a:	a918      	add	r1, sp, #96	; 0x60
    310c:	4668      	mov	r0, sp
    310e:	f009 fd05 	bl	cb1c <String::operator=(String&&)>
    3112:	a818      	add	r0, sp, #96	; 0x60
    3114:	f009 fc7c 	bl	ca10 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    3118:	4b5d      	ldr	r3, [pc, #372]	; (3290 <loop+0x330>)
    311a:	681a      	ldr	r2, [r3, #0]
    311c:	2a00      	cmp	r2, #0
    311e:	d04e      	beq.n	31be <loop+0x25e>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3120:	f244 2302 	movw	r3, #16898	; 0x4202
    3124:	495b      	ldr	r1, [pc, #364]	; (3294 <loop+0x334>)
    3126:	a804      	add	r0, sp, #16
    3128:	f006 fdfe 	bl	9d28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    312c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    312e:	2b00      	cmp	r3, #0
    3130:	d047      	beq.n	31c2 <loop+0x262>
		if (file) return File(new SDFile(file));
    3132:	205c      	movs	r0, #92	; 0x5c
    3134:	f00a f88e 	bl	d254 <operator new(unsigned int)>
    3138:	4604      	mov	r4, r0
class FileImpl {
    313a:	2500      	movs	r5, #0
    313c:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    313e:	4b56      	ldr	r3, [pc, #344]	; (3298 <loop+0x338>)
    3140:	6003      	str	r3, [r0, #0]
class Print
    3142:	9b05      	ldr	r3, [sp, #20]
    3144:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    3146:	4b55      	ldr	r3, [pc, #340]	; (329c <loop+0x33c>)
    3148:	6083      	str	r3, [r0, #8]
    314a:	9b06      	ldr	r3, [sp, #24]
    314c:	6103      	str	r3, [r0, #16]
    314e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3152:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    3154:	a908      	add	r1, sp, #32
    3156:	3018      	adds	r0, #24
    3158:	f006 fcaf 	bl	9aba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    315c:	4b50      	ldr	r3, [pc, #320]	; (32a0 <loop+0x340>)
    315e:	60a3      	str	r3, [r4, #8]
    3160:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    3162:	6863      	ldr	r3, [r4, #4]
    3164:	3301      	adds	r3, #1
    3166:	6063      	str	r3, [r4, #4]
    3168:	4b4e      	ldr	r3, [pc, #312]	; (32a4 <loop+0x344>)
    316a:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    316c:	a808      	add	r0, sp, #32
    316e:	f006 fce5 	bl	9b3c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3172:	4b4d      	ldr	r3, [pc, #308]	; (32a8 <loop+0x348>)
    3174:	691b      	ldr	r3, [r3, #16]
    3176:	2b00      	cmp	r3, #0
    3178:	f000 80a0 	beq.w	32bc <loop+0x35c>
		if (--(f->refcount) == 0) {
    317c:	685a      	ldr	r2, [r3, #4]
    317e:	3a01      	subs	r2, #1
    3180:	605a      	str	r2, [r3, #4]
    3182:	b94a      	cbnz	r2, 3198 <loop+0x238>
			f->close();
    3184:	4d48      	ldr	r5, [pc, #288]	; (32a8 <loop+0x348>)
    3186:	6928      	ldr	r0, [r5, #16]
    3188:	6803      	ldr	r3, [r0, #0]
    318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    318c:	4798      	blx	r3
			delete f;
    318e:	6928      	ldr	r0, [r5, #16]
    3190:	b110      	cbz	r0, 3198 <loop+0x238>
    3192:	6803      	ldr	r3, [r0, #0]
    3194:	685b      	ldr	r3, [r3, #4]
    3196:	4798      	blx	r3
		f = file.f;
    3198:	4b43      	ldr	r3, [pc, #268]	; (32a8 <loop+0x348>)
    319a:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    319c:	2c00      	cmp	r4, #0
    319e:	f040 808f 	bne.w	32c0 <loop+0x360>
							  return write((const uint8_t *)str, strlen(str)); }
    31a2:	4c42      	ldr	r4, [pc, #264]	; (32ac <loop+0x34c>)
    31a4:	6823      	ldr	r3, [r4, #0]
    31a6:	685b      	ldr	r3, [r3, #4]
    31a8:	2219      	movs	r2, #25
    31aa:	4941      	ldr	r1, [pc, #260]	; (32b0 <loop+0x350>)
    31ac:	4620      	mov	r0, r4
    31ae:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    31b0:	4620      	mov	r0, r4
    31b2:	f009 f9c8 	bl	c546 <Print::println()>
  }
    31b6:	4668      	mov	r0, sp
    31b8:	f009 fc2a 	bl	ca10 <String::~String()>
    31bc:	e70f      	b.n	2fde <loop+0x7e>
    31be:	4a3d      	ldr	r2, [pc, #244]	; (32b4 <loop+0x354>)
    31c0:	e7ae      	b.n	3120 <loop+0x1c0>
  bool isOpen() const {return m_fFile || m_xFile;}
    31c2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    31c4:	2c00      	cmp	r4, #0
    31c6:	d1b4      	bne.n	3132 <loop+0x1d2>
    31c8:	4b36      	ldr	r3, [pc, #216]	; (32a4 <loop+0x344>)
    31ca:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    31cc:	a808      	add	r0, sp, #32
    31ce:	f006 fcb5 	bl	9b3c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    31d2:	4b35      	ldr	r3, [pc, #212]	; (32a8 <loop+0x348>)
    31d4:	691b      	ldr	r3, [r3, #16]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d1d0      	bne.n	317c <loop+0x21c>
		f = file.f;
    31da:	4b33      	ldr	r3, [pc, #204]	; (32a8 <loop+0x348>)
    31dc:	2200      	movs	r2, #0
    31de:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    31e0:	e7df      	b.n	31a2 <loop+0x242>
		setDesStateSerial(axisToRotate);
    31e2:	4b35      	ldr	r3, [pc, #212]	; (32b8 <loop+0x358>)
    31e4:	6818      	ldr	r0, [r3, #0]
    31e6:	f7fd fd6f 	bl	cc8 <setDesStateSerial(int)>
    31ea:	e720      	b.n	302e <loop+0xce>
  	performSineSweep(axisToRotate);
    31ec:	4b32      	ldr	r3, [pc, #200]	; (32b8 <loop+0x358>)
    31ee:	6818      	ldr	r0, [r3, #0]
    31f0:	f7fd fdca 	bl	d88 <performSineSweep(int)>
    31f4:	e720      	b.n	3038 <loop+0xd8>
		rollStep();
    31f6:	f7fd fe37 	bl	e68 <rollStep()>
    31fa:	e725      	b.n	3048 <loop+0xe8>
		pitchStep();
    31fc:	f7fd fe50 	bl	ea0 <pitchStep()>
    3200:	e729      	b.n	3056 <loop+0xf6>
		ripPID();
    3202:	f7fd ffed 	bl	11e0 <ripPID()>
    3206:	e731      	b.n	306c <loop+0x10c>
    3208:	00000000 	.word	0x00000000
    320c:	412e8480 	.word	0x412e8480
    3210:	20005074 	.word	0x20005074
    3214:	20004f58 	.word	0x20004f58
    3218:	20004f78 	.word	0x20004f78
    321c:	20004f48 	.word	0x20004f48
    3220:	200052ee 	.word	0x200052ee
    3224:	20004f4c 	.word	0x20004f4c
    3228:	200052ea 	.word	0x200052ea
    322c:	200052de 	.word	0x200052de
    3230:	20003898 	.word	0x20003898
    3234:	20004088 	.word	0x20004088
    3238:	200040b0 	.word	0x200040b0
    323c:	200040a8 	.word	0x200040a8
    3240:	20004098 	.word	0x20004098
    3244:	20004090 	.word	0x20004090
    3248:	200040a0 	.word	0x200040a0
    324c:	200052fb 	.word	0x200052fb
    3250:	20004f50 	.word	0x20004f50
    3254:	200050d0 	.word	0x200050d0
    3258:	2000527c 	.word	0x2000527c
    325c:	200050d8 	.word	0x200050d8
    3260:	20005280 	.word	0x20005280
    3264:	200050e0 	.word	0x200050e0
    3268:	20005284 	.word	0x20005284
    326c:	200050e8 	.word	0x200050e8
    3270:	20005288 	.word	0x20005288
    3274:	200050f0 	.word	0x200050f0
    3278:	2000528c 	.word	0x2000528c
    327c:	200050f8 	.word	0x200050f8
    3280:	20005290 	.word	0x20005290
    3284:	20005100 	.word	0x20005100
    3288:	20005294 	.word	0x20005294
    328c:	200052a0 	.word	0x200052a0
    3290:	20004fc8 	.word	0x20004fc8
    3294:	200040e0 	.word	0x200040e0
    3298:	200022dc 	.word	0x200022dc
    329c:	20002338 	.word	0x20002338
    32a0:	200022b8 	.word	0x200022b8
    32a4:	200021ac 	.word	0x200021ac
    32a8:	200037ec 	.word	0x200037ec
    32ac:	20003170 	.word	0x20003170
    32b0:	20002a58 	.word	0x20002a58
    32b4:	20002fe8 	.word	0x20002fe8
    32b8:	2000378c 	.word	0x2000378c
		f = file.f;
    32bc:	4b14      	ldr	r3, [pc, #80]	; (3310 <loop+0x3b0>)
    32be:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32c4:	4620      	mov	r0, r4
    32c6:	4798      	blx	r3
    if (dataFile) {
    32c8:	2800      	cmp	r0, #0
    32ca:	f43f af6a 	beq.w	31a2 <loop+0x242>
	size_t println(const String &s)			{ return print(s) + println(); }
    32ce:	4c10      	ldr	r4, [pc, #64]	; (3310 <loop+0x3b0>)
    32d0:	4669      	mov	r1, sp
    32d2:	4620      	mov	r0, r4
    32d4:	f009 f912 	bl	c4fc <Print::print(String const&)>
    32d8:	4620      	mov	r0, r4
    32da:	f009 f934 	bl	c546 <Print::println()>
		if (f) {
    32de:	6920      	ldr	r0, [r4, #16]
    32e0:	2800      	cmp	r0, #0
    32e2:	f43f af68 	beq.w	31b6 <loop+0x256>
			f->close();
    32e6:	6803      	ldr	r3, [r0, #0]
    32e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32ea:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    32ec:	6922      	ldr	r2, [r4, #16]
    32ee:	6853      	ldr	r3, [r2, #4]
    32f0:	3b01      	subs	r3, #1
    32f2:	6053      	str	r3, [r2, #4]
    32f4:	b943      	cbnz	r3, 3308 <loop+0x3a8>
			f->close();
    32f6:	6920      	ldr	r0, [r4, #16]
    32f8:	6803      	ldr	r3, [r0, #0]
    32fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    32fc:	4798      	blx	r3
			delete f;
    32fe:	6920      	ldr	r0, [r4, #16]
    3300:	b110      	cbz	r0, 3308 <loop+0x3a8>
    3302:	6803      	ldr	r3, [r0, #0]
    3304:	685b      	ldr	r3, [r3, #4]
    3306:	4798      	blx	r3
		}
		f = nullptr;
    3308:	4b01      	ldr	r3, [pc, #4]	; (3310 <loop+0x3b0>)
    330a:	2200      	movs	r2, #0
    330c:	611a      	str	r2, [r3, #16]
	}
    330e:	e752      	b.n	31b6 <loop+0x256>
    3310:	200037ec 	.word	0x200037ec

00003314 <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    3314:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    3316:	4802      	ldr	r0, [pc, #8]	; (3320 <radioSetup()+0xc>)
    3318:	f000 fe94 	bl	4044 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    331c:	bd08      	pop	{r3, pc}
    331e:	bf00      	nop
    3320:	20005118 	.word	0x20005118

00003324 <setup>:
void setup() {
    3324:	b5f0      	push	{r4, r5, r6, r7, lr}
    3326:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    3328:	4b9b      	ldr	r3, [pc, #620]	; (3598 <setup+0x274>)
    332a:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    332c:	4c9b      	ldr	r4, [pc, #620]	; (359c <setup+0x278>)
    332e:	4f9c      	ldr	r7, [pc, #624]	; (35a0 <setup+0x27c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3330:	461d      	mov	r5, r3
		while (!(*this)) {
    3332:	e004      	b.n	333e <setup+0x1a>
				if (elapsed > 2000) break;
    3334:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    3338:	d813      	bhi.n	3362 <setup+0x3e>
			yield();
    333a:	f00b fd51 	bl	ede0 <yield>
		yield();
    333e:	f00b fd4f 	bl	ede0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3342:	7823      	ldrb	r3, [r4, #0]
    3344:	2b00      	cmp	r3, #0
    3346:	f000 824d 	beq.w	37e4 <setup+0x4c0>
    334a:	783b      	ldrb	r3, [r7, #0]
    334c:	f013 0f01 	tst.w	r3, #1
    3350:	f000 8248 	beq.w	37e4 <setup+0x4c0>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3354:	682b      	ldr	r3, [r5, #0]
    3356:	4a93      	ldr	r2, [pc, #588]	; (35a4 <setup+0x280>)
    3358:	6812      	ldr	r2, [r2, #0]
    335a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    335c:	2b0e      	cmp	r3, #14
    335e:	f240 8241 	bls.w	37e4 <setup+0x4c0>
  delay(500);
    3362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3366:	f009 fe47 	bl	cff8 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    336a:	2101      	movs	r1, #1
    336c:	200d      	movs	r0, #13
    336e:	f009 fe91 	bl	d094 <pinMode>
  pinMode(m1Pin, OUTPUT);
    3372:	2101      	movs	r1, #1
    3374:	2000      	movs	r0, #0
    3376:	f009 fe8d 	bl	d094 <pinMode>
  pinMode(m2Pin, OUTPUT);
    337a:	2101      	movs	r1, #1
    337c:	4608      	mov	r0, r1
    337e:	f009 fe89 	bl	d094 <pinMode>
  pinMode(m3Pin, OUTPUT);
    3382:	2101      	movs	r1, #1
    3384:	2002      	movs	r0, #2
    3386:	f009 fe85 	bl	d094 <pinMode>
  pinMode(m4Pin, OUTPUT);
    338a:	2101      	movs	r1, #1
    338c:	2003      	movs	r0, #3
    338e:	f009 fe81 	bl	d094 <pinMode>
  pinMode(m5Pin, OUTPUT);
    3392:	2101      	movs	r1, #1
    3394:	2004      	movs	r0, #4
    3396:	f009 fe7d 	bl	d094 <pinMode>
  pinMode(m6Pin, OUTPUT);
    339a:	2101      	movs	r1, #1
    339c:	2005      	movs	r0, #5
    339e:	f009 fe79 	bl	d094 <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    33a2:	f640 0334 	movw	r3, #2100	; 0x834
    33a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33aa:	2106      	movs	r1, #6
    33ac:	487e      	ldr	r0, [pc, #504]	; (35a8 <setup+0x284>)
    33ae:	f001 fc55 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    33b2:	f640 0334 	movw	r3, #2100	; 0x834
    33b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33ba:	2107      	movs	r1, #7
    33bc:	487b      	ldr	r0, [pc, #492]	; (35ac <setup+0x288>)
    33be:	f001 fc4d 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    33c2:	f640 0334 	movw	r3, #2100	; 0x834
    33c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33ca:	210a      	movs	r1, #10
    33cc:	4878      	ldr	r0, [pc, #480]	; (35b0 <setup+0x28c>)
    33ce:	f001 fc45 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    33d2:	f640 0334 	movw	r3, #2100	; 0x834
    33d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33da:	2109      	movs	r1, #9
    33dc:	4875      	ldr	r0, [pc, #468]	; (35b4 <setup+0x290>)
    33de:	f001 fc3d 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    33e2:	f640 0334 	movw	r3, #2100	; 0x834
    33e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33ea:	2108      	movs	r1, #8
    33ec:	4872      	ldr	r0, [pc, #456]	; (35b8 <setup+0x294>)
    33ee:	f001 fc35 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    33f2:	f640 0334 	movw	r3, #2100	; 0x834
    33f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33fa:	210b      	movs	r1, #11
    33fc:	486f      	ldr	r0, [pc, #444]	; (35bc <setup+0x298>)
    33fe:	f001 fc2d 	bl	4c5c <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    3402:	f640 0334 	movw	r3, #2100	; 0x834
    3406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    340a:	210c      	movs	r1, #12
    340c:	486c      	ldr	r0, [pc, #432]	; (35c0 <setup+0x29c>)
    340e:	f001 fc25 	bl	4c5c <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    3412:	f44f 6316 	mov.w	r3, #2400	; 0x960
    3416:	f44f 7208 	mov.w	r2, #544	; 0x220
    341a:	2118      	movs	r1, #24
    341c:	4869      	ldr	r0, [pc, #420]	; (35c4 <setup+0x2a0>)
    341e:	f001 fc1d 	bl	4c5c <PWMServo::attach(int, int, int)>
  closeIris();
    3422:	f7fe ff3b 	bl	229c <closeIris()>
  delay(1000);
    3426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    342a:	f009 fde5 	bl	cff8 <delay>
	getJoyAngle();
    342e:	f7fe fe8f 	bl	2150 <getJoyAngle()>
	alphaOffset = -alpha;
    3432:	4e65      	ldr	r6, [pc, #404]	; (35c8 <setup+0x2a4>)
    3434:	4b65      	ldr	r3, [pc, #404]	; (35cc <setup+0x2a8>)
    3436:	edd3 7a00 	vldr	s15, [r3]
    343a:	eef1 7a67 	vneg.f32	s15, s15
    343e:	edc6 7a00 	vstr	s15, [r6]
	betaOffset = -beta;
    3442:	4d63      	ldr	r5, [pc, #396]	; (35d0 <setup+0x2ac>)
    3444:	4b63      	ldr	r3, [pc, #396]	; (35d4 <setup+0x2b0>)
    3446:	edd3 7a00 	vldr	s15, [r3]
    344a:	eef1 7a67 	vneg.f32	s15, s15
    344e:	edc5 7a00 	vstr	s15, [r5]
							  return write((const uint8_t *)str, strlen(str)); }
    3452:	4c61      	ldr	r4, [pc, #388]	; (35d8 <setup+0x2b4>)
    3454:	6823      	ldr	r3, [r4, #0]
    3456:	685b      	ldr	r3, [r3, #4]
    3458:	220d      	movs	r2, #13
    345a:	4960      	ldr	r1, [pc, #384]	; (35dc <setup+0x2b8>)
    345c:	4620      	mov	r0, r4
    345e:	4798      	blx	r3
	Serial.print(alphaOffset);
    3460:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3464:	2102      	movs	r1, #2
    3466:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    346a:	4620      	mov	r0, r4
    346c:	f009 f8cc 	bl	c608 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    3470:	6823      	ldr	r3, [r4, #0]
    3472:	685b      	ldr	r3, [r3, #4]
    3474:	2201      	movs	r2, #1
    3476:	495a      	ldr	r1, [pc, #360]	; (35e0 <setup+0x2bc>)
    3478:	4620      	mov	r0, r4
    347a:	4798      	blx	r3
    347c:	6823      	ldr	r3, [r4, #0]
    347e:	685b      	ldr	r3, [r3, #4]
    3480:	220c      	movs	r2, #12
    3482:	4958      	ldr	r1, [pc, #352]	; (35e4 <setup+0x2c0>)
    3484:	4620      	mov	r0, r4
    3486:	4798      	blx	r3
	Serial.println(betaOffset);
    3488:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    348c:	2102      	movs	r1, #2
    348e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    3492:	4620      	mov	r0, r4
    3494:	f009 f8b8 	bl	c608 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    3498:	4620      	mov	r0, r4
    349a:	f009 f854 	bl	c546 <Print::println()>
  digitalWrite(13, HIGH);
    349e:	2101      	movs	r1, #1
    34a0:	200d      	movs	r0, #13
    34a2:	f009 fdbf 	bl	d024 <digitalWrite>
  delay(5);
    34a6:	2005      	movs	r0, #5
    34a8:	f009 fda6 	bl	cff8 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    34ac:	6823      	ldr	r3, [r4, #0]
    34ae:	685b      	ldr	r3, [r3, #4]
    34b0:	2217      	movs	r2, #23
    34b2:	494d      	ldr	r1, [pc, #308]	; (35e8 <setup+0x2c4>)
    34b4:	4620      	mov	r0, r4
    34b6:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    34b8:	21fe      	movs	r1, #254	; 0xfe
    34ba:	484c      	ldr	r0, [pc, #304]	; (35ec <setup+0x2c8>)
    34bc:	f001 fe68 	bl	5190 <SDClass::begin(unsigned char)>
    34c0:	2800      	cmp	r0, #0
    34c2:	f000 8181 	beq.w	37c8 <setup+0x4a4>
    34c6:	6823      	ldr	r3, [r4, #0]
    34c8:	685b      	ldr	r3, [r3, #4]
    34ca:	2211      	movs	r2, #17
    34cc:	4948      	ldr	r1, [pc, #288]	; (35f0 <setup+0x2cc>)
    34ce:	4620      	mov	r0, r4
    34d0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    34d2:	4620      	mov	r0, r4
    34d4:	f009 f837 	bl	c546 <Print::println()>
		SD_is_present = 1;
    34d8:	4b46      	ldr	r3, [pc, #280]	; (35f4 <setup+0x2d0>)
    34da:	2201      	movs	r2, #1
    34dc:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    34de:	4946      	ldr	r1, [pc, #280]	; (35f8 <setup+0x2d4>)
    34e0:	a814      	add	r0, sp, #80	; 0x50
    34e2:	f009 fb10 	bl	cb06 <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    34e6:	220a      	movs	r2, #10
    34e8:	2100      	movs	r1, #0
    34ea:	a818      	add	r0, sp, #96	; 0x60
    34ec:	f009 fb2f 	bl	cb4e <String::String(int, unsigned char)>
    34f0:	a918      	add	r1, sp, #96	; 0x60
    34f2:	a814      	add	r0, sp, #80	; 0x50
    34f4:	f009 fb8a 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
    34f8:	4940      	ldr	r1, [pc, #256]	; (35fc <setup+0x2d8>)
    34fa:	f009 fb87 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
    34fe:	4601      	mov	r1, r0
    3500:	483f      	ldr	r0, [pc, #252]	; (3600 <setup+0x2dc>)
    3502:	f009 faf6 	bl	caf2 <String::operator=(String const&)>
    3506:	a818      	add	r0, sp, #96	; 0x60
    3508:	f009 fa82 	bl	ca10 <String::~String()>
class StringSumHelper : public String
    350c:	a814      	add	r0, sp, #80	; 0x50
    350e:	f009 fa7f 	bl	ca10 <String::~String()>
		int fileIncrement = 0;
    3512:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    3514:	4d3a      	ldr	r5, [pc, #232]	; (3600 <setup+0x2dc>)
    3516:	4f3b      	ldr	r7, [pc, #236]	; (3604 <setup+0x2e0>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    3518:	4e34      	ldr	r6, [pc, #208]	; (35ec <setup+0x2c8>)
		while(SD.exists(fileName.c_str())) {
    351a:	e02a      	b.n	3572 <setup+0x24e>
           m_xVol ? m_xVol->exists(path) : false;
    351c:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    3520:	2900      	cmp	r1, #0
    3522:	d071      	beq.n	3608 <setup+0x2e4>
  ExFatFile() {}
    3524:	2300      	movs	r3, #0
    3526:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    352a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    352e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3532:	4668      	mov	r0, sp
    3534:	f002 fc15 	bl	5d62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3538:	2800      	cmp	r0, #0
    353a:	d065      	beq.n	3608 <setup+0x2e4>
			fileIncrement++;
    353c:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    353e:	492e      	ldr	r1, [pc, #184]	; (35f8 <setup+0x2d4>)
    3540:	a81c      	add	r0, sp, #112	; 0x70
    3542:	f009 fae0 	bl	cb06 <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    3546:	220a      	movs	r2, #10
    3548:	4621      	mov	r1, r4
    354a:	a820      	add	r0, sp, #128	; 0x80
    354c:	f009 faff 	bl	cb4e <String::String(int, unsigned char)>
    3550:	a920      	add	r1, sp, #128	; 0x80
    3552:	a81c      	add	r0, sp, #112	; 0x70
    3554:	f009 fb5a 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
    3558:	4928      	ldr	r1, [pc, #160]	; (35fc <setup+0x2d8>)
    355a:	f009 fb57 	bl	cc0c <operator+(StringSumHelper const&, String const&)>
    355e:	4601      	mov	r1, r0
    3560:	4628      	mov	r0, r5
    3562:	f009 fac6 	bl	caf2 <String::operator=(String const&)>
    3566:	a820      	add	r0, sp, #128	; 0x80
    3568:	f009 fa52 	bl	ca10 <String::~String()>
class StringSumHelper : public String
    356c:	a81c      	add	r0, sp, #112	; 0x70
    356e:	f009 fa4f 	bl	ca10 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    3572:	682a      	ldr	r2, [r5, #0]
    3574:	2a00      	cmp	r2, #0
    3576:	bf08      	it	eq
    3578:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    357a:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    357e:	2900      	cmp	r1, #0
    3580:	d0cc      	beq.n	351c <setup+0x1f8>
  FatFile() {}
    3582:	2300      	movs	r3, #0
    3584:	f88d 3000 	strb.w	r3, [sp]
    3588:	f88d 3001 	strb.w	r3, [sp, #1]
    358c:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3590:	4668      	mov	r0, sp
    3592:	f004 fb8a 	bl	7caa <FatFile::open(FatVolume*, char const*, int)>
    3596:	e7cf      	b.n	3538 <setup+0x214>
    3598:	200052a8 	.word	0x200052a8
    359c:	200052f8 	.word	0x200052f8
    35a0:	200052f7 	.word	0x200052f7
    35a4:	200052bc 	.word	0x200052bc
    35a8:	2000527c 	.word	0x2000527c
    35ac:	20005280 	.word	0x20005280
    35b0:	20005284 	.word	0x20005284
    35b4:	20005288 	.word	0x20005288
    35b8:	2000528c 	.word	0x2000528c
    35bc:	20005290 	.word	0x20005290
    35c0:	20005294 	.word	0x20005294
    35c4:	20005008 	.word	0x20005008
    35c8:	20004ecc 	.word	0x20004ecc
    35cc:	20004ec4 	.word	0x20004ec4
    35d0:	20004ee0 	.word	0x20004ee0
    35d4:	20004ed8 	.word	0x20004ed8
    35d8:	20003170 	.word	0x20003170
    35dc:	20002c08 	.word	0x20002c08
    35e0:	20002c14 	.word	0x20002c14
    35e4:	20002c18 	.word	0x20002c18
    35e8:	20002c28 	.word	0x20002c28
    35ec:	200040dc 	.word	0x200040dc
    35f0:	20002c40 	.word	0x20002c40
    35f4:	200052de 	.word	0x200052de
    35f8:	20004fd8 	.word	0x20004fd8
    35fc:	20004fb8 	.word	0x20004fb8
    3600:	20004fc8 	.word	0x20004fc8
    3604:	20002fe8 	.word	0x20002fe8
    3608:	4b7c      	ldr	r3, [pc, #496]	; (37fc <setup+0x4d8>)
    360a:	681a      	ldr	r2, [r3, #0]
    360c:	2a00      	cmp	r2, #0
    360e:	f000 80d4 	beq.w	37ba <setup+0x496>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3612:	f244 2302 	movw	r3, #16898	; 0x4202
    3616:	497a      	ldr	r1, [pc, #488]	; (3800 <setup+0x4dc>)
    3618:	4668      	mov	r0, sp
    361a:	f006 fb85 	bl	9d28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    361e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3620:	2b00      	cmp	r3, #0
    3622:	f000 80cc 	beq.w	37be <setup+0x49a>
		if (file) return File(new SDFile(file));
    3626:	205c      	movs	r0, #92	; 0x5c
    3628:	f009 fe14 	bl	d254 <operator new(unsigned int)>
    362c:	4604      	mov	r4, r0
class FileImpl {
    362e:	2500      	movs	r5, #0
    3630:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3632:	4b74      	ldr	r3, [pc, #464]	; (3804 <setup+0x4e0>)
    3634:	6003      	str	r3, [r0, #0]
class Print
    3636:	9b01      	ldr	r3, [sp, #4]
    3638:	60c3      	str	r3, [r0, #12]
    363a:	4b73      	ldr	r3, [pc, #460]	; (3808 <setup+0x4e4>)
    363c:	6083      	str	r3, [r0, #8]
    363e:	9b02      	ldr	r3, [sp, #8]
    3640:	6103      	str	r3, [r0, #16]
    3642:	f89d 300c 	ldrb.w	r3, [sp, #12]
    3646:	7503      	strb	r3, [r0, #20]
    3648:	a904      	add	r1, sp, #16
    364a:	3018      	adds	r0, #24
    364c:	f006 fa35 	bl	9aba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3650:	4b6e      	ldr	r3, [pc, #440]	; (380c <setup+0x4e8>)
    3652:	60a3      	str	r3, [r4, #8]
    3654:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    3656:	6863      	ldr	r3, [r4, #4]
    3658:	3301      	adds	r3, #1
    365a:	6063      	str	r3, [r4, #4]
    365c:	4b6c      	ldr	r3, [pc, #432]	; (3810 <setup+0x4ec>)
    365e:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    3660:	a804      	add	r0, sp, #16
    3662:	f006 fa6b 	bl	9b3c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3666:	4b6b      	ldr	r3, [pc, #428]	; (3814 <setup+0x4f0>)
    3668:	691b      	ldr	r3, [r3, #16]
    366a:	b16b      	cbz	r3, 3688 <setup+0x364>
		if (--(f->refcount) == 0) {
    366c:	685a      	ldr	r2, [r3, #4]
    366e:	3a01      	subs	r2, #1
    3670:	605a      	str	r2, [r3, #4]
    3672:	b94a      	cbnz	r2, 3688 <setup+0x364>
			f->close();
    3674:	4d67      	ldr	r5, [pc, #412]	; (3814 <setup+0x4f0>)
    3676:	6928      	ldr	r0, [r5, #16]
    3678:	6803      	ldr	r3, [r0, #0]
    367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    367c:	4798      	blx	r3
			delete f;
    367e:	6928      	ldr	r0, [r5, #16]
    3680:	b110      	cbz	r0, 3688 <setup+0x364>
    3682:	6803      	ldr	r3, [r0, #0]
    3684:	685b      	ldr	r3, [r3, #4]
    3686:	4798      	blx	r3
		f = file.f;
    3688:	4d62      	ldr	r5, [pc, #392]	; (3814 <setup+0x4f0>)
    368a:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,radio_ch8,radio_ch9,radio_ch10,radio_ch11,radio_ch12,radio_ch13,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    368c:	4962      	ldr	r1, [pc, #392]	; (3818 <setup+0x4f4>)
    368e:	4668      	mov	r0, sp
    3690:	f009 fa07 	bl	caa2 <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    3694:	4669      	mov	r1, sp
    3696:	4628      	mov	r0, r5
    3698:	f008 ff30 	bl	c4fc <Print::print(String const&)>
    369c:	4628      	mov	r0, r5
    369e:	f008 ff52 	bl	c546 <Print::println()>
		if (f) {
    36a2:	6928      	ldr	r0, [r5, #16]
    36a4:	b198      	cbz	r0, 36ce <setup+0x3aa>
			f->close();
    36a6:	6803      	ldr	r3, [r0, #0]
    36a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36aa:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    36ac:	692a      	ldr	r2, [r5, #16]
    36ae:	6853      	ldr	r3, [r2, #4]
    36b0:	3b01      	subs	r3, #1
    36b2:	6053      	str	r3, [r2, #4]
    36b4:	b943      	cbnz	r3, 36c8 <setup+0x3a4>
			f->close();
    36b6:	6928      	ldr	r0, [r5, #16]
    36b8:	6803      	ldr	r3, [r0, #0]
    36ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36bc:	4798      	blx	r3
			delete f;
    36be:	6928      	ldr	r0, [r5, #16]
    36c0:	b110      	cbz	r0, 36c8 <setup+0x3a4>
    36c2:	6803      	ldr	r3, [r0, #0]
    36c4:	685b      	ldr	r3, [r3, #4]
    36c6:	4798      	blx	r3
		f = nullptr;
    36c8:	4b52      	ldr	r3, [pc, #328]	; (3814 <setup+0x4f0>)
    36ca:	2200      	movs	r2, #0
    36cc:	611a      	str	r2, [r3, #16]
  }
    36ce:	4668      	mov	r0, sp
    36d0:	f009 f99e 	bl	ca10 <String::~String()>
  radioSetup();
    36d4:	f7ff fe1e 	bl	3314 <radioSetup()>
  channel_1_pwm = channel_1_fs;
    36d8:	4b50      	ldr	r3, [pc, #320]	; (381c <setup+0x4f8>)
    36da:	681a      	ldr	r2, [r3, #0]
    36dc:	4b50      	ldr	r3, [pc, #320]	; (3820 <setup+0x4fc>)
    36de:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    36e0:	4b50      	ldr	r3, [pc, #320]	; (3824 <setup+0x500>)
    36e2:	681a      	ldr	r2, [r3, #0]
    36e4:	4b50      	ldr	r3, [pc, #320]	; (3828 <setup+0x504>)
    36e6:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    36e8:	4b50      	ldr	r3, [pc, #320]	; (382c <setup+0x508>)
    36ea:	681a      	ldr	r2, [r3, #0]
    36ec:	4b50      	ldr	r3, [pc, #320]	; (3830 <setup+0x50c>)
    36ee:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    36f0:	4b50      	ldr	r3, [pc, #320]	; (3834 <setup+0x510>)
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	4b50      	ldr	r3, [pc, #320]	; (3838 <setup+0x514>)
    36f6:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    36f8:	4b50      	ldr	r3, [pc, #320]	; (383c <setup+0x518>)
    36fa:	681a      	ldr	r2, [r3, #0]
    36fc:	4b50      	ldr	r3, [pc, #320]	; (3840 <setup+0x51c>)
    36fe:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    3700:	4b50      	ldr	r3, [pc, #320]	; (3844 <setup+0x520>)
    3702:	681a      	ldr	r2, [r3, #0]
    3704:	4b50      	ldr	r3, [pc, #320]	; (3848 <setup+0x524>)
    3706:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    3708:	4b50      	ldr	r3, [pc, #320]	; (384c <setup+0x528>)
    370a:	681a      	ldr	r2, [r3, #0]
    370c:	4b50      	ldr	r3, [pc, #320]	; (3850 <setup+0x52c>)
    370e:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    3710:	4b50      	ldr	r3, [pc, #320]	; (3854 <setup+0x530>)
    3712:	681a      	ldr	r2, [r3, #0]
    3714:	4b50      	ldr	r3, [pc, #320]	; (3858 <setup+0x534>)
    3716:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    3718:	4b50      	ldr	r3, [pc, #320]	; (385c <setup+0x538>)
    371a:	681a      	ldr	r2, [r3, #0]
    371c:	4b50      	ldr	r3, [pc, #320]	; (3860 <setup+0x53c>)
    371e:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    3720:	4b50      	ldr	r3, [pc, #320]	; (3864 <setup+0x540>)
    3722:	681a      	ldr	r2, [r3, #0]
    3724:	4b50      	ldr	r3, [pc, #320]	; (3868 <setup+0x544>)
    3726:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    3728:	4b50      	ldr	r3, [pc, #320]	; (386c <setup+0x548>)
    372a:	681a      	ldr	r2, [r3, #0]
    372c:	4b50      	ldr	r3, [pc, #320]	; (3870 <setup+0x54c>)
    372e:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    3730:	4b50      	ldr	r3, [pc, #320]	; (3874 <setup+0x550>)
    3732:	681a      	ldr	r2, [r3, #0]
    3734:	4b50      	ldr	r3, [pc, #320]	; (3878 <setup+0x554>)
    3736:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    3738:	4b50      	ldr	r3, [pc, #320]	; (387c <setup+0x558>)
    373a:	681a      	ldr	r2, [r3, #0]
    373c:	4b50      	ldr	r3, [pc, #320]	; (3880 <setup+0x55c>)
    373e:	601a      	str	r2, [r3, #0]
  IMUinit();
    3740:	f7fd f8ea 	bl	918 <IMUinit()>
  delay(5);
    3744:	2005      	movs	r0, #5
    3746:	f009 fc57 	bl	cff8 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    374a:	2100      	movs	r1, #0
    374c:	484d      	ldr	r0, [pc, #308]	; (3884 <setup+0x560>)
    374e:	f001 fad3 	bl	4cf8 <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    3752:	2100      	movs	r1, #0
    3754:	484c      	ldr	r0, [pc, #304]	; (3888 <setup+0x564>)
    3756:	f001 facf 	bl	4cf8 <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    375a:	2100      	movs	r1, #0
    375c:	484b      	ldr	r0, [pc, #300]	; (388c <setup+0x568>)
    375e:	f001 facb 	bl	4cf8 <PWMServo::write(int)>
  servo4.write(0);
    3762:	2100      	movs	r1, #0
    3764:	484a      	ldr	r0, [pc, #296]	; (3890 <setup+0x56c>)
    3766:	f001 fac7 	bl	4cf8 <PWMServo::write(int)>
  servo5.write(0);
    376a:	2100      	movs	r1, #0
    376c:	4849      	ldr	r0, [pc, #292]	; (3894 <setup+0x570>)
    376e:	f001 fac3 	bl	4cf8 <PWMServo::write(int)>
  servo6.write(0);
    3772:	2100      	movs	r1, #0
    3774:	4848      	ldr	r0, [pc, #288]	; (3898 <setup+0x574>)
    3776:	f001 fabf 	bl	4cf8 <PWMServo::write(int)>
  servo7.write(0);
    377a:	2100      	movs	r1, #0
    377c:	4847      	ldr	r0, [pc, #284]	; (389c <setup+0x578>)
    377e:	f001 fabb 	bl	4cf8 <PWMServo::write(int)>
  delay(5);
    3782:	2005      	movs	r0, #5
    3784:	f009 fc38 	bl	cff8 <delay>
  m1_command_PWM = 125; //Command OneShot125 ESC from 125 to 250us pulse length
    3788:	237d      	movs	r3, #125	; 0x7d
    378a:	4a45      	ldr	r2, [pc, #276]	; (38a0 <setup+0x57c>)
    378c:	6013      	str	r3, [r2, #0]
  m2_command_PWM = 125;
    378e:	4a45      	ldr	r2, [pc, #276]	; (38a4 <setup+0x580>)
    3790:	6013      	str	r3, [r2, #0]
  m3_command_PWM = 125;
    3792:	4a45      	ldr	r2, [pc, #276]	; (38a8 <setup+0x584>)
    3794:	6013      	str	r3, [r2, #0]
  m4_command_PWM = 125;
    3796:	4a45      	ldr	r2, [pc, #276]	; (38ac <setup+0x588>)
    3798:	6013      	str	r3, [r2, #0]
  m5_command_PWM = 125;
    379a:	4a45      	ldr	r2, [pc, #276]	; (38b0 <setup+0x58c>)
    379c:	6013      	str	r3, [r2, #0]
  m6_command_PWM = 125;
    379e:	4a45      	ldr	r2, [pc, #276]	; (38b4 <setup+0x590>)
    37a0:	6013      	str	r3, [r2, #0]
  armMotors(); //Loop over commandMotors() until ESCs happily arm
    37a2:	f7fe fc1f 	bl	1fe4 <armMotors()>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    37a6:	2246      	movs	r2, #70	; 0x46
    37a8:	21a0      	movs	r1, #160	; 0xa0
    37aa:	2003      	movs	r0, #3
    37ac:	f7fe fcb2 	bl	2114 <setupBlink(int, int, int)>
	doneWithSetup = 1;
    37b0:	4b41      	ldr	r3, [pc, #260]	; (38b8 <setup+0x594>)
    37b2:	2201      	movs	r2, #1
    37b4:	701a      	strb	r2, [r3, #0]
}
    37b6:	b025      	add	sp, #148	; 0x94
    37b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37ba:	4a40      	ldr	r2, [pc, #256]	; (38bc <setup+0x598>)
    37bc:	e729      	b.n	3612 <setup+0x2ee>
  bool isOpen() const {return m_fFile || m_xFile;}
    37be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    37c0:	2c00      	cmp	r4, #0
    37c2:	f47f af30 	bne.w	3626 <setup+0x302>
    37c6:	e749      	b.n	365c <setup+0x338>
							  return write((const uint8_t *)str, strlen(str)); }
    37c8:	4c3d      	ldr	r4, [pc, #244]	; (38c0 <setup+0x59c>)
    37ca:	6823      	ldr	r3, [r4, #0]
    37cc:	685b      	ldr	r3, [r3, #4]
    37ce:	221b      	movs	r2, #27
    37d0:	493c      	ldr	r1, [pc, #240]	; (38c4 <setup+0x5a0>)
    37d2:	4620      	mov	r0, r4
    37d4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    37d6:	4620      	mov	r0, r4
    37d8:	f008 feb5 	bl	c546 <Print::println()>
		SD_is_present = 0;
    37dc:	4b3a      	ldr	r3, [pc, #232]	; (38c8 <setup+0x5a4>)
    37de:	2200      	movs	r2, #0
    37e0:	701a      	strb	r2, [r3, #0]
    37e2:	e777      	b.n	36d4 <setup+0x3b0>
			uint32_t elapsed = systick_millis_count - millis_begin;
    37e4:	682b      	ldr	r3, [r5, #0]
    37e6:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    37e8:	7822      	ldrb	r2, [r4, #0]
    37ea:	2a00      	cmp	r2, #0
    37ec:	f47f ada2 	bne.w	3334 <setup+0x10>
				if (elapsed > 750) break;
    37f0:	f240 22ee 	movw	r2, #750	; 0x2ee
    37f4:	4293      	cmp	r3, r2
    37f6:	f67f ada0 	bls.w	333a <setup+0x16>
    37fa:	e5b2      	b.n	3362 <setup+0x3e>
    37fc:	20004fc8 	.word	0x20004fc8
    3800:	200040e0 	.word	0x200040e0
    3804:	200022dc 	.word	0x200022dc
    3808:	20002338 	.word	0x20002338
    380c:	200022b8 	.word	0x200022b8
    3810:	200021ac 	.word	0x200021ac
    3814:	200037ec 	.word	0x200037ec
    3818:	20002c54 	.word	0x20002c54
    381c:	200037b0 	.word	0x200037b0
    3820:	20004f14 	.word	0x20004f14
    3824:	200037b4 	.word	0x200037b4
    3828:	20004f20 	.word	0x20004f20
    382c:	200037b8 	.word	0x200037b8
    3830:	20004f2c 	.word	0x20004f2c
    3834:	200037bc 	.word	0x200037bc
    3838:	20004f38 	.word	0x20004f38
    383c:	200037c0 	.word	0x200037c0
    3840:	20004f44 	.word	0x20004f44
    3844:	200037c4 	.word	0x200037c4
    3848:	20004f48 	.word	0x20004f48
    384c:	200037c8 	.word	0x200037c8
    3850:	20004f4c 	.word	0x20004f4c
    3854:	200037cc 	.word	0x200037cc
    3858:	20004f50 	.word	0x20004f50
    385c:	200037d0 	.word	0x200037d0
    3860:	20004f54 	.word	0x20004f54
    3864:	200037a0 	.word	0x200037a0
    3868:	20004f04 	.word	0x20004f04
    386c:	200037a4 	.word	0x200037a4
    3870:	20004f08 	.word	0x20004f08
    3874:	200037a8 	.word	0x200037a8
    3878:	20004f0c 	.word	0x20004f0c
    387c:	200037ac 	.word	0x200037ac
    3880:	20004f10 	.word	0x20004f10
    3884:	2000527c 	.word	0x2000527c
    3888:	20005280 	.word	0x20005280
    388c:	20005284 	.word	0x20005284
    3890:	20005288 	.word	0x20005288
    3894:	2000528c 	.word	0x2000528c
    3898:	20005290 	.word	0x20005290
    389c:	20005294 	.word	0x20005294
    38a0:	2000500c 	.word	0x2000500c
    38a4:	20005014 	.word	0x20005014
    38a8:	2000501c 	.word	0x2000501c
    38ac:	20005024 	.word	0x20005024
    38b0:	2000502c 	.word	0x2000502c
    38b4:	20005034 	.word	0x20005034
    38b8:	200052eb 	.word	0x200052eb
    38bc:	20002fe8 	.word	0x20002fe8
    38c0:	20003170 	.word	0x20003170
    38c4:	20002dec 	.word	0x20002dec
    38c8:	200052de 	.word	0x200052de

000038cc <_GLOBAL__sub_I_mpu6050>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    38cc:	b570      	push	{r4, r5, r6, lr}
  MPU6050 mpu6050;
    38ce:	2168      	movs	r1, #104	; 0x68
    38d0:	4825      	ldr	r0, [pc, #148]	; (3968 <_GLOBAL__sub_I_mpu6050+0x9c>)
    38d2:	f000 f999 	bl	3c08 <MPU6050::MPU6050(unsigned char)>
PWMServo iris;
    38d6:	4825      	ldr	r0, [pc, #148]	; (396c <_GLOBAL__sub_I_mpu6050+0xa0>)
    38d8:	f001 f9bc 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo1;
    38dc:	4824      	ldr	r0, [pc, #144]	; (3970 <_GLOBAL__sub_I_mpu6050+0xa4>)
    38de:	f001 f9b9 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo2;
    38e2:	4824      	ldr	r0, [pc, #144]	; (3974 <_GLOBAL__sub_I_mpu6050+0xa8>)
    38e4:	f001 f9b6 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo3;
    38e8:	4823      	ldr	r0, [pc, #140]	; (3978 <_GLOBAL__sub_I_mpu6050+0xac>)
    38ea:	f001 f9b3 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo4;
    38ee:	4823      	ldr	r0, [pc, #140]	; (397c <_GLOBAL__sub_I_mpu6050+0xb0>)
    38f0:	f001 f9b0 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo5;
    38f4:	4822      	ldr	r0, [pc, #136]	; (3980 <_GLOBAL__sub_I_mpu6050+0xb4>)
    38f6:	f001 f9ad 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo6;
    38fa:	4822      	ldr	r0, [pc, #136]	; (3984 <_GLOBAL__sub_I_mpu6050+0xb8>)
    38fc:	f001 f9aa 	bl	4c54 <PWMServo::PWMServo()>
PWMServo servo7;
    3900:	4821      	ldr	r0, [pc, #132]	; (3988 <_GLOBAL__sub_I_mpu6050+0xbc>)
    3902:	f001 f9a7 	bl	4c54 <PWMServo::PWMServo()>
  SBUS sbus(Serial5);
    3906:	4d21      	ldr	r5, [pc, #132]	; (398c <_GLOBAL__sub_I_mpu6050+0xc0>)
    3908:	4921      	ldr	r1, [pc, #132]	; (3990 <_GLOBAL__sub_I_mpu6050+0xc4>)
    390a:	4628      	mov	r0, r5
    390c:	f000 fa0e 	bl	3d2c <SBUS::SBUS(HardwareSerial&)>
    3910:	4c20      	ldr	r4, [pc, #128]	; (3994 <_GLOBAL__sub_I_mpu6050+0xc8>)
    3912:	4622      	mov	r2, r4
    3914:	4920      	ldr	r1, [pc, #128]	; (3998 <_GLOBAL__sub_I_mpu6050+0xcc>)
    3916:	4628      	mov	r0, r5
    3918:	f00d f858 	bl	109cc <__aeabi_atexit>
String filePrefix = "flight_data";
    391c:	4e1f      	ldr	r6, [pc, #124]	; (399c <_GLOBAL__sub_I_mpu6050+0xd0>)
    391e:	4920      	ldr	r1, [pc, #128]	; (39a0 <_GLOBAL__sub_I_mpu6050+0xd4>)
    3920:	4630      	mov	r0, r6
    3922:	f009 f8be 	bl	caa2 <String::String(char const*)>
    3926:	4d1f      	ldr	r5, [pc, #124]	; (39a4 <_GLOBAL__sub_I_mpu6050+0xd8>)
    3928:	4622      	mov	r2, r4
    392a:	4629      	mov	r1, r5
    392c:	4630      	mov	r0, r6
    392e:	f00d f84d 	bl	109cc <__aeabi_atexit>
String fileExtension = ".csv";
    3932:	4e1d      	ldr	r6, [pc, #116]	; (39a8 <_GLOBAL__sub_I_mpu6050+0xdc>)
    3934:	491d      	ldr	r1, [pc, #116]	; (39ac <_GLOBAL__sub_I_mpu6050+0xe0>)
    3936:	4630      	mov	r0, r6
    3938:	f009 f8b3 	bl	caa2 <String::String(char const*)>
    393c:	4622      	mov	r2, r4
    393e:	4629      	mov	r1, r5
    3940:	4630      	mov	r0, r6
    3942:	f00d f843 	bl	109cc <__aeabi_atexit>
String fileName;
    3946:	4e1a      	ldr	r6, [pc, #104]	; (39b0 <_GLOBAL__sub_I_mpu6050+0xe4>)
    3948:	2100      	movs	r1, #0
    394a:	4630      	mov	r0, r6
    394c:	f009 f8a9 	bl	caa2 <String::String(char const*)>
    3950:	4622      	mov	r2, r4
    3952:	4629      	mov	r1, r5
    3954:	4630      	mov	r0, r6
    3956:	f00d f839 	bl	109cc <__aeabi_atexit>
File dataFile;
    395a:	4622      	mov	r2, r4
    395c:	4915      	ldr	r1, [pc, #84]	; (39b4 <_GLOBAL__sub_I_mpu6050+0xe8>)
    395e:	4816      	ldr	r0, [pc, #88]	; (39b8 <_GLOBAL__sub_I_mpu6050+0xec>)
    3960:	f00d f834 	bl	109cc <__aeabi_atexit>
    3964:	bd70      	pop	{r4, r5, r6, pc}
    3966:	bf00      	nop
    3968:	2000503c 	.word	0x2000503c
    396c:	20005008 	.word	0x20005008
    3970:	2000527c 	.word	0x2000527c
    3974:	20005280 	.word	0x20005280
    3978:	20005284 	.word	0x20005284
    397c:	20005288 	.word	0x20005288
    3980:	2000528c 	.word	0x2000528c
    3984:	20005290 	.word	0x20005290
    3988:	20005294 	.word	0x20005294
    398c:	20005118 	.word	0x20005118
    3990:	200046a0 	.word	0x200046a0
    3994:	200031ec 	.word	0x200031ec
    3998:	00003d75 	.word	0x00003d75
    399c:	20004fd8 	.word	0x20004fd8
    39a0:	20001c80 	.word	0x20001c80
    39a4:	0000ca11 	.word	0x0000ca11
    39a8:	20004fb8 	.word	0x20004fb8
    39ac:	20001c8c 	.word	0x20001c8c
    39b0:	20004fc8 	.word	0x20004fc8
    39b4:	000007e5 	.word	0x000007e5
    39b8:	200037ec 	.word	0x200037ec

000039bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    39bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39c0:	b087      	sub	sp, #28
    39c2:	9002      	str	r0, [sp, #8]
    39c4:	9103      	str	r1, [sp, #12]
    39c6:	461f      	mov	r7, r3
    39c8:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    39cc:	4b3c      	ldr	r3, [pc, #240]	; (3ac0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    39ce:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    39d2:	9200      	str	r2, [sp, #0]
    39d4:	2a00      	cmp	r2, #0
    39d6:	d061      	beq.n	3a9c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    39d8:	0043      	lsls	r3, r0, #1
    39da:	b2d9      	uxtb	r1, r3
    39dc:	9101      	str	r1, [sp, #4]
    39de:	4613      	mov	r3, r2
    39e0:	2a88      	cmp	r2, #136	; 0x88
    39e2:	bf28      	it	cs
    39e4:	2388      	movcs	r3, #136	; 0x88
    39e6:	9304      	str	r3, [sp, #16]
    39e8:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    39ec:	4644      	mov	r4, r8
    39ee:	4d35      	ldr	r5, [pc, #212]	; (3ac4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    39f0:	f04f 0b01 	mov.w	fp, #1
    39f4:	f88d b017 	strb.w	fp, [sp, #23]
    39f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3ac0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    39fc:	e022      	b.n	3a44 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    39fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a02:	e006      	b.n	3a12 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    3a04:	4299      	cmp	r1, r3
    3a06:	d9fa      	bls.n	39fe <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    3a08:	3301      	adds	r3, #1
    3a0a:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    3a0e:	442a      	add	r2, r5
    3a10:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    3a12:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3a14:	3401      	adds	r4, #1
    3a16:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    3a18:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3a1c:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3a20:	461a      	mov	r2, r3
    3a22:	4299      	cmp	r1, r3
    3a24:	d007      	beq.n	3a36 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    3a26:	2e00      	cmp	r6, #0
    3a28:	d0ec      	beq.n	3a04 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    3a2a:	f8da 0000 	ldr.w	r0, [sl]
    3a2e:	eba0 0009 	sub.w	r0, r0, r9
    3a32:	42b0      	cmp	r0, r6
    3a34:	d3e6      	bcc.n	3a04 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3a36:	9b04      	ldr	r3, [sp, #16]
    3a38:	4498      	add	r8, r3
    3a3a:	fa5f f888 	uxtb.w	r8, r8
    3a3e:	9b00      	ldr	r3, [sp, #0]
    3a40:	4543      	cmp	r3, r8
    3a42:	d92c      	bls.n	3a9e <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    3a44:	9b01      	ldr	r3, [sp, #4]
    3a46:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3a4a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3a4e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    3a52:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    3a56:	9903      	ldr	r1, [sp, #12]
    3a58:	4628      	mov	r0, r5
    3a5a:	f000 fb2a 	bl	40b2 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    3a5e:	4659      	mov	r1, fp
    3a60:	4628      	mov	r0, r5
    3a62:	f000 fc53 	bl	430c <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    3a66:	9b01      	ldr	r3, [sp, #4]
    3a68:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3a6c:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    3a70:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3a74:	9b00      	ldr	r3, [sp, #0]
    3a76:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3a7a:	2a88      	cmp	r2, #136	; 0x88
    3a7c:	bfa8      	it	ge
    3a7e:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    3a80:	465b      	mov	r3, fp
    3a82:	b2d2      	uxtb	r2, r2
    3a84:	9902      	ldr	r1, [sp, #8]
    3a86:	4628      	mov	r0, r5
    3a88:	f000 fcbc 	bl	4404 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    3a8c:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3a90:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3a94:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3a96:	4299      	cmp	r1, r3
    3a98:	d1c5      	bne.n	3a26 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    3a9a:	e7cc      	b.n	3a36 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    3a9c:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    3a9e:	b156      	cbz	r6, 3ab6 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3aa0:	4b07      	ldr	r3, [pc, #28]	; (3ac0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3aa2:	681b      	ldr	r3, [r3, #0]
    3aa4:	eba3 0309 	sub.w	r3, r3, r9
    3aa8:	42b3      	cmp	r3, r6
    3aaa:	d304      	bcc.n	3ab6 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3aac:	9b00      	ldr	r3, [sp, #0]
    3aae:	429c      	cmp	r4, r3
    3ab0:	bfb8      	it	lt
    3ab2:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    3ab6:	4620      	mov	r0, r4
    3ab8:	b007      	add	sp, #28
    3aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3abe:	bf00      	nop
    3ac0:	200052a8 	.word	0x200052a8
    3ac4:	20004700 	.word	0x20004700

00003ac8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    3ac8:	b500      	push	{lr}
    3aca:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    3acc:	9300      	str	r3, [sp, #0]
    3ace:	4613      	mov	r3, r2
    3ad0:	2201      	movs	r2, #1
    3ad2:	f7ff ff73 	bl	39bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    3ad6:	b003      	add	sp, #12
    3ad8:	f85d fb04 	ldr.w	pc, [sp], #4

00003adc <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    3adc:	b530      	push	{r4, r5, lr}
    3ade:	b083      	sub	sp, #12
    3ae0:	4614      	mov	r4, r2
    3ae2:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    3ae4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3ae8:	f10d 0207 	add.w	r2, sp, #7
    3aec:	f7ff ffec 	bl	3ac8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3af0:	b160      	cbz	r0, 3b0c <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3af2:	1b62      	subs	r2, r4, r5
    3af4:	3201      	adds	r2, #1
    3af6:	2101      	movs	r1, #1
    3af8:	fa01 f305 	lsl.w	r3, r1, r5
    3afc:	3b01      	subs	r3, #1
    3afe:	4093      	lsls	r3, r2
        b &= mask;
    3b00:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    3b04:	400b      	ands	r3, r1
    3b06:	4113      	asrs	r3, r2
    3b08:	9a06      	ldr	r2, [sp, #24]
    3b0a:	7013      	strb	r3, [r2, #0]
}
    3b0c:	b003      	add	sp, #12
    3b0e:	bd30      	pop	{r4, r5, pc}

00003b10 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    3b10:	b570      	push	{r4, r5, r6, lr}
    3b12:	4615      	mov	r5, r2
    3b14:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    3b16:	4a10      	ldr	r2, [pc, #64]	; (3b58 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3b18:	0040      	lsls	r0, r0, #1
    3b1a:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    3b1e:	2301      	movs	r3, #1
    3b20:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    3b24:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    3b28:	4610      	mov	r0, r2
    3b2a:	f000 fac2 	bl	40b2 <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    3b2e:	b15d      	cbz	r5, 3b48 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    3b30:	1e74      	subs	r4, r6, #1
    3b32:	3d01      	subs	r5, #1
    3b34:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    3b38:	4e07      	ldr	r6, [pc, #28]	; (3b58 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3b3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3b3e:	4630      	mov	r0, r6
    3b40:	f000 fab7 	bl	40b2 <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    3b44:	42ac      	cmp	r4, r5
    3b46:	d1f8      	bne.n	3b3a <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    3b48:	2101      	movs	r1, #1
    3b4a:	4803      	ldr	r0, [pc, #12]	; (3b58 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3b4c:	f000 fbde 	bl	430c <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    3b50:	fab0 f080 	clz	r0, r0
    3b54:	0940      	lsrs	r0, r0, #5
    3b56:	bd70      	pop	{r4, r5, r6, pc}
    3b58:	20004700 	.word	0x20004700

00003b5c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    3b5c:	b500      	push	{lr}
    3b5e:	b083      	sub	sp, #12
    3b60:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    3b64:	f10d 0307 	add.w	r3, sp, #7
    3b68:	2201      	movs	r2, #1
    3b6a:	f7ff ffd1 	bl	3b10 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    3b6e:	b003      	add	sp, #12
    3b70:	f85d fb04 	ldr.w	pc, [sp], #4

00003b74 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b76:	b083      	sub	sp, #12
    3b78:	4604      	mov	r4, r0
    3b7a:	460d      	mov	r5, r1
    3b7c:	4616      	mov	r6, r2
    3b7e:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    3b80:	4b0c      	ldr	r3, [pc, #48]	; (3bb4 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    3b82:	881b      	ldrh	r3, [r3, #0]
    3b84:	f10d 0207 	add.w	r2, sp, #7
    3b88:	f7ff ff9e 	bl	3ac8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3b8c:	b15f      	cbz	r7, 3ba6 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    3b8e:	2301      	movs	r3, #1
    3b90:	40b3      	lsls	r3, r6
    3b92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3b96:	431a      	orrs	r2, r3
    3b98:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    3b9a:	4629      	mov	r1, r5
    3b9c:	4620      	mov	r0, r4
    3b9e:	f7ff ffdd 	bl	3b5c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    3ba2:	b003      	add	sp, #12
    3ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3ba6:	2301      	movs	r3, #1
    3ba8:	40b3      	lsls	r3, r6
    3baa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3bae:	ea22 0203 	bic.w	r2, r2, r3
    3bb2:	e7f2      	b.n	3b9a <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    3bb4:	200038ba 	.word	0x200038ba

00003bb8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    3bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bba:	b083      	sub	sp, #12
    3bbc:	4605      	mov	r5, r0
    3bbe:	460e      	mov	r6, r1
    3bc0:	4614      	mov	r4, r2
    3bc2:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    3bc4:	4b0f      	ldr	r3, [pc, #60]	; (3c04 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    3bc6:	881b      	ldrh	r3, [r3, #0]
    3bc8:	f10d 0207 	add.w	r2, sp, #7
    3bcc:	f7ff ff7c 	bl	3ac8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3bd0:	b910      	cbnz	r0, 3bd8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    3bd2:	2000      	movs	r0, #0
}
    3bd4:	b003      	add	sp, #12
    3bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3bd8:	1be2      	subs	r2, r4, r7
    3bda:	3201      	adds	r2, #1
    3bdc:	2101      	movs	r1, #1
    3bde:	fa01 f307 	lsl.w	r3, r1, r7
    3be2:	3b01      	subs	r3, #1
    3be4:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    3be6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3bea:	4091      	lsls	r1, r2
    3bec:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    3bee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3bf2:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    3bf6:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    3bf8:	431a      	orrs	r2, r3
    3bfa:	4631      	mov	r1, r6
    3bfc:	4628      	mov	r0, r5
    3bfe:	f7ff ffad 	bl	3b5c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    3c02:	e7e7      	b.n	3bd4 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    3c04:	200038ba 	.word	0x200038ba

00003c08 <MPU6050::MPU6050(unsigned char)>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    3c08:	7001      	strb	r1, [r0, #0]
}
    3c0a:	4770      	bx	lr

00003c0c <MPU6050::setFullScaleGyroRange(unsigned char)>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    3c0c:	b500      	push	{lr}
    3c0e:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    3c10:	7800      	ldrb	r0, [r0, #0]
    3c12:	9100      	str	r1, [sp, #0]
    3c14:	2302      	movs	r3, #2
    3c16:	2204      	movs	r2, #4
    3c18:	211b      	movs	r1, #27
    3c1a:	f7ff ffcd 	bl	3bb8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3c1e:	b003      	add	sp, #12
    3c20:	f85d fb04 	ldr.w	pc, [sp], #4

00003c24 <MPU6050::setFullScaleAccelRange(unsigned char)>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    3c24:	b500      	push	{lr}
    3c26:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    3c28:	7800      	ldrb	r0, [r0, #0]
    3c2a:	9100      	str	r1, [sp, #0]
    3c2c:	2302      	movs	r3, #2
    3c2e:	2204      	movs	r2, #4
    3c30:	211c      	movs	r1, #28
    3c32:	f7ff ffc1 	bl	3bb8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3c36:	b003      	add	sp, #12
    3c38:	f85d fb04 	ldr.w	pc, [sp], #4

00003c3c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    3c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3e:	b083      	sub	sp, #12
    3c40:	4604      	mov	r4, r0
    3c42:	460f      	mov	r7, r1
    3c44:	4616      	mov	r6, r2
    3c46:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    3c48:	4603      	mov	r3, r0
    3c4a:	f813 0b01 	ldrb.w	r0, [r3], #1
    3c4e:	4a15      	ldr	r2, [pc, #84]	; (3ca4 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    3c50:	8812      	ldrh	r2, [r2, #0]
    3c52:	9200      	str	r2, [sp, #0]
    3c54:	220e      	movs	r2, #14
    3c56:	213b      	movs	r1, #59	; 0x3b
    3c58:	f7ff feb0 	bl	39bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    3c5c:	7862      	ldrb	r2, [r4, #1]
    3c5e:	78a3      	ldrb	r3, [r4, #2]
    3c60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c64:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    3c66:	78e2      	ldrb	r2, [r4, #3]
    3c68:	7923      	ldrb	r3, [r4, #4]
    3c6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c6e:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    3c70:	7962      	ldrb	r2, [r4, #5]
    3c72:	79a3      	ldrb	r3, [r4, #6]
    3c74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c78:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    3c7a:	7a62      	ldrb	r2, [r4, #9]
    3c7c:	7aa3      	ldrb	r3, [r4, #10]
    3c7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c82:	9a08      	ldr	r2, [sp, #32]
    3c84:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    3c86:	7ae2      	ldrb	r2, [r4, #11]
    3c88:	7b23      	ldrb	r3, [r4, #12]
    3c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c90:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    3c92:	7b62      	ldrb	r2, [r4, #13]
    3c94:	7ba3      	ldrb	r3, [r4, #14]
    3c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3c9c:	8013      	strh	r3, [r2, #0]
}
    3c9e:	b003      	add	sp, #12
    3ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ca2:	bf00      	nop
    3ca4:	200038ba 	.word	0x200038ba

00003ca8 <MPU6050::setSleepEnabled(bool)>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    3ca8:	b508      	push	{r3, lr}
    3caa:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    3cac:	2206      	movs	r2, #6
    3cae:	216b      	movs	r1, #107	; 0x6b
    3cb0:	7800      	ldrb	r0, [r0, #0]
    3cb2:	f7ff ff5f 	bl	3b74 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3cb6:	bd08      	pop	{r3, pc}

00003cb8 <MPU6050::setClockSource(unsigned char)>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    3cb8:	b500      	push	{lr}
    3cba:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    3cbc:	7800      	ldrb	r0, [r0, #0]
    3cbe:	9100      	str	r1, [sp, #0]
    3cc0:	2303      	movs	r3, #3
    3cc2:	2202      	movs	r2, #2
    3cc4:	216b      	movs	r1, #107	; 0x6b
    3cc6:	f7ff ff77 	bl	3bb8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3cca:	b003      	add	sp, #12
    3ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00003cd0 <MPU6050::initialize()>:
void MPU6050::initialize() {
    3cd0:	b510      	push	{r4, lr}
    3cd2:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    3cd4:	2101      	movs	r1, #1
    3cd6:	f7ff ffef 	bl	3cb8 <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    3cda:	2100      	movs	r1, #0
    3cdc:	4620      	mov	r0, r4
    3cde:	f7ff ff95 	bl	3c0c <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    3ce2:	2100      	movs	r1, #0
    3ce4:	4620      	mov	r0, r4
    3ce6:	f7ff ff9d 	bl	3c24 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    3cea:	2100      	movs	r1, #0
    3cec:	4620      	mov	r0, r4
    3cee:	f7ff ffdb 	bl	3ca8 <MPU6050::setSleepEnabled(bool)>
}
    3cf2:	bd10      	pop	{r4, pc}

00003cf4 <MPU6050::getDeviceID()>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    3cf4:	b510      	push	{r4, lr}
    3cf6:	b082      	sub	sp, #8
    3cf8:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    3cfa:	4603      	mov	r3, r0
    3cfc:	f813 0b01 	ldrb.w	r0, [r3], #1
    3d00:	4a05      	ldr	r2, [pc, #20]	; (3d18 <MPU6050::getDeviceID()+0x24>)
    3d02:	8812      	ldrh	r2, [r2, #0]
    3d04:	9201      	str	r2, [sp, #4]
    3d06:	9300      	str	r3, [sp, #0]
    3d08:	2306      	movs	r3, #6
    3d0a:	461a      	mov	r2, r3
    3d0c:	2175      	movs	r1, #117	; 0x75
    3d0e:	f7ff fee5 	bl	3adc <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    return buffer[0];
}
    3d12:	7860      	ldrb	r0, [r4, #1]
    3d14:	b002      	add	sp, #8
    3d16:	bd10      	pop	{r4, pc}
    3d18:	200038ba 	.word	0x200038ba

00003d1c <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    3d1c:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    3d1e:	f7ff ffe9 	bl	3cf4 <MPU6050::getDeviceID()>
}
    3d22:	2834      	cmp	r0, #52	; 0x34
    3d24:	bf14      	ite	ne
    3d26:	2000      	movne	r0, #0
    3d28:	2001      	moveq	r0, #1
    3d2a:	bd08      	pop	{r3, pc}

00003d2c <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    3d2c:	b510      	push	{r4, lr}
    3d2e:	4a10      	ldr	r2, [pc, #64]	; (3d70 <SBUS::SBUS(HardwareSerial&)+0x44>)
    3d30:	6002      	str	r2, [r0, #0]
    3d32:	f04f 0e0f 	mov.w	lr, #15
    3d36:	f880 e004 	strb.w	lr, [r0, #4]
    3d3a:	f04f 0c00 	mov.w	ip, #0
    3d3e:	f880 c005 	strb.w	ip, [r0, #5]
    3d42:	2204      	movs	r2, #4
    3d44:	7182      	strb	r2, [r0, #6]
    3d46:	f880 e007 	strb.w	lr, [r0, #7]
    3d4a:	f641 3458 	movw	r4, #7000	; 0x1b58
    3d4e:	6084      	str	r4, [r0, #8]
    3d50:	f880 c00d 	strb.w	ip, [r0, #13]
    3d54:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    3d58:	2208      	movs	r2, #8
    3d5a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    3d5e:	22ac      	movs	r2, #172	; 0xac
    3d60:	8542      	strh	r2, [r0, #42]	; 0x2a
    3d62:	f240 7213 	movw	r2, #1811	; 0x713
    3d66:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    3d68:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    3d6c:	bd10      	pop	{r4, pc}
    3d6e:	bf00      	nop
    3d70:	000186a0 	.word	0x000186a0

00003d74 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    3d74:	b538      	push	{r3, r4, r5, lr}
    3d76:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    3d78:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    3d7c:	b183      	cbz	r3, 3da0 <SBUS::~SBUS()+0x2c>
    3d7e:	2400      	movs	r4, #0
    3d80:	e004      	b.n	3d8c <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    3d82:	f00c ff13 	bl	10bac <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3d86:	3404      	adds	r4, #4
    3d88:	2c40      	cmp	r4, #64	; 0x40
    3d8a:	d005      	beq.n	3d98 <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    3d8c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    3d90:	5918      	ldr	r0, [r3, r4]
    3d92:	2800      	cmp	r0, #0
    3d94:	d1f5      	bne.n	3d82 <SBUS::~SBUS()+0xe>
    3d96:	e7f6      	b.n	3d86 <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    3d98:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    3d9c:	f00c ff06 	bl	10bac <free>
	}
	if (_writeCoeff) {
    3da0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3da4:	b183      	cbz	r3, 3dc8 <SBUS::~SBUS()+0x54>
    3da6:	2400      	movs	r4, #0
    3da8:	e004      	b.n	3db4 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    3daa:	f00c feff 	bl	10bac <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3dae:	3404      	adds	r4, #4
    3db0:	2c40      	cmp	r4, #64	; 0x40
    3db2:	d005      	beq.n	3dc0 <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    3db4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3db8:	5918      	ldr	r0, [r3, r4]
    3dba:	2800      	cmp	r0, #0
    3dbc:	d1f5      	bne.n	3daa <SBUS::~SBUS()+0x36>
    3dbe:	e7f6      	b.n	3dae <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    3dc0:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    3dc4:	f00c fef2 	bl	10bac <free>
	}
}
    3dc8:	4628      	mov	r0, r5
    3dca:	bd38      	pop	{r3, r4, r5, pc}

00003dcc <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    3dcc:	b570      	push	{r4, r5, r6, lr}
    3dce:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    3dd0:	4b2b      	ldr	r3, [pc, #172]	; (3e80 <SBUS::parse()+0xb4>)
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	f013 0f01 	tst.w	r3, #1
    3dd8:	d00c      	beq.n	3df4 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    3dda:	f009 f8e3 	bl	cfa4 <micros>
    3dde:	4b29      	ldr	r3, [pc, #164]	; (3e84 <SBUS::parse()+0xb8>)
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    3de4:	68a3      	ldr	r3, [r4, #8]
    3de6:	4283      	cmp	r3, r0
    3de8:	d201      	bcs.n	3dee <SBUS::parse()+0x22>
    3dea:	2300      	movs	r3, #0
    3dec:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3dee:	4d25      	ldr	r5, [pc, #148]	; (3e84 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    3df0:	2601      	movs	r6, #1
    3df2:	e011      	b.n	3e18 <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    3df4:	f009 f8d6 	bl	cfa4 <micros>
    3df8:	4b22      	ldr	r3, [pc, #136]	; (3e84 <SBUS::parse()+0xb8>)
    3dfa:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    3dfc:	4b20      	ldr	r3, [pc, #128]	; (3e80 <SBUS::parse()+0xb4>)
    3dfe:	2201      	movs	r2, #1
    3e00:	601a      	str	r2, [r3, #0]
    3e02:	e7ea      	b.n	3dda <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    3e04:	2b18      	cmp	r3, #24
    3e06:	d803      	bhi.n	3e10 <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    3e08:	18e2      	adds	r2, r4, r3
    3e0a:	7390      	strb	r0, [r2, #14]
				_parserState++;
    3e0c:	3301      	adds	r3, #1
    3e0e:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    3e10:	7b23      	ldrb	r3, [r4, #12]
    3e12:	2b19      	cmp	r3, #25
    3e14:	d022      	beq.n	3e5c <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    3e16:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    3e18:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3e1c:	6803      	ldr	r3, [r0, #0]
    3e1e:	691b      	ldr	r3, [r3, #16]
    3e20:	4798      	blx	r3
    3e22:	2800      	cmp	r0, #0
    3e24:	dd29      	ble.n	3e7a <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3e26:	f009 f8bd 	bl	cfa4 <micros>
    3e2a:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    3e2c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3e30:	6803      	ldr	r3, [r0, #0]
    3e32:	695b      	ldr	r3, [r3, #20]
    3e34:	4798      	blx	r3
    3e36:	b2c0      	uxtb	r0, r0
    3e38:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    3e3a:	7b23      	ldrb	r3, [r4, #12]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d1e1      	bne.n	3e04 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    3e40:	7923      	ldrb	r3, [r4, #4]
    3e42:	4283      	cmp	r3, r0
    3e44:	d1e7      	bne.n	3e16 <SBUS::parse()+0x4a>
    3e46:	7b63      	ldrb	r3, [r4, #13]
    3e48:	7962      	ldrb	r2, [r4, #5]
    3e4a:	429a      	cmp	r2, r3
    3e4c:	d004      	beq.n	3e58 <SBUS::parse()+0x8c>
    3e4e:	79e1      	ldrb	r1, [r4, #7]
    3e50:	79a2      	ldrb	r2, [r4, #6]
    3e52:	400b      	ands	r3, r1
    3e54:	429a      	cmp	r2, r3
    3e56:	d1de      	bne.n	3e16 <SBUS::parse()+0x4a>
					_parserState++;
    3e58:	7326      	strb	r6, [r4, #12]
    3e5a:	e7dc      	b.n	3e16 <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    3e5c:	7963      	ldrb	r3, [r4, #5]
    3e5e:	4283      	cmp	r3, r0
    3e60:	d007      	beq.n	3e72 <SBUS::parse()+0xa6>
    3e62:	79e2      	ldrb	r2, [r4, #7]
    3e64:	79a3      	ldrb	r3, [r4, #6]
    3e66:	4010      	ands	r0, r2
    3e68:	4283      	cmp	r3, r0
    3e6a:	d002      	beq.n	3e72 <SBUS::parse()+0xa6>
					_parserState = 0;
    3e6c:	2000      	movs	r0, #0
    3e6e:	7320      	strb	r0, [r4, #12]
					return false;
    3e70:	e004      	b.n	3e7c <SBUS::parse()+0xb0>
					_parserState = 0;
    3e72:	2300      	movs	r3, #0
    3e74:	7323      	strb	r3, [r4, #12]
					return true;
    3e76:	2001      	movs	r0, #1
    3e78:	e000      	b.n	3e7c <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    3e7a:	2000      	movs	r0, #0
}
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
    3e7e:	bf00      	nop
    3e80:	20004ac0 	.word	0x20004ac0
    3e84:	20004bb0 	.word	0x20004bb0

00003e88 <SBUS::read(unsigned short*, bool*, bool*)>:
{
    3e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8a:	4604      	mov	r4, r0
    3e8c:	460d      	mov	r5, r1
    3e8e:	4616      	mov	r6, r2
    3e90:	461f      	mov	r7, r3
	if (parse()) {
    3e92:	f7ff ff9b 	bl	3dcc <SBUS::parse()>
    3e96:	4602      	mov	r2, r0
    3e98:	2800      	cmp	r0, #0
    3e9a:	f000 80a5 	beq.w	3fe8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    3e9e:	2d00      	cmp	r5, #0
    3ea0:	f000 808e 	beq.w	3fc0 <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    3ea4:	7c21      	ldrb	r1, [r4, #16]
    3ea6:	7be3      	ldrb	r3, [r4, #15]
    3ea8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3eb0:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    3eb2:	7c21      	ldrb	r1, [r4, #16]
    3eb4:	7c63      	ldrb	r3, [r4, #17]
    3eb6:	015b      	lsls	r3, r3, #5
    3eb8:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ec0:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    3ec2:	7ca1      	ldrb	r1, [r4, #18]
    3ec4:	7ce3      	ldrb	r3, [r4, #19]
    3ec6:	029b      	lsls	r3, r3, #10
    3ec8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3ecc:	7c61      	ldrb	r1, [r4, #17]
    3ece:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ed6:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    3ed8:	7ce1      	ldrb	r1, [r4, #19]
    3eda:	7d23      	ldrb	r3, [r4, #20]
    3edc:	01db      	lsls	r3, r3, #7
    3ede:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ee6:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    3ee8:	7d21      	ldrb	r1, [r4, #20]
    3eea:	7d63      	ldrb	r3, [r4, #21]
    3eec:	011b      	lsls	r3, r3, #4
    3eee:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ef6:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    3ef8:	7da1      	ldrb	r1, [r4, #22]
    3efa:	7de3      	ldrb	r3, [r4, #23]
    3efc:	025b      	lsls	r3, r3, #9
    3efe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3f02:	7d61      	ldrb	r1, [r4, #21]
    3f04:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f0c:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    3f0e:	7de1      	ldrb	r1, [r4, #23]
    3f10:	7e23      	ldrb	r3, [r4, #24]
    3f12:	019b      	lsls	r3, r3, #6
    3f14:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f1c:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    3f1e:	7e21      	ldrb	r1, [r4, #24]
    3f20:	7e63      	ldrb	r3, [r4, #25]
    3f22:	00db      	lsls	r3, r3, #3
    3f24:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3f28:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    3f2a:	7ee1      	ldrb	r1, [r4, #27]
    3f2c:	7ea3      	ldrb	r3, [r4, #26]
    3f2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f36:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    3f38:	7ee1      	ldrb	r1, [r4, #27]
    3f3a:	7f23      	ldrb	r3, [r4, #28]
    3f3c:	015b      	lsls	r3, r3, #5
    3f3e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f46:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    3f48:	7f61      	ldrb	r1, [r4, #29]
    3f4a:	7fa3      	ldrb	r3, [r4, #30]
    3f4c:	029b      	lsls	r3, r3, #10
    3f4e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3f52:	7f21      	ldrb	r1, [r4, #28]
    3f54:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f5c:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    3f5e:	7fa1      	ldrb	r1, [r4, #30]
    3f60:	7fe3      	ldrb	r3, [r4, #31]
    3f62:	01db      	lsls	r3, r3, #7
    3f64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f6c:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    3f6e:	7fe1      	ldrb	r1, [r4, #31]
    3f70:	f894 3020 	ldrb.w	r3, [r4, #32]
    3f74:	011b      	lsls	r3, r3, #4
    3f76:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f7e:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    3f80:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    3f84:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    3f88:	025b      	lsls	r3, r3, #9
    3f8a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3f8e:	f894 1020 	ldrb.w	r1, [r4, #32]
    3f92:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3f9a:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    3f9c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    3fa0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    3fa4:	019b      	lsls	r3, r3, #6
    3fa6:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3fae:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    3fb0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    3fb4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    3fb8:	00db      	lsls	r3, r3, #3
    3fba:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3fbe:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    3fc0:	b147      	cbz	r7, 3fd4 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    3fc2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3fc6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3fca:	4219      	tst	r1, r3
      	*lostFrame = true;
    3fcc:	bf14      	ite	ne
    3fce:	2301      	movne	r3, #1
				*lostFrame = false;
    3fd0:	2300      	moveq	r3, #0
    3fd2:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    3fd4:	b146      	cbz	r6, 3fe8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    3fd6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3fda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3fde:	4219      	tst	r1, r3
      		*failsafe = true;
    3fe0:	bf14      	ite	ne
    3fe2:	2301      	movne	r3, #1
      		*failsafe = false;
    3fe4:	2300      	moveq	r3, #0
    3fe6:	7033      	strb	r3, [r6, #0]
}
    3fe8:	4610      	mov	r0, r2
    3fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003fec <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    3fec:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    3ff0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    3ff2:	ee07 2a10 	vmov	s14, r2
    3ff6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3ffa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    3ffe:	ee07 3a90 	vmov	s15, r3
    4002:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4006:	ee77 7ac7 	vsub.f32	s15, s15, s14
    400a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    400e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    4012:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    4016:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    401a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    401e:	ee67 7a86 	vmul.f32	s15, s15, s12
    4022:	ee77 7a87 	vadd.f32	s15, s15, s14
    4026:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    402a:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    402e:	4770      	bx	lr

00004030 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    4030:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    4032:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    4036:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    403a:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    403e:	f7ff ffd5 	bl	3fec <SBUS::scaleBias(unsigned char)>
}
    4042:	bd08      	pop	{r3, pc}

00004044 <SBUS::begin()>:
{
    4044:	b538      	push	{r3, r4, r5, lr}
    4046:	4605      	mov	r5, r0
	_parserState = 0;
    4048:	2400      	movs	r4, #0
    404a:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    404c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    404e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    4050:	b2e1      	uxtb	r1, r4
    4052:	4628      	mov	r0, r5
    4054:	f7ff ffec 	bl	4030 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    4058:	3401      	adds	r4, #1
    405a:	2c10      	cmp	r4, #16
    405c:	d1f6      	bne.n	404c <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    405e:	f44f 729b 	mov.w	r2, #310	; 0x136
    4062:	6829      	ldr	r1, [r5, #0]
    4064:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    4068:	f008 f8b2 	bl	c1d0 <HardwareSerial::begin(unsigned long, unsigned short)>
}
    406c:	bd38      	pop	{r3, r4, r5, pc}

0000406e <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    406e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4072:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4076:	1a10      	subs	r0, r2, r0
    4078:	4770      	bx	lr

0000407a <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    407a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    407e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4082:	429a      	cmp	r2, r3
    4084:	d905      	bls.n	4092 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    4086:	1c5a      	adds	r2, r3, #1
    4088:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    408c:	4418      	add	r0, r3
    408e:	7e80      	ldrb	r0, [r0, #26]
    4090:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    4092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    4096:	4770      	bx	lr

00004098 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4098:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    409c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    40a0:	429a      	cmp	r2, r3
    40a2:	d902      	bls.n	40aa <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    40a4:	4418      	add	r0, r3
    40a6:	7e80      	ldrb	r0, [r0, #26]
    40a8:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    40aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    40ae:	4770      	bx	lr

000040b0 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    40b0:	4770      	bx	lr

000040b2 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    40b2:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    40b6:	b17b      	cbz	r3, 40d8 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    40b8:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    40bc:	2b88      	cmp	r3, #136	; 0x88
    40be:	d903      	bls.n	40c8 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    40c0:	2301      	movs	r3, #1
    40c2:	6043      	str	r3, [r0, #4]
			return 0;
    40c4:	2000      	movs	r0, #0
    40c6:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    40c8:	1c5a      	adds	r2, r3, #1
    40ca:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    40ce:	4418      	add	r0, r3
    40d0:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    40d4:	2001      	movs	r0, #1
    40d6:	4770      	bx	lr
	return 0;
    40d8:	2000      	movs	r0, #0
}
    40da:	4770      	bx	lr

000040dc <TwoWire::write(unsigned char const*, unsigned int)>:
{
    40dc:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    40de:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    40e2:	b90b      	cbnz	r3, 40e8 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    40e4:	2000      	movs	r0, #0
}
    40e6:	bd38      	pop	{r3, r4, r5, pc}
    40e8:	4605      	mov	r5, r0
    40ea:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    40ec:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    40f0:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    40f4:	42a2      	cmp	r2, r4
    40f6:	d202      	bcs.n	40fe <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    40f8:	2001      	movs	r0, #1
    40fa:	6068      	str	r0, [r5, #4]
			quantity = avail;
    40fc:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    40fe:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    4102:	4622      	mov	r2, r4
    4104:	4418      	add	r0, r3
    4106:	f009 f80b 	bl	d120 <memcpy>
		txBufferLength += quantity;
    410a:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    410e:	4423      	add	r3, r4
    4110:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    4114:	4620      	mov	r0, r4
    4116:	e7e6      	b.n	40e6 <TwoWire::write(unsigned char const*, unsigned int)+0xa>

00004118 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    4118:	b538      	push	{r3, r4, r5, lr}
    411a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    411c:	2500      	movs	r5, #0
    411e:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    4120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4124:	6083      	str	r3, [r0, #8]
    4126:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    4128:	4b15      	ldr	r3, [pc, #84]	; (4180 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    412a:	6003      	str	r3, [r0, #0]
    412c:	6101      	str	r1, [r0, #16]
    412e:	6142      	str	r2, [r0, #20]
    4130:	7605      	strb	r5, [r0, #24]
    4132:	7645      	strb	r5, [r0, #25]
    4134:	2288      	movs	r2, #136	; 0x88
    4136:	4629      	mov	r1, r5
    4138:	301a      	adds	r0, #26
    413a:	f00d f8bb 	bl	112b4 <memset>
    413e:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    4142:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    4146:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    414a:	2289      	movs	r2, #137	; 0x89
    414c:	4629      	mov	r1, r5
    414e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    4152:	f00d f8af 	bl	112b4 <memset>
    4156:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    415a:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    415e:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    4162:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    4166:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    416a:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    416e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    4172:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    4176:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    417a:	4620      	mov	r0, r4
    417c:	bd38      	pop	{r3, r4, r5, pc}
    417e:	bf00      	nop
    4180:	2000238c 	.word	0x2000238c

00004184 <TwoWire::force_clock()>:
{
    4184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4188:	b083      	sub	sp, #12
    418a:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    418c:	6943      	ldr	r3, [r0, #20]
    418e:	7e02      	ldrb	r2, [r0, #24]
    4190:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4194:	7a11      	ldrb	r1, [r2, #8]
    4196:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4198:	7e42      	ldrb	r2, [r0, #25]
    419a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    419e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    41a2:	4b47      	ldr	r3, [pc, #284]	; (42c0 <TwoWire::force_clock()+0x13c>)
    41a4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    41a8:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    41ac:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    41ae:	ea4f 1108 	mov.w	r1, r8, lsl #4
    41b2:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    41b6:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    41b8:	6852      	ldr	r2, [r2, #4]
    41ba:	2415      	movs	r4, #21
    41bc:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    41be:	f853 200e 	ldr.w	r2, [r3, lr]
    41c2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    41c6:	f853 e00e 	ldr.w	lr, [r3, lr]
    41ca:	f8de 2004 	ldr.w	r2, [lr, #4]
    41ce:	4332      	orrs	r2, r6
    41d0:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    41d4:	686a      	ldr	r2, [r5, #4]
    41d6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    41d8:	585a      	ldr	r2, [r3, r1]
    41da:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    41de:	585a      	ldr	r2, [r3, r1]
    41e0:	6853      	ldr	r3, [r2, #4]
    41e2:	4303      	orrs	r3, r0
    41e4:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    41e6:	4b37      	ldr	r3, [pc, #220]	; (42c4 <TwoWire::force_clock()+0x140>)
    41e8:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    41ea:	4b37      	ldr	r3, [pc, #220]	; (42c8 <TwoWire::force_clock()+0x144>)
    41ec:	681a      	ldr	r2, [r3, #0]
    41ee:	4b37      	ldr	r3, [pc, #220]	; (42cc <TwoWire::force_clock()+0x148>)
    41f0:	fba3 3202 	umull	r3, r2, r3, r2
    41f4:	0c92      	lsrs	r2, r2, #18
    41f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    41fa:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    41fc:	4931      	ldr	r1, [pc, #196]	; (42c4 <TwoWire::force_clock()+0x140>)
    41fe:	684b      	ldr	r3, [r1, #4]
    4200:	1b1b      	subs	r3, r3, r4
    4202:	429a      	cmp	r2, r3
    4204:	d8fb      	bhi.n	41fe <TwoWire::force_clock()+0x7a>
    4206:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    4208:	492d      	ldr	r1, [pc, #180]	; (42c0 <TwoWire::force_clock()+0x13c>)
    420a:	9b01      	ldr	r3, [sp, #4]
    420c:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4210:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    4214:	4b2b      	ldr	r3, [pc, #172]	; (42c4 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4216:	4d2c      	ldr	r5, [pc, #176]	; (42c8 <TwoWire::force_clock()+0x144>)
    4218:	4c2c      	ldr	r4, [pc, #176]	; (42cc <TwoWire::force_clock()+0x148>)
    421a:	e025      	b.n	4268 <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    421c:	680f      	ldr	r7, [r1, #0]
    421e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4222:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4226:	f8d5 a000 	ldr.w	sl, [r5]
    422a:	fba4 9a0a 	umull	r9, sl, r4, sl
    422e:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4232:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4236:	685f      	ldr	r7, [r3, #4]
    4238:	eba7 090b 	sub.w	r9, r7, fp
    423c:	45ca      	cmp	sl, r9
    423e:	d8fa      	bhi.n	4236 <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    4240:	680f      	ldr	r7, [r1, #0]
    4242:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4246:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    424a:	f8d5 a000 	ldr.w	sl, [r5]
    424e:	fba4 9a0a 	umull	r9, sl, r4, sl
    4252:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4256:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    425a:	685f      	ldr	r7, [r3, #4]
    425c:	eba7 090b 	sub.w	r9, r7, fp
    4260:	45ca      	cmp	sl, r9
    4262:	d8fa      	bhi.n	425a <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    4264:	3a01      	subs	r2, #1
    4266:	d00e      	beq.n	4286 <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4268:	f8de 7000 	ldr.w	r7, [lr]
    426c:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4270:	ea19 0f06 	tst.w	r9, r6
    4274:	d0d2      	beq.n	421c <TwoWire::force_clock()+0x98>
    4276:	680f      	ldr	r7, [r1, #0]
    4278:	f8d7 9008 	ldr.w	r9, [r7, #8]
    427c:	ea19 0f00 	tst.w	r9, r0
    4280:	d0cc      	beq.n	421c <TwoWire::force_clock()+0x98>
			ret = true;
    4282:	2001      	movs	r0, #1
    4284:	e000      	b.n	4288 <TwoWire::force_clock()+0x104>
	bool ret = false;
    4286:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4288:	4b0d      	ldr	r3, [pc, #52]	; (42c0 <TwoWire::force_clock()+0x13c>)
    428a:	9a01      	ldr	r2, [sp, #4]
    428c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    4290:	6879      	ldr	r1, [r7, #4]
    4292:	f8dc 2014 	ldr.w	r2, [ip, #20]
    4296:	f89c 4018 	ldrb.w	r4, [ip, #24]
    429a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    429e:	68d2      	ldr	r2, [r2, #12]
    42a0:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    42a2:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    42a6:	685a      	ldr	r2, [r3, #4]
    42a8:	f8dc 3014 	ldr.w	r3, [ip, #20]
    42ac:	f89c 1019 	ldrb.w	r1, [ip, #25]
    42b0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    42b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    42b6:	6013      	str	r3, [r2, #0]
}
    42b8:	b003      	add	sp, #12
    42ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42be:	bf00      	nop
    42c0:	200026d0 	.word	0x200026d0
    42c4:	e0001000 	.word	0xe0001000
    42c8:	20003130 	.word	0x20003130
    42cc:	431bde83 	.word	0x431bde83

000042d0 <TwoWire::wait_idle()>:
{
    42d0:	b538      	push	{r3, r4, r5, lr}
    42d2:	4605      	mov	r5, r0
	return systick_millis_count;
    42d4:	4b0c      	ldr	r3, [pc, #48]	; (4308 <TwoWire::wait_idle()+0x38>)
    42d6:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    42d8:	6902      	ldr	r2, [r0, #16]
    42da:	4619      	mov	r1, r3
    42dc:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    42de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    42e2:	d00a      	beq.n	42fa <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    42e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    42e8:	d107      	bne.n	42fa <TwoWire::wait_idle()+0x2a>
    42ea:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    42ec:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    42ee:	2b10      	cmp	r3, #16
    42f0:	d9f4      	bls.n	42dc <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    42f2:	4628      	mov	r0, r5
    42f4:	f7ff ff46 	bl	4184 <TwoWire::force_clock()>
    42f8:	b120      	cbz	r0, 4304 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    42fa:	692b      	ldr	r3, [r5, #16]
    42fc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    4300:	615a      	str	r2, [r3, #20]
	return true;
    4302:	2001      	movs	r0, #1
}
    4304:	bd38      	pop	{r3, r4, r5, pc}
    4306:	bf00      	nop
    4308:	200052a8 	.word	0x200052a8

0000430c <TwoWire::endTransmission(unsigned char)>:
{
    430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    4310:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    4314:	2e00      	cmp	r6, #0
    4316:	d06e      	beq.n	43f6 <TwoWire::endTransmission(unsigned char)+0xea>
    4318:	4605      	mov	r5, r0
    431a:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    431c:	f7ff ffd8 	bl	42d0 <TwoWire::wait_idle()>
    4320:	2800      	cmp	r0, #0
    4322:	d06b      	beq.n	43fc <TwoWire::endTransmission(unsigned char)+0xf0>
    4324:	4b36      	ldr	r3, [pc, #216]	; (4400 <TwoWire::endTransmission(unsigned char)+0xf4>)
    4326:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    432a:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    432c:	f44f 7a00 	mov.w	sl, #512	; 0x200
    4330:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4332:	e040      	b.n	43b6 <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4334:	692b      	ldr	r3, [r5, #16]
    4336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4338:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    433c:	f012 0f04 	tst.w	r2, #4
    4340:	d00b      	beq.n	435a <TwoWire::endTransmission(unsigned char)+0x4e>
    4342:	e03a      	b.n	43ba <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    4344:	42a6      	cmp	r6, r4
    4346:	d912      	bls.n	436e <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4348:	692a      	ldr	r2, [r5, #16]
    434a:	1929      	adds	r1, r5, r4
    434c:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    4350:	6611      	str	r1, [r2, #96]	; 0x60
    4352:	3401      	adds	r4, #1
				fifo_used++;
    4354:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    4356:	2b03      	cmp	r3, #3
    4358:	d82f      	bhi.n	43ba <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    435a:	2c00      	cmp	r4, #0
    435c:	d1f2      	bne.n	4344 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    435e:	6929      	ldr	r1, [r5, #16]
    4360:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    4364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4368:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    436a:	2401      	movs	r4, #1
    436c:	e7f2      	b.n	4354 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    436e:	f1b9 0f00 	cmp.w	r9, #0
    4372:	d002      	beq.n	437a <TwoWire::endTransmission(unsigned char)+0x6e>
    4374:	692b      	ldr	r3, [r5, #16]
    4376:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    437a:	3401      	adds	r4, #1
					break;
    437c:	e01d      	b.n	43ba <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    437e:	690b      	ldr	r3, [r1, #16]
    4380:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4384:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    4386:	2004      	movs	r0, #4
    4388:	e036      	b.n	43f8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    438a:	690b      	ldr	r3, [r1, #16]
    438c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4390:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    4392:	692b      	ldr	r3, [r5, #16]
    4394:	f44f 7200 	mov.w	r2, #512	; 0x200
    4398:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    439a:	2002      	movs	r0, #2
    439c:	e02c      	b.n	43f8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    439e:	690b      	ldr	r3, [r1, #16]
    43a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    43a4:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    43a6:	692b      	ldr	r3, [r5, #16]
    43a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    43ac:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    43ae:	2004      	movs	r0, #4
    43b0:	e022      	b.n	43f8 <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    43b2:	f00a fd15 	bl	ede0 <yield>
		if (tx_index <= tx_len) {
    43b6:	42b4      	cmp	r4, r6
    43b8:	d9bc      	bls.n	4334 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    43ba:	6929      	ldr	r1, [r5, #16]
    43bc:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    43be:	f413 6f00 	tst.w	r3, #2048	; 0x800
    43c2:	d1dc      	bne.n	437e <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    43c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    43c8:	d1df      	bne.n	438a <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    43ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    43ce:	d1e6      	bne.n	439e <TwoWire::endTransmission(unsigned char)+0x92>
    43d0:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    43d2:	eba2 0208 	sub.w	r2, r2, r8
    43d6:	2a32      	cmp	r2, #50	; 0x32
    43d8:	d8e1      	bhi.n	439e <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    43da:	42b4      	cmp	r4, r6
    43dc:	d9e9      	bls.n	43b2 <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    43de:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    43e0:	f012 0f07 	tst.w	r2, #7
    43e4:	d1e5      	bne.n	43b2 <TwoWire::endTransmission(unsigned char)+0xa6>
    43e6:	f413 7f00 	tst.w	r3, #512	; 0x200
    43ea:	d102      	bne.n	43f2 <TwoWire::endTransmission(unsigned char)+0xe6>
    43ec:	f1b9 0f00 	cmp.w	r9, #0
    43f0:	d1df      	bne.n	43b2 <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    43f2:	2000      	movs	r0, #0
    43f4:	e000      	b.n	43f8 <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    43f6:	2004      	movs	r0, #4
}
    43f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    43fc:	2004      	movs	r0, #4
    43fe:	e7fb      	b.n	43f8 <TwoWire::endTransmission(unsigned char)+0xec>
    4400:	200052a8 	.word	0x200052a8

00004404 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4408:	4604      	mov	r4, r0
    440a:	460d      	mov	r5, r1
    440c:	4616      	mov	r6, r2
    440e:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    4410:	f7ff ff5e 	bl	42d0 <TwoWire::wait_idle()>
    4414:	2800      	cmp	r0, #0
    4416:	f000 8090 	beq.w	453a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    441a:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    441c:	2e01      	cmp	r6, #1
    441e:	bf38      	it	cc
    4420:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    4422:	2500      	movs	r5, #0
    4424:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    4428:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    442c:	4b44      	ldr	r3, [pc, #272]	; (4540 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    442e:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4432:	b2c9      	uxtb	r1, r1
    4434:	f240 4701 	movw	r7, #1025	; 0x401
    4438:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    443a:	e059      	b.n	44f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    443c:	6923      	ldr	r3, [r4, #16]
    443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4440:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    4444:	f013 0f04 	tst.w	r3, #4
    4448:	d154      	bne.n	44f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    444a:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    444c:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4450:	1e70      	subs	r0, r6, #1
    4452:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4456:	4429      	add	r1, r5
    4458:	e010      	b.n	447c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    445a:	2b01      	cmp	r3, #1
    445c:	d006      	beq.n	446c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    445e:	f1b8 0f00 	cmp.w	r8, #0
    4462:	d005      	beq.n	4470 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    4464:	6922      	ldr	r2, [r4, #16]
    4466:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    446a:	e001      	b.n	4470 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    446c:	6922      	ldr	r2, [r4, #16]
    446e:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    4470:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    4472:	1aca      	subs	r2, r1, r3
    4474:	2a03      	cmp	r2, #3
    4476:	d806      	bhi.n	4486 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    4478:	2b02      	cmp	r3, #2
    447a:	d804      	bhi.n	4486 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    447c:	2b00      	cmp	r3, #0
    447e:	d1ec      	bne.n	445a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4480:	6922      	ldr	r2, [r4, #16]
    4482:	6617      	str	r7, [r2, #96]	; 0x60
    4484:	e7f4      	b.n	4470 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    4486:	461d      	mov	r5, r3
    4488:	e034      	b.n	44f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    448a:	f8d4 c010 	ldr.w	ip, [r4, #16]
    448e:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    4492:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4496:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    449a:	d02f      	beq.n	44fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    449c:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    44a0:	460b      	mov	r3, r1
    44a2:	3101      	adds	r1, #1
    44a4:	b2c9      	uxtb	r1, r1
    44a6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    44aa:	4423      	add	r3, r4
    44ac:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    44ae:	3a01      	subs	r2, #1
    44b0:	d024      	beq.n	44fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    44b2:	2987      	cmp	r1, #135	; 0x87
    44b4:	d9f2      	bls.n	449c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    44b6:	e021      	b.n	44fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44b8:	690b      	ldr	r3, [r1, #16]
    44ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    44be:	610b      	str	r3, [r1, #16]
			break;
    44c0:	e007      	b.n	44d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44c2:	690b      	ldr	r3, [r1, #16]
    44c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    44c8:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    44ca:	6923      	ldr	r3, [r4, #16]
    44cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    44d0:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    44d2:	6923      	ldr	r3, [r4, #16]
    44d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    44d6:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    44da:	d003      	beq.n	44e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    44dc:	691a      	ldr	r2, [r3, #16]
    44de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    44e2:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    44e4:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    44e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    44ec:	f00a fc78 	bl	ede0 <yield>
		if (tx_state < 3) {
    44f0:	2d02      	cmp	r5, #2
    44f2:	d9a3      	bls.n	443c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    44f4:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    44f8:	2987      	cmp	r1, #135	; 0x87
    44fa:	d9c6      	bls.n	448a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    44fc:	6921      	ldr	r1, [r4, #16]
    44fe:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    4500:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4504:	d1d8      	bne.n	44b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4506:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    450a:	d1da      	bne.n	44c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    450c:	4b0c      	ldr	r3, [pc, #48]	; (4540 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    450e:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    4510:	eba3 0309 	sub.w	r3, r3, r9
    4514:	2b32      	cmp	r3, #50	; 0x32
    4516:	d8d4      	bhi.n	44c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    4518:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    451c:	42b3      	cmp	r3, r6
    451e:	d3e5      	bcc.n	44ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4520:	2d02      	cmp	r5, #2
    4522:	d9e3      	bls.n	44ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4524:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4526:	f013 0f07 	tst.w	r3, #7
    452a:	d1df      	bne.n	44ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    452c:	f412 7f00 	tst.w	r2, #512	; 0x200
    4530:	d1cf      	bne.n	44d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    4532:	f1b8 0f00 	cmp.w	r8, #0
    4536:	d1d9      	bne.n	44ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4538:	e7cb      	b.n	44d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    453a:	2004      	movs	r0, #4
    453c:	e7d4      	b.n	44e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    453e:	bf00      	nop
    4540:	200052a8 	.word	0x200052a8

00004544 <TwoWire::isr()>:
{
    4544:	b538      	push	{r3, r4, r5, lr}
    4546:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    4548:	6903      	ldr	r3, [r0, #16]
    454a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    454e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    4552:	d001      	beq.n	4558 <TwoWire::isr()+0x14>
    4554:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4558:	f015 0f02 	tst.w	r5, #2
    455c:	d012      	beq.n	4584 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    455e:	6923      	ldr	r3, [r4, #16]
    4560:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    4564:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    4568:	d008      	beq.n	457c <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    456a:	2300      	movs	r3, #0
    456c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    4570:	1c59      	adds	r1, r3, #1
    4572:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4576:	4423      	add	r3, r4
    4578:	769a      	strb	r2, [r3, #26]
    457a:	e003      	b.n	4584 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    457c:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4580:	2b87      	cmp	r3, #135	; 0x87
    4582:	d9f5      	bls.n	4570 <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4584:	f015 0f01 	tst.w	r5, #1
    4588:	d01b      	beq.n	45c2 <TwoWire::isr()+0x7e>
		if (!transmitting) {
    458a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    458e:	b94b      	cbnz	r3, 45a4 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    4590:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    4594:	b103      	cbz	r3, 4598 <TwoWire::isr()+0x54>
				(*user_onRequest)();
    4596:	4798      	blx	r3
			txBufferIndex = 0;
    4598:	2300      	movs	r3, #0
    459a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    459e:	2301      	movs	r3, #1
    45a0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    45a4:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    45a8:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    45ac:	429a      	cmp	r2, r3
    45ae:	d91e      	bls.n	45ee <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    45b0:	1c5a      	adds	r2, r3, #1
    45b2:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    45b6:	6922      	ldr	r2, [r4, #16]
    45b8:	4423      	add	r3, r4
    45ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    45be:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    45c2:	f415 7f00 	tst.w	r5, #512	; 0x200
    45c6:	d011      	beq.n	45ec <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    45c8:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    45cc:	b118      	cbz	r0, 45d6 <TwoWire::isr()+0x92>
    45ce:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    45d2:	b103      	cbz	r3, 45d6 <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    45d4:	4798      	blx	r3
		rxBufferIndex = 0;
    45d6:	2300      	movs	r3, #0
    45d8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    45dc:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    45e0:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    45e4:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    45e8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    45ec:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    45ee:	6923      	ldr	r3, [r4, #16]
    45f0:	2200      	movs	r2, #0
    45f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    45f6:	e7e4      	b.n	45c2 <TwoWire::isr()+0x7e>

000045f8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    45f8:	b508      	push	{r3, lr}
    45fa:	4802      	ldr	r0, [pc, #8]	; (4604 <lpi2c1_isr()+0xc>)
    45fc:	f7ff ffa2 	bl	4544 <TwoWire::isr()>
    4600:	bd08      	pop	{r3, pc}
    4602:	bf00      	nop
    4604:	20004700 	.word	0x20004700

00004608 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4608:	b508      	push	{r3, lr}
    460a:	4802      	ldr	r0, [pc, #8]	; (4614 <lpi2c3_isr()+0xc>)
    460c:	f7ff ff9a 	bl	4544 <TwoWire::isr()>
    4610:	bd08      	pop	{r3, pc}
    4612:	bf00      	nop
    4614:	20004840 	.word	0x20004840

00004618 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4618:	b508      	push	{r3, lr}
    461a:	4802      	ldr	r0, [pc, #8]	; (4624 <lpi2c4_isr()+0xc>)
    461c:	f7ff ff92 	bl	4544 <TwoWire::isr()>
    4620:	bd08      	pop	{r3, pc}
    4622:	bf00      	nop
    4624:	20004980 	.word	0x20004980

00004628 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    4628:	6903      	ldr	r3, [r0, #16]
    462a:	2200      	movs	r2, #0
    462c:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    462e:	4b1d      	ldr	r3, [pc, #116]	; (46a4 <TwoWire::setClock(unsigned long)+0x7c>)
    4630:	4299      	cmp	r1, r3
    4632:	d81a      	bhi.n	466a <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4634:	6903      	ldr	r3, [r0, #16]
    4636:	4a1c      	ldr	r2, [pc, #112]	; (46a8 <TwoWire::setClock(unsigned long)+0x80>)
    4638:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    463a:	6903      	ldr	r3, [r0, #16]
    463c:	2201      	movs	r2, #1
    463e:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4640:	6903      	ldr	r3, [r0, #16]
    4642:	4a1a      	ldr	r2, [pc, #104]	; (46ac <TwoWire::setClock(unsigned long)+0x84>)
    4644:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4646:	6903      	ldr	r3, [r0, #16]
    4648:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    464c:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    464e:	6903      	ldr	r3, [r0, #16]
    4650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4652:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4654:	6903      	ldr	r3, [r0, #16]
    4656:	2200      	movs	r2, #0
    4658:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    465a:	6903      	ldr	r3, [r0, #16]
    465c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4660:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4662:	6903      	ldr	r3, [r0, #16]
    4664:	2201      	movs	r2, #1
    4666:	611a      	str	r2, [r3, #16]
}
    4668:	4770      	bx	lr
	} else if (frequency < 1000000) {
    466a:	4b11      	ldr	r3, [pc, #68]	; (46b0 <TwoWire::setClock(unsigned long)+0x88>)
    466c:	4299      	cmp	r1, r3
    466e:	d80c      	bhi.n	468a <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    4670:	6903      	ldr	r3, [r0, #16]
    4672:	4a10      	ldr	r2, [pc, #64]	; (46b4 <TwoWire::setClock(unsigned long)+0x8c>)
    4674:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4676:	6903      	ldr	r3, [r0, #16]
    4678:	2200      	movs	r2, #0
    467a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    467c:	6903      	ldr	r3, [r0, #16]
    467e:	4a0e      	ldr	r2, [pc, #56]	; (46b8 <TwoWire::setClock(unsigned long)+0x90>)
    4680:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4682:	6903      	ldr	r3, [r0, #16]
    4684:	4a0d      	ldr	r2, [pc, #52]	; (46bc <TwoWire::setClock(unsigned long)+0x94>)
    4686:	62da      	str	r2, [r3, #44]	; 0x2c
    4688:	e7e1      	b.n	464e <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    468a:	6903      	ldr	r3, [r0, #16]
    468c:	4a0c      	ldr	r2, [pc, #48]	; (46c0 <TwoWire::setClock(unsigned long)+0x98>)
    468e:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4690:	6903      	ldr	r3, [r0, #16]
    4692:	2200      	movs	r2, #0
    4694:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4696:	6903      	ldr	r3, [r0, #16]
    4698:	4a0a      	ldr	r2, [pc, #40]	; (46c4 <TwoWire::setClock(unsigned long)+0x9c>)
    469a:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    469c:	6903      	ldr	r3, [r0, #16]
    469e:	4a07      	ldr	r2, [pc, #28]	; (46bc <TwoWire::setClock(unsigned long)+0x94>)
    46a0:	62da      	str	r2, [r3, #44]	; 0x2c
    46a2:	e7d4      	b.n	464e <TwoWire::setClock(unsigned long)+0x26>
    46a4:	00061a7f 	.word	0x00061a7f
    46a8:	1928373b 	.word	0x1928373b
    46ac:	05050bb8 	.word	0x05050bb8
    46b0:	000f423f 	.word	0x000f423f
    46b4:	0c121a1c 	.word	0x0c121a1c
    46b8:	02020e10 	.word	0x02020e10
    46bc:	00057f00 	.word	0x00057f00
    46c0:	0407090a 	.word	0x0407090a
    46c4:	01010960 	.word	0x01010960

000046c8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    46c8:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    46ca:	4c09      	ldr	r4, [pc, #36]	; (46f0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    46cc:	4622      	mov	r2, r4
    46ce:	4909      	ldr	r1, [pc, #36]	; (46f4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    46d0:	4809      	ldr	r0, [pc, #36]	; (46f8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    46d2:	f7ff fd21 	bl	4118 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    46d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    46da:	4908      	ldr	r1, [pc, #32]	; (46fc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    46dc:	4808      	ldr	r0, [pc, #32]	; (4700 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    46de:	f7ff fd1b 	bl	4118 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    46e2:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    46e6:	4907      	ldr	r1, [pc, #28]	; (4704 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    46e8:	4807      	ldr	r0, [pc, #28]	; (4708 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    46ea:	f7ff fd15 	bl	4118 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    46ee:	bd10      	pop	{r4, pc}
    46f0:	60001fa8 	.word	0x60001fa8
    46f4:	403f0000 	.word	0x403f0000
    46f8:	20004700 	.word	0x20004700
    46fc:	403f8000 	.word	0x403f8000
    4700:	20004840 	.word	0x20004840
    4704:	403fc000 	.word	0x403fc000
    4708:	20004980 	.word	0x20004980

0000470c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    470c:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    470e:	4b2e      	ldr	r3, [pc, #184]	; (47c8 <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4710:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4712:	7908      	ldrb	r0, [r1, #4]
    4714:	4a2d      	ldr	r2, [pc, #180]	; (47cc <_spi_dma_rxISR0()+0xc0>)
    4716:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4718:	6c58      	ldr	r0, [r3, #68]	; 0x44
    471a:	7900      	ldrb	r0, [r0, #4]
    471c:	7710      	strb	r0, [r2, #28]
    471e:	7909      	ldrb	r1, [r1, #4]
    4720:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4724:	2b00      	cmp	r3, #0
    4726:	d03a      	beq.n	479e <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    472c:	d30b      	bcc.n	4746 <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    472e:	4a28      	ldr	r2, [pc, #160]	; (47d0 <_spi_dma_rxISR0()+0xc4>)
    4730:	441a      	add	r2, r3
    4732:	4b25      	ldr	r3, [pc, #148]	; (47c8 <_spi_dma_rxISR0()+0xbc>)
    4734:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4738:	7911      	ldrb	r1, [r2, #4]
    473a:	4a24      	ldr	r2, [pc, #144]	; (47cc <_spi_dma_rxISR0()+0xc0>)
    473c:	76d1      	strb	r1, [r2, #27]
    473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4740:	791b      	ldrb	r3, [r3, #4]
    4742:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4744:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4746:	4a20      	ldr	r2, [pc, #128]	; (47c8 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4748:	6c52      	ldr	r2, [r2, #68]	; 0x44
    474a:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    474c:	8bd1      	ldrh	r1, [r2, #30]
    474e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4752:	d114      	bne.n	477e <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4754:	b29b      	uxth	r3, r3
    4756:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4758:	8bd3      	ldrh	r3, [r2, #30]
    475a:	b29b      	uxth	r3, r3
    475c:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    475e:	4b1a      	ldr	r3, [pc, #104]	; (47c8 <_spi_dma_rxISR0()+0xbc>)
    4760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4764:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4766:	8bd9      	ldrh	r1, [r3, #30]
    4768:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    476c:	d10f      	bne.n	478e <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    476e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4772:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4774:	8bda      	ldrh	r2, [r3, #30]
    4776:	b292      	uxth	r2, r2
    4778:	82da      	strh	r2, [r3, #22]
    477a:	2200      	movs	r2, #0
    477c:	e7d9      	b.n	4732 <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    477e:	8bd1      	ldrh	r1, [r2, #30]
    4780:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4784:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4788:	430b      	orrs	r3, r1
    478a:	83d3      	strh	r3, [r2, #30]
    478c:	e7e4      	b.n	4758 <_spi_dma_rxISR0()+0x4c>
    478e:	8bd9      	ldrh	r1, [r3, #30]
    4790:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4794:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4798:	430a      	orrs	r2, r1
    479a:	83da      	strh	r2, [r3, #30]
    479c:	e7ea      	b.n	4774 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    479e:	4a0a      	ldr	r2, [pc, #40]	; (47c8 <_spi_dma_rxISR0()+0xbc>)
    47a0:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    47a2:	210f      	movs	r1, #15
    47a4:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    47a6:	2100      	movs	r1, #0
    47a8:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    47aa:	f240 3001 	movw	r0, #769	; 0x301
    47ae:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    47b0:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    47b4:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    47b6:	2303      	movs	r3, #3
    47b8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    47bc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    47be:	6803      	ldr	r3, [r0, #0]
    47c0:	681b      	ldr	r3, [r3, #0]
    47c2:	460a      	mov	r2, r1
    47c4:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    47c6:	e7bd      	b.n	4744 <_spi_dma_rxISR0()+0x38>
    47c8:	200045b0 	.word	0x200045b0
    47cc:	400e8000 	.word	0x400e8000
    47d0:	ffff8001 	.word	0xffff8001

000047d4 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    47d4:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    47d6:	4b2e      	ldr	r3, [pc, #184]	; (4890 <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    47d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    47da:	7908      	ldrb	r0, [r1, #4]
    47dc:	4a2d      	ldr	r2, [pc, #180]	; (4894 <_spi_dma_rxISR1()+0xc0>)
    47de:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    47e0:	6c58      	ldr	r0, [r3, #68]	; 0x44
    47e2:	7900      	ldrb	r0, [r0, #4]
    47e4:	7710      	strb	r0, [r2, #28]
    47e6:	7909      	ldrb	r1, [r1, #4]
    47e8:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    47ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47ec:	2b00      	cmp	r3, #0
    47ee:	d03a      	beq.n	4866 <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    47f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    47f4:	d30b      	bcc.n	480e <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    47f6:	4a28      	ldr	r2, [pc, #160]	; (4898 <_spi_dma_rxISR1()+0xc4>)
    47f8:	441a      	add	r2, r3
    47fa:	4b25      	ldr	r3, [pc, #148]	; (4890 <_spi_dma_rxISR1()+0xbc>)
    47fc:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    47fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4800:	7911      	ldrb	r1, [r2, #4]
    4802:	4a24      	ldr	r2, [pc, #144]	; (4894 <_spi_dma_rxISR1()+0xc0>)
    4804:	76d1      	strb	r1, [r2, #27]
    4806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4808:	791b      	ldrb	r3, [r3, #4]
    480a:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    480c:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    480e:	4a20      	ldr	r2, [pc, #128]	; (4890 <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4810:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4812:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4814:	8bd1      	ldrh	r1, [r2, #30]
    4816:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    481a:	d114      	bne.n	4846 <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    481c:	b29b      	uxth	r3, r3
    481e:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4820:	8bd3      	ldrh	r3, [r2, #30]
    4822:	b29b      	uxth	r3, r3
    4824:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4826:	4b1a      	ldr	r3, [pc, #104]	; (4890 <_spi_dma_rxISR1()+0xbc>)
    4828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    482a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    482c:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    482e:	8bd9      	ldrh	r1, [r3, #30]
    4830:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4834:	d10f      	bne.n	4856 <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4836:	f3c2 020e 	ubfx	r2, r2, #0, #15
    483a:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    483c:	8bda      	ldrh	r2, [r3, #30]
    483e:	b292      	uxth	r2, r2
    4840:	82da      	strh	r2, [r3, #22]
    4842:	2200      	movs	r2, #0
    4844:	e7d9      	b.n	47fa <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4846:	8bd1      	ldrh	r1, [r2, #30]
    4848:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    484c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4850:	430b      	orrs	r3, r1
    4852:	83d3      	strh	r3, [r2, #30]
    4854:	e7e4      	b.n	4820 <_spi_dma_rxISR1()+0x4c>
    4856:	8bd9      	ldrh	r1, [r3, #30]
    4858:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    485c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4860:	430a      	orrs	r2, r1
    4862:	83da      	strh	r2, [r3, #30]
    4864:	e7ea      	b.n	483c <_spi_dma_rxISR1()+0x68>
    4866:	4a0a      	ldr	r2, [pc, #40]	; (4890 <_spi_dma_rxISR1()+0xbc>)
    4868:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    486a:	210f      	movs	r1, #15
    486c:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    486e:	2100      	movs	r1, #0
    4870:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4872:	f240 3001 	movw	r0, #769	; 0x301
    4876:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4878:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    487c:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    487e:	2303      	movs	r3, #3
    4880:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4884:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4886:	6803      	ldr	r3, [r0, #0]
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	460a      	mov	r2, r1
    488c:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    488e:	e7bd      	b.n	480c <_spi_dma_rxISR1()+0x38>
    4890:	20004600 	.word	0x20004600
    4894:	400e8000 	.word	0x400e8000
    4898:	ffff8001 	.word	0xffff8001

0000489c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    489c:	6001      	str	r1, [r0, #0]
    489e:	6042      	str	r2, [r0, #4]
    48a0:	2300      	movs	r3, #0
    48a2:	6083      	str	r3, [r0, #8]
    48a4:	60c3      	str	r3, [r0, #12]
    48a6:	7403      	strb	r3, [r0, #16]
    48a8:	7443      	strb	r3, [r0, #17]
    48aa:	7483      	strb	r3, [r0, #18]
    48ac:	74c3      	strb	r3, [r0, #19]
    48ae:	6143      	str	r3, [r0, #20]
    48b0:	6183      	str	r3, [r0, #24]
    48b2:	61c3      	str	r3, [r0, #28]
    48b4:	6203      	str	r3, [r0, #32]
    48b6:	6243      	str	r3, [r0, #36]	; 0x24
    48b8:	6283      	str	r3, [r0, #40]	; 0x28
    48ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    48bc:	6303      	str	r3, [r0, #48]	; 0x30
    48be:	6343      	str	r3, [r0, #52]	; 0x34
    48c0:	6383      	str	r3, [r0, #56]	; 0x38
    48c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    48c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    48ca:	6403      	str	r3, [r0, #64]	; 0x40
    48cc:	6443      	str	r3, [r0, #68]	; 0x44
    48ce:	6483      	str	r3, [r0, #72]	; 0x48
    48d0:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    48d2:	4770      	bx	lr

000048d4 <SPIClass::begin()>:
{
    48d4:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    48d6:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    48d8:	680a      	ldr	r2, [r1, #0]
    48da:	6813      	ldr	r3, [r2, #0]
    48dc:	6849      	ldr	r1, [r1, #4]
    48de:	ea23 0301 	bic.w	r3, r3, r1
    48e2:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    48e4:	498f      	ldr	r1, [pc, #572]	; (4b24 <SPIClass::begin()+0x250>)
    48e6:	698b      	ldr	r3, [r1, #24]
    48e8:	4a8f      	ldr	r2, [pc, #572]	; (4b28 <SPIClass::begin()+0x254>)
    48ea:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    48ec:	4b8f      	ldr	r3, [pc, #572]	; (4b2c <SPIClass::begin()+0x258>)
    48ee:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    48f0:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    48f2:	4b8f      	ldr	r3, [pc, #572]	; (4b30 <SPIClass::begin()+0x25c>)
    48f4:	6842      	ldr	r2, [r0, #4]
    48f6:	7c01      	ldrb	r1, [r0, #16]
    48f8:	440a      	add	r2, r1
    48fa:	7c12      	ldrb	r2, [r2, #16]
    48fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4900:	6891      	ldr	r1, [r2, #8]
    4902:	22b8      	movs	r2, #184	; 0xb8
    4904:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4906:	6841      	ldr	r1, [r0, #4]
    4908:	7c44      	ldrb	r4, [r0, #17]
    490a:	4421      	add	r1, r4
    490c:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4910:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4914:	6889      	ldr	r1, [r1, #8]
    4916:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4918:	6841      	ldr	r1, [r0, #4]
    491a:	7c84      	ldrb	r4, [r0, #18]
    491c:	4421      	add	r1, r4
    491e:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    4922:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4926:	6889      	ldr	r1, [r1, #8]
    4928:	600a      	str	r2, [r1, #0]
    492a:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    492c:	6821      	ldr	r1, [r4, #0]
    492e:	680a      	ldr	r2, [r1, #0]
    4930:	6864      	ldr	r4, [r4, #4]
    4932:	4322      	orrs	r2, r4
    4934:	600a      	str	r2, [r1, #0]
    4936:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4938:	7c04      	ldrb	r4, [r0, #16]
    493a:	1911      	adds	r1, r2, r4
    493c:	7c09      	ldrb	r1, [r1, #16]
    493e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4942:	6849      	ldr	r1, [r1, #4]
    4944:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4948:	6952      	ldr	r2, [r2, #20]
    494a:	600a      	str	r2, [r1, #0]
    494c:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    494e:	7c42      	ldrb	r2, [r0, #17]
    4950:	18a1      	adds	r1, r4, r2
    4952:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4956:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    495a:	6849      	ldr	r1, [r1, #4]
    495c:	320a      	adds	r2, #10
    495e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4962:	600a      	str	r2, [r1, #0]
    4964:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4966:	7c81      	ldrb	r1, [r0, #18]
    4968:	1854      	adds	r4, r2, r1
    496a:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    496e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4972:	685b      	ldr	r3, [r3, #4]
    4974:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4978:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    497a:	601a      	str	r2, [r3, #0]
    497c:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    497e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4980:	7c81      	ldrb	r1, [r0, #18]
    4982:	440b      	add	r3, r1
    4984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4988:	6013      	str	r3, [r2, #0]
    498a:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    498c:	6a1a      	ldr	r2, [r3, #32]
    498e:	7c01      	ldrb	r1, [r0, #16]
    4990:	440b      	add	r3, r1
    4992:	7f1b      	ldrb	r3, [r3, #28]
    4994:	6013      	str	r3, [r2, #0]
    4996:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    499a:	7c41      	ldrb	r1, [r0, #17]
    499c:	440b      	add	r3, r1
    499e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    49a2:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    49a4:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    49a6:	2202      	movs	r2, #2
    49a8:	611a      	str	r2, [r3, #16]
    49aa:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    49ac:	220f      	movs	r2, #15
    49ae:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    49b0:	7cc3      	ldrb	r3, [r0, #19]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d042      	beq.n	4a3c <SPIClass::begin()+0x168>
			__disable_irq();
    49b6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    49b8:	7cc3      	ldrb	r3, [r0, #19]
    49ba:	f013 0f01 	tst.w	r3, #1
    49be:	d008      	beq.n	49d2 <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    49c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    49c4:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    49c8:	6941      	ldr	r1, [r0, #20]
    49ca:	400b      	ands	r3, r1
    49cc:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    49ce:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    49d2:	7cc3      	ldrb	r3, [r0, #19]
    49d4:	f013 0f02 	tst.w	r3, #2
    49d8:	d008      	beq.n	49ec <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    49da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    49de:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    49e2:	6981      	ldr	r1, [r0, #24]
    49e4:	400b      	ands	r3, r1
    49e6:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    49e8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    49ec:	7cc3      	ldrb	r3, [r0, #19]
    49ee:	f013 0f04 	tst.w	r3, #4
    49f2:	d008      	beq.n	4a06 <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    49f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    49f8:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    49fc:	69c1      	ldr	r1, [r0, #28]
    49fe:	400b      	ands	r3, r1
    4a00:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4a02:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    4a06:	7cc3      	ldrb	r3, [r0, #19]
    4a08:	f013 0f08 	tst.w	r3, #8
    4a0c:	d008      	beq.n	4a20 <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4a0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4a12:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    4a16:	6a01      	ldr	r1, [r0, #32]
    4a18:	400b      	ands	r3, r1
    4a1a:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4a1c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    4a20:	7cc3      	ldrb	r3, [r0, #19]
    4a22:	f013 0f10 	tst.w	r3, #16
    4a26:	d008      	beq.n	4a3a <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4a28:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4a2c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4a30:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4a32:	400b      	ands	r3, r1
    4a34:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4a36:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    4a3a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    4a3c:	6882      	ldr	r2, [r0, #8]
    4a3e:	4b3d      	ldr	r3, [pc, #244]	; (4b34 <SPIClass::begin()+0x260>)
    4a40:	429a      	cmp	r2, r3
    4a42:	d029      	beq.n	4a98 <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    4a44:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    4a46:	4b37      	ldr	r3, [pc, #220]	; (4b24 <SPIClass::begin()+0x250>)
    4a48:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4a4a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    4a4e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    4a52:	3301      	adds	r3, #1
    4a54:	4a38      	ldr	r2, [pc, #224]	; (4b38 <SPIClass::begin()+0x264>)
    4a56:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4a5a:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    4a5e:	4b37      	ldr	r3, [pc, #220]	; (4b3c <SPIClass::begin()+0x268>)
    4a60:	429a      	cmp	r2, r3
    4a62:	d95d      	bls.n	4b20 <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    4a64:	4b36      	ldr	r3, [pc, #216]	; (4b40 <SPIClass::begin()+0x26c>)
    4a66:	fba3 1302 	umull	r1, r3, r3, r2
    4a6a:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    4a6c:	fbb2 f2f3 	udiv	r2, r2, r3
    4a70:	4930      	ldr	r1, [pc, #192]	; (4b34 <SPIClass::begin()+0x260>)
    4a72:	428a      	cmp	r2, r1
    4a74:	bf88      	it	hi
    4a76:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    4a78:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4a7c:	d34c      	bcc.n	4b18 <SPIClass::begin()+0x244>
    4a7e:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    4a82:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4a84:	0859      	lsrs	r1, r3, #1
    4a86:	020a      	lsls	r2, r1, #8
    4a88:	b292      	uxth	r2, r2
    4a8a:	0409      	lsls	r1, r1, #16
    4a8c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4a90:	430a      	orrs	r2, r1
    4a92:	b2db      	uxtb	r3, r3
    4a94:	4313      	orrs	r3, r2
    4a96:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4a98:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    4a9a:	2200      	movs	r2, #0
    4a9c:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4a9e:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4aa0:	2203      	movs	r2, #3
    4aa2:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4aa4:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    4aa6:	68c2      	ldr	r2, [r0, #12]
    4aa8:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4aaa:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    4aac:	2207      	movs	r2, #7
    4aae:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4ab0:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    4ab2:	2201      	movs	r2, #1
    4ab4:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    4ab6:	7cc3      	ldrb	r3, [r0, #19]
    4ab8:	b35b      	cbz	r3, 4b12 <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4aba:	f013 0f01 	tst.w	r3, #1
    4abe:	d004      	beq.n	4aca <SPIClass::begin()+0x1f6>
    4ac0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4ac2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4ac6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4aca:	7cc3      	ldrb	r3, [r0, #19]
    4acc:	f013 0f02 	tst.w	r3, #2
    4ad0:	d004      	beq.n	4adc <SPIClass::begin()+0x208>
    4ad2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4ad4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4ad8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    4adc:	7cc3      	ldrb	r3, [r0, #19]
    4ade:	f013 0f04 	tst.w	r3, #4
    4ae2:	d004      	beq.n	4aee <SPIClass::begin()+0x21a>
    4ae4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4ae6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4aea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    4aee:	7cc3      	ldrb	r3, [r0, #19]
    4af0:	f013 0f08 	tst.w	r3, #8
    4af4:	d004      	beq.n	4b00 <SPIClass::begin()+0x22c>
    4af6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4af8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4afc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4b00:	7cc3      	ldrb	r3, [r0, #19]
    4b02:	f013 0f10 	tst.w	r3, #16
    4b06:	d004      	beq.n	4b12 <SPIClass::begin()+0x23e>
    4b08:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4b0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4b0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4b12:	f85d 4b04 	ldr.w	r4, [sp], #4
    4b16:	4770      	bx	lr
			if (d > 2) {
    4b18:	2b02      	cmp	r3, #2
    4b1a:	d8b2      	bhi.n	4a82 <SPIClass::begin()+0x1ae>
				div =0;
    4b1c:	2300      	movs	r3, #0
    4b1e:	e7b1      	b.n	4a84 <SPIClass::begin()+0x1b0>
    4b20:	2300      	movs	r3, #0
    4b22:	e7af      	b.n	4a84 <SPIClass::begin()+0x1b0>
    4b24:	400fc000 	.word	0x400fc000
    4b28:	e3ffffcf 	.word	0xe3ffffcf
    4b2c:	08000010 	.word	0x08000010
    4b30:	200026d0 	.word	0x200026d0
    4b34:	003d0900 	.word	0x003d0900
    4b38:	20002418 	.word	0x20002418
    4b3c:	003d08ff 	.word	0x003d08ff
    4b40:	431bde83 	.word	0x431bde83

00004b44 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    4b44:	2b00      	cmp	r3, #0
    4b46:	d03b      	beq.n	4bc0 <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    4b48:	b470      	push	{r4, r5, r6}
    4b4a:	460e      	mov	r6, r1
    4b4c:	4611      	mov	r1, r2
    4b4e:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4b50:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4b52:	f240 2201 	movw	r2, #513	; 0x201
    4b56:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    4b58:	462c      	mov	r4, r5
    4b5a:	e016      	b.n	4b8a <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4b5c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    4b60:	e019      	b.n	4b96 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    4b62:	3c01      	subs	r4, #1
    4b64:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4b66:	695b      	ldr	r3, [r3, #20]
    4b68:	f013 0f01 	tst.w	r3, #1
    4b6c:	d10c      	bne.n	4b88 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    4b6e:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4b72:	f012 0f02 	tst.w	r2, #2
    4b76:	d1f5      	bne.n	4b64 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4b7a:	2900      	cmp	r1, #0
    4b7c:	d0f1      	beq.n	4b62 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    4b7e:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b80:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    4b84:	4611      	mov	r1, r2
    4b86:	e7ec      	b.n	4b62 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    4b88:	b155      	cbz	r5, 4ba0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4b8a:	2e00      	cmp	r6, #0
    4b8c:	d0e6      	beq.n	4b5c <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    4b8e:	4633      	mov	r3, r6
    4b90:	f813 2b01 	ldrb.w	r2, [r3], #1
    4b94:	461e      	mov	r6, r3
    4b96:	6803      	ldr	r3, [r0, #0]
    4b98:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    4b9a:	3d01      	subs	r5, #1
    4b9c:	e7e7      	b.n	4b6e <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    4b9e:	3c01      	subs	r4, #1
	while (count_read) {
    4ba0:	b164      	cbz	r4, 4bbc <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    4ba2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4ba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4ba6:	f012 0f02 	tst.w	r2, #2
    4baa:	d1f9      	bne.n	4ba0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4bae:	2900      	cmp	r1, #0
    4bb0:	d0f5      	beq.n	4b9e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    4bb2:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4bb4:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    4bb8:	4611      	mov	r1, r2
    4bba:	e7f0      	b.n	4b9e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    4bbc:	bc70      	pop	{r4, r5, r6}
    4bbe:	4770      	bx	lr
    4bc0:	4770      	bx	lr

00004bc2 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4bc2:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4bc4:	681a      	ldr	r2, [r3, #0]
    4bc6:	6812      	ldr	r2, [r2, #0]
    4bc8:	685b      	ldr	r3, [r3, #4]
    4bca:	421a      	tst	r2, r3
    4bcc:	d100      	bne.n	4bd0 <SPIClass::end()+0xe>
    4bce:	4770      	bx	lr
void SPIClass::end() {
    4bd0:	b510      	push	{r4, lr}
    4bd2:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4bd4:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    4bd6:	2200      	movs	r2, #0
    4bd8:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4bda:	6843      	ldr	r3, [r0, #4]
    4bdc:	7c02      	ldrb	r2, [r0, #16]
    4bde:	4413      	add	r3, r2
    4be0:	2105      	movs	r1, #5
    4be2:	7c18      	ldrb	r0, [r3, #16]
    4be4:	f008 fa56 	bl	d094 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4be8:	6863      	ldr	r3, [r4, #4]
    4bea:	7c62      	ldrb	r2, [r4, #17]
    4bec:	4413      	add	r3, r2
    4bee:	2105      	movs	r1, #5
    4bf0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    4bf4:	f008 fa4e 	bl	d094 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4bf8:	6863      	ldr	r3, [r4, #4]
    4bfa:	7ca2      	ldrb	r2, [r4, #18]
    4bfc:	4413      	add	r3, r2
    4bfe:	2105      	movs	r1, #5
    4c00:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    4c04:	f008 fa46 	bl	d094 <pinMode>
}
    4c08:	bd10      	pop	{r4, pc}
	...

00004c0c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    4c0c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    4c0e:	4a08      	ldr	r2, [pc, #32]	; (4c30 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    4c10:	4908      	ldr	r1, [pc, #32]	; (4c34 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    4c12:	4809      	ldr	r0, [pc, #36]	; (4c38 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    4c14:	f7ff fe42 	bl	489c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    4c18:	4a08      	ldr	r2, [pc, #32]	; (4c3c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    4c1a:	4909      	ldr	r1, [pc, #36]	; (4c40 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    4c1c:	4809      	ldr	r0, [pc, #36]	; (4c44 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    4c1e:	f7ff fe3d 	bl	489c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    4c22:	4a09      	ldr	r2, [pc, #36]	; (4c48 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    4c24:	4909      	ldr	r1, [pc, #36]	; (4c4c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    4c26:	480a      	ldr	r0, [pc, #40]	; (4c50 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    4c28:	f7ff fe38 	bl	489c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    4c2c:	bd08      	pop	{r3, pc}
    4c2e:	bf00      	nop
    4c30:	20002134 	.word	0x20002134
    4c34:	403a0000 	.word	0x403a0000
    4c38:	200045b0 	.word	0x200045b0
    4c3c:	200020c4 	.word	0x200020c4
    4c40:	4039c000 	.word	0x4039c000
    4c44:	20004600 	.word	0x20004600
    4c48:	20002054 	.word	0x20002054
    4c4c:	40394000 	.word	0x40394000
    4c50:	20004650 	.word	0x20004650

00004c54 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    4c54:	22ff      	movs	r2, #255	; 0xff
    4c56:	7002      	strb	r2, [r0, #0]
    4c58:	7042      	strb	r2, [r0, #1]
    4c5a:	4770      	bx	lr

00004c5c <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4c5c:	2936      	cmp	r1, #54	; 0x36
    4c5e:	d840      	bhi.n	4ce2 <PWMServo::attach(int, int, int)+0x86>
{
    4c60:	b570      	push	{r4, r5, r6, lr}
    4c62:	4604      	mov	r4, r0
    4c64:	4616      	mov	r6, r2
    4c66:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    4c68:	290f      	cmp	r1, #15
    4c6a:	dd0b      	ble.n	4c84 <PWMServo::attach(int, int, int)+0x28>
    4c6c:	2912      	cmp	r1, #18
    4c6e:	d009      	beq.n	4c84 <PWMServo::attach(int, int, int)+0x28>
    4c70:	f1a1 0213 	sub.w	r2, r1, #19
    4c74:	2a0a      	cmp	r2, #10
    4c76:	d829      	bhi.n	4ccc <PWMServo::attach(int, int, int)+0x70>
    4c78:	f240 6379 	movw	r3, #1657	; 0x679
    4c7c:	40d3      	lsrs	r3, r2
    4c7e:	f013 0f01 	tst.w	r3, #1
    4c82:	d021      	beq.n	4cc8 <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    4c84:	b2c8      	uxtb	r0, r1
    4c86:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    4c88:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4cec <PWMServo::attach(int, int, int)+0x90>
    4c8c:	f008 fe7c 	bl	d988 <analogWriteFrequency>
	min16 = min >> 4;
    4c90:	1132      	asrs	r2, r6, #4
    4c92:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    4c94:	112b      	asrs	r3, r5, #4
    4c96:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    4c98:	23ff      	movs	r3, #255	; 0xff
    4c9a:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    4c9c:	2100      	movs	r1, #0
    4c9e:	7820      	ldrb	r0, [r4, #0]
    4ca0:	f008 f9c0 	bl	d024 <digitalWrite>
	pinMode(pin, OUTPUT);
    4ca4:	2101      	movs	r1, #1
    4ca6:	7820      	ldrb	r0, [r4, #0]
    4ca8:	f008 f9f4 	bl	d094 <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    4cac:	7823      	ldrb	r3, [r4, #0]
    4cae:	0959      	lsrs	r1, r3, #5
    4cb0:	4a0f      	ldr	r2, [pc, #60]	; (4cf0 <PWMServo::attach(int, int, int)+0x94>)
    4cb2:	f003 031f 	and.w	r3, r3, #31
    4cb6:	2001      	movs	r0, #1
    4cb8:	fa00 f303 	lsl.w	r3, r0, r3
    4cbc:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    4cc0:	4323      	orrs	r3, r4
    4cc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4cc6:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    4cc8:	2000      	movs	r0, #0
    4cca:	e7fc      	b.n	4cc6 <PWMServo::attach(int, int, int)+0x6a>
    4ccc:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    4cd0:	2a15      	cmp	r2, #21
    4cd2:	d808      	bhi.n	4ce6 <PWMServo::attach(int, int, int)+0x8a>
    4cd4:	4b07      	ldr	r3, [pc, #28]	; (4cf4 <PWMServo::attach(int, int, int)+0x98>)
    4cd6:	40d3      	lsrs	r3, r2
    4cd8:	f013 0f01 	tst.w	r3, #1
    4cdc:	d1d2      	bne.n	4c84 <PWMServo::attach(int, int, int)+0x28>
    4cde:	2000      	movs	r0, #0
    4ce0:	e7f1      	b.n	4cc6 <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4ce2:	2000      	movs	r0, #0
}
    4ce4:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    4ce6:	2000      	movs	r0, #0
    4ce8:	e7ed      	b.n	4cc6 <PWMServo::attach(int, int, int)+0x6a>
    4cea:	bf00      	nop
    4cec:	42480000 	.word	0x42480000
    4cf0:	20004ba4 	.word	0x20004ba4
    4cf4:	00247e19 	.word	0x00247e19

00004cf8 <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    4cf8:	7803      	ldrb	r3, [r0, #0]
    4cfa:	2b36      	cmp	r3, #54	; 0x36
    4cfc:	d900      	bls.n	4d00 <PWMServo::write(int)+0x8>
    4cfe:	4770      	bx	lr
{
    4d00:	b570      	push	{r4, r5, r6, lr}
    4d02:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    4d04:	29b4      	cmp	r1, #180	; 0xb4
    4d06:	bfa8      	it	ge
    4d08:	21b4      	movge	r1, #180	; 0xb4
    4d0a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    4d0e:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    4d10:	7883      	ldrb	r3, [r0, #2]
    4d12:	78c2      	ldrb	r2, [r0, #3]
    4d14:	1ad2      	subs	r2, r2, r3
    4d16:	fb01 f202 	mul.w	r2, r1, r2
    4d1a:	f24b 610b 	movw	r1, #46603	; 0xb60b
    4d1e:	fb01 f202 	mul.w	r2, r1, r2
    4d22:	031d      	lsls	r5, r3, #12
    4d24:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    4d28:	f640 531b 	movw	r3, #3355	; 0xd1b
    4d2c:	fb03 f505 	mul.w	r5, r3, r5
    4d30:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    4d32:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    4d34:	200c      	movs	r0, #12
    4d36:	f008 feff 	bl	db38 <analogWriteRes>
    4d3a:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    4d3c:	4629      	mov	r1, r5
    4d3e:	7820      	ldrb	r0, [r4, #0]
    4d40:	f008 fdca 	bl	d8d8 <analogWrite>
    4d44:	4630      	mov	r0, r6
    4d46:	f008 fef7 	bl	db38 <analogWriteRes>
	interrupts();
    4d4a:	b662      	cpsie	i
}
    4d4c:	bd70      	pop	{r4, r5, r6, pc}

00004d4e <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4d4e:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4d52:	b1e3      	cbz	r3, 4d8e <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    4d54:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4d58:	b163      	cbz	r3, 4d74 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    4d5a:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4d5c:	3801      	subs	r0, #1
    4d5e:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4d60:	7999      	ldrb	r1, [r3, #6]
    4d62:	f44f 7300 	mov.w	r3, #512	; 0x200
    4d66:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    4d68:	b29b      	uxth	r3, r3
    4d6a:	fba3 0100 	umull	r0, r1, r3, r0
    4d6e:	fb03 1102 	mla	r1, r3, r2, r1
    4d72:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    4d74:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    4d78:	b12b      	cbz	r3, 4d86 <SDClass::totalSize()+0x38>
    4d7a:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    4d7e:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    4d80:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    4d84:	e7f1      	b.n	4d6a <SDClass::totalSize()+0x1c>
    4d86:	2000      	movs	r0, #0
    4d88:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4d8a:	4603      	mov	r3, r0
    4d8c:	e7ed      	b.n	4d6a <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4d8e:	2000      	movs	r0, #0
    4d90:	4601      	mov	r1, r0
	}
    4d92:	4770      	bx	lr

00004d94 <SDClass::~SDClass()>:
class SDClass : public FS
    4d94:	4770      	bx	lr
	...

00004d98 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    4d98:	b530      	push	{r4, r5, lr}
    4d9a:	b083      	sub	sp, #12
    4d9c:	4605      	mov	r5, r0
    4d9e:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    4da0:	f008 fed8 	bl	db54 <rtc_get>
	if (now < 315532800) { // before 1980
    4da4:	4b1c      	ldr	r3, [pc, #112]	; (4e18 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    4da6:	4298      	cmp	r0, r3
    4da8:	d804      	bhi.n	4db4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    4daa:	2300      	movs	r3, #0
    4dac:	802b      	strh	r3, [r5, #0]
		*time = 0;
    4dae:	8023      	strh	r3, [r4, #0]
}
    4db0:	b003      	add	sp, #12
    4db2:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    4db4:	4669      	mov	r1, sp
    4db6:	f007 fd6b 	bl	c890 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4dba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4dbe:	3301      	adds	r3, #1
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    4dc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    4dca:	3a50      	subs	r2, #80	; 0x50
    4dcc:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    4dce:	291f      	cmp	r1, #31
    4dd0:	bf98      	it	ls
    4dd2:	2b0c      	cmpls	r3, #12
    4dd4:	d801      	bhi.n	4dda <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    4dd6:	2a7f      	cmp	r2, #127	; 0x7f
    4dd8:	d910      	bls.n	4dfc <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    4dda:	2100      	movs	r1, #0
    4ddc:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4dde:	f89d 2002 	ldrb.w	r2, [sp, #2]
    4de2:	f89d 3001 	ldrb.w	r3, [sp, #1]
    4de6:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4dea:	2a17      	cmp	r2, #23
    4dec:	bf98      	it	ls
    4dee:	2b3b      	cmpls	r3, #59	; 0x3b
    4df0:	d801      	bhi.n	4df6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    4df2:	293b      	cmp	r1, #59	; 0x3b
    4df4:	d908      	bls.n	4e08 <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    4df6:	2300      	movs	r3, #0
    4df8:	8023      	strh	r3, [r4, #0]
}
    4dfa:	e7d9      	b.n	4db0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    4dfc:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    4e00:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    4e04:	b289      	uxth	r1, r1
    4e06:	e7e9      	b.n	4ddc <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    4e08:	015b      	lsls	r3, r3, #5
    4e0a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    4e0e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4e12:	b29b      	uxth	r3, r3
    4e14:	e7f0      	b.n	4df8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    4e16:	bf00      	nop
    4e18:	12cea5ff 	.word	0x12cea5ff

00004e1c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    4e1c:	b500      	push	{lr}
    4e1e:	b08f      	sub	sp, #60	; 0x3c
    4e20:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    4e22:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4e26:	b161      	cbz	r1, 4e42 <SDClass::exists(char const*)+0x26>
    4e28:	2300      	movs	r3, #0
    4e2a:	f88d 3000 	strb.w	r3, [sp]
    4e2e:	f88d 3001 	strb.w	r3, [sp, #1]
    4e32:	f88d 3002 	strb.w	r3, [sp, #2]
    4e36:	4668      	mov	r0, sp
    4e38:	f002 ff37 	bl	7caa <FatFile::open(FatVolume*, char const*, int)>
	}
    4e3c:	b00f      	add	sp, #60	; 0x3c
    4e3e:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    4e42:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4e46:	b151      	cbz	r1, 4e5e <SDClass::exists(char const*)+0x42>
    4e48:	2300      	movs	r3, #0
    4e4a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4e4e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4e52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    4e56:	4668      	mov	r0, sp
    4e58:	f000 ff83 	bl	5d62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4e5c:	e7ee      	b.n	4e3c <SDClass::exists(char const*)+0x20>
    4e5e:	2000      	movs	r0, #0
    4e60:	e7ec      	b.n	4e3c <SDClass::exists(char const*)+0x20>

00004e62 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    4e62:	b500      	push	{lr}
    4e64:	b08f      	sub	sp, #60	; 0x3c
    4e66:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    4e68:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4e6c:	b189      	cbz	r1, 4e92 <SDClass::rmdir(char const*)+0x30>
    4e6e:	2300      	movs	r3, #0
    4e70:	f88d 3000 	strb.w	r3, [sp]
    4e74:	f88d 3001 	strb.w	r3, [sp, #1]
    4e78:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4e7c:	4668      	mov	r0, sp
    4e7e:	f002 ff14 	bl	7caa <FatFile::open(FatVolume*, char const*, int)>
    4e82:	b910      	cbnz	r0, 4e8a <SDClass::rmdir(char const*)+0x28>
	}
    4e84:	b00f      	add	sp, #60	; 0x3c
    4e86:	f85d fb04 	ldr.w	pc, [sp], #4
    4e8a:	4668      	mov	r0, sp
    4e8c:	f002 fd52 	bl	7934 <FatFile::rmdir()>
    4e90:	e7f8      	b.n	4e84 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    4e92:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4e96:	b179      	cbz	r1, 4eb8 <SDClass::rmdir(char const*)+0x56>
    4e98:	2300      	movs	r3, #0
    4e9a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4e9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4ea2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4ea6:	4668      	mov	r0, sp
    4ea8:	f000 ff5b 	bl	5d62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4eac:	2800      	cmp	r0, #0
    4eae:	d0e9      	beq.n	4e84 <SDClass::rmdir(char const*)+0x22>
    4eb0:	4668      	mov	r0, sp
    4eb2:	f001 f83d 	bl	5f30 <ExFatFile::rmdir()>
    4eb6:	e7e5      	b.n	4e84 <SDClass::rmdir(char const*)+0x22>
    4eb8:	2000      	movs	r0, #0
    4eba:	e7e3      	b.n	4e84 <SDClass::rmdir(char const*)+0x22>

00004ebc <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    4ebc:	b500      	push	{lr}
    4ebe:	b08f      	sub	sp, #60	; 0x3c
    4ec0:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    4ec2:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4ec6:	b191      	cbz	r1, 4eee <SDClass::remove(char const*)+0x32>
    4ec8:	2300      	movs	r3, #0
    4eca:	f88d 3000 	strb.w	r3, [sp]
    4ece:	f88d 3001 	strb.w	r3, [sp, #1]
    4ed2:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4ed6:	2301      	movs	r3, #1
    4ed8:	4668      	mov	r0, sp
    4eda:	f002 fee6 	bl	7caa <FatFile::open(FatVolume*, char const*, int)>
    4ede:	b910      	cbnz	r0, 4ee6 <SDClass::remove(char const*)+0x2a>
	}
    4ee0:	b00f      	add	sp, #60	; 0x3c
    4ee2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ee6:	4668      	mov	r0, sp
    4ee8:	f003 fec4 	bl	8c74 <FatFile::remove()>
    4eec:	e7f8      	b.n	4ee0 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    4eee:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4ef2:	b181      	cbz	r1, 4f16 <SDClass::remove(char const*)+0x5a>
    4ef4:	2300      	movs	r3, #0
    4ef6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4efa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4efe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4f02:	2301      	movs	r3, #1
    4f04:	4668      	mov	r0, sp
    4f06:	f000 ff2c 	bl	5d62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d0e8      	beq.n	4ee0 <SDClass::remove(char const*)+0x24>
    4f0e:	4668      	mov	r0, sp
    4f10:	f000 ffb6 	bl	5e80 <ExFatFile::remove()>
    4f14:	e7e4      	b.n	4ee0 <SDClass::remove(char const*)+0x24>
    4f16:	2000      	movs	r0, #0
    4f18:	e7e2      	b.n	4ee0 <SDClass::remove(char const*)+0x24>

00004f1a <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    4f1a:	b530      	push	{r4, r5, lr}
    4f1c:	b08f      	sub	sp, #60	; 0x3c
    4f1e:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    4f20:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4f24:	b1b4      	cbz	r4, 4f54 <SDClass::rename(char const*, char const*)+0x3a>
    4f26:	2300      	movs	r3, #0
    4f28:	f88d 3000 	strb.w	r3, [sp]
    4f2c:	f88d 3001 	strb.w	r3, [sp, #1]
    4f30:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4f34:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4f38:	460a      	mov	r2, r1
    4f3a:	4621      	mov	r1, r4
    4f3c:	4668      	mov	r0, sp
    4f3e:	f002 fe4f 	bl	7be0 <FatFile::open(FatFile*, char const*, int)>
    4f42:	b908      	cbnz	r0, 4f48 <SDClass::rename(char const*, char const*)+0x2e>
	}
    4f44:	b00f      	add	sp, #60	; 0x3c
    4f46:	bd30      	pop	{r4, r5, pc}
    4f48:	462a      	mov	r2, r5
    4f4a:	4621      	mov	r1, r4
    4f4c:	4668      	mov	r0, sp
    4f4e:	f003 f80c 	bl	7f6a <FatFile::rename(FatFile*, char const*)>
    4f52:	e7f7      	b.n	4f44 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    4f54:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    4f58:	b1ac      	cbz	r4, 4f86 <SDClass::rename(char const*, char const*)+0x6c>
    4f5a:	2300      	movs	r3, #0
    4f5c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4f60:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4f64:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4f68:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4f6c:	460a      	mov	r2, r1
    4f6e:	4621      	mov	r1, r4
    4f70:	4668      	mov	r0, sp
    4f72:	f000 fe83 	bl	5c7c <ExFatFile::open(ExFatFile*, char const*, int)>
    4f76:	2800      	cmp	r0, #0
    4f78:	d0e4      	beq.n	4f44 <SDClass::rename(char const*, char const*)+0x2a>
    4f7a:	462a      	mov	r2, r5
    4f7c:	4621      	mov	r1, r4
    4f7e:	4668      	mov	r0, sp
    4f80:	f001 f9bb 	bl	62fa <ExFatFile::rename(ExFatFile*, char const*)>
    4f84:	e7de      	b.n	4f44 <SDClass::rename(char const*, char const*)+0x2a>
    4f86:	2000      	movs	r0, #0
    4f88:	e7dc      	b.n	4f44 <SDClass::rename(char const*, char const*)+0x2a>

00004f8a <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    4f8a:	b500      	push	{lr}
    4f8c:	b08f      	sub	sp, #60	; 0x3c
    4f8e:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    4f90:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4f94:	b179      	cbz	r1, 4fb6 <SDClass::mkdir(char const*)+0x2c>
    4f96:	2300      	movs	r3, #0
    4f98:	f88d 3000 	strb.w	r3, [sp]
    4f9c:	f88d 3001 	strb.w	r3, [sp, #1]
    4fa0:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    4fa4:	2301      	movs	r3, #1
    4fa6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4faa:	4668      	mov	r0, sp
    4fac:	f002 ff74 	bl	7e98 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    4fb0:	b00f      	add	sp, #60	; 0x3c
    4fb2:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    4fb6:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4fba:	b169      	cbz	r1, 4fd8 <SDClass::mkdir(char const*)+0x4e>
    4fbc:	2300      	movs	r3, #0
    4fbe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4fc2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4fc6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    4fca:	2301      	movs	r3, #1
    4fcc:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4fd0:	4668      	mov	r0, sp
    4fd2:	f001 f91c 	bl	620e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    4fd6:	e7eb      	b.n	4fb0 <SDClass::mkdir(char const*)+0x26>
    4fd8:	2000      	movs	r0, #0
    4fda:	e7e9      	b.n	4fb0 <SDClass::mkdir(char const*)+0x26>

00004fdc <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    4fdc:	b570      	push	{r4, r5, r6, lr}
    4fde:	b094      	sub	sp, #80	; 0x50
    4fe0:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4fe2:	2b01      	cmp	r3, #1
    4fe4:	d036      	beq.n	5054 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    4fe6:	2b02      	cmp	r3, #2
    4fe8:	f240 2302 	movw	r3, #514	; 0x202
    4fec:	bf18      	it	ne
    4fee:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    4ff0:	3104      	adds	r1, #4
    4ff2:	4668      	mov	r0, sp
    4ff4:	f004 fe98 	bl	9d28 <FsVolume::open(char const*, int)>
    4ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d02d      	beq.n	505a <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    4ffe:	205c      	movs	r0, #92	; 0x5c
    5000:	f008 f928 	bl	d254 <operator new(unsigned int)>
    5004:	4604      	mov	r4, r0
class FileImpl {
    5006:	2600      	movs	r6, #0
    5008:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    500a:	4b1a      	ldr	r3, [pc, #104]	; (5074 <SDClass::open(char const*, unsigned char)+0x98>)
    500c:	6003      	str	r3, [r0, #0]
class Print
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    5012:	4b19      	ldr	r3, [pc, #100]	; (5078 <SDClass::open(char const*, unsigned char)+0x9c>)
    5014:	6083      	str	r3, [r0, #8]
    5016:	9b02      	ldr	r3, [sp, #8]
    5018:	6103      	str	r3, [r0, #16]
    501a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    501e:	7503      	strb	r3, [r0, #20]
    5020:	a904      	add	r1, sp, #16
    5022:	3018      	adds	r0, #24
    5024:	f004 fd49 	bl	9aba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5028:	4b14      	ldr	r3, [pc, #80]	; (507c <SDClass::open(char const*, unsigned char)+0xa0>)
    502a:	60a3      	str	r3, [r4, #8]
    502c:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    502e:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5034:	60ab      	str	r3, [r5, #8]
    5036:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    5038:	4b11      	ldr	r3, [pc, #68]	; (5080 <SDClass::open(char const*, unsigned char)+0xa4>)
    503a:	602b      	str	r3, [r5, #0]
		f = file;
    503c:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    503e:	6863      	ldr	r3, [r4, #4]
    5040:	3301      	adds	r3, #1
    5042:	6063      	str	r3, [r4, #4]
    5044:	4b0f      	ldr	r3, [pc, #60]	; (5084 <SDClass::open(char const*, unsigned char)+0xa8>)
    5046:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    5048:	a804      	add	r0, sp, #16
    504a:	f004 fd77 	bl	9b3c <FsBaseFile::close()>
	}
    504e:	4628      	mov	r0, r5
    5050:	b014      	add	sp, #80	; 0x50
    5052:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    5054:	f244 2302 	movw	r3, #16898	; 0x4202
    5058:	e7ca      	b.n	4ff0 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    505a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    505c:	2b00      	cmp	r3, #0
    505e:	d1ce      	bne.n	4ffe <SDClass::open(char const*, unsigned char)+0x22>
    5060:	606b      	str	r3, [r5, #4]
    5062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5066:	60aa      	str	r2, [r5, #8]
    5068:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    506a:	4a05      	ldr	r2, [pc, #20]	; (5080 <SDClass::open(char const*, unsigned char)+0xa4>)
    506c:	602a      	str	r2, [r5, #0]
    506e:	612b      	str	r3, [r5, #16]
    5070:	e7e8      	b.n	5044 <SDClass::open(char const*, unsigned char)+0x68>
    5072:	bf00      	nop
    5074:	200022dc 	.word	0x200022dc
    5078:	20002338 	.word	0x20002338
    507c:	200022b8 	.word	0x200022b8
    5080:	2000228c 	.word	0x2000228c
    5084:	200021ac 	.word	0x200021ac

00005088 <SDClass::usedSize()>:
	uint64_t usedSize() {
    5088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    508a:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    508e:	2b00      	cmp	r3, #0
    5090:	d04d      	beq.n	512e <SDClass::usedSize()+0xa6>
    5092:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    5094:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    5098:	b1f3      	cbz	r3, 50d8 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    509a:	69de      	ldr	r6, [r3, #28]
    509c:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    509e:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    50a2:	2800      	cmp	r0, #0
    50a4:	d05a      	beq.n	515c <SDClass::usedSize()+0xd4>
    50a6:	6803      	ldr	r3, [r0, #0]
    50a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    50aa:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    50ac:	4607      	mov	r7, r0
    50ae:	b140      	cbz	r0, 50c2 <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    50b0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    50b4:	2800      	cmp	r0, #0
    50b6:	d032      	beq.n	511e <SDClass::usedSize()+0x96>
    50b8:	6803      	ldr	r3, [r0, #0]
    50ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    50bc:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    50be:	b1b8      	cbz	r0, 50f0 <SDClass::usedSize()+0x68>
    50c0:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    50c2:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    50c6:	2800      	cmp	r0, #0
    50c8:	d14b      	bne.n	5162 <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    50ca:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    50ce:	b388      	cbz	r0, 5134 <SDClass::usedSize()+0xac>
    50d0:	f002 f96b 	bl	73aa <ExFatPartition::freeClusterCount()>
    50d4:	4605      	mov	r5, r0
    50d6:	e047      	b.n	5168 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    50d8:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    50dc:	2b00      	cmp	r3, #0
    50de:	d055      	beq.n	518c <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    50e0:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    50e4:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    50e8:	2800      	cmp	r0, #0
    50ea:	d1dc      	bne.n	50a6 <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    50ec:	2700      	movs	r7, #0
    50ee:	e7ec      	b.n	50ca <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    50f0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    50f4:	b1a8      	cbz	r0, 5122 <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    50f6:	6803      	ldr	r3, [r0, #0]
    50f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    50fa:	2101      	movs	r1, #1
    50fc:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    50fe:	4607      	mov	r7, r0
    5100:	2800      	cmp	r0, #0
    5102:	d1de      	bne.n	50c2 <SDClass::usedSize()+0x3a>
      return 0;
    5104:	2500      	movs	r5, #0
    5106:	e031      	b.n	516c <SDClass::usedSize()+0xe4>
    if (m_card) {
    5108:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    510c:	b158      	cbz	r0, 5126 <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    510e:	6803      	ldr	r3, [r0, #0]
    5110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5112:	2100      	movs	r1, #0
    5114:	4798      	blx	r3
      return 0;
    5116:	2800      	cmp	r0, #0
    5118:	bf08      	it	eq
    511a:	2500      	moveq	r5, #0
    511c:	e026      	b.n	516c <SDClass::usedSize()+0xe4>
      return 0;
    511e:	2500      	movs	r5, #0
    5120:	e024      	b.n	516c <SDClass::usedSize()+0xe4>
    5122:	2500      	movs	r5, #0
    5124:	e022      	b.n	516c <SDClass::usedSize()+0xe4>
      return 0;
    5126:	2500      	movs	r5, #0
    5128:	e020      	b.n	516c <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    512a:	2300      	movs	r3, #0
    512c:	e029      	b.n	5182 <SDClass::usedSize()+0xfa>
    512e:	2000      	movs	r0, #0
    5130:	4601      	mov	r1, r0
    5132:	e02a      	b.n	518a <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    5134:	b967      	cbnz	r7, 5150 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    5136:	2300      	movs	r3, #0
    5138:	4630      	mov	r0, r6
    513a:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    513c:	e021      	b.n	5182 <SDClass::usedSize()+0xfa>
    513e:	4630      	mov	r0, r6
    5140:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5142:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    5146:	2b00      	cmp	r3, #0
    5148:	d0ef      	beq.n	512a <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    514a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    514e:	e018      	b.n	5182 <SDClass::usedSize()+0xfa>
    if (m_card) {
    5150:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5154:	2800      	cmp	r0, #0
    5156:	d0f2      	beq.n	513e <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5158:	2500      	movs	r5, #0
    515a:	e7d8      	b.n	510e <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    515c:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5160:	2700      	movs	r7, #0
    5162:	f004 fb9b 	bl	989c <FatPartition::freeClusterCount()>
    5166:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5168:	2f00      	cmp	r7, #0
    516a:	d1cd      	bne.n	5108 <SDClass::usedSize()+0x80>
    516c:	1b70      	subs	r0, r6, r5
    516e:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    5170:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    5174:	2b00      	cmp	r3, #0
    5176:	d0e4      	beq.n	5142 <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5178:	7999      	ldrb	r1, [r3, #6]
    517a:	f44f 7300 	mov.w	r3, #512	; 0x200
    517e:	408b      	lsls	r3, r1
    5180:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    5182:	fba3 0100 	umull	r0, r1, r3, r0
    5186:	fb03 1102 	mla	r1, r3, r2, r1
	}
    518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    518c:	2600      	movs	r6, #0
    518e:	e7a9      	b.n	50e4 <SDClass::usedSize()+0x5c>

00005190 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    5190:	b530      	push	{r4, r5, lr}
    5192:	b085      	sub	sp, #20
    5194:	4604      	mov	r4, r0
    5196:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    5198:	4832      	ldr	r0, [pc, #200]	; (5264 <SDClass::begin(unsigned char)+0xd4>)
    519a:	f006 fc49 	bl	ba30 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    519e:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    51a2:	2dfe      	cmp	r5, #254	; 0xfe
    51a4:	d004      	beq.n	51b0 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    51a6:	2d36      	cmp	r5, #54	; 0x36
    51a8:	d930      	bls.n	520c <SDClass::begin(unsigned char)+0x7c>
	return false;
    51aa:	2000      	movs	r0, #0
}
    51ac:	b005      	add	sp, #20
    51ae:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    51b0:	23ff      	movs	r3, #255	; 0xff
    51b2:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    51b6:	2100      	movs	r1, #0
    51b8:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    51bc:	f204 4594 	addw	r5, r4, #1172	; 0x494
    51c0:	4628      	mov	r0, r5
    51c2:	f005 ff9d 	bl	b100 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    51c6:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    51ca:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    51ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51d0:	4628      	mov	r0, r5
    51d2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    51d4:	b158      	cbz	r0, 51ee <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    51d6:	2300      	movs	r3, #0
    51d8:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    51dc:	232e      	movs	r3, #46	; 0x2e
    51de:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    51e2:	2103      	movs	r1, #3
    51e4:	202e      	movs	r0, #46	; 0x2e
    51e6:	f007 ff55 	bl	d094 <pinMode>
		return ret;
    51ea:	2000      	movs	r0, #0
    51ec:	e7de      	b.n	51ac <SDClass::begin(unsigned char)+0x1c>
    51ee:	2301      	movs	r3, #1
    51f0:	461a      	mov	r2, r3
    51f2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    51f6:	1d20      	adds	r0, r4, #4
    51f8:	f004 fd20 	bl	9c3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    51fc:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5200:	232e      	movs	r3, #46	; 0x2e
    5202:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5206:	2800      	cmp	r0, #0
    5208:	d1d0      	bne.n	51ac <SDClass::begin(unsigned char)+0x1c>
    520a:	e7ea      	b.n	51e2 <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    520c:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    5210:	2300      	movs	r3, #0
    5212:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    5216:	4a14      	ldr	r2, [pc, #80]	; (5268 <SDClass::begin(unsigned char)+0xd8>)
    5218:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    521c:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    5220:	f88d 5004 	strb.w	r5, [sp, #4]
    5224:	f88d 3005 	strb.w	r3, [sp, #5]
    5228:	9202      	str	r2, [sp, #8]
    522a:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    522c:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    5230:	ab04      	add	r3, sp, #16
    5232:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    5236:	4628      	mov	r0, r5
    5238:	f005 f9d4 	bl	a5e4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    523c:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5240:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    5244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5246:	4628      	mov	r0, r5
    5248:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    524a:	b118      	cbz	r0, 5254 <SDClass::begin(unsigned char)+0xc4>
    524c:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    524e:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    5252:	e7ab      	b.n	51ac <SDClass::begin(unsigned char)+0x1c>
    5254:	2301      	movs	r3, #1
    5256:	461a      	mov	r2, r3
    5258:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    525c:	1d20      	adds	r0, r4, #4
    525e:	f004 fced 	bl	9c3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5262:	e7f4      	b.n	524e <SDClass::begin(unsigned char)+0xbe>
    5264:	00004d99 	.word	0x00004d99
    5268:	017d7840 	.word	0x017d7840

0000526c <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    526c:	b530      	push	{r4, r5, lr}
    526e:	b085      	sub	sp, #20
    5270:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    5272:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    5276:	2bff      	cmp	r3, #255	; 0xff
    5278:	d01e      	beq.n	52b8 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    527a:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    527e:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    5282:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    5286:	f88d 3004 	strb.w	r3, [sp, #4]
    528a:	f88d 0005 	strb.w	r0, [sp, #5]
    528e:	9102      	str	r1, [sp, #8]
    5290:	9203      	str	r2, [sp, #12]
    5292:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    5296:	ab04      	add	r3, sp, #16
    5298:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    529c:	4628      	mov	r0, r5
    529e:	f005 f9a1 	bl	a5e4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    52a2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    52a6:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    52aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    52ac:	4628      	mov	r0, r5
    52ae:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    52b0:	b1d8      	cbz	r0, 52ea <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    52b2:	2000      	movs	r0, #0
  }
    52b4:	b005      	add	sp, #20
    52b6:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    52b8:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    52bc:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    52c0:	4628      	mov	r0, r5
    52c2:	f005 ff1d 	bl	b100 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    52c6:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    52ca:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    52ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    52d0:	4628      	mov	r0, r5
    52d2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    52d4:	b108      	cbz	r0, 52da <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    52d6:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    52d8:	e7ec      	b.n	52b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    52da:	2301      	movs	r3, #1
    52dc:	461a      	mov	r2, r3
    52de:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    52e2:	4620      	mov	r0, r4
    52e4:	f004 fcaa 	bl	9c3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    52e8:	e7e4      	b.n	52b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    52ea:	2301      	movs	r3, #1
    52ec:	461a      	mov	r2, r3
    52ee:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    52f2:	4620      	mov	r0, r4
    52f4:	f004 fca2 	bl	9c3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    52f8:	e7dc      	b.n	52b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

000052fa <SDClass::format(int, char, Print&)>:
{
    52fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52fe:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    5300:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    5304:	b39c      	cbz	r4, 536e <SDClass::format(int, char, Print&)+0x74>
    5306:	4605      	mov	r5, r0
    5308:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    530a:	6823      	ldr	r3, [r4, #0]
    530c:	69db      	ldr	r3, [r3, #28]
    530e:	4620      	mov	r0, r4
    5310:	4798      	blx	r3
    5312:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    5314:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    5318:	d804      	bhi.n	5324 <SDClass::format(int, char, Print&)+0x2a>
    531a:	2600      	movs	r6, #0
}
    531c:	4630      	mov	r0, r6
    531e:	b00c      	add	sp, #48	; 0x30
    5320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    5324:	f44f 7000 	mov.w	r0, #512	; 0x200
    5328:	f00b fc38 	bl	10b9c <malloc>
	if (!buf) return false; // unable to allocate memory
    532c:	4680      	mov	r8, r0
    532e:	b300      	cbz	r0, 5372 <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    5330:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5334:	d913      	bls.n	535e <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    5336:	463b      	mov	r3, r7
    5338:	4602      	mov	r2, r0
    533a:	4621      	mov	r1, r4
    533c:	a801      	add	r0, sp, #4
    533e:	f001 fb23 	bl	6988 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    5342:	4606      	mov	r6, r0
	free(buf);
    5344:	4640      	mov	r0, r8
    5346:	f00b fc31 	bl	10bac <free>
	if (ret) {
    534a:	2e00      	cmp	r6, #0
    534c:	d0e6      	beq.n	531c <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    534e:	6823      	ldr	r3, [r4, #0]
    5350:	6a1b      	ldr	r3, [r3, #32]
    5352:	4620      	mov	r0, r4
    5354:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    5356:	1d28      	adds	r0, r5, #4
    5358:	f7ff ff88 	bl	526c <SdBase<FsVolume, FsFormatter>::restart()>
    535c:	e7de      	b.n	531c <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    535e:	463b      	mov	r3, r7
    5360:	4602      	mov	r2, r0
    5362:	4621      	mov	r1, r4
    5364:	a801      	add	r0, sp, #4
    5366:	f003 ff7f 	bl	9268 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    536a:	4606      	mov	r6, r0
    536c:	e7ea      	b.n	5344 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    536e:	2600      	movs	r6, #0
    5370:	e7d4      	b.n	531c <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    5372:	2600      	movs	r6, #0
    5374:	e7d2      	b.n	531c <SDClass::format(int, char, Print&)+0x22>
	...

00005378 <SDClass::mediaPresent()>:
{
    5378:	b570      	push	{r4, r5, r6, lr}
    537a:	b084      	sub	sp, #16
    537c:	4604      	mov	r4, r0
    537e:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    5382:	2e00      	cmp	r6, #0
    5384:	d042      	beq.n	540c <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    5386:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    538a:	b345      	cbz	r5, 53de <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    538c:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    5390:	2bfe      	cmp	r3, #254	; 0xfe
    5392:	d00a      	beq.n	53aa <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5394:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    5398:	2836      	cmp	r0, #54	; 0x36
    539a:	d914      	bls.n	53c6 <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    539c:	6833      	ldr	r3, [r6, #0]
    539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    53a0:	4669      	mov	r1, sp
    53a2:	4630      	mov	r0, r6
    53a4:	4798      	blx	r3
    53a6:	4605      	mov	r5, r0
    53a8:	e031      	b.n	540e <SDClass::mediaPresent()+0x96>
				s = card->status();
    53aa:	6833      	ldr	r3, [r6, #0]
    53ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    53ae:	4630      	mov	r0, r6
    53b0:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    53b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    53b6:	d0ed      	beq.n	5394 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    53b8:	bb48      	cbnz	r0, 540e <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    53ba:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    53be:	2bfe      	cmp	r3, #254	; 0xfe
    53c0:	d007      	beq.n	53d2 <SDClass::mediaPresent()+0x5a>
				ret = false;
    53c2:	2500      	movs	r5, #0
    53c4:	e023      	b.n	540e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    53c6:	f007 fe53 	bl	d070 <digitalRead>
    53ca:	1e05      	subs	r5, r0, #0
    53cc:	bf18      	it	ne
    53ce:	2501      	movne	r5, #1
    53d0:	e01d      	b.n	540e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    53d2:	2103      	movs	r1, #3
    53d4:	202e      	movs	r0, #46	; 0x2e
    53d6:	f007 fe5d 	bl	d094 <pinMode>
				ret = false;
    53da:	2500      	movs	r5, #0
    53dc:	e017      	b.n	540e <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    53de:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    53e2:	2bfe      	cmp	r3, #254	; 0xfe
    53e4:	d008      	beq.n	53f8 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    53e6:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    53ea:	2836      	cmp	r0, #54	; 0x36
    53ec:	d90a      	bls.n	5404 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    53ee:	1d20      	adds	r0, r4, #4
    53f0:	f7ff ff3c 	bl	526c <SdBase<FsVolume, FsFormatter>::restart()>
    53f4:	4605      	mov	r5, r0
    53f6:	e00a      	b.n	540e <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    53f8:	4b07      	ldr	r3, [pc, #28]	; (5418 <SDClass::mediaPresent()+0xa0>)
    53fa:	689b      	ldr	r3, [r3, #8]
			if (ret)
    53fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5400:	d1f5      	bne.n	53ee <SDClass::mediaPresent()+0x76>
    5402:	e004      	b.n	540e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5404:	f007 fe34 	bl	d070 <digitalRead>
			if (ret)
    5408:	b108      	cbz	r0, 540e <SDClass::mediaPresent()+0x96>
    540a:	e7f0      	b.n	53ee <SDClass::mediaPresent()+0x76>
		ret = false;
    540c:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    540e:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    5412:	4628      	mov	r0, r5
    5414:	b004      	add	sp, #16
    5416:	bd70      	pop	{r4, r5, r6, pc}
    5418:	42008000 	.word	0x42008000

0000541c <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    541c:	b508      	push	{r3, lr}
	SDClass() { }
    541e:	4817      	ldr	r0, [pc, #92]	; (547c <_GLOBAL__sub_I_SD+0x60>)
    5420:	4b17      	ldr	r3, [pc, #92]	; (5480 <_GLOBAL__sub_I_SD+0x64>)
    5422:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    5424:	2300      	movs	r3, #0
    5426:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    542a:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    542e:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5432:	4a14      	ldr	r2, [pc, #80]	; (5484 <_GLOBAL__sub_I_SD+0x68>)
    5434:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5438:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    543c:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    5440:	4a11      	ldr	r2, [pc, #68]	; (5488 <_GLOBAL__sub_I_SD+0x6c>)
    5442:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5446:	2207      	movs	r2, #7
    5448:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    544c:	2229      	movs	r2, #41	; 0x29
    544e:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    5452:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    5456:	4a0d      	ldr	r2, [pc, #52]	; (548c <_GLOBAL__sub_I_SD+0x70>)
    5458:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    545c:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    5460:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    5464:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    5468:	23ff      	movs	r3, #255	; 0xff
    546a:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    546e:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    5472:	4a07      	ldr	r2, [pc, #28]	; (5490 <_GLOBAL__sub_I_SD+0x74>)
    5474:	4907      	ldr	r1, [pc, #28]	; (5494 <_GLOBAL__sub_I_SD+0x78>)
    5476:	f00b faa9 	bl	109cc <__aeabi_atexit>
}
    547a:	bd08      	pop	{r3, pc}
    547c:	200040dc 	.word	0x200040dc
    5480:	2000235c 	.word	0x2000235c
    5484:	200023b0 	.word	0x200023b0
    5488:	003d0900 	.word	0x003d0900
    548c:	200021f4 	.word	0x200021f4
    5490:	200031ec 	.word	0x200031ec
    5494:	00004d95 	.word	0x00004d95

00005498 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5498:	b530      	push	{r4, r5, lr}
    549a:	b085      	sub	sp, #20
    549c:	4604      	mov	r4, r0
    549e:	468c      	mov	ip, r1
    54a0:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    54a2:	ab01      	add	r3, sp, #4
    54a4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    54a8:	c907      	ldmia	r1, {r0, r1, r2}
    54aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    54ae:	ea4f 124c 	mov.w	r2, ip, lsl #5
    54b2:	4619      	mov	r1, r3
    54b4:	6a20      	ldr	r0, [r4, #32]
    54b6:	f001 fef5 	bl	72a4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    54ba:	2801      	cmp	r0, #1
    54bc:	d106      	bne.n	54cc <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    54be:	462a      	mov	r2, r5
    54c0:	a901      	add	r1, sp, #4
    54c2:	6a20      	ldr	r0, [r4, #32]
    54c4:	f001 fe99 	bl	71fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    54c8:	b005      	add	sp, #20
    54ca:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    54cc:	2000      	movs	r0, #0
    54ce:	e7fb      	b.n	54c8 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000054d0 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    54d0:	b510      	push	{r4, lr}
    54d2:	4604      	mov	r4, r0
  bool rtn = sync();
    54d4:	f000 fde8 	bl	60a8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    54d8:	2300      	movs	r3, #0
    54da:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    54de:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    54e2:	bd10      	pop	{r4, pc}

000054e4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    54e4:	b538      	push	{r3, r4, r5, lr}
    54e6:	460d      	mov	r5, r1
    54e8:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    54ea:	2200      	movs	r2, #0
    54ec:	f100 0124 	add.w	r1, r0, #36	; 0x24
    54f0:	6a00      	ldr	r0, [r0, #32]
    54f2:	f001 fe82 	bl	71fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    54f6:	b128      	cbz	r0, 5504 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    54f8:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    54fa:	802a      	strh	r2, [r5, #0]
    54fc:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    54fe:	8023      	strh	r3, [r4, #0]
  return true;
    5500:	2001      	movs	r0, #1

 fail:
  return false;
}
    5502:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5504:	2000      	movs	r0, #0
    5506:	e7fc      	b.n	5502 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

00005508 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5508:	b538      	push	{r3, r4, r5, lr}
    550a:	460d      	mov	r5, r1
    550c:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    550e:	2200      	movs	r2, #0
    5510:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5514:	6a00      	ldr	r0, [r0, #32]
    5516:	f001 fe70 	bl	71fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    551a:	b128      	cbz	r0, 5528 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    551c:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    551e:	802a      	strh	r2, [r5, #0]
    5520:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    5522:	8023      	strh	r3, [r4, #0]
  return true;
    5524:	2001      	movs	r0, #1

 fail:
  return false;
}
    5526:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5528:	2000      	movs	r0, #0
    552a:	e7fc      	b.n	5526 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

0000552c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    552c:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    552e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5532:	b10b      	cbz	r3, 5538 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5534:	2000      	movs	r0, #0
}
    5536:	bd38      	pop	{r3, r4, r5, pc}
    5538:	4604      	mov	r4, r0
    553a:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    553c:	2238      	movs	r2, #56	; 0x38
    553e:	2100      	movs	r1, #0
    5540:	f00b feb8 	bl	112b4 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5544:	2340      	movs	r3, #64	; 0x40
    5546:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    554a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    554c:	2001      	movs	r0, #1
    554e:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    5552:	e7f0      	b.n	5536 <ExFatFile::openRoot(ExFatVolume*)+0xa>

00005554 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5554:	b570      	push	{r4, r5, r6, lr}
    5556:	460d      	mov	r5, r1
    5558:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    555a:	782a      	ldrb	r2, [r5, #0]
    555c:	2a20      	cmp	r2, #32
    555e:	d103      	bne.n	5568 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    5560:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5564:	2c20      	cmp	r4, #32
    5566:	d0fb      	beq.n	5560 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    5568:	600d      	str	r5, [r1, #0]
  fname->end = path;
    556a:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    556c:	782c      	ldrb	r4, [r5, #0]
    556e:	b384      	cbz	r4, 55d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5570:	2c2f      	cmp	r4, #47	; 0x2f
    5572:	d02e      	beq.n	55d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5574:	f105 0e01 	add.w	lr, r5, #1
    5578:	4e1f      	ldr	r6, [pc, #124]	; (55f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    557a:	e017      	b.n	55ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    557c:	2c1f      	cmp	r4, #31
    557e:	d823      	bhi.n	55c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    5580:	2000      	movs	r0, #0
    5582:	e00b      	b.n	559c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5584:	2c5c      	cmp	r4, #92	; 0x5c
    5586:	d035      	beq.n	55f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    5588:	d903      	bls.n	5592 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    558a:	2c7c      	cmp	r4, #124	; 0x7c
    558c:	d107      	bne.n	559e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    558e:	2000      	movs	r0, #0
    5590:	e004      	b.n	559c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5592:	3c3e      	subs	r4, #62	; 0x3e
    5594:	b2e4      	uxtb	r4, r4
    5596:	2c01      	cmp	r4, #1
    5598:	d801      	bhi.n	559e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    559a:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    559c:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    559e:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    55a0:	782c      	ldrb	r4, [r5, #0]
    55a2:	f10e 0e01 	add.w	lr, lr, #1
    55a6:	b1a4      	cbz	r4, 55d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    55a8:	2c2f      	cmp	r4, #47	; 0x2f
    55aa:	d012      	beq.n	55d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    55ac:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    55ae:	2c3c      	cmp	r4, #60	; 0x3c
    55b0:	d8e8      	bhi.n	5584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    55b2:	2c21      	cmp	r4, #33	; 0x21
    55b4:	d9e2      	bls.n	557c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    55b6:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    55ba:	fa5f fc8c 	uxtb.w	ip, ip
    55be:	fa26 fc0c 	lsr.w	ip, r6, ip
    55c2:	f01c 0f01 	tst.w	ip, #1
    55c6:	d113      	bne.n	55f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    55c8:	2c2e      	cmp	r4, #46	; 0x2e
    55ca:	d0e9      	beq.n	55a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    55cc:	2c20      	cmp	r4, #32
    55ce:	d0e7      	beq.n	55a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    55d0:	e7e5      	b.n	559e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    55d2:	782a      	ldrb	r2, [r5, #0]
    55d4:	2a2f      	cmp	r2, #47	; 0x2f
    55d6:	d001      	beq.n	55dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    55d8:	2a20      	cmp	r2, #32
    55da:	d105      	bne.n	55e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    55dc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    55e0:	2c20      	cmp	r4, #32
    55e2:	d0fb      	beq.n	55dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    55e4:	2c2f      	cmp	r4, #47	; 0x2f
    55e6:	d0f9      	beq.n	55dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    55e8:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    55ea:	f001 fd13 	bl	7014 <ExFatFile::hashName(ExName_t*)>
    55ee:	e7d5      	b.n	559c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    55f0:	2000      	movs	r0, #0
    55f2:	e7d3      	b.n	559c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    55f4:	2000      	movs	r0, #0
    55f6:	e7d1      	b.n	559c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    55f8:	05002101 	.word	0x05002101

000055fc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    55fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5600:	b083      	sub	sp, #12
    5602:	4604      	mov	r4, r0
    5604:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5606:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    560a:	f013 0f01 	tst.w	r3, #1
    560e:	f000 80b3 	beq.w	5778 <ExFatFile::read(void*, unsigned int)+0x17c>
    5612:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5614:	f013 0f40 	tst.w	r3, #64	; 0x40
    5618:	d104      	bne.n	5624 <ExFatFile::read(void*, unsigned int)+0x28>
    561a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    561e:	f013 0f08 	tst.w	r3, #8
    5622:	d00d      	beq.n	5640 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    5624:	6822      	ldr	r2, [r4, #0]
    5626:	6863      	ldr	r3, [r4, #4]
    5628:	6921      	ldr	r1, [r4, #16]
    562a:	6960      	ldr	r0, [r4, #20]
    562c:	9d00      	ldr	r5, [sp, #0]
    562e:	18ad      	adds	r5, r5, r2
    5630:	f143 0300 	adc.w	r3, r3, #0
    5634:	42a9      	cmp	r1, r5
    5636:	eb70 0303 	sbcs.w	r3, r0, r3
    563a:	d201      	bcs.n	5640 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    563c:	1a8b      	subs	r3, r1, r2
    563e:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    5640:	9b00      	ldr	r3, [sp, #0]
    5642:	2b00      	cmp	r3, #0
    5644:	f000 80a3 	beq.w	578e <ExFatFile::read(void*, unsigned int)+0x192>
    5648:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    564a:	f104 0318 	add.w	r3, r4, #24
    564e:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5650:	f240 1bff 	movw	fp, #511	; 0x1ff
    5654:	e036      	b.n	56c4 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    5656:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    565a:	f013 0f40 	tst.w	r3, #64	; 0x40
    565e:	d003      	beq.n	5668 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    5660:	69a3      	ldr	r3, [r4, #24]
    5662:	3301      	adds	r3, #1
    5664:	61a3      	str	r3, [r4, #24]
    5666:	e041      	b.n	56ec <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5668:	9a01      	ldr	r2, [sp, #4]
    566a:	69a1      	ldr	r1, [r4, #24]
    566c:	f001 fde2 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5670:	2800      	cmp	r0, #0
    5672:	f2c0 8081 	blt.w	5778 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    5676:	2800      	cmp	r0, #0
    5678:	d138      	bne.n	56ec <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    567a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    567e:	f013 0f50 	tst.w	r3, #80	; 0x50
    5682:	d079      	beq.n	5778 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    5684:	9b00      	ldr	r3, [sp, #0]
    5686:	1bd8      	subs	r0, r3, r7
    5688:	e07e      	b.n	5788 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    568a:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    568e:	42be      	cmp	r6, r7
    5690:	bf28      	it	cs
    5692:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5694:	2200      	movs	r2, #0
    5696:	4629      	mov	r1, r5
    5698:	f508 7004 	add.w	r0, r8, #528	; 0x210
    569c:	f006 f995 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    56a0:	4601      	mov	r1, r0
    56a2:	2800      	cmp	r0, #0
    56a4:	d068      	beq.n	5778 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    56a6:	4632      	mov	r2, r6
    56a8:	4449      	add	r1, r9
    56aa:	4650      	mov	r0, sl
    56ac:	f007 fd38 	bl	d120 <memcpy>
    dst += n;
    56b0:	44b2      	add	sl, r6
    m_curPosition += n;
    56b2:	6823      	ldr	r3, [r4, #0]
    56b4:	6862      	ldr	r2, [r4, #4]
    56b6:	199b      	adds	r3, r3, r6
    56b8:	f142 0200 	adc.w	r2, r2, #0
    56bc:	6023      	str	r3, [r4, #0]
    56be:	6062      	str	r2, [r4, #4]
  while (toRead) {
    56c0:	1bbf      	subs	r7, r7, r6
    56c2:	d0df      	beq.n	5684 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    56c4:	6823      	ldr	r3, [r4, #0]
    56c6:	6862      	ldr	r2, [r4, #4]
    56c8:	6a20      	ldr	r0, [r4, #32]
    56ca:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    56ce:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    56d0:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    56d4:	b956      	cbnz	r6, 56ec <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    56d6:	4313      	orrs	r3, r2
    56d8:	d1bd      	bne.n	5656 <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    56da:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    56de:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    56e2:	bf14      	ite	ne
    56e4:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    56e8:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    56ea:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    56ec:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    56f0:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    56f4:	0a72      	lsrs	r2, r6, #9
    56f6:	69a5      	ldr	r5, [r4, #24]
    56f8:	3d02      	subs	r5, #2
    56fa:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    56fc:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    5700:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    5704:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5706:	f1b9 0f00 	cmp.w	r9, #0
    570a:	d1be      	bne.n	568a <ExFatFile::read(void*, unsigned int)+0x8e>
    570c:	455f      	cmp	r7, fp
    570e:	d9bc      	bls.n	568a <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5710:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5714:	428d      	cmp	r5, r1
    5716:	d0b8      	beq.n	568a <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5718:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    571c:	d20a      	bcs.n	5734 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    571e:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5722:	6803      	ldr	r3, [r0, #0]
    5724:	691b      	ldr	r3, [r3, #16]
    5726:	4652      	mov	r2, sl
    5728:	4629      	mov	r1, r5
    572a:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    572c:	b320      	cbz	r0, 5778 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    572e:	f44f 7600 	mov.w	r6, #512	; 0x200
    5732:	e7bd      	b.n	56b0 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5734:	f04f 0901 	mov.w	r9, #1
    5738:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    573c:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5740:	0a7b      	lsrs	r3, r7, #9
    5742:	4599      	cmp	r9, r3
    5744:	bf28      	it	cs
    5746:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5748:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    574c:	428d      	cmp	r5, r1
    574e:	d808      	bhi.n	5762 <ExFatFile::read(void*, unsigned int)+0x166>
    5750:	eb05 0309 	add.w	r3, r5, r9
    5754:	4299      	cmp	r1, r3
    5756:	d204      	bcs.n	5762 <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5758:	f508 7004 	add.w	r0, r8, #528	; 0x210
    575c:	f006 f90e 	bl	b97c <FsCache::sync()>
    5760:	b150      	cbz	r0, 5778 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5762:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5766:	6803      	ldr	r3, [r0, #0]
    5768:	f8d3 8014 	ldr.w	r8, [r3, #20]
    576c:	464b      	mov	r3, r9
    576e:	4652      	mov	r2, sl
    5770:	4629      	mov	r1, r5
    5772:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5774:	2800      	cmp	r0, #0
    5776:	d19b      	bne.n	56b0 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5778:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    577c:	f043 0302 	orr.w	r3, r3, #2
    5780:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5788:	b003      	add	sp, #12
    578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    578e:	461f      	mov	r7, r3
    5790:	e778      	b.n	5684 <ExFatFile::read(void*, unsigned int)+0x88>

00005792 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5792:	b5f0      	push	{r4, r5, r6, r7, lr}
    5794:	b083      	sub	sp, #12
    5796:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5798:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    579c:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    579e:	2201      	movs	r2, #1
    57a0:	f10d 0107 	add.w	r1, sp, #7
    57a4:	f7ff ff2a 	bl	55fc <ExFatFile::read(void*, unsigned int)>
    57a8:	2801      	cmp	r0, #1
    57aa:	bf0c      	ite	eq
    57ac:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    57b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    57b4:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    57b8:	61a5      	str	r5, [r4, #24]
}
    57ba:	b003      	add	sp, #12
    57bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000057be <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    57be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57c2:	4604      	mov	r4, r0
    57c4:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    57c6:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    57ca:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    57ce:	2a00      	cmp	r2, #0
    57d0:	d054      	beq.n	587c <ExFatFile::seekSet(unsigned long long)+0xbe>
    57d2:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    57d4:	6801      	ldr	r1, [r0, #0]
    57d6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    57da:	459c      	cmp	ip, r3
    57dc:	bf08      	it	eq
    57de:	42b1      	cmpeq	r1, r6
    57e0:	d05d      	beq.n	589e <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    57e2:	ea56 0307 	orrs.w	r3, r6, r7
    57e6:	d04e      	beq.n	5886 <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    57e8:	f012 0f08 	tst.w	r2, #8
    57ec:	d004      	beq.n	57f8 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    57ee:	6900      	ldr	r0, [r0, #16]
    57f0:	6963      	ldr	r3, [r4, #20]
    57f2:	42b0      	cmp	r0, r6
    57f4:	41bb      	sbcs	r3, r7
    57f6:	d341      	bcc.n	587c <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    57f8:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    57fc:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    5800:	3309      	adds	r3, #9
    5802:	b2db      	uxtb	r3, r3
    5804:	1e75      	subs	r5, r6, #1
    5806:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    580a:	f1c3 0920 	rsb	r9, r3, #32
    580e:	f1a3 0020 	sub.w	r0, r3, #32
    5812:	40dd      	lsrs	r5, r3
    5814:	fa0a f909 	lsl.w	r9, sl, r9
    5818:	ea45 0509 	orr.w	r5, r5, r9
    581c:	fa2a f000 	lsr.w	r0, sl, r0
    5820:	4305      	orrs	r5, r0
  if (isContiguous()) {
    5822:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5826:	f010 0f40 	tst.w	r0, #64	; 0x40
    582a:	d132      	bne.n	5892 <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    582c:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5830:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5834:	f1c3 0920 	rsb	r9, r3, #32
    5838:	f1a3 0020 	sub.w	r0, r3, #32
    583c:	fa2b f303 	lsr.w	r3, fp, r3
    5840:	fa0a f909 	lsl.w	r9, sl, r9
    5844:	ea43 0309 	orr.w	r3, r3, r9
    5848:	fa2a f000 	lsr.w	r0, sl, r0
    584c:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    584e:	ea51 0c0c 	orrs.w	ip, r1, ip
    5852:	d001      	beq.n	5858 <ExFatFile::seekSet(unsigned long long)+0x9a>
    5854:	429d      	cmp	r5, r3
    5856:	d220      	bcs.n	589a <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5858:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    585c:	bf14      	ite	ne
    585e:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5862:	69e3      	ldreq	r3, [r4, #28]
    5864:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5866:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    586a:	b175      	cbz	r5, 588a <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    586c:	464a      	mov	r2, r9
    586e:	69a1      	ldr	r1, [r4, #24]
    5870:	6a20      	ldr	r0, [r4, #32]
    5872:	f001 fcdf 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5876:	3d01      	subs	r5, #1
    5878:	2800      	cmp	r0, #0
    587a:	dcf6      	bgt.n	586a <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    587c:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5880:	2000      	movs	r0, #0
}
    5882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5886:	2300      	movs	r3, #0
    5888:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    588a:	6026      	str	r6, [r4, #0]
    588c:	6067      	str	r7, [r4, #4]
  return true;
    588e:	2001      	movs	r0, #1
    5890:	e7f7      	b.n	5882 <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5892:	69e3      	ldr	r3, [r4, #28]
    5894:	442b      	add	r3, r5
    5896:	61a3      	str	r3, [r4, #24]
    goto done;
    5898:	e7f7      	b.n	588a <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    589a:	1aed      	subs	r5, r5, r3
    589c:	e7e3      	b.n	5866 <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    589e:	2001      	movs	r0, #1
    58a0:	e7ef      	b.n	5882 <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

000058a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    58a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58a8:	b08f      	sub	sp, #60	; 0x3c
    58aa:	4607      	mov	r7, r0
    58ac:	9302      	str	r3, [sp, #8]
    58ae:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    58b2:	f1bb 0f00 	cmp.w	fp, #0
    58b6:	d10e      	bne.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    58b8:	460d      	mov	r5, r1
    58ba:	4691      	mov	r9, r2
    58bc:	461a      	mov	r2, r3
    58be:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    58c2:	f013 0f50 	tst.w	r3, #80	; 0x50
    58c6:	d006      	beq.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    58c8:	f002 0303 	and.w	r3, r2, #3
    58cc:	2b01      	cmp	r3, #1
    58ce:	d02b      	beq.n	5928 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    58d0:	2b02      	cmp	r3, #2
    58d2:	d02b      	beq.n	592c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    58d4:	b143      	cbz	r3, 58e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    58d6:	2600      	movs	r6, #0
    58d8:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    58dc:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    58e0:	4630      	mov	r0, r6
    58e2:	b00f      	add	sp, #60	; 0x3c
    58e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    58e8:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    58ea:	9a02      	ldr	r2, [sp, #8]
    58ec:	f002 0208 	and.w	r2, r2, #8
    58f0:	4313      	orrs	r3, r2
    58f2:	9303      	str	r3, [sp, #12]
  if (fname) {
    58f4:	f1b9 0f00 	cmp.w	r9, #0
    58f8:	d01a      	beq.n	5930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    58fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
    58fe:	f103 080e 	add.w	r8, r3, #14
    5902:	4bae      	ldr	r3, [pc, #696]	; (5bbc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    5904:	fba3 3808 	umull	r3, r8, r3, r8
    5908:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    590c:	f108 0802 	add.w	r8, r8, #2
    5910:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    5914:	2200      	movs	r2, #0
    5916:	2300      	movs	r3, #0
    5918:	4628      	mov	r0, r5
    591a:	f7ff ff50 	bl	57be <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    591e:	465c      	mov	r4, fp
    5920:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5922:	f04f 0a20 	mov.w	sl, #32
    5926:	e00c      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5928:	2302      	movs	r3, #2
    592a:	e7de      	b.n	58ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    592c:	2303      	movs	r3, #3
    592e:	e7dc      	b.n	58ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5930:	f04f 0803 	mov.w	r8, #3
    5934:	e7f3      	b.n	591e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5936:	461e      	mov	r6, r3
    5938:	e003      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    593a:	461e      	mov	r6, r3
    593c:	e001      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    593e:	b1cb      	cbz	r3, 5974 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5940:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5942:	4652      	mov	r2, sl
    5944:	a906      	add	r1, sp, #24
    5946:	4628      	mov	r0, r5
    5948:	f7ff fe58 	bl	55fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    594c:	b1a8      	cbz	r0, 597a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    594e:	2820      	cmp	r0, #32
    5950:	d1c1      	bne.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5952:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5956:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    595a:	2a00      	cmp	r2, #0
    595c:	db20      	blt.n	59a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    595e:	b924      	cbnz	r4, 596a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5960:	682a      	ldr	r2, [r5, #0]
    5962:	3a20      	subs	r2, #32
    5964:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5966:	69aa      	ldr	r2, [r5, #24]
    5968:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    596a:	4544      	cmp	r4, r8
    596c:	d2e7      	bcs.n	593e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    596e:	3401      	adds	r4, #1
    5970:	b2e4      	uxtb	r4, r4
    5972:	e7e4      	b.n	593e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5974:	f1b9 0f00 	cmp.w	r9, #0
    5978:	d0ad      	beq.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    597a:	9b02      	ldr	r3, [sp, #8]
    597c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5980:	d0a9      	beq.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5982:	9b03      	ldr	r3, [sp, #12]
    5984:	f013 0f02 	tst.w	r3, #2
    5988:	d0a5      	beq.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    598a:	f1b9 0f00 	cmp.w	r9, #0
    598e:	d0a2      	beq.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5990:	4544      	cmp	r4, r8
    5992:	f080 80cd 	bcs.w	5b30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5996:	2620      	movs	r6, #32
    5998:	f8dd a004 	ldr.w	sl, [sp, #4]
    599c:	46bb      	mov	fp, r7
    599e:	e0b2      	b.n	5b06 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    59a0:	bb3e      	cbnz	r6, 59f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    59a2:	4544      	cmp	r4, r8
    59a4:	bf38      	it	cc
    59a6:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    59a8:	2b85      	cmp	r3, #133	; 0x85
    59aa:	d1ca      	bne.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    59ac:	2238      	movs	r2, #56	; 0x38
    59ae:	2100      	movs	r1, #0
    59b0:	4638      	mov	r0, r7
    59b2:	f00b fc7f 	bl	112b4 <memset>
      m_setCount = dirFile->setCount;
    59b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    59ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    59be:	f89d 201c 	ldrb.w	r2, [sp, #28]
    59c2:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    59c6:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    59ca:	bf08      	it	eq
    59cc:	f043 0308 	orreq.w	r3, r3, #8
    59d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    59d4:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    59d6:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    59d8:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    59da:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    59dc:	682b      	ldr	r3, [r5, #0]
    59de:	3b20      	subs	r3, #32
    59e0:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    59e2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    59e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    59ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    59ee:	2601      	movs	r6, #1
    59f0:	e7a7      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    59f2:	2bc0      	cmp	r3, #192	; 0xc0
    59f4:	d003      	beq.n	59fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    59f6:	2bc1      	cmp	r3, #193	; 0xc1
    59f8:	d033      	beq.n	5a62 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    59fa:	2600      	movs	r6, #0
    59fc:	e7a1      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    59fe:	9a03      	ldr	r2, [sp, #12]
    5a00:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5a04:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5a08:	f013 0f02 	tst.w	r3, #2
    5a0c:	d003      	beq.n	5a16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5a0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    5a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    5a16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    5a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a20:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5a26:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    5a2a:	f1b9 0f00 	cmp.w	r9, #0
    5a2e:	d02e      	beq.n	5a8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5a30:	f8d9 3000 	ldr.w	r3, [r9]
    5a34:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5a38:	f04f 0300 	mov.w	r3, #0
    5a3c:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    5a40:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5a44:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5a48:	429a      	cmp	r2, r3
    5a4a:	d001      	beq.n	5a50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    5a4c:	2600      	movs	r6, #0
    5a4e:	e778      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    5a50:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    5a54:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5a58:	429e      	cmp	r6, r3
    5a5a:	bf14      	ite	ne
    5a5c:	2600      	movne	r6, #0
    5a5e:	2601      	moveq	r6, #1
    5a60:	e76f      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    5a62:	464a      	mov	r2, r9
    5a64:	a906      	add	r1, sp, #24
    5a66:	4638      	mov	r0, r7
    5a68:	f001 fa4c 	bl	6f04 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5a6c:	4603      	mov	r3, r0
    5a6e:	2800      	cmp	r0, #0
    5a70:	f43f af61 	beq.w	5936 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    5a74:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    5a78:	2a00      	cmp	r2, #0
    5a7a:	f47f af5e 	bne.w	593a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    5a7e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5a82:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5a86:	4291      	cmp	r1, r2
    5a88:	d001      	beq.n	5a8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    5a8a:	461e      	mov	r6, r3
    5a8c:	e759      	b.n	5942 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    5a8e:	9b02      	ldr	r3, [sp, #8]
    5a90:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5a94:	f47f af1f 	bne.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5a98:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    5a9c:	d105      	bne.n	5aaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    5a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5aa2:	f013 0f02 	tst.w	r3, #2
    5aa6:	f000 80d5 	beq.w	5c54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5aaa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    5aae:	f013 0f11 	tst.w	r3, #17
    5ab2:	f47f af10 	bne.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5ab6:	9b02      	ldr	r3, [sp, #8]
    5ab8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5abc:	f000 80cf 	beq.w	5c5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5ac4:	f013 0f02 	tst.w	r3, #2
    5ac8:	f43f af05 	beq.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    5acc:	2200      	movs	r2, #0
    5ace:	2300      	movs	r3, #0
    5ad0:	4638      	mov	r0, r7
    5ad2:	f7ff fe74 	bl	57be <ExFatFile::seekSet(unsigned long long)>
    5ad6:	2800      	cmp	r0, #0
    5ad8:	f43f aefd 	beq.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5adc:	4638      	mov	r0, r7
    5ade:	f000 fd24 	bl	652a <ExFatFile::truncate()>
    if (!truncate(0)) {
    5ae2:	4606      	mov	r6, r0
    5ae4:	2800      	cmp	r0, #0
    5ae6:	f47f aefb 	bne.w	58e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5aea:	e6f4      	b.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    5aec:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    5aee:	4628      	mov	r0, r5
    5af0:	f000 fb08 	bl	6104 <ExFatFile::addDirCluster()>
    5af4:	b908      	cbnz	r0, 5afa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    5af6:	465f      	mov	r7, fp
    5af8:	e6ed      	b.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    5afa:	61af      	str	r7, [r5, #24]
      continue;
    5afc:	e001      	b.n	5b02 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    5afe:	3401      	adds	r4, #1
    5b00:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    5b02:	4544      	cmp	r4, r8
    5b04:	d211      	bcs.n	5b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    5b06:	4632      	mov	r2, r6
    5b08:	a906      	add	r1, sp, #24
    5b0a:	4628      	mov	r0, r5
    5b0c:	f7ff fd76 	bl	55fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5b10:	2800      	cmp	r0, #0
    5b12:	d0eb      	beq.n	5aec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    5b14:	2820      	cmp	r0, #32
    5b16:	f040 809b 	bne.w	5c50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    5b1a:	2c00      	cmp	r4, #0
    5b1c:	d1ef      	bne.n	5afe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5b1e:	682b      	ldr	r3, [r5, #0]
    5b20:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    5b24:	69ab      	ldr	r3, [r5, #24]
    5b26:	9300      	str	r3, [sp, #0]
    5b28:	e7e9      	b.n	5afe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    5b2a:	f8cd a004 	str.w	sl, [sp, #4]
    5b2e:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5b30:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    5b34:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    5b38:	2238      	movs	r2, #56	; 0x38
    5b3a:	2100      	movs	r1, #0
    5b3c:	4638      	mov	r0, r7
    5b3e:	f00b fbb9 	bl	112b4 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5b42:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    5b44:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    5b46:	2308      	movs	r3, #8
    5b48:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    5b4c:	9b00      	ldr	r3, [sp, #0]
    5b4e:	627b      	str	r3, [r7, #36]	; 0x24
    5b50:	9b01      	ldr	r3, [sp, #4]
    5b52:	62bb      	str	r3, [r7, #40]	; 0x28
    5b54:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    5b58:	f8d9 3000 	ldr.w	r3, [r9]
    5b5c:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5b60:	2300      	movs	r3, #0
    5b62:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5b66:	f1b8 0f00 	cmp.w	r8, #0
    5b6a:	d06c      	beq.n	5c46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5b6c:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    5b6e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    5b72:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    5b76:	f8df b048 	ldr.w	fp, [pc, #72]	; 5bc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    5b7a:	e036      	b.n	5bea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    5b7c:	2385      	movs	r3, #133	; 0x85
    5b7e:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    5b80:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5b84:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    5b88:	f8db 3000 	ldr.w	r3, [fp]
    5b8c:	b17b      	cbz	r3, 5bae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    5b8e:	f10d 0213 	add.w	r2, sp, #19
    5b92:	f10d 0116 	add.w	r1, sp, #22
    5b96:	a805      	add	r0, sp, #20
    5b98:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5b9e:	8163      	strh	r3, [r4, #10]
    5ba0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ba4:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5ba6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5baa:	7523      	strb	r3, [r4, #20]
    5bac:	e019      	b.n	5be2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5bae:	f245 6321 	movw	r3, #22049	; 0x5621
    5bb2:	8163      	strh	r3, [r4, #10]
    5bb4:	81e3      	strh	r3, [r4, #14]
    5bb6:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    5bb8:	e013      	b.n	5be2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5bba:	bf00      	nop
    5bbc:	88888889 	.word	0x88888889
    5bc0:	20004b64 	.word	0x20004b64
      dirStream->type = EXFAT_TYPE_STREAM;
    5bc4:	23c0      	movs	r3, #192	; 0xc0
    5bc6:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5bc8:	2301      	movs	r3, #1
    5bca:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5bcc:	9b03      	ldr	r3, [sp, #12]
    5bce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5bd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5bda:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5bdc:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    5be0:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5be2:	3601      	adds	r6, #1
    5be4:	b2f3      	uxtb	r3, r6
    5be6:	4598      	cmp	r8, r3
    5be8:	d92d      	bls.n	5c46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5bea:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5bec:	2201      	movs	r2, #1
    5bee:	4629      	mov	r1, r5
    5bf0:	4638      	mov	r0, r7
    5bf2:	f7ff fc51 	bl	5498 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5bf6:	4604      	mov	r4, r0
    5bf8:	2800      	cmp	r0, #0
    5bfa:	f43f ae6c 	beq.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5bfe:	f990 3000 	ldrsb.w	r3, [r0]
    5c02:	2b00      	cmp	r3, #0
    5c04:	f6ff ae67 	blt.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    5c08:	2220      	movs	r2, #32
    5c0a:	2100      	movs	r1, #0
    5c0c:	f00b fb52 	bl	112b4 <memset>
    if (i == 0) {
    5c10:	2d00      	cmp	r5, #0
    5c12:	d0b3      	beq.n	5b7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    5c14:	2d01      	cmp	r5, #1
    5c16:	d0d5      	beq.n	5bc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    5c18:	23c1      	movs	r3, #193	; 0xc1
    5c1a:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    5c1c:	4625      	mov	r5, r4
    5c1e:	341e      	adds	r4, #30
    5c20:	e006      	b.n	5c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    5c22:	4648      	mov	r0, r9
    5c24:	f005 ff10 	bl	ba48 <FsName::get16()>
    5c28:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    5c2c:	42ac      	cmp	r4, r5
    5c2e:	d0d8      	beq.n	5be2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    5c30:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d1f4      	bne.n	5c22 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5c38:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5c3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    5c40:	429a      	cmp	r2, r3
    5c42:	d1ee      	bne.n	5c22 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5c44:	e7cd      	b.n	5be2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    5c46:	4638      	mov	r0, r7
    5c48:	f000 fa2e 	bl	60a8 <ExFatFile::sync()>
    5c4c:	4606      	mov	r6, r0
    5c4e:	e647      	b.n	58e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5c50:	465f      	mov	r7, fp
    5c52:	e640      	b.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5c54:	9b02      	ldr	r3, [sp, #8]
    5c56:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5c5a:	f47f ae3c 	bne.w	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5c5e:	9b02      	ldr	r3, [sp, #8]
    5c60:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    5c64:	f43f ae3c 	beq.w	58e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5c68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5c6c:	4638      	mov	r0, r7
    5c6e:	f7ff fda6 	bl	57be <ExFatFile::seekSet(unsigned long long)>
    5c72:	4606      	mov	r6, r0
    5c74:	2800      	cmp	r0, #0
    5c76:	f47f ae33 	bne.w	58e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5c7a:	e62c      	b.n	58d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

00005c7c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c80:	b096      	sub	sp, #88	; 0x58
    5c82:	9201      	str	r2, [sp, #4]
    5c84:	461f      	mov	r7, r3
  ExFatFile() {}
    5c86:	2300      	movs	r3, #0
    5c88:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    5c8c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    5c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    5c94:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5c98:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	d159      	bne.n	5d54 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    5ca0:	4604      	mov	r4, r0
    5ca2:	460d      	mov	r5, r1
    5ca4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5ca8:	f013 0f50 	tst.w	r3, #80	; 0x50
    5cac:	d057      	beq.n	5d5e <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    5cae:	4613      	mov	r3, r2
    5cb0:	7812      	ldrb	r2, [r2, #0]
    5cb2:	2a2f      	cmp	r2, #47	; 0x2f
    5cb4:	d001      	beq.n	5cba <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5cb6:	2600      	movs	r6, #0
    5cb8:	e02c      	b.n	5d14 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    5cba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5cbe:	2a2f      	cmp	r2, #47	; 0x2f
    5cc0:	d0fb      	beq.n	5cba <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5cc2:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    5cc4:	b92a      	cbnz	r2, 5cd2 <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    5cc6:	6a29      	ldr	r1, [r5, #32]
    5cc8:	4620      	mov	r0, r4
    5cca:	f7ff fc2f 	bl	552c <ExFatFile::openRoot(ExFatVolume*)>
    5cce:	4603      	mov	r3, r0
    5cd0:	e041      	b.n	5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5cd2:	6a29      	ldr	r1, [r5, #32]
    5cd4:	a808      	add	r0, sp, #32
    5cd6:	f7ff fc29 	bl	552c <ExFatFile::openRoot(ExFatVolume*)>
    5cda:	4603      	mov	r3, r0
    5cdc:	2800      	cmp	r0, #0
    5cde:	d03a      	beq.n	5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    5ce0:	ad08      	add	r5, sp, #32
    5ce2:	e7e8      	b.n	5cb6 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    5ce4:	46ae      	mov	lr, r5
    5ce6:	f8dc 0000 	ldr.w	r0, [ip]
    5cea:	f8dc 1004 	ldr.w	r1, [ip, #4]
    5cee:	f8dc 2008 	ldr.w	r2, [ip, #8]
    5cf2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    5cf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5cfa:	f10c 0c10 	add.w	ip, ip, #16
    5cfe:	4675      	mov	r5, lr
    5d00:	45c4      	cmp	ip, r8
    5d02:	d1ef      	bne.n	5ce4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    5d04:	f8dc 0000 	ldr.w	r0, [ip]
    5d08:	f8ce 0000 	str.w	r0, [lr]
    close();
    5d0c:	4620      	mov	r0, r4
    5d0e:	f7ff fbdf 	bl	54d0 <ExFatFile::close()>
    dirFile = &tmpDir;
    5d12:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    5d14:	ab01      	add	r3, sp, #4
    5d16:	aa02      	add	r2, sp, #8
    5d18:	9901      	ldr	r1, [sp, #4]
    5d1a:	4620      	mov	r0, r4
    5d1c:	f7ff fc1a 	bl	5554 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5d20:	4603      	mov	r3, r0
    5d22:	b1c0      	cbz	r0, 5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    5d24:	9b01      	ldr	r3, [sp, #4]
    5d26:	781b      	ldrb	r3, [r3, #0]
    5d28:	b163      	cbz	r3, 5d44 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5d2a:	4633      	mov	r3, r6
    5d2c:	aa02      	add	r2, sp, #8
    5d2e:	4629      	mov	r1, r5
    5d30:	4620      	mov	r0, r4
    5d32:	f7ff fdb7 	bl	58a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5d36:	4603      	mov	r3, r0
    5d38:	b168      	cbz	r0, 5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    5d3a:	46a4      	mov	ip, r4
    5d3c:	ad08      	add	r5, sp, #32
    5d3e:	f104 0830 	add.w	r8, r4, #48	; 0x30
    5d42:	e7cf      	b.n	5ce4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    5d44:	463b      	mov	r3, r7
    5d46:	aa02      	add	r2, sp, #8
    5d48:	4629      	mov	r1, r5
    5d4a:	4620      	mov	r0, r4
    5d4c:	f7ff fdaa 	bl	58a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5d50:	4603      	mov	r3, r0
    5d52:	e000      	b.n	5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    5d54:	2300      	movs	r3, #0
}
    5d56:	4618      	mov	r0, r3
    5d58:	b016      	add	sp, #88	; 0x58
    5d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    5d5e:	2300      	movs	r3, #0
    5d60:	e7f9      	b.n	5d56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

00005d62 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5d62:	b129      	cbz	r1, 5d70 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    5d64:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    5d66:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5d6a:	f7ff ff87 	bl	5c7c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5d6e:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    5d70:	2000      	movs	r0, #0
}
    5d72:	4770      	bx	lr

00005d74 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5d74:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5d76:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5d7a:	b97b      	cbnz	r3, 5d9c <ExFatFile::openNext(ExFatFile*, int)+0x28>
    5d7c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5d80:	f013 0f50 	tst.w	r3, #80	; 0x50
    5d84:	d00c      	beq.n	5da0 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    5d86:	680b      	ldr	r3, [r1, #0]
    5d88:	f013 0f1f 	tst.w	r3, #31
    5d8c:	d001      	beq.n	5d92 <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    5d8e:	2000      	movs	r0, #0
    5d90:	e005      	b.n	5d9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    5d92:	4613      	mov	r3, r2
    5d94:	2200      	movs	r2, #0
    5d96:	f7ff fd85 	bl	58a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5d9a:	e000      	b.n	5d9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    5d9c:	2000      	movs	r0, #0
}
    5d9e:	bd08      	pop	{r3, pc}
  return false;
    5da0:	2000      	movs	r0, #0
    5da2:	e7fc      	b.n	5d9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>

00005da4 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    5da4:	b410      	push	{r4}
    5da6:	4684      	mov	ip, r0
    5da8:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5daa:	f89c 4000 	ldrb.w	r4, [ip]
    5dae:	2c85      	cmp	r4, #133	; 0x85
    5db0:	bf14      	ite	ne
    5db2:	2400      	movne	r4, #0
    5db4:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5db6:	2200      	movs	r2, #0
    5db8:	e000      	b.n	5dbc <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    5dba:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5dbc:	03c3      	lsls	r3, r0, #15
    5dbe:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    5dc2:	f81c 1002 	ldrb.w	r1, [ip, r2]
    5dc6:	fa11 f383 	uxtah	r3, r1, r3
    5dca:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5dcc:	2a01      	cmp	r2, #1
    5dce:	d101      	bne.n	5dd4 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    5dd0:	2c00      	cmp	r4, #0
    5dd2:	d1f2      	bne.n	5dba <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    5dd4:	3201      	adds	r2, #1
    5dd6:	2a1f      	cmp	r2, #31
    5dd8:	d9f0      	bls.n	5dbc <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    5dda:	f85d 4b04 	ldr.w	r4, [sp], #4
    5dde:	4770      	bx	lr

00005de0 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5de2:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5de4:	6a00      	ldr	r0, [r0, #32]
    5de6:	69a1      	ldr	r1, [r4, #24]
    5de8:	b101      	cbz	r1, 5dec <ExFatFile::addCluster()+0xc>
    5dea:	3101      	adds	r1, #1
    5dec:	2201      	movs	r2, #1
    5dee:	f001 f943 	bl	7078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    5df2:	4605      	mov	r5, r0
  if (find < 2) {
    5df4:	2801      	cmp	r0, #1
    5df6:	d93c      	bls.n	5e72 <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    5df8:	2301      	movs	r3, #1
    5dfa:	461a      	mov	r2, r3
    5dfc:	4601      	mov	r1, r0
    5dfe:	6a20      	ldr	r0, [r4, #32]
    5e00:	f001 f993 	bl	712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5e04:	4607      	mov	r7, r0
    5e06:	2800      	cmp	r0, #0
    5e08:	d034      	beq.n	5e74 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    5e0a:	69a3      	ldr	r3, [r4, #24]
    5e0c:	b1bb      	cbz	r3, 5e3e <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5e0e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    5e12:	f012 0f40 	tst.w	r2, #64	; 0x40
    5e16:	d01a      	beq.n	5e4e <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    5e18:	3301      	adds	r3, #1
    5e1a:	42ab      	cmp	r3, r5
    5e1c:	d015      	beq.n	5e4a <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    5e22:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5e26:	69e1      	ldr	r1, [r4, #28]
    5e28:	69a3      	ldr	r3, [r4, #24]
    5e2a:	428b      	cmp	r3, r1
    5e2c:	d90f      	bls.n	5e4e <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    5e2e:	1c4e      	adds	r6, r1, #1
    5e30:	4632      	mov	r2, r6
    5e32:	6a20      	ldr	r0, [r4, #32]
    5e34:	f001 fa5d 	bl	72f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e38:	b1f0      	cbz	r0, 5e78 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5e3a:	4631      	mov	r1, r6
    5e3c:	e7f4      	b.n	5e28 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5e3e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e46:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5e4a:	61a5      	str	r5, [r4, #24]
  return true;
    5e4c:	e012      	b.n	5e74 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    5e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e52:	4629      	mov	r1, r5
    5e54:	6a20      	ldr	r0, [r4, #32]
    5e56:	f001 fa4c 	bl	72f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e5a:	b178      	cbz	r0, 5e7c <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    5e5c:	69a1      	ldr	r1, [r4, #24]
    5e5e:	2900      	cmp	r1, #0
    5e60:	d0f3      	beq.n	5e4a <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    5e62:	462a      	mov	r2, r5
    5e64:	6a20      	ldr	r0, [r4, #32]
    5e66:	f001 fa44 	bl	72f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e6a:	2800      	cmp	r0, #0
    5e6c:	d1ed      	bne.n	5e4a <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    5e6e:	4607      	mov	r7, r0
    5e70:	e000      	b.n	5e74 <ExFatFile::addCluster()+0x94>
    5e72:	2700      	movs	r7, #0
}
    5e74:	4638      	mov	r0, r7
    5e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    5e78:	4607      	mov	r7, r0
    5e7a:	e7fb      	b.n	5e74 <ExFatFile::addCluster()+0x94>
    5e7c:	4607      	mov	r7, r0
    5e7e:	e7f9      	b.n	5e74 <ExFatFile::addCluster()+0x94>

00005e80 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5e80:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    5e84:	f013 0f02 	tst.w	r3, #2
    5e88:	d04e      	beq.n	5f28 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    5e8a:	b570      	push	{r4, r5, r6, lr}
    5e8c:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    5e8e:	69c1      	ldr	r1, [r0, #28]
    5e90:	b1e9      	cbz	r1, 5ece <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    5e92:	f013 0f40 	tst.w	r3, #64	; 0x40
    5e96:	d041      	beq.n	5f1c <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5e98:	6a00      	ldr	r0, [r0, #32]
    5e9a:	68aa      	ldr	r2, [r5, #8]
    5e9c:	68ec      	ldr	r4, [r5, #12]
    5e9e:	3a01      	subs	r2, #1
    5ea0:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5ea4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5ea8:	3309      	adds	r3, #9
    5eaa:	b2db      	uxtb	r3, r3
    5eac:	f1c3 0c20 	rsb	ip, r3, #32
    5eb0:	f1a3 0620 	sub.w	r6, r3, #32
    5eb4:	40da      	lsrs	r2, r3
    5eb6:	fa04 fc0c 	lsl.w	ip, r4, ip
    5eba:	ea42 020c 	orr.w	r2, r2, ip
    5ebe:	fa24 f606 	lsr.w	r6, r4, r6
    5ec2:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5ec4:	2300      	movs	r3, #0
    5ec6:	3201      	adds	r2, #1
    5ec8:	f001 f92f 	bl	712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5ecc:	b378      	cbz	r0, 5f2e <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    5ece:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    5ed0:	2601      	movs	r6, #1
    5ed2:	4632      	mov	r2, r6
    5ed4:	b2e1      	uxtb	r1, r4
    5ed6:	4628      	mov	r0, r5
    5ed8:	f7ff fade 	bl	5498 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5edc:	b330      	cbz	r0, 5f2c <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    5ede:	7803      	ldrb	r3, [r0, #0]
    5ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ee4:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5ee6:	3401      	adds	r4, #1
    5ee8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    5eec:	b2e3      	uxtb	r3, r4
    5eee:	429a      	cmp	r2, r3
    5ef0:	d2ef      	bcs.n	5ed2 <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    5ef2:	2300      	movs	r3, #0
    5ef4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    5ef8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    5efc:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5efe:	4620      	mov	r0, r4
    5f00:	f005 fd3c 	bl	b97c <FsCache::sync()>
    5f04:	b198      	cbz	r0, 5f2e <ExFatFile::remove()+0xae>
    5f06:	f504 7004 	add.w	r0, r4, #528	; 0x210
    5f0a:	f005 fd37 	bl	b97c <FsCache::sync()>
    5f0e:	b170      	cbz	r0, 5f2e <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5f10:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    5f14:	6803      	ldr	r3, [r0, #0]
    5f16:	6a1b      	ldr	r3, [r3, #32]
    5f18:	4798      	blx	r3
    5f1a:	e008      	b.n	5f2e <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    5f1c:	6a00      	ldr	r0, [r0, #32]
    5f1e:	f001 fa08 	bl	7332 <ExFatPartition::freeChain(unsigned long)>
    5f22:	2800      	cmp	r0, #0
    5f24:	d1d3      	bne.n	5ece <ExFatFile::remove()+0x4e>
    5f26:	e002      	b.n	5f2e <ExFatFile::remove()+0xae>

 fail:
  return false;
    5f28:	2000      	movs	r0, #0
}
    5f2a:	4770      	bx	lr
  return false;
    5f2c:	2000      	movs	r0, #0
}
    5f2e:	bd70      	pop	{r4, r5, r6, pc}

00005f30 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    5f30:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5f34:	f013 0f10 	tst.w	r3, #16
    5f38:	d101      	bne.n	5f3e <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    5f3a:	2000      	movs	r0, #0
}
    5f3c:	4770      	bx	lr
bool ExFatFile::rmdir() {
    5f3e:	b530      	push	{r4, r5, lr}
    5f40:	b089      	sub	sp, #36	; 0x24
    5f42:	4604      	mov	r4, r0
    seekSet(0);
    5f44:	2200      	movs	r2, #0
    5f46:	2300      	movs	r3, #0
    5f48:	f7ff fc39 	bl	57be <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    5f4c:	2520      	movs	r5, #32
    5f4e:	462a      	mov	r2, r5
    5f50:	4669      	mov	r1, sp
    5f52:	4620      	mov	r0, r4
    5f54:	f7ff fb52 	bl	55fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5f58:	b148      	cbz	r0, 5f6e <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    5f5a:	2820      	cmp	r0, #32
    5f5c:	d115      	bne.n	5f8a <ExFatFile::rmdir()+0x5a>
    5f5e:	f89d 2000 	ldrb.w	r2, [sp]
    5f62:	f99d 3000 	ldrsb.w	r3, [sp]
    5f66:	2b00      	cmp	r3, #0
    5f68:	db11      	blt.n	5f8e <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    5f6a:	2a00      	cmp	r2, #0
    5f6c:	d1ef      	bne.n	5f4e <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    5f6e:	2308      	movs	r3, #8
    5f70:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5f74:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5f78:	f043 0302 	orr.w	r3, r3, #2
    5f7c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    5f80:	4620      	mov	r0, r4
    5f82:	f7ff ff7d 	bl	5e80 <ExFatFile::remove()>
}
    5f86:	b009      	add	sp, #36	; 0x24
    5f88:	bd30      	pop	{r4, r5, pc}
  return false;
    5f8a:	2000      	movs	r0, #0
    5f8c:	e7fb      	b.n	5f86 <ExFatFile::rmdir()+0x56>
    5f8e:	2000      	movs	r0, #0
    5f90:	e7f9      	b.n	5f86 <ExFatFile::rmdir()+0x56>
	...

00005f94 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f98:	b083      	sub	sp, #12
    5f9a:	4604      	mov	r4, r0
    5f9c:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5f9e:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5fa0:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5fa2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 60a4 <ExFatFile::syncDir()+0x110>
    5fa6:	e02a      	b.n	5ffe <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5fa8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5fac:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5fb0:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5fb2:	f8d9 3000 	ldr.w	r3, [r9]
    5fb6:	b183      	cbz	r3, 5fda <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5fb8:	f10d 0203 	add.w	r2, sp, #3
    5fbc:	f10d 0106 	add.w	r1, sp, #6
    5fc0:	a801      	add	r0, sp, #4
    5fc2:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    5fc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fc8:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    5fca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5fce:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    5fd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5fd4:	81eb      	strh	r3, [r5, #14]
    5fd6:	822a      	strh	r2, [r5, #16]
    5fd8:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    5fda:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5fdc:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5fe0:	f043 0301 	orr.w	r3, r3, #1
    5fe4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    5fe8:	4639      	mov	r1, r7
    5fea:	4628      	mov	r0, r5
    5fec:	f7ff feda 	bl	5da4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    5ff0:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5ff2:	3601      	adds	r6, #1
    5ff4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    5ff8:	b2f3      	uxtb	r3, r6
    5ffa:	429a      	cmp	r2, r3
    5ffc:	d334      	bcc.n	6068 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5ffe:	4642      	mov	r2, r8
    6000:	b2f1      	uxtb	r1, r6
    6002:	4620      	mov	r0, r4
    6004:	f7ff fa48 	bl	5498 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6008:	4605      	mov	r5, r0
    600a:	b130      	cbz	r0, 601a <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    600c:	7803      	ldrb	r3, [r0, #0]
    600e:	2bc0      	cmp	r3, #192	; 0xc0
    6010:	d00d      	beq.n	602e <ExFatFile::syncDir()+0x9a>
    6012:	2bc1      	cmp	r3, #193	; 0xc1
    6014:	d0e8      	beq.n	5fe8 <ExFatFile::syncDir()+0x54>
    6016:	2b85      	cmp	r3, #133	; 0x85
    6018:	d0c6      	beq.n	5fa8 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    601a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    601e:	f043 0301 	orr.w	r3, r3, #1
    6022:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6026:	2000      	movs	r0, #0
}
    6028:	b003      	add	sp, #12
    602a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    602e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6032:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6036:	7843      	ldrb	r3, [r0, #1]
    6038:	bf14      	ite	ne
    603a:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    603e:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    6042:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6044:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6048:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    604c:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    604e:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6050:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6054:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    6058:	6a22      	ldr	r2, [r4, #32]
    605a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    605e:	f043 0301 	orr.w	r3, r3, #1
    6062:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    6066:	e7bf      	b.n	5fe8 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6068:	2201      	movs	r2, #1
    606a:	f104 0124 	add.w	r1, r4, #36	; 0x24
    606e:	6a20      	ldr	r0, [r4, #32]
    6070:	f001 f8c3 	bl	71fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6074:	2800      	cmp	r0, #0
    6076:	d0d0      	beq.n	601a <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6078:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    607a:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    607c:	4628      	mov	r0, r5
    607e:	f005 fc7d 	bl	b97c <FsCache::sync()>
    6082:	2800      	cmp	r0, #0
    6084:	d0c9      	beq.n	601a <ExFatFile::syncDir()+0x86>
    6086:	f505 7004 	add.w	r0, r5, #528	; 0x210
    608a:	f005 fc77 	bl	b97c <FsCache::sync()>
    608e:	2800      	cmp	r0, #0
    6090:	d0c3      	beq.n	601a <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    6092:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    6096:	6803      	ldr	r3, [r0, #0]
    6098:	6a1b      	ldr	r3, [r3, #32]
    609a:	4798      	blx	r3
    609c:	2800      	cmp	r0, #0
    609e:	d1c3      	bne.n	6028 <ExFatFile::syncDir()+0x94>
    60a0:	e7bb      	b.n	601a <ExFatFile::syncDir()+0x86>
    60a2:	bf00      	nop
    60a4:	20004b64 	.word	0x20004b64

000060a8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    60a8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    60aa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    60ae:	b33b      	cbz	r3, 6100 <ExFatFile::sync()+0x58>
    60b0:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    60b2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    60b6:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    60ba:	2a00      	cmp	r2, #0
    60bc:	db0c      	blt.n	60d8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    60be:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    60c0:	4628      	mov	r0, r5
    60c2:	f005 fc5b 	bl	b97c <FsCache::sync()>
    60c6:	b970      	cbnz	r0, 60e6 <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    60c8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    60cc:	f043 0301 	orr.w	r3, r3, #1
    60d0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    60d4:	2000      	movs	r0, #0
    60d6:	e014      	b.n	6102 <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    60d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    60dc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    60e0:	f7ff ff58 	bl	5f94 <ExFatFile::syncDir()>
    60e4:	e00d      	b.n	6102 <ExFatFile::sync()+0x5a>
    60e6:	f505 7004 	add.w	r0, r5, #528	; 0x210
    60ea:	f005 fc47 	bl	b97c <FsCache::sync()>
    60ee:	2800      	cmp	r0, #0
    60f0:	d0ea      	beq.n	60c8 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    60f2:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    60f6:	6803      	ldr	r3, [r0, #0]
    60f8:	6a1b      	ldr	r3, [r3, #32]
    60fa:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    60fc:	b908      	cbnz	r0, 6102 <ExFatFile::sync()+0x5a>
    60fe:	e7e3      	b.n	60c8 <ExFatFile::sync()+0x20>
    return true;
    6100:	2001      	movs	r0, #1
}
    6102:	bd38      	pop	{r3, r4, r5, pc}

00006104 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6108:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    610a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    610e:	f013 0f40 	tst.w	r3, #64	; 0x40
    6112:	d10a      	bne.n	612a <ExFatFile::addDirCluster()+0x26>
    6114:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6116:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    6118:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    611c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    611e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    6122:	d306      	bcc.n	6132 <ExFatFile::addDirCluster()+0x2e>
  return false;
    6124:	2000      	movs	r0, #0
}
    6126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    612a:	6a00      	ldr	r0, [r0, #32]
    612c:	f001 f9f4 	bl	7518 <ExFatPartition::rootLength()>
    6130:	e7f1      	b.n	6116 <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    6132:	4628      	mov	r0, r5
    6134:	f7ff fe54 	bl	5de0 <ExFatFile::addCluster()>
    6138:	2800      	cmp	r0, #0
    613a:	d0f4      	beq.n	6126 <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    613c:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    613e:	69ae      	ldr	r6, [r5, #24]
    6140:	3e02      	subs	r6, #2
    6142:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6146:	409e      	lsls	r6, r3
    6148:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    614c:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    614e:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    6150:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    6152:	f44f 7900 	mov.w	r9, #512	; 0x200
    6156:	46a0      	mov	r8, r4
    6158:	463a      	mov	r2, r7
    615a:	1931      	adds	r1, r6, r4
    615c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6160:	f005 fc33 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6164:	b360      	cbz	r0, 61c0 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    6166:	464a      	mov	r2, r9
    6168:	4641      	mov	r1, r8
    616a:	f00b f8a3 	bl	112b4 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    616e:	3401      	adds	r4, #1
    6170:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6172:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    6176:	2301      	movs	r3, #1
    6178:	4093      	lsls	r3, r2
    617a:	429c      	cmp	r4, r3
    617c:	d3ec      	bcc.n	6158 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    617e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6182:	f013 0f40 	tst.w	r3, #64	; 0x40
    6186:	d117      	bne.n	61b8 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6188:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    618c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6190:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6194:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    6198:	68ab      	ldr	r3, [r5, #8]
    619a:	68ea      	ldr	r2, [r5, #12]
    619c:	185b      	adds	r3, r3, r1
    619e:	f142 0200 	adc.w	r2, r2, #0
    61a2:	60ab      	str	r3, [r5, #8]
    61a4:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    61a6:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    61aa:	692b      	ldr	r3, [r5, #16]
    61ac:	696a      	ldr	r2, [r5, #20]
    61ae:	185b      	adds	r3, r3, r1
    61b0:	f142 0200 	adc.w	r2, r2, #0
    61b4:	612b      	str	r3, [r5, #16]
    61b6:	616a      	str	r2, [r5, #20]
  return sync();
    61b8:	4628      	mov	r0, r5
    61ba:	f7ff ff75 	bl	60a8 <ExFatFile::sync()>
    61be:	e7b2      	b.n	6126 <ExFatFile::addDirCluster()+0x22>
  return false;
    61c0:	2000      	movs	r0, #0
    61c2:	e7b0      	b.n	6126 <ExFatFile::addDirCluster()+0x22>

000061c4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    61c4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    61c8:	f013 0f50 	tst.w	r3, #80	; 0x50
    61cc:	d101      	bne.n	61d2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    61ce:	2000      	movs	r0, #0
}
    61d0:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    61d2:	b510      	push	{r4, lr}
    61d4:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    61d6:	f640 2302 	movw	r3, #2562	; 0xa02
    61da:	f7ff fb63 	bl	58a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    61de:	b900      	cbnz	r0, 61e2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    61e0:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    61e2:	2310      	movs	r3, #16
    61e4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    61e8:	4620      	mov	r0, r4
    61ea:	f7ff ff8b 	bl	6104 <ExFatFile::addDirCluster()>
    61ee:	2800      	cmp	r0, #0
    61f0:	d0f6      	beq.n	61e0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    61f2:	69a3      	ldr	r3, [r4, #24]
    61f4:	61e3      	str	r3, [r4, #28]
    61f6:	2200      	movs	r2, #0
    61f8:	2300      	movs	r3, #0
    61fa:	4620      	mov	r0, r4
    61fc:	f7ff fadf 	bl	57be <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6200:	23c1      	movs	r3, #193	; 0xc1
    6202:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6206:	4620      	mov	r0, r4
    6208:	f7ff ff4e 	bl	60a8 <ExFatFile::sync()>
    620c:	e7e8      	b.n	61e0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

0000620e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6212:	b096      	sub	sp, #88	; 0x58
    6214:	9201      	str	r2, [sp, #4]
    6216:	461e      	mov	r6, r3
    6218:	2300      	movs	r3, #0
    621a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    621e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6222:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    6226:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    622a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    622e:	2b00      	cmp	r3, #0
    6230:	d15a      	bne.n	62e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    6232:	4604      	mov	r4, r0
    6234:	460d      	mov	r5, r1
    6236:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    623a:	f013 0f50 	tst.w	r3, #80	; 0x50
    623e:	d058      	beq.n	62f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    6240:	4613      	mov	r3, r2
    6242:	7812      	ldrb	r2, [r2, #0]
    6244:	2a2f      	cmp	r2, #47	; 0x2f
    6246:	d001      	beq.n	624c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6248:	2700      	movs	r7, #0
    624a:	e029      	b.n	62a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    624c:	3301      	adds	r3, #1
    624e:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    6250:	781a      	ldrb	r2, [r3, #0]
    6252:	2a2f      	cmp	r2, #47	; 0x2f
    6254:	d0fa      	beq.n	624c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6256:	6a29      	ldr	r1, [r5, #32]
    6258:	a802      	add	r0, sp, #8
    625a:	f7ff f967 	bl	552c <ExFatFile::openRoot(ExFatVolume*)>
    625e:	4603      	mov	r3, r0
    6260:	2800      	cmp	r0, #0
    6262:	d042      	beq.n	62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    6264:	ad02      	add	r5, sp, #8
    6266:	e7ef      	b.n	6248 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    6268:	46a4      	mov	ip, r4
    626a:	ad02      	add	r5, sp, #8
    626c:	f104 0830 	add.w	r8, r4, #48	; 0x30
    6270:	46ae      	mov	lr, r5
    6272:	f8dc 0000 	ldr.w	r0, [ip]
    6276:	f8dc 1004 	ldr.w	r1, [ip, #4]
    627a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    627e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    6282:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6286:	f10c 0c10 	add.w	ip, ip, #16
    628a:	4675      	mov	r5, lr
    628c:	45c4      	cmp	ip, r8
    628e:	d1ef      	bne.n	6270 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    6290:	f8dc 0000 	ldr.w	r0, [ip]
    6294:	f8ce 0000 	str.w	r0, [lr]
    close();
    6298:	4620      	mov	r0, r4
    629a:	f7ff f919 	bl	54d0 <ExFatFile::close()>
    parent = &tmpDir;
    629e:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    62a0:	ab01      	add	r3, sp, #4
    62a2:	aa10      	add	r2, sp, #64	; 0x40
    62a4:	9901      	ldr	r1, [sp, #4]
    62a6:	4620      	mov	r0, r4
    62a8:	f7ff f954 	bl	5554 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    62ac:	4603      	mov	r3, r0
    62ae:	b1e0      	cbz	r0, 62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    62b0:	9b01      	ldr	r3, [sp, #4]
    62b2:	781b      	ldrb	r3, [r3, #0]
    62b4:	b18b      	cbz	r3, 62da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    62b6:	463b      	mov	r3, r7
    62b8:	aa10      	add	r2, sp, #64	; 0x40
    62ba:	4629      	mov	r1, r5
    62bc:	4620      	mov	r0, r4
    62be:	f7ff faf1 	bl	58a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    62c2:	2800      	cmp	r0, #0
    62c4:	d1d0      	bne.n	6268 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    62c6:	b1b6      	cbz	r6, 62f6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    62c8:	aa10      	add	r2, sp, #64	; 0x40
    62ca:	4629      	mov	r1, r5
    62cc:	4620      	mov	r0, r4
    62ce:	f7ff ff79 	bl	61c4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    62d2:	4603      	mov	r3, r0
    62d4:	2800      	cmp	r0, #0
    62d6:	d1c7      	bne.n	6268 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    62d8:	e007      	b.n	62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    62da:	aa10      	add	r2, sp, #64	; 0x40
    62dc:	4629      	mov	r1, r5
    62de:	4620      	mov	r0, r4
    62e0:	f7ff ff70 	bl	61c4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    62e4:	4603      	mov	r3, r0
    62e6:	e000      	b.n	62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    62e8:	2300      	movs	r3, #0
}
    62ea:	4618      	mov	r0, r3
    62ec:	b016      	add	sp, #88	; 0x58
    62ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    62f2:	2300      	movs	r3, #0
    62f4:	e7f9      	b.n	62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    62f6:	4633      	mov	r3, r6
    62f8:	e7f7      	b.n	62ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

000062fa <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    62fa:	b570      	push	{r4, r5, r6, lr}
    62fc:	b09c      	sub	sp, #112	; 0x70
    62fe:	2300      	movs	r3, #0
    6300:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6304:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    6308:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    630c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6310:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6314:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    6318:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    631c:	f013 0f18 	tst.w	r3, #24
    6320:	d047      	beq.n	63b2 <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    6322:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    6324:	6a00      	ldr	r0, [r0, #32]
    6326:	6a0b      	ldr	r3, [r1, #32]
    6328:	4298      	cmp	r0, r3
    632a:	d002      	beq.n	6332 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    632c:	2000      	movs	r0, #0
}
    632e:	b01c      	add	sp, #112	; 0x70
    6330:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6332:	f640 2301 	movw	r3, #2561	; 0xa01
    6336:	a80e      	add	r0, sp, #56	; 0x38
    6338:	f7ff fca0 	bl	5c7c <ExFatFile::open(ExFatFile*, char const*, int)>
    633c:	2800      	cmp	r0, #0
    633e:	d0f6      	beq.n	632e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    6340:	46a4      	mov	ip, r4
    6342:	466d      	mov	r5, sp
    6344:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6348:	46ae      	mov	lr, r5
    634a:	f8dc 0000 	ldr.w	r0, [ip]
    634e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6352:	f8dc 2008 	ldr.w	r2, [ip, #8]
    6356:	f8dc 300c 	ldr.w	r3, [ip, #12]
    635a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    635e:	f10c 0c10 	add.w	ip, ip, #16
    6362:	4675      	mov	r5, lr
    6364:	45b4      	cmp	ip, r6
    6366:	d1ef      	bne.n	6348 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    6368:	f8dc 0000 	ldr.w	r0, [ip]
    636c:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    6370:	f104 0324 	add.w	r3, r4, #36	; 0x24
    6374:	aa17      	add	r2, sp, #92	; 0x5c
    6376:	ca07      	ldmia	r2, {r0, r1, r2}
    6378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    637c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    6380:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6384:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6388:	f063 037f 	orn	r3, r3, #127	; 0x7f
    638c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6390:	4620      	mov	r0, r4
    6392:	f7ff fe89 	bl	60a8 <ExFatFile::sync()>
    6396:	2800      	cmp	r0, #0
    6398:	d0c9      	beq.n	632e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    639a:	2300      	movs	r3, #0
    639c:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    639e:	2302      	movs	r3, #2
    63a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    63a4:	2308      	movs	r3, #8
    63a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    63aa:	4668      	mov	r0, sp
    63ac:	f7ff fd68 	bl	5e80 <ExFatFile::remove()>
    63b0:	e7bd      	b.n	632e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    63b2:	2000      	movs	r0, #0
    63b4:	e7bb      	b.n	632e <ExFatFile::rename(ExFatFile*, char const*)+0x34>

000063b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    63b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63ba:	b083      	sub	sp, #12
    63bc:	9100      	str	r1, [sp, #0]
    63be:	461e      	mov	r6, r3
    63c0:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    63c4:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    63c8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    63cc:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    63d0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    63d4:	f013 0f08 	tst.w	r3, #8
    63d8:	f000 809a 	beq.w	6510 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    63dc:	4605      	mov	r5, r0
      || year > 2107
    63de:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    63e2:	b294      	uxth	r4, r2
    63e4:	2c7f      	cmp	r4, #127	; 0x7f
    63e6:	f200 8098 	bhi.w	651a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    63ea:	1e73      	subs	r3, r6, #1
    63ec:	b2db      	uxtb	r3, r3
    63ee:	2b0b      	cmp	r3, #11
    63f0:	f200 8095 	bhi.w	651e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    63f4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    63f8:	b2db      	uxtb	r3, r3
    63fa:	2b1e      	cmp	r3, #30
    63fc:	f200 8091 	bhi.w	6522 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    6400:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    6404:	bf98      	it	ls
    6406:	f1ba 0f17 	cmpls.w	sl, #23
    640a:	bf8c      	ite	hi
    640c:	2701      	movhi	r7, #1
    640e:	2700      	movls	r7, #0
    6410:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    6414:	bf88      	it	hi
    6416:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    641a:	b10f      	cbz	r7, 6420 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    641c:	2700      	movs	r7, #0
    641e:	e078      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    6420:	f7ff fe42 	bl	60a8 <ExFatFile::sync()>
    6424:	2800      	cmp	r0, #0
    6426:	d07e      	beq.n	6526 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    6428:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    642c:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    6430:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    6432:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6436:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    643a:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    643e:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    6442:	f019 0901 	ands.w	r9, r9, #1
    6446:	bf18      	it	ne
    6448:	f04f 0964 	movne.w	r9, #100	; 0x64
    644c:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    644e:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6450:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    6452:	9b00      	ldr	r3, [sp, #0]
    6454:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6458:	4652      	mov	r2, sl
    645a:	b2f1      	uxtb	r1, r6
    645c:	4628      	mov	r0, r5
    645e:	f7ff f81b 	bl	5498 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6462:	4602      	mov	r2, r0
    6464:	2800      	cmp	r0, #0
    6466:	d054      	beq.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    6468:	7803      	ldrb	r3, [r0, #0]
    646a:	2b85      	cmp	r3, #133	; 0x85
    646c:	d02b      	beq.n	64c6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    646e:	3340      	adds	r3, #64	; 0x40
    6470:	b2db      	uxtb	r3, r3
    6472:	2b01      	cmp	r3, #1
    6474:	d84d      	bhi.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    6476:	9901      	ldr	r1, [sp, #4]
    6478:	4610      	mov	r0, r2
    647a:	f7ff fc93 	bl	5da4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    647e:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6480:	3601      	adds	r6, #1
    6482:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6486:	b2f3      	uxtb	r3, r6
    6488:	429a      	cmp	r2, r3
    648a:	d2e5      	bcs.n	6458 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    648c:	2201      	movs	r2, #1
    648e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    6492:	6a28      	ldr	r0, [r5, #32]
    6494:	f000 feb1 	bl	71fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6498:	2800      	cmp	r0, #0
    649a:	d03a      	beq.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    649c:	9a01      	ldr	r2, [sp, #4]
    649e:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    64a0:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    64a2:	4620      	mov	r0, r4
    64a4:	f005 fa6a 	bl	b97c <FsCache::sync()>
    64a8:	4607      	mov	r7, r0
    64aa:	b390      	cbz	r0, 6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    64ac:	f504 7004 	add.w	r0, r4, #528	; 0x210
    64b0:	f005 fa64 	bl	b97c <FsCache::sync()>
    64b4:	4607      	mov	r7, r0
    64b6:	b360      	cbz	r0, 6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    64b8:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    64bc:	6803      	ldr	r3, [r0, #0]
    64be:	6a1b      	ldr	r3, [r3, #32]
    64c0:	4798      	blx	r3
    64c2:	4607      	mov	r7, r0
    64c4:	e025      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    64c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    64ca:	f003 0337 	and.w	r3, r3, #55	; 0x37
    64ce:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    64d0:	6a29      	ldr	r1, [r5, #32]
    64d2:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    64d6:	f043 0301 	orr.w	r3, r3, #1
    64da:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    64de:	f1b8 0f00 	cmp.w	r8, #0
    64e2:	d002      	beq.n	64ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    64e4:	f8a0 b010 	strh.w	fp, [r0, #16]
    64e8:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    64ea:	9b00      	ldr	r3, [sp, #0]
    64ec:	f013 0f02 	tst.w	r3, #2
    64f0:	d004      	beq.n	64fc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    64f2:	f882 9014 	strb.w	r9, [r2, #20]
    64f6:	f8a2 b008 	strh.w	fp, [r2, #8]
    64fa:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    64fc:	9b00      	ldr	r3, [sp, #0]
    64fe:	f013 0f04 	tst.w	r3, #4
    6502:	d0b8      	beq.n	6476 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    6504:	f882 9015 	strb.w	r9, [r2, #21]
    6508:	f8a2 b00c 	strh.w	fp, [r2, #12]
    650c:	81d4      	strh	r4, [r2, #14]
}
    650e:	e7b2      	b.n	6476 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    6510:	2700      	movs	r7, #0
}
    6512:	4638      	mov	r0, r7
    6514:	b003      	add	sp, #12
    6516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    651a:	2700      	movs	r7, #0
    651c:	e7f9      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    651e:	2700      	movs	r7, #0
    6520:	e7f7      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6522:	2700      	movs	r7, #0
    6524:	e7f5      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6526:	4607      	mov	r7, r0
    6528:	e7f3      	b.n	6512 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

0000652a <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    652a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    652e:	f013 0f02 	tst.w	r3, #2
    6532:	d066      	beq.n	6602 <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6534:	b530      	push	{r4, r5, lr}
    6536:	b083      	sub	sp, #12
    6538:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    653a:	69c5      	ldr	r5, [r0, #28]
    653c:	2d00      	cmp	r5, #0
    653e:	d062      	beq.n	6606 <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    6540:	f013 0f40 	tst.w	r3, #64	; 0x40
    6544:	d03b      	beq.n	65be <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6546:	6a00      	ldr	r0, [r0, #32]
    6548:	68a2      	ldr	r2, [r4, #8]
    654a:	68e1      	ldr	r1, [r4, #12]
    654c:	3a01      	subs	r2, #1
    654e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6552:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6556:	3309      	adds	r3, #9
    6558:	b2db      	uxtb	r3, r3
    655a:	f1c3 0e20 	rsb	lr, r3, #32
    655e:	f1a3 0c20 	sub.w	ip, r3, #32
    6562:	40da      	lsrs	r2, r3
    6564:	fa01 fe0e 	lsl.w	lr, r1, lr
    6568:	ea42 020e 	orr.w	r2, r2, lr
    656c:	fa21 fc0c 	lsr.w	ip, r1, ip
    6570:	ea42 020c 	orr.w	r2, r2, ip
    6574:	3201      	adds	r2, #1
    if (m_curCluster) {
    6576:	69a3      	ldr	r3, [r4, #24]
    6578:	b1b3      	cbz	r3, 65a8 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    657a:	1c59      	adds	r1, r3, #1
    657c:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    657e:	3d01      	subs	r5, #1
    6580:	1aed      	subs	r5, r5, r3
    6582:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6584:	b9a2      	cbnz	r2, 65b0 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    6586:	e9d4 2300 	ldrd	r2, r3, [r4]
    658a:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    658e:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6592:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6596:	f063 037f 	orn	r3, r3, #127	; 0x7f
    659a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    659e:	4620      	mov	r0, r4
    65a0:	f7ff fd82 	bl	60a8 <ExFatFile::sync()>

 fail:
  return false;
}
    65a4:	b003      	add	sp, #12
    65a6:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    65a8:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    65aa:	2300      	movs	r3, #0
    65ac:	61e3      	str	r3, [r4, #28]
    65ae:	e7e9      	b.n	6584 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    65b0:	2300      	movs	r3, #0
    65b2:	9901      	ldr	r1, [sp, #4]
    65b4:	f000 fdb9 	bl	712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    65b8:	2800      	cmp	r0, #0
    65ba:	d1e4      	bne.n	6586 <ExFatFile::truncate()+0x5c>
    65bc:	e7f2      	b.n	65a4 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    65be:	6981      	ldr	r1, [r0, #24]
    65c0:	b949      	cbnz	r1, 65d6 <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    65c2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    65c4:	2300      	movs	r3, #0
    65c6:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    65c8:	4629      	mov	r1, r5
    65ca:	6a20      	ldr	r0, [r4, #32]
    65cc:	f000 feb1 	bl	7332 <ExFatPartition::freeChain(unsigned long)>
    65d0:	2800      	cmp	r0, #0
    65d2:	d1d8      	bne.n	6586 <ExFatFile::truncate()+0x5c>
    65d4:	e7e6      	b.n	65a4 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    65d6:	2300      	movs	r3, #0
    65d8:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    65da:	aa01      	add	r2, sp, #4
    65dc:	6a00      	ldr	r0, [r0, #32]
    65de:	f000 fe29 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    65e2:	2800      	cmp	r0, #0
    65e4:	db11      	blt.n	660a <ExFatFile::truncate()+0xe0>
      if (fg) {
    65e6:	b918      	cbnz	r0, 65f0 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    65e8:	9d01      	ldr	r5, [sp, #4]
    65ea:	2d00      	cmp	r5, #0
    65ec:	d0cb      	beq.n	6586 <ExFatFile::truncate()+0x5c>
    65ee:	e7eb      	b.n	65c8 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    65f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    65f4:	69a1      	ldr	r1, [r4, #24]
    65f6:	6a20      	ldr	r0, [r4, #32]
    65f8:	f000 fe7b 	bl	72f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    65fc:	2800      	cmp	r0, #0
    65fe:	d1f3      	bne.n	65e8 <ExFatFile::truncate()+0xbe>
    6600:	e7d0      	b.n	65a4 <ExFatFile::truncate()+0x7a>
  return false;
    6602:	2000      	movs	r0, #0
}
    6604:	4770      	bx	lr
      return true;
    6606:	2001      	movs	r0, #1
    6608:	e7cc      	b.n	65a4 <ExFatFile::truncate()+0x7a>
  return false;
    660a:	2000      	movs	r0, #0
    660c:	e7ca      	b.n	65a4 <ExFatFile::truncate()+0x7a>
	...

00006610 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6614:	b083      	sub	sp, #12
    6616:	4604      	mov	r4, r0
    6618:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    661c:	f013 0f02 	tst.w	r3, #2
    6620:	d014      	beq.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
    6622:	4688      	mov	r8, r1
    6624:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6626:	f013 0f08 	tst.w	r3, #8
    662a:	d109      	bne.n	6640 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    662c:	f1bb 0f00 	cmp.w	fp, #0
    6630:	f000 80ed 	beq.w	680e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6634:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6636:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    663a:	f04f 0901 	mov.w	r9, #1
    663e:	e085      	b.n	674c <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    6640:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6644:	f7ff f8bb 	bl	57be <ExFatFile::seekSet(unsigned long long)>
    6648:	2800      	cmp	r0, #0
    664a:	d1ef      	bne.n	662c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    664c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6650:	f043 0301 	orr.w	r3, r3, #1
    6654:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6658:	2000      	movs	r0, #0
}
    665a:	b003      	add	sp, #12
    665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6660:	4652      	mov	r2, sl
    6662:	f000 fde7 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6666:	2800      	cmp	r0, #0
    6668:	dbf0      	blt.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    666a:	b938      	cbnz	r0, 667c <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    666c:	4620      	mov	r0, r4
    666e:	f7ff fbb7 	bl	5de0 <ExFatFile::addCluster()>
    6672:	b918      	cbnz	r0, 667c <ExFatFile::write(void const*, unsigned int)+0x6c>
    6674:	e7ea      	b.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    6676:	69e3      	ldr	r3, [r4, #28]
    6678:	b323      	cbz	r3, 66c4 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    667a:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    667c:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    667e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6682:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    6686:	69a1      	ldr	r1, [r4, #24]
    6688:	3902      	subs	r1, #2
    668a:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    668c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    6690:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6694:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6696:	b916      	cbnz	r6, 669e <ExFatFile::write(void const*, unsigned int)+0x8e>
    6698:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    669c:	d21a      	bcs.n	66d4 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    669e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    66a2:	42bd      	cmp	r5, r7
    66a4:	bf28      	it	cs
    66a6:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    66a8:	bb3e      	cbnz	r6, 66fa <ExFatFile::write(void const*, unsigned int)+0xea>
    66aa:	6862      	ldr	r2, [r4, #4]
    66ac:	9200      	str	r2, [sp, #0]
    66ae:	6963      	ldr	r3, [r4, #20]
    66b0:	9301      	str	r3, [sp, #4]
    66b2:	6823      	ldr	r3, [r4, #0]
    66b4:	6922      	ldr	r2, [r4, #16]
    66b6:	4293      	cmp	r3, r2
    66b8:	9a00      	ldr	r2, [sp, #0]
    66ba:	9b01      	ldr	r3, [sp, #4]
    66bc:	419a      	sbcs	r2, r3
    66be:	d375      	bcc.n	67ac <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    66c0:	2205      	movs	r2, #5
    66c2:	e01b      	b.n	66fc <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    66c4:	4620      	mov	r0, r4
    66c6:	f7ff fb8b 	bl	5de0 <ExFatFile::addCluster()>
    66ca:	2800      	cmp	r0, #0
    66cc:	d0be      	beq.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    66ce:	69a3      	ldr	r3, [r4, #24]
    66d0:	61e3      	str	r3, [r4, #28]
    66d2:	e7d3      	b.n	667c <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    66d4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    66d8:	d271      	bcs.n	67be <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    66da:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    66de:	4299      	cmp	r1, r3
    66e0:	f000 808d 	beq.w	67fe <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    66e4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    66e8:	6803      	ldr	r3, [r0, #0]
    66ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66ec:	4642      	mov	r2, r8
    66ee:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    66f0:	2800      	cmp	r0, #0
    66f2:	d0ab      	beq.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    66f4:	f44f 7500 	mov.w	r5, #512	; 0x200
    66f8:	e010      	b.n	671c <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    66fa:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    66fc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6700:	f005 f963 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6704:	2800      	cmp	r0, #0
    6706:	d0a1      	beq.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    6708:	462a      	mov	r2, r5
    670a:	4641      	mov	r1, r8
    670c:	4430      	add	r0, r6
    670e:	f006 fd07 	bl	d120 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6712:	6a20      	ldr	r0, [r4, #32]
    6714:	442e      	add	r6, r5
    6716:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    671a:	d049      	beq.n	67b0 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    671c:	6823      	ldr	r3, [r4, #0]
    671e:	6862      	ldr	r2, [r4, #4]
    6720:	18eb      	adds	r3, r5, r3
    6722:	f142 0200 	adc.w	r2, r2, #0
    6726:	6023      	str	r3, [r4, #0]
    6728:	6062      	str	r2, [r4, #4]
    src += n;
    672a:	44a8      	add	r8, r5
    toWrite -= n;
    672c:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    672e:	6920      	ldr	r0, [r4, #16]
    6730:	6961      	ldr	r1, [r4, #20]
    6732:	4298      	cmp	r0, r3
    6734:	4191      	sbcs	r1, r2
    6736:	d207      	bcs.n	6748 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6738:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    673c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6740:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6744:	6123      	str	r3, [r4, #16]
    6746:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6748:	2f00      	cmp	r7, #0
    674a:	d060      	beq.n	680e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    674c:	6a20      	ldr	r0, [r4, #32]
    674e:	6825      	ldr	r5, [r4, #0]
    6750:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6754:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6756:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    675a:	2d00      	cmp	r5, #0
    675c:	d18e      	bne.n	667c <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    675e:	69a1      	ldr	r1, [r4, #24]
    6760:	2900      	cmp	r1, #0
    6762:	d088      	beq.n	6676 <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6764:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6768:	f013 0f40 	tst.w	r3, #64	; 0x40
    676c:	f43f af78 	beq.w	6660 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6770:	68a3      	ldr	r3, [r4, #8]
    6772:	68e2      	ldr	r2, [r4, #12]
    6774:	3b01      	subs	r3, #1
    6776:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    677a:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    677e:	3009      	adds	r0, #9
    6780:	b2c0      	uxtb	r0, r0
    6782:	f1c0 0e20 	rsb	lr, r0, #32
    6786:	f1a0 0c20 	sub.w	ip, r0, #32
    678a:	40c3      	lsrs	r3, r0
    678c:	fa02 fe0e 	lsl.w	lr, r2, lr
    6790:	ea43 030e 	orr.w	r3, r3, lr
    6794:	fa22 fc0c 	lsr.w	ip, r2, ip
    6798:	ea43 030c 	orr.w	r3, r3, ip
    679c:	69e2      	ldr	r2, [r4, #28]
    679e:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    67a0:	4299      	cmp	r1, r3
    67a2:	f4bf af63 	bcs.w	666c <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    67a6:	3101      	adds	r1, #1
    67a8:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    67aa:	e767      	b.n	667c <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    67ac:	464a      	mov	r2, r9
    67ae:	e7a5      	b.n	66fc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    67b0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    67b4:	f005 f8e2 	bl	b97c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    67b8:	2800      	cmp	r0, #0
    67ba:	d1af      	bne.n	671c <ExFatFile::write(void const*, unsigned int)+0x10c>
    67bc:	e746      	b.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    67be:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    67c2:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    67c6:	0a7a      	lsrs	r2, r7, #9
    67c8:	4293      	cmp	r3, r2
    67ca:	bf28      	it	cs
    67cc:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    67ce:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    67d0:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    67d4:	4291      	cmp	r1, r2
    67d6:	d809      	bhi.n	67ec <ExFatFile::write(void const*, unsigned int)+0x1dc>
    67d8:	18ce      	adds	r6, r1, r3
    67da:	42b2      	cmp	r2, r6
    67dc:	d206      	bcs.n	67ec <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    67de:	2200      	movs	r2, #0
    67e0:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    67e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    67e8:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    67ec:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    67f0:	6802      	ldr	r2, [r0, #0]
    67f2:	6a96      	ldr	r6, [r2, #40]	; 0x28
    67f4:	4642      	mov	r2, r8
    67f6:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    67f8:	2800      	cmp	r0, #0
    67fa:	d18f      	bne.n	671c <ExFatFile::write(void const*, unsigned int)+0x10c>
    67fc:	e726      	b.n	664c <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    67fe:	2300      	movs	r3, #0
    6800:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6808:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    680c:	e76a      	b.n	66e4 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    680e:	6821      	ldr	r1, [r4, #0]
    6810:	6862      	ldr	r2, [r4, #4]
    6812:	68a0      	ldr	r0, [r4, #8]
    6814:	68e3      	ldr	r3, [r4, #12]
    6816:	4288      	cmp	r0, r1
    6818:	4193      	sbcs	r3, r2
    681a:	d209      	bcs.n	6830 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    681c:	60a1      	str	r1, [r4, #8]
    681e:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6820:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6824:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6828:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    682c:	4658      	mov	r0, fp
    682e:	e714      	b.n	665a <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6830:	4b06      	ldr	r3, [pc, #24]	; (684c <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6832:	681b      	ldr	r3, [r3, #0]
    6834:	b13b      	cbz	r3, 6846 <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6836:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    683a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    683e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6842:	4658      	mov	r0, fp
    6844:	e709      	b.n	665a <ExFatFile::write(void const*, unsigned int)+0x4a>
    6846:	4658      	mov	r0, fp
    6848:	e707      	b.n	665a <ExFatFile::write(void const*, unsigned int)+0x4a>
    684a:	bf00      	nop
    684c:	20004b64 	.word	0x20004b64

00006850 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6850:	b161      	cbz	r1, 686c <Print::write(char const*)+0x1c>
    6852:	b538      	push	{r3, r4, r5, lr}
    6854:	4604      	mov	r4, r0
    6856:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6858:	4608      	mov	r0, r1
    685a:	f00b fb51 	bl	11f00 <strlen>
    685e:	4602      	mov	r2, r0
    6860:	6823      	ldr	r3, [r4, #0]
    6862:	685b      	ldr	r3, [r3, #4]
    6864:	4629      	mov	r1, r5
    6866:	4620      	mov	r0, r4
    6868:	4798      	blx	r3
    686a:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    686c:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    686e:	4770      	bx	lr

00006870 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6870:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6872:	6883      	ldr	r3, [r0, #8]
    6874:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6878:	b173      	cbz	r3, 6898 <ExFatFormatter::syncUpcase()+0x28>
    687a:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    687c:	2000      	movs	r0, #0
    687e:	690a      	ldr	r2, [r1, #16]
    6880:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6882:	3301      	adds	r3, #1
    6884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6888:	d3f9      	bcc.n	687e <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    688a:	68c8      	ldr	r0, [r1, #12]
    688c:	6803      	ldr	r3, [r0, #0]
    688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6890:	690a      	ldr	r2, [r1, #16]
    6892:	6809      	ldr	r1, [r1, #0]
    6894:	4798      	blx	r3
}
    6896:	bd08      	pop	{r3, pc}
    return true;
    6898:	2001      	movs	r0, #1
    689a:	e7fc      	b.n	6896 <ExFatFormatter::syncUpcase()+0x26>

0000689c <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    689c:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    689e:	6882      	ldr	r2, [r0, #8]
    68a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    68a4:	6900      	ldr	r0, [r0, #16]
    68a6:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    68a8:	6858      	ldr	r0, [r3, #4]
    68aa:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    68ae:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    68b0:	6899      	ldr	r1, [r3, #8]
    68b2:	3101      	adds	r1, #1
    68b4:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    68b6:	f240 11ff 	movw	r1, #511	; 0x1ff
    68ba:	428a      	cmp	r2, r1
    68bc:	d001      	beq.n	68c2 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    68be:	2001      	movs	r0, #1
}
    68c0:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    68c2:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    68c4:	68d8      	ldr	r0, [r3, #12]
    68c6:	6802      	ldr	r2, [r0, #0]
    68c8:	6a54      	ldr	r4, [r2, #36]	; 0x24
    68ca:	6819      	ldr	r1, [r3, #0]
    68cc:	1c4a      	adds	r2, r1, #1
    68ce:	601a      	str	r2, [r3, #0]
    68d0:	691a      	ldr	r2, [r3, #16]
    68d2:	47a0      	blx	r4
}
    68d4:	bd10      	pop	{r4, pc}

000068d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    68d6:	b538      	push	{r3, r4, r5, lr}
    68d8:	4605      	mov	r5, r0
    68da:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    68dc:	b2c9      	uxtb	r1, r1
    68de:	f7ff ffdd 	bl	689c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    68e2:	b900      	cbnz	r0, 68e6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    68e4:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    68e6:	0a21      	lsrs	r1, r4, #8
    68e8:	4628      	mov	r0, r5
    68ea:	f7ff ffd7 	bl	689c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    68ee:	e7f9      	b.n	68e4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

000068f0 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    68f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68f4:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    68f6:	2500      	movs	r5, #0
    68f8:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    68fa:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    68fc:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    68fe:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6902:	e022      	b.n	694a <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    6904:	1c6c      	adds	r4, r5, #1
    6906:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    690a:	d208      	bcs.n	691e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    690c:	b2a0      	uxth	r0, r4
    690e:	f005 f9b9 	bl	bc84 <toUpcase(unsigned short)>
    6912:	42a0      	cmp	r0, r4
    6914:	d103      	bne.n	691e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6916:	3401      	adds	r4, #1
    6918:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    691c:	d1f6      	bne.n	690c <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    691e:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6922:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6926:	d31d      	bcc.n	6964 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6928:	4639      	mov	r1, r7
    692a:	4630      	mov	r0, r6
    692c:	f7ff ffd3 	bl	68d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6930:	4603      	mov	r3, r0
    6932:	b308      	cbz	r0, 6978 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6934:	fa1f f188 	uxth.w	r1, r8
    6938:	4630      	mov	r0, r6
    693a:	f7ff ffcc 	bl	68d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    693e:	4603      	mov	r3, r0
    6940:	b1d0      	cbz	r0, 6978 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6942:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6944:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6948:	d219      	bcs.n	697e <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    694a:	b2a8      	uxth	r0, r5
    694c:	f005 f99a 	bl	bc84 <toUpcase(unsigned short)>
    6950:	4601      	mov	r1, r0
    if (uc != ch) {
    6952:	42a8      	cmp	r0, r5
    6954:	d0d6      	beq.n	6904 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6956:	4630      	mov	r0, r6
    6958:	f7ff ffbd 	bl	68d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    695c:	4603      	mov	r3, r0
    695e:	b158      	cbz	r0, 6978 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6960:	3501      	adds	r5, #1
    6962:	e7ef      	b.n	6944 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6964:	42a5      	cmp	r5, r4
    6966:	d2ed      	bcs.n	6944 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6968:	b2a9      	uxth	r1, r5
    696a:	4630      	mov	r0, r6
    696c:	f7ff ffb3 	bl	68d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6970:	3501      	adds	r5, #1
    6972:	4603      	mov	r3, r0
    6974:	2800      	cmp	r0, #0
    6976:	d1f5      	bne.n	6964 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6978:	4618      	mov	r0, r3
    697a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    697e:	4630      	mov	r0, r6
    6980:	f7ff ff76 	bl	6870 <ExFatFormatter::syncUpcase()>
    6984:	4603      	mov	r3, r0
    6986:	e7f7      	b.n	6978 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006988 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    698c:	b08b      	sub	sp, #44	; 0x2c
    698e:	9002      	str	r0, [sp, #8]
    6990:	460e      	mov	r6, r1
    6992:	4614      	mov	r4, r2
    6994:	4699      	mov	r9, r3
  m_dev = dev;
    6996:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6998:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    699a:	680b      	ldr	r3, [r1, #0]
    699c:	69db      	ldr	r3, [r3, #28]
    699e:	4608      	mov	r0, r1
    69a0:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    69a2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    69a6:	d369      	bcc.n	6a7c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    69a8:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    69aa:	2300      	movs	r3, #0
    69ac:	2201      	movs	r2, #1
    69ae:	3301      	adds	r3, #1
    69b0:	b2db      	uxtb	r3, r3
    69b2:	0052      	lsls	r2, r2, #1
    69b4:	bf14      	ite	ne
    69b6:	2501      	movne	r5, #1
    69b8:	2500      	moveq	r5, #0
    69ba:	4297      	cmp	r7, r2
    69bc:	bf94      	ite	ls
    69be:	2500      	movls	r5, #0
    69c0:	f005 0501 	andhi.w	r5, r5, #1
    69c4:	2d00      	cmp	r5, #0
    69c6:	d1f2      	bne.n	69ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    69c8:	2b1c      	cmp	r3, #28
    69ca:	d963      	bls.n	6a94 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    69cc:	f1b3 0b0b 	subs.w	fp, r3, #11
    69d0:	bf48      	it	mi
    69d2:	f10b 0b01 	addmi.w	fp, fp, #1
    69d6:	ea4f 016b 	mov.w	r1, fp, asr #1
    69da:	9101      	str	r1, [sp, #4]
    69dc:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    69e0:	2201      	movs	r2, #1
    69e2:	408a      	lsls	r2, r1
    69e4:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    69e6:	3301      	adds	r3, #1
    69e8:	105b      	asrs	r3, r3, #1
    69ea:	f04f 0a01 	mov.w	sl, #1
    69ee:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    69f2:	ea4f 034a 	mov.w	r3, sl, lsl #1
    69f6:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    69f8:	ea4f 028a 	mov.w	r2, sl, lsl #2
    69fc:	9205      	str	r2, [sp, #20]
    69fe:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    6a02:	9901      	ldr	r1, [sp, #4]
    6a04:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    6a08:	9203      	str	r2, [sp, #12]
    6a0a:	fa02 f801 	lsl.w	r8, r2, r1
    6a0e:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6a12:	f44f 7200 	mov.w	r2, #512	; 0x200
    6a16:	2100      	movs	r1, #0
    6a18:	4620      	mov	r0, r4
    6a1a:	f00a fc4b 	bl	112b4 <memset>
  mbr->part->beginCHS[0] = 1;
    6a1e:	2301      	movs	r3, #1
    6a20:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    6a24:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    6a28:	2307      	movs	r3, #7
    6a2a:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    6a2e:	23fe      	movs	r3, #254	; 0xfe
    6a30:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    6a34:	23ff      	movs	r3, #255	; 0xff
    6a36:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    6a3a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    6a3e:	9b00      	ldr	r3, [sp, #0]
    6a40:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    6a44:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    6a48:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6a4c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    6a50:	6833      	ldr	r3, [r6, #0]
    6a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a54:	4622      	mov	r2, r4
    6a56:	2100      	movs	r1, #0
    6a58:	4630      	mov	r0, r6
    6a5a:	4798      	blx	r3
    6a5c:	bb70      	cbnz	r0, 6abc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    6a5e:	f1b9 0f00 	cmp.w	r9, #0
    6a62:	d007      	beq.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6a64:	f8d9 3000 	ldr.w	r3, [r9]
    6a68:	685b      	ldr	r3, [r3, #4]
    6a6a:	220f      	movs	r2, #15
    6a6c:	49af      	ldr	r1, [pc, #700]	; (6d2c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    6a6e:	4648      	mov	r0, r9
    6a70:	4798      	blx	r3
  return false;
    6a72:	2500      	movs	r5, #0
}
    6a74:	4628      	mov	r0, r5
    6a76:	b00b      	add	sp, #44	; 0x2c
    6a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    6a7c:	f1b9 0f00 	cmp.w	r9, #0
    6a80:	f000 8207 	beq.w	6e92 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    6a84:	f8d9 3000 	ldr.w	r3, [r9]
    6a88:	685b      	ldr	r3, [r3, #4]
    6a8a:	2215      	movs	r2, #21
    6a8c:	49a8      	ldr	r1, [pc, #672]	; (6d30 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    6a8e:	4648      	mov	r0, r9
    6a90:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    6a92:	e7e7      	b.n	6a64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6a94:	2b1a      	cmp	r3, #26
    6a96:	d809      	bhi.n	6aac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6a98:	f44f 7380 	mov.w	r3, #256	; 0x100
    6a9c:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6a9e:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6aa2:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6aa6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    6aaa:	e7a2      	b.n	69f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6aac:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ab0:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6ab2:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6ab6:	f8cd b004 	str.w	fp, [sp, #4]
    6aba:	e794      	b.n	69e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6abc:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ac0:	2100      	movs	r1, #0
    6ac2:	4620      	mov	r0, r4
    6ac4:	f00a fbf6 	bl	112b4 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    6ac8:	23eb      	movs	r3, #235	; 0xeb
    6aca:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    6acc:	2376      	movs	r3, #118	; 0x76
    6ace:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    6ad0:	2390      	movs	r3, #144	; 0x90
    6ad2:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    6ad4:	2345      	movs	r3, #69	; 0x45
    6ad6:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    6ad8:	2358      	movs	r3, #88	; 0x58
    6ada:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    6adc:	2346      	movs	r3, #70	; 0x46
    6ade:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    6ae0:	2341      	movs	r3, #65	; 0x41
    6ae2:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    6ae4:	2354      	movs	r3, #84	; 0x54
    6ae6:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    6ae8:	2320      	movs	r3, #32
    6aea:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    6aec:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    6aee:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    6af0:	9b00      	ldr	r3, [sp, #0]
    6af2:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    6af4:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    6af8:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    6afc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    6b00:	65a3      	str	r3, [r4, #88]	; 0x58
    6b02:	9a03      	ldr	r2, [sp, #12]
    6b04:	65e2      	str	r2, [r4, #92]	; 0x5c
    6b06:	2304      	movs	r3, #4
    6b08:	6623      	str	r3, [r4, #96]	; 0x60
    6b0a:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    6b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
    6b10:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    6b14:	2309      	movs	r3, #9
    6b16:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    6b1a:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    6b1e:	2301      	movs	r3, #1
    6b20:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    6b24:	2380      	movs	r3, #128	; 0x80
    6b26:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6b2a:	f104 0377 	add.w	r3, r4, #119	; 0x77
    6b2e:	9407      	str	r4, [sp, #28]
    6b30:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    6b34:	22f4      	movs	r2, #244	; 0xf4
    6b36:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6b3a:	428b      	cmp	r3, r1
    6b3c:	d1fb      	bne.n	6b36 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    6b3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6b42:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6b46:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    6b48:	461f      	mov	r7, r3
    6b4a:	e003      	b.n	6b54 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6b4c:	3301      	adds	r3, #1
    6b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6b52:	d009      	beq.n	6b68 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    6b54:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    6b58:	2a01      	cmp	r2, #1
    6b5a:	d9f7      	bls.n	6b4c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    6b5c:	2b70      	cmp	r3, #112	; 0x70
    6b5e:	d0f5      	beq.n	6b4c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    6b60:	5ce2      	ldrb	r2, [r4, r3]
    6b62:	eb02 0777 	add.w	r7, r2, r7, ror #1
    6b66:	e7f1      	b.n	6b4c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    6b68:	6833      	ldr	r3, [r6, #0]
    6b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b6c:	4622      	mov	r2, r4
    6b6e:	f8dd 8000 	ldr.w	r8, [sp]
    6b72:	4641      	mov	r1, r8
    6b74:	4630      	mov	r0, r6
    6b76:	4798      	blx	r3
    6b78:	2800      	cmp	r0, #0
    6b7a:	f43f af70 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6b7e:	6833      	ldr	r3, [r6, #0]
    6b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b82:	4622      	mov	r2, r4
    6b84:	f8cd 8000 	str.w	r8, [sp]
    6b88:	4641      	mov	r1, r8
    6b8a:	310c      	adds	r1, #12
    6b8c:	4630      	mov	r0, r6
    6b8e:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6b90:	2800      	cmp	r0, #0
    6b92:	f43f af64 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    6b96:	9900      	ldr	r1, [sp, #0]
    6b98:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ba0:	2100      	movs	r1, #0
    6ba2:	4620      	mov	r0, r4
    6ba4:	f00a fb86 	bl	112b4 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6ba8:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6bac:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    6bb0:	9900      	ldr	r1, [sp, #0]
    6bb2:	f101 0309 	add.w	r3, r1, #9
    6bb6:	1e62      	subs	r2, r4, #1
    6bb8:	9206      	str	r2, [sp, #24]
    6bba:	9a07      	ldr	r2, [sp, #28]
    6bbc:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    6bc0:	9508      	str	r5, [sp, #32]
    6bc2:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    6bc4:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    6bc6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6bca:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6bce:	4543      	cmp	r3, r8
    6bd0:	d1f9      	bne.n	6bc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    6bd2:	6833      	ldr	r3, [r6, #0]
    6bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bd6:	4622      	mov	r2, r4
    6bd8:	4659      	mov	r1, fp
    6bda:	4630      	mov	r0, r6
    6bdc:	4798      	blx	r3
    6bde:	2800      	cmp	r0, #0
    6be0:	f000 814f 	beq.w	6e82 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6be4:	6833      	ldr	r3, [r6, #0]
    6be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6be8:	4622      	mov	r2, r4
    6bea:	f10b 010c 	add.w	r1, fp, #12
    6bee:	4630      	mov	r0, r6
    6bf0:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6bf2:	2800      	cmp	r0, #0
    6bf4:	f000 8147 	beq.w	6e86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    6bf8:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    6bfc:	42ab      	cmp	r3, r5
    6bfe:	d001      	beq.n	6c04 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    6c00:	469b      	mov	fp, r3
    6c02:	e7df      	b.n	6bc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6c04:	9309      	str	r3, [sp, #36]	; 0x24
    6c06:	9d08      	ldr	r5, [sp, #32]
    6c08:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c0c:	2100      	movs	r1, #0
    6c0e:	4620      	mov	r0, r4
    6c10:	f00a fb50 	bl	112b4 <memset>
  for (int j = 0; j < 2; j++) {
    6c14:	f10b 0b03 	add.w	fp, fp, #3
    6c18:	9508      	str	r5, [sp, #32]
    6c1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    6c1c:	9b06      	ldr	r3, [sp, #24]
    6c1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6c22:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6c26:	4598      	cmp	r8, r3
    6c28:	d1f9      	bne.n	6c1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    6c2a:	6833      	ldr	r3, [r6, #0]
    6c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c2e:	4622      	mov	r2, r4
    6c30:	4629      	mov	r1, r5
    6c32:	4630      	mov	r0, r6
    6c34:	4798      	blx	r3
    6c36:	2800      	cmp	r0, #0
    6c38:	f000 8127 	beq.w	6e8a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6c3c:	6833      	ldr	r3, [r6, #0]
    6c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c40:	4622      	mov	r2, r4
    6c42:	f105 010c 	add.w	r1, r5, #12
    6c46:	4630      	mov	r0, r6
    6c48:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6c4a:	2800      	cmp	r0, #0
    6c4c:	f000 811f 	beq.w	6e8e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    6c50:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    6c52:	458b      	cmp	fp, r1
    6c54:	d001      	beq.n	6c5a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    6c56:	460d      	mov	r5, r1
    6c58:	e7e0      	b.n	6c1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    6c5a:	9509      	str	r5, [sp, #36]	; 0x24
    6c5c:	9d08      	ldr	r5, [sp, #32]
    6c5e:	1f23      	subs	r3, r4, #4
    6c60:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6c64:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    6c68:	429a      	cmp	r2, r3
    6c6a:	d1fb      	bne.n	6c64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    6c6c:	6833      	ldr	r3, [r6, #0]
    6c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c70:	4622      	mov	r2, r4
    6c72:	4630      	mov	r0, r6
    6c74:	4798      	blx	r3
    6c76:	2800      	cmp	r0, #0
    6c78:	f43f aef1 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6c7c:	6833      	ldr	r3, [r6, #0]
    6c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c80:	4622      	mov	r2, r4
    6c82:	9909      	ldr	r1, [sp, #36]	; 0x24
    6c84:	310d      	adds	r1, #13
    6c86:	4630      	mov	r0, r6
    6c88:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6c8a:	2800      	cmp	r0, #0
    6c8c:	f43f aee7 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    6c90:	f1b9 0f00 	cmp.w	r9, #0
    6c94:	d006      	beq.n	6ca4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    6c96:	f8d9 3000 	ldr.w	r3, [r9]
    6c9a:	685b      	ldr	r3, [r3, #4]
    6c9c:	220c      	movs	r2, #12
    6c9e:	4925      	ldr	r1, [pc, #148]	; (6d34 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    6ca0:	4648      	mov	r0, r9
    6ca2:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6ca4:	9b00      	ldr	r3, [sp, #0]
    6ca6:	4453      	add	r3, sl
    6ca8:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6caa:	9b03      	ldr	r3, [sp, #12]
    6cac:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6cb0:	f208 2807 	addw	r8, r8, #519	; 0x207
    6cb4:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    6cbc:	2100      	movs	r1, #0
    6cbe:	4620      	mov	r0, r4
    6cc0:	f00a faf8 	bl	112b4 <memset>
  secBuf[0] = 0XF8;
    6cc4:	4623      	mov	r3, r4
    6cc6:	22f8      	movs	r2, #248	; 0xf8
    6cc8:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    6ccc:	22ff      	movs	r2, #255	; 0xff
    6cce:	9907      	ldr	r1, [sp, #28]
    6cd0:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    6cd4:	428b      	cmp	r3, r1
    6cd6:	d1fb      	bne.n	6cd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    6cd8:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    6cdc:	2700      	movs	r7, #0
    6cde:	e00d      	b.n	6cfc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    6ce0:	6833      	ldr	r3, [r6, #0]
    6ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ce4:	4622      	mov	r2, r4
    6ce6:	eb0b 0107 	add.w	r1, fp, r7
    6cea:	4630      	mov	r0, r6
    6cec:	4798      	blx	r3
    6cee:	2800      	cmp	r0, #0
    6cf0:	f43f aeb5 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6cf4:	b19f      	cbz	r7, 6d1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    6cf6:	3701      	adds	r7, #1
    6cf8:	45ba      	cmp	sl, r7
    6cfa:	d91f      	bls.n	6d3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    6cfc:	fbb7 f3f8 	udiv	r3, r7, r8
    6d00:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    6d04:	2b00      	cmp	r3, #0
    6d06:	d1eb      	bne.n	6ce0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6d08:	f1b9 0f00 	cmp.w	r9, #0
    6d0c:	d0e8      	beq.n	6ce0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6d0e:	f8d9 3000 	ldr.w	r3, [r9]
    6d12:	685b      	ldr	r3, [r3, #4]
    6d14:	2201      	movs	r2, #1
    6d16:	4908      	ldr	r1, [pc, #32]	; (6d38 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    6d18:	4648      	mov	r0, r9
    6d1a:	4798      	blx	r3
    6d1c:	e7e0      	b.n	6ce0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d22:	2100      	movs	r1, #0
    6d24:	4620      	mov	r0, r4
    6d26:	f00a fac5 	bl	112b4 <memset>
    6d2a:	e7e4      	b.n	6cf6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    6d2c:	20002030 	.word	0x20002030
    6d30:	20001fd0 	.word	0x20001fd0
    6d34:	20001fe8 	.word	0x20001fe8
    6d38:	20002c50 	.word	0x20002c50
  writeMsg(pr, "\r\n");
    6d3c:	f1b9 0f00 	cmp.w	r9, #0
    6d40:	f000 80ad 	beq.w	6e9e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    6d44:	f8d9 3000 	ldr.w	r3, [r9]
    6d48:	685b      	ldr	r3, [r3, #4]
    6d4a:	2202      	movs	r2, #2
    6d4c:	4969      	ldr	r1, [pc, #420]	; (6ef4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    6d4e:	4648      	mov	r0, r9
    6d50:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    6d52:	9f03      	ldr	r7, [sp, #12]
    6d54:	3707      	adds	r7, #7
    6d56:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6d58:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6d5c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6d60:	9b04      	ldr	r3, [sp, #16]
    6d62:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6d66:	f4ff ae7d 	bcc.w	6a64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d6e:	2100      	movs	r1, #0
    6d70:	4620      	mov	r0, r4
    6d72:	f00a fa9f 	bl	112b4 <memset>
  secBuf[0] = 0X7;
    6d76:	2307      	movs	r3, #7
    6d78:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6d7a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6d7e:	d31b      	bcc.n	6db8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    6d80:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    6d84:	46c3      	mov	fp, r8
    6d86:	e005      	b.n	6d94 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    6d88:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    6d8c:	f108 0801 	add.w	r8, r8, #1
    6d90:	45c2      	cmp	sl, r8
    6d92:	d00d      	beq.n	6db0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    6d94:	6833      	ldr	r3, [r6, #0]
    6d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d98:	4622      	mov	r2, r4
    6d9a:	9905      	ldr	r1, [sp, #20]
    6d9c:	4441      	add	r1, r8
    6d9e:	4630      	mov	r0, r6
    6da0:	4798      	blx	r3
    6da2:	2800      	cmp	r0, #0
    6da4:	f43f ae5b 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6da8:	f1b8 0f00 	cmp.w	r8, #0
    6dac:	d1ee      	bne.n	6d8c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    6dae:	e7eb      	b.n	6d88 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    6db0:	f1b9 0f00 	cmp.w	r9, #0
    6db4:	f000 808b 	beq.w	6ece <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    6db8:	f8d9 3000 	ldr.w	r3, [r9]
    6dbc:	685b      	ldr	r3, [r3, #4]
    6dbe:	2216      	movs	r2, #22
    6dc0:	494d      	ldr	r1, [pc, #308]	; (6ef8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    6dc2:	4648      	mov	r0, r9
    6dc4:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6dc6:	9b05      	ldr	r3, [sp, #20]
    6dc8:	9a04      	ldr	r2, [sp, #16]
    6dca:	1899      	adds	r1, r3, r2
    6dcc:	9802      	ldr	r0, [sp, #8]
    6dce:	f7ff fd8f 	bl	68f0 <ExFatFormatter::writeUpcase(unsigned long)>
    6dd2:	2800      	cmp	r0, #0
    6dd4:	f43f ae46 	beq.w	6a64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    6ddc:	9a01      	ldr	r2, [sp, #4]
    6dde:	4093      	lsls	r3, r2
    6de0:	9a02      	ldr	r2, [sp, #8]
    6de2:	6892      	ldr	r2, [r2, #8]
    6de4:	429a      	cmp	r2, r3
    6de6:	f63f ae3d 	bhi.w	6a64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    6dea:	f1b9 0f00 	cmp.w	r9, #0
    6dee:	d003      	beq.n	6df8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    6df0:	4942      	ldr	r1, [pc, #264]	; (6efc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    6df2:	4648      	mov	r0, r9
    6df4:	f7ff fd2c 	bl	6850 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    6df8:	f04f 0a02 	mov.w	sl, #2
    6dfc:	9b01      	ldr	r3, [sp, #4]
    6dfe:	fa0a f803 	lsl.w	r8, sl, r3
    6e02:	9b05      	ldr	r3, [sp, #20]
    6e04:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6e06:	f44f 7200 	mov.w	r2, #512	; 0x200
    6e0a:	2100      	movs	r1, #0
    6e0c:	4620      	mov	r0, r4
    6e0e:	f00a fa51 	bl	112b4 <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    6e12:	2203      	movs	r2, #3
    6e14:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    6e16:	2381      	movs	r3, #129	; 0x81
    6e18:	f884 3020 	strb.w	r3, [r4, #32]
    6e1c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    6e20:	2300      	movs	r3, #0
    6e22:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    6e24:	2182      	movs	r1, #130	; 0x82
    6e26:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    6e2a:	9802      	ldr	r0, [sp, #8]
    6e2c:	6841      	ldr	r1, [r0, #4]
    6e2e:	6461      	str	r1, [r4, #68]	; 0x44
    6e30:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    6e32:	6882      	ldr	r2, [r0, #8]
    6e34:	65a2      	str	r2, [r4, #88]	; 0x58
    6e36:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    6e38:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6e3a:	f44f 7a00 	mov.w	sl, #512	; 0x200
    6e3e:	469b      	mov	fp, r3
    6e40:	e005      	b.n	6e4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    6e42:	4652      	mov	r2, sl
    6e44:	4659      	mov	r1, fp
    6e46:	4620      	mov	r0, r4
    6e48:	f00a fa34 	bl	112b4 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    6e4c:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    6e4e:	6833      	ldr	r3, [r6, #0]
    6e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e52:	4622      	mov	r2, r4
    6e54:	eb08 0107 	add.w	r1, r8, r7
    6e58:	4630      	mov	r0, r6
    6e5a:	4798      	blx	r3
    6e5c:	9000      	str	r0, [sp, #0]
    6e5e:	2800      	cmp	r0, #0
    6e60:	f43f adfd 	beq.w	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6e64:	2f00      	cmp	r7, #0
    6e66:	d0ec      	beq.n	6e42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    6e68:	3701      	adds	r7, #1
    6e6a:	9b04      	ldr	r3, [sp, #16]
    6e6c:	42bb      	cmp	r3, r7
    6e6e:	d1ee      	bne.n	6e4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    6e70:	f1b9 0f00 	cmp.w	r9, #0
    6e74:	d00f      	beq.n	6e96 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    6e76:	4922      	ldr	r1, [pc, #136]	; (6f00 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    6e78:	4648      	mov	r0, r9
    6e7a:	f7ff fce9 	bl	6850 <Print::write(char const*)>
  return true;
    6e7e:	9d00      	ldr	r5, [sp, #0]
    6e80:	e5f8      	b.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6e82:	9d08      	ldr	r5, [sp, #32]
    6e84:	e5eb      	b.n	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6e86:	9d08      	ldr	r5, [sp, #32]
    6e88:	e5e9      	b.n	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6e8a:	9d08      	ldr	r5, [sp, #32]
    6e8c:	e5e7      	b.n	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6e8e:	9d08      	ldr	r5, [sp, #32]
    6e90:	e5e5      	b.n	6a5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    6e92:	2500      	movs	r5, #0
    6e94:	e5ee      	b.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    6e96:	9d00      	ldr	r5, [sp, #0]
    6e98:	e5ec      	b.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    6e9a:	4605      	mov	r5, r0
    6e9c:	e5ea      	b.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    6e9e:	9f03      	ldr	r7, [sp, #12]
    6ea0:	3707      	adds	r7, #7
    6ea2:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6ea4:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6ea8:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6eac:	9b04      	ldr	r3, [sp, #16]
    6eae:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6eb2:	f4ff addf 	bcc.w	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
    6eba:	2100      	movs	r1, #0
    6ebc:	4620      	mov	r0, r4
    6ebe:	f00a f9f9 	bl	112b4 <memset>
  secBuf[0] = 0X7;
    6ec2:	2307      	movs	r3, #7
    6ec4:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6ec6:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6eca:	f4bf af59 	bcs.w	6d80 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6ece:	9b05      	ldr	r3, [sp, #20]
    6ed0:	9a04      	ldr	r2, [sp, #16]
    6ed2:	1899      	adds	r1, r3, r2
    6ed4:	9802      	ldr	r0, [sp, #8]
    6ed6:	f7ff fd0b 	bl	68f0 <ExFatFormatter::writeUpcase(unsigned long)>
    6eda:	2800      	cmp	r0, #0
    6edc:	d0dd      	beq.n	6e9a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6ede:	f44f 7300 	mov.w	r3, #512	; 0x200
    6ee2:	9a01      	ldr	r2, [sp, #4]
    6ee4:	4093      	lsls	r3, r2
    6ee6:	9a02      	ldr	r2, [sp, #8]
    6ee8:	6892      	ldr	r2, [r2, #8]
    6eea:	429a      	cmp	r2, r3
    6eec:	f67f af7d 	bls.w	6dea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    6ef0:	e5c0      	b.n	6a74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6ef2:	bf00      	nop
    6ef4:	2000200c 	.word	0x2000200c
    6ef8:	20001ff8 	.word	0x20001ff8
    6efc:	20002010 	.word	0x20002010
    6f00:	20002020 	.word	0x20002020

00006f04 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    6f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f08:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    6f0a:	460e      	mov	r6, r1
    6f0c:	f101 081e 	add.w	r8, r1, #30
    6f10:	e00c      	b.n	6f2c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    6f12:	4620      	mov	r0, r4
    6f14:	f004 fd98 	bl	ba48 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    6f18:	f004 feb4 	bl	bc84 <toUpcase(unsigned short)>
    6f1c:	4605      	mov	r5, r0
    6f1e:	4638      	mov	r0, r7
    6f20:	f004 feb0 	bl	bc84 <toUpcase(unsigned short)>
    6f24:	4285      	cmp	r5, r0
    6f26:	d111      	bne.n	6f4c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    6f28:	4546      	cmp	r6, r8
    6f2a:	d00d      	beq.n	6f48 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    6f2c:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    6f30:	89a3      	ldrh	r3, [r4, #12]
    6f32:	2b00      	cmp	r3, #0
    6f34:	d1ed      	bne.n	6f12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    6f36:	6862      	ldr	r2, [r4, #4]
    6f38:	68a3      	ldr	r3, [r4, #8]
    6f3a:	429a      	cmp	r2, r3
    6f3c:	d1e9      	bne.n	6f12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    6f3e:	fab7 f087 	clz	r0, r7
    6f42:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    6f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    6f48:	2001      	movs	r0, #1
    6f4a:	e7fb      	b.n	6f44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    6f4c:	2000      	movs	r0, #0
    6f4e:	e7f9      	b.n	6f44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

00006f50 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    6f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f54:	b083      	sub	sp, #12
    6f56:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    6f58:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d03e      	beq.n	6fde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6f60:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6f62:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    6f66:	2b01      	cmp	r3, #1
    6f68:	d94b      	bls.n	7002 <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    6f6a:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6f6c:	2302      	movs	r3, #2
    6f6e:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    6f70:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f72:	3a01      	subs	r2, #1
    6f74:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6f76:	f8df b098 	ldr.w	fp, [pc, #152]	; 7010 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    6f7a:	2200      	movs	r2, #0
    6f7c:	9901      	ldr	r1, [sp, #4]
    6f7e:	4648      	mov	r0, r9
    6f80:	f7fe fa8a 	bl	5498 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6f84:	b358      	cbz	r0, 6fde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6f86:	7803      	ldrb	r3, [r0, #0]
    6f88:	2bc1      	cmp	r3, #193	; 0xc1
    6f8a:	d128      	bne.n	6fde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    6f8c:	4605      	mov	r5, r0
    6f8e:	f100 081e 	add.w	r8, r0, #30
    6f92:	e00f      	b.n	6fb4 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    6f94:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    6f98:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    6f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6f9e:	d31b      	bcc.n	6fd8 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    6fa0:	b380      	cbz	r0, 7004 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6fa2:	463a      	mov	r2, r7
    6fa4:	4631      	mov	r1, r6
    6fa6:	f004 fdca 	bl	bb3e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6faa:	4606      	mov	r6, r0
    6fac:	b1b8      	cbz	r0, 6fde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6fae:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    6fb0:	45a8      	cmp	r8, r5
    6fb2:	d01c      	beq.n	6fee <ExFatFile::getName8(char*, unsigned int)+0x9e>
    6fb4:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    6fb8:	2c00      	cmp	r4, #0
    6fba:	d0eb      	beq.n	6f94 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    6fbc:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6fc0:	b29b      	uxth	r3, r3
    6fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6fc6:	d20a      	bcs.n	6fde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6fc8:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    6fcc:	f3c0 0009 	ubfx	r0, r0, #0, #10
    6fd0:	4304      	orrs	r4, r0
    6fd2:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    6fd6:	e7e4      	b.n	6fa2 <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    6fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6fdc:	d305      	bcc.n	6fea <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    6fde:	2000      	movs	r0, #0
    6fe0:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    6fe4:	b003      	add	sp, #12
    6fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    6fea:	4604      	mov	r4, r0
    6fec:	e7e0      	b.n	6fb0 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6fee:	9b01      	ldr	r3, [sp, #4]
    6ff0:	3301      	adds	r3, #1
    6ff2:	b2db      	uxtb	r3, r3
    6ff4:	461a      	mov	r2, r3
    6ff6:	9301      	str	r3, [sp, #4]
    6ff8:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    6ffc:	4293      	cmp	r3, r2
    6ffe:	d2bc      	bcs.n	6f7a <ExFatFile::getName8(char*, unsigned int)+0x2a>
    7000:	e000      	b.n	7004 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    7002:	460e      	mov	r6, r1
  *str = '\0';
    7004:	2300      	movs	r3, #0
    7006:	7033      	strb	r3, [r6, #0]
  return str - name;
    7008:	eba6 000a 	sub.w	r0, r6, sl
    700c:	e7ea      	b.n	6fe4 <ExFatFile::getName8(char*, unsigned int)+0x94>
    700e:	bf00      	nop
    7010:	000ffc00 	.word	0x000ffc00

00007014 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	460c      	mov	r4, r1
    next = begin;
    7018:	680b      	ldr	r3, [r1, #0]
    701a:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    701c:	2600      	movs	r6, #0
    701e:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    7020:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    7022:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    7026:	e016      	b.n	7056 <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    7028:	4620      	mov	r0, r4
    702a:	f004 fd0d 	bl	ba48 <FsName::get16()>
    if (u == 0XFFFF) {
    702e:	42a8      	cmp	r0, r5
    7030:	d020      	beq.n	7074 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    7032:	f004 fe27 	bl	bc84 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7036:	03f3      	lsls	r3, r6, #15
    7038:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    703c:	fa53 f380 	uxtab	r3, r3, r0
    7040:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    7042:	f3c3 034e 	ubfx	r3, r3, #1, #15
    7046:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    704a:	0a00      	lsrs	r0, r0, #8
    704c:	fa10 f383 	uxtah	r3, r0, r3
    7050:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    7052:	6920      	ldr	r0, [r4, #16]
    7054:	3001      	adds	r0, #1
  fname->nameLength = 0;
    7056:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    7058:	89a3      	ldrh	r3, [r4, #12]
    705a:	2b00      	cmp	r3, #0
    705c:	d1e4      	bne.n	7028 <ExFatFile::hashName(ExName_t*)+0x14>
    705e:	6862      	ldr	r2, [r4, #4]
    7060:	68a3      	ldr	r3, [r4, #8]
    7062:	429a      	cmp	r2, r3
    7064:	d1e0      	bne.n	7028 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    7066:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    7068:	3801      	subs	r0, #1
    706a:	28fe      	cmp	r0, #254	; 0xfe
    706c:	bf8c      	ite	hi
    706e:	2000      	movhi	r0, #0
    7070:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    7072:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7074:	2000      	movs	r0, #0
    7076:	e7fc      	b.n	7072 <ExFatFile::hashName(ExName_t*)+0x5e>

00007078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    7078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    707c:	b083      	sub	sp, #12
    707e:	4607      	mov	r7, r0
    7080:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7082:	9101      	str	r1, [sp, #4]
    7084:	b1e9      	cbz	r1, 70c2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    7086:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    7088:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    708c:	42b3      	cmp	r3, r6
    708e:	bf98      	it	ls
    7090:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    7092:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    7096:	f006 0307 	and.w	r3, r6, #7
    709a:	2401      	movs	r4, #1
    709c:	409c      	lsls	r4, r3
    709e:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    70a0:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    70a2:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    70a4:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    70a8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    70ac:	465a      	mov	r2, fp
    70ae:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    70b2:	4638      	mov	r0, r7
    70b4:	f004 fc89 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    70b8:	b388      	cbz	r0, 711e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    70ba:	4482      	add	sl, r0
    70bc:	f500 7100 	add.w	r1, r0, #512	; 0x200
    70c0:	e023      	b.n	710a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    70c2:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    70c6:	e7df      	b.n	7088 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    70c8:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    70ca:	42ae      	cmp	r6, r5
    70cc:	d029      	beq.n	7122 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    70ce:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    70d2:	42ab      	cmp	r3, r5
    70d4:	d91e      	bls.n	7114 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    70d6:	0064      	lsls	r4, r4, #1
    70d8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    70dc:	d010      	beq.n	7100 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    70de:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    70e0:	4222      	tst	r2, r4
    70e2:	d1f1      	bne.n	70c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    70e4:	eba5 0308 	sub.w	r3, r5, r8
    70e8:	454b      	cmp	r3, r9
    70ea:	d1ee      	bne.n	70ca <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	b923      	cbnz	r3, 70fa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    70f0:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    70f4:	bf08      	it	eq
    70f6:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    70fa:	f108 0002 	add.w	r0, r8, #2
    70fe:	e011      	b.n	7124 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    7100:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    7104:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    7106:	4551      	cmp	r1, sl
    7108:	d007      	beq.n	711a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    710a:	2c00      	cmp	r4, #0
    710c:	d0f8      	beq.n	7100 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    710e:	f89a 2000 	ldrb.w	r2, [sl]
    7112:	e7e4      	b.n	70de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    7114:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    7116:	46d8      	mov	r8, fp
    7118:	465d      	mov	r5, fp
    }
    i = 0;
    711a:	46da      	mov	sl, fp
    711c:	e7c4      	b.n	70a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    711e:	2000      	movs	r0, #0
    7120:	e000      	b.n	7124 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    7122:	2001      	movs	r0, #1
  }
  return 0;
}
    7124:	b003      	add	sp, #12
    7126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    712a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    712e:	4615      	mov	r5, r2
    7130:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    7132:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7134:	188b      	adds	r3, r1, r2
    7136:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    713a:	4293      	cmp	r3, r2
    713c:	d854      	bhi.n	71e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    713e:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7140:	b15e      	cbz	r6, 715a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7142:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    7146:	4283      	cmp	r3, r0
    7148:	d90d      	bls.n	7166 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    714a:	4288      	cmp	r0, r1
    714c:	d30b      	bcc.n	7166 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    714e:	4293      	cmp	r3, r2
    7150:	bf28      	it	cs
    7152:	2300      	movcs	r3, #0
    7154:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    7158:	e005      	b.n	7166 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    715a:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    715e:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    7160:	bf88      	it	hi
    7162:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    7166:	f001 0307 	and.w	r3, r1, #7
    716a:	2401      	movs	r4, #1
    716c:	409c      	lsls	r4, r3
    716e:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    7170:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    7174:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    7178:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    717c:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    7180:	f04f 0a00 	mov.w	sl, #0
    7184:	464a      	mov	r2, r9
    7186:	4641      	mov	r1, r8
    7188:	4638      	mov	r0, r7
    718a:	f004 fc1e 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    718e:	4684      	mov	ip, r0
    7190:	b368      	cbz	r0, 71ee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    7192:	4458      	add	r0, fp
    7194:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    7198:	b1e4      	cbz	r4, 71d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    719a:	4603      	mov	r3, r0
    719c:	7802      	ldrb	r2, [r0, #0]
    719e:	4222      	tst	r2, r4
    71a0:	bf14      	ite	ne
    71a2:	2101      	movne	r1, #1
    71a4:	2100      	moveq	r1, #0
    71a6:	42b1      	cmp	r1, r6
    71a8:	d025      	beq.n	71f6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    71aa:	4062      	eors	r2, r4
    71ac:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    71ae:	3d01      	subs	r5, #1
    71b0:	d018      	beq.n	71e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    71b2:	0064      	lsls	r4, r4, #1
    71b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    71b8:	d00c      	beq.n	71d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    71ba:	7819      	ldrb	r1, [r3, #0]
    71bc:	4221      	tst	r1, r4
    71be:	bf14      	ite	ne
    71c0:	2201      	movne	r2, #1
    71c2:	2200      	moveq	r2, #0
    71c4:	42b2      	cmp	r2, r6
    71c6:	d014      	beq.n	71f2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    71c8:	4061      	eors	r1, r4
    71ca:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    71cc:	3d01      	subs	r5, #1
    71ce:	d1f0      	bne.n	71b2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    71d0:	2001      	movs	r0, #1
    71d2:	e00a      	b.n	71ea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    71d4:	3001      	adds	r0, #1
      mask = 1;
    71d6:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    71d8:	4560      	cmp	r0, ip
    71da:	d1dd      	bne.n	7198 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    71dc:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    71e0:	46d3      	mov	fp, sl
    71e2:	e7cf      	b.n	7184 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    71e4:	2001      	movs	r0, #1
    71e6:	e000      	b.n	71ea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    71e8:	2000      	movs	r0, #0
}
    71ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    71ee:	2000      	movs	r0, #0
    71f0:	e7fb      	b.n	71ea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    71f2:	2000      	movs	r0, #0
    71f4:	e7f9      	b.n	71ea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    71f6:	2000      	movs	r0, #0
    71f8:	e7f7      	b.n	71ea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

000071fa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    71fa:	b510      	push	{r4, lr}
    71fc:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    71fe:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7202:	6849      	ldr	r1, [r1, #4]
    7204:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    7206:	6823      	ldr	r3, [r4, #0]
    7208:	3b02      	subs	r3, #2
    720a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    720e:	fa03 f30c 	lsl.w	r3, r3, ip
    7212:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7216:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    721a:	4419      	add	r1, r3
    721c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7220:	f004 fbd3 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7224:	4603      	mov	r3, r0
    7226:	b118      	cbz	r0, 7230 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    7228:	6862      	ldr	r2, [r4, #4]
    722a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    722e:	4413      	add	r3, r2
}
    7230:	4618      	mov	r0, r3
    7232:	bd10      	pop	{r4, pc}

00007234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7234:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7236:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    723a:	3301      	adds	r3, #1
    723c:	428b      	cmp	r3, r1
    723e:	d202      	bcs.n	7246 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    7240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7244:	bd38      	pop	{r3, r4, r5, pc}
    7246:	460c      	mov	r4, r1
    7248:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    724a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    724e:	2200      	movs	r2, #0
    7250:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7254:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7258:	f004 fbb7 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    725c:	b148      	cbz	r0, 7272 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    725e:	00a4      	lsls	r4, r4, #2
    7260:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    7264:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    7266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    726a:	d005      	beq.n	7278 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    726c:	602b      	str	r3, [r5, #0]
  return 1;
    726e:	2001      	movs	r0, #1
    7270:	e7e8      	b.n	7244 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    7272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7276:	e7e5      	b.n	7244 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    7278:	2000      	movs	r0, #0
    727a:	e7e3      	b.n	7244 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

0000727c <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    727c:	b530      	push	{r4, r5, lr}
    727e:	b083      	sub	sp, #12
    7280:	4605      	mov	r5, r0
    7282:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    7284:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    7286:	aa01      	add	r2, sp, #4
    7288:	9901      	ldr	r1, [sp, #4]
    728a:	4628      	mov	r0, r5
    728c:	f7ff ffd2 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    7290:	2800      	cmp	r0, #0
    7292:	db03      	blt.n	729c <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    7294:	3401      	adds	r4, #1
  } while (status);
    7296:	2800      	cmp	r0, #0
    7298:	d1f5      	bne.n	7286 <ExFatPartition::chainSize(unsigned long)+0xa>
    729a:	e000      	b.n	729e <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    729c:	2400      	movs	r4, #0
}
    729e:	4620      	mov	r0, r4
    72a0:	b003      	add	sp, #12
    72a2:	bd30      	pop	{r4, r5, pc}

000072a4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    72a4:	b570      	push	{r4, r5, r6, lr}
    72a6:	4606      	mov	r6, r0
    72a8:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    72aa:	6849      	ldr	r1, [r1, #4]
    72ac:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    72b0:	400b      	ands	r3, r1
    72b2:	4413      	add	r3, r2
  pos->position += offset;
    72b4:	4411      	add	r1, r2
    72b6:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    72b8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    72bc:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    72be:	b2d2      	uxtb	r2, r2
    72c0:	40d3      	lsrs	r3, r2
  while (tmp--) {
    72c2:	1e5d      	subs	r5, r3, #1
    72c4:	b963      	cbnz	r3, 72e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    72c6:	2001      	movs	r0, #1
    72c8:	e012      	b.n	72f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    72ca:	4622      	mov	r2, r4
    72cc:	6821      	ldr	r1, [r4, #0]
    72ce:	4630      	mov	r0, r6
    72d0:	f7ff ffb0 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    72d4:	2801      	cmp	r0, #1
    72d6:	d10b      	bne.n	72f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    72d8:	3d01      	subs	r5, #1
    72da:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    72de:	d006      	beq.n	72ee <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    72e0:	7a23      	ldrb	r3, [r4, #8]
    72e2:	2b00      	cmp	r3, #0
    72e4:	d0f1      	beq.n	72ca <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    72e6:	6823      	ldr	r3, [r4, #0]
    72e8:	3301      	adds	r3, #1
    72ea:	6023      	str	r3, [r4, #0]
    72ec:	e7f4      	b.n	72d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    72ee:	2001      	movs	r0, #1
}
    72f0:	bd70      	pop	{r4, r5, r6, pc}

000072f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    72f2:	2901      	cmp	r1, #1
    72f4:	d919      	bls.n	732a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    72f6:	b538      	push	{r3, r4, r5, lr}
    72f8:	460c      	mov	r4, r1
    72fa:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    72fc:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7300:	3301      	adds	r3, #1
    7302:	428b      	cmp	r3, r1
    7304:	d201      	bcs.n	730a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7306:	2000      	movs	r0, #0
}
    7308:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    730a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    730e:	2201      	movs	r2, #1
    7310:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7314:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7318:	f004 fb57 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    731c:	b138      	cbz	r0, 732e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    731e:	00a4      	lsls	r4, r4, #2
    7320:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7324:	5105      	str	r5, [r0, r4]
  return true;
    7326:	2001      	movs	r0, #1
    7328:	e7ee      	b.n	7308 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    732a:	2000      	movs	r0, #0
}
    732c:	4770      	bx	lr
  return false;
    732e:	2000      	movs	r0, #0
    7330:	e7ea      	b.n	7308 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

00007332 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7336:	b082      	sub	sp, #8
    7338:	4606      	mov	r6, r0
    733a:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    733c:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    733e:	f04f 0800 	mov.w	r8, #0
    7342:	e00d      	b.n	7360 <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    7344:	461c      	mov	r4, r3
    7346:	e00b      	b.n	7360 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7348:	1c62      	adds	r2, r4, #1
    734a:	4643      	mov	r3, r8
    734c:	1bd2      	subs	r2, r2, r7
    734e:	4639      	mov	r1, r7
    7350:	4630      	mov	r0, r6
    7352:	f7ff feea 	bl	712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7356:	4603      	mov	r3, r0
    7358:	b318      	cbz	r0, 73a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    735a:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    735c:	b30d      	cbz	r5, 73a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    735e:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    7360:	aa01      	add	r2, sp, #4
    7362:	4621      	mov	r1, r4
    7364:	4630      	mov	r0, r6
    7366:	f7ff ff65 	bl	7234 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    736a:	1e05      	subs	r5, r0, #0
    736c:	db18      	blt.n	73a0 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    736e:	4642      	mov	r2, r8
    7370:	4621      	mov	r1, r4
    7372:	4630      	mov	r0, r6
    7374:	f7ff ffbd 	bl	72f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7378:	4603      	mov	r3, r0
    737a:	b190      	cbz	r0, 73a2 <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    737c:	2d00      	cmp	r5, #0
    737e:	d0e3      	beq.n	7348 <ExFatPartition::freeChain(unsigned long)+0x16>
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	1c62      	adds	r2, r4, #1
    7384:	429a      	cmp	r2, r3
    7386:	d0dd      	beq.n	7344 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7388:	1c62      	adds	r2, r4, #1
    738a:	4643      	mov	r3, r8
    738c:	1bd2      	subs	r2, r2, r7
    738e:	4639      	mov	r1, r7
    7390:	4630      	mov	r0, r6
    7392:	f7ff feca 	bl	712a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7396:	4603      	mov	r3, r0
    7398:	b118      	cbz	r0, 73a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    739a:	9f01      	ldr	r7, [sp, #4]
    739c:	463c      	mov	r4, r7
    739e:	e7df      	b.n	7360 <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    73a0:	2300      	movs	r3, #0
}
    73a2:	4618      	mov	r0, r3
    73a4:	b002      	add	sp, #8
    73a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000073aa <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    73aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73ae:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    73b0:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    73b4:	2500      	movs	r5, #0
  uint32_t nc = 0;
    73b6:	462c      	mov	r4, r5
    73b8:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    73bc:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    73be:	f101 0901 	add.w	r9, r1, #1
    73c2:	2200      	movs	r2, #0
    73c4:	4640      	mov	r0, r8
    73c6:	f004 fb00 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    73ca:	b308      	cbz	r0, 7410 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    73cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    73d0:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    73d4:	e007      	b.n	73e6 <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    73d6:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    73d8:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    73da:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    73de:	42a0      	cmp	r0, r4
    73e0:	d911      	bls.n	7406 <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    73e2:	4574      	cmp	r4, lr
    73e4:	d012      	beq.n	740c <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    73e6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    73ea:	29ff      	cmp	r1, #255	; 0xff
    73ec:	d0f3      	beq.n	73d6 <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    73ee:	2900      	cmp	r1, #0
    73f0:	d0f2      	beq.n	73d8 <ExFatPartition::freeClusterCount()+0x2e>
    73f2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    73f4:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    73f6:	4219      	tst	r1, r3
            usedCount++;
    73f8:	bf18      	it	ne
    73fa:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    73fc:	005b      	lsls	r3, r3, #1
    73fe:	b2db      	uxtb	r3, r3
    7400:	3a01      	subs	r2, #1
    7402:	d1f8      	bne.n	73f6 <ExFatPartition::freeClusterCount()+0x4c>
    7404:	e7e8      	b.n	73d8 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    7406:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    740c:	4649      	mov	r1, r9
    740e:	e7d6      	b.n	73be <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    7410:	2000      	movs	r0, #0
    7412:	e7f9      	b.n	7408 <ExFatPartition::freeClusterCount()+0x5e>

00007414 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7418:	4604      	mov	r4, r0
    741a:	460b      	mov	r3, r1
    741c:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    741e:	2100      	movs	r1, #0
    7420:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    7424:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    7428:	6043      	str	r3, [r0, #4]
    m_status = 0;
    742a:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    742c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7430:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    7432:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7436:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    743a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    743e:	f500 7704 	add.w	r7, r0, #528	; 0x210
    7442:	460a      	mov	r2, r1
    7444:	4638      	mov	r0, r7
    7446:	f004 fac0 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    744a:	4680      	mov	r8, r0
    744c:	fab0 f080 	clz	r0, r0
    7450:	0940      	lsrs	r0, r0, #5
    7452:	2e04      	cmp	r6, #4
    7454:	bf94      	ite	ls
    7456:	4605      	movls	r5, r0
    7458:	f040 0501 	orrhi.w	r5, r0, #1
    745c:	2d00      	cmp	r5, #0
    745e:	d154      	bne.n	750a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7460:	b1ce      	cbz	r6, 7496 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7462:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7464:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    7468:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    746c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    7470:	d14c      	bne.n	750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    7472:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7476:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    747a:	2b00      	cmp	r3, #0
    747c:	d046      	beq.n	750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    747e:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    7482:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    7486:	2200      	movs	r2, #0
    7488:	4631      	mov	r1, r6
    748a:	4638      	mov	r0, r7
    748c:	f004 fa9d 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7490:	4680      	mov	r8, r0
    7492:	b908      	cbnz	r0, 7498 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    7494:	e03a      	b.n	750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    7496:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7498:	2205      	movs	r2, #5
    749a:	491e      	ldr	r1, [pc, #120]	; (7514 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    749c:	f108 0003 	add.w	r0, r8, #3
    74a0:	f009 fae8 	bl	10a74 <strncmp>
    74a4:	bb90      	cbnz	r0, 750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    74a6:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    74aa:	2b09      	cmp	r3, #9
    74ac:	d12e      	bne.n	750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    74ae:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    74b2:	4433      	add	r3, r6
    74b4:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    74b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    74bc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    74c0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    74c4:	4433      	add	r3, r6
    74c6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    74ca:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    74ce:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    74d2:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    74d6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    74da:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    74de:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    74e2:	3309      	adds	r3, #9
    74e4:	2501      	movs	r5, #1
    74e6:	fa05 f303 	lsl.w	r3, r5, r3
    74ea:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    74ee:	3b01      	subs	r3, #1
    74f0:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    74f4:	2100      	movs	r1, #0
    74f6:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    74fa:	462a      	mov	r2, r5
    74fc:	4620      	mov	r0, r4
    74fe:	f7ff fdbb 	bl	7078 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7502:	2340      	movs	r3, #64	; 0x40
    7504:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    7508:	e000      	b.n	750c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    750a:	2500      	movs	r5, #0
}
    750c:	4628      	mov	r0, r5
    750e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7512:	bf00      	nop
    7514:	20002040 	.word	0x20002040

00007518 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7518:	b510      	push	{r4, lr}
    751a:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    751c:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7520:	f7ff feac 	bl	727c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7524:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7528:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    752a:	b2db      	uxtb	r3, r3
}
    752c:	4098      	lsls	r0, r3
    752e:	bd10      	pop	{r4, pc}

00007530 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    7530:	b538      	push	{r3, r4, r5, lr}
    7532:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7534:	4602      	mov	r2, r0
    7536:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    753a:	4629      	mov	r1, r5
    753c:	6880      	ldr	r0, [r0, #8]
    753e:	f002 f940 	bl	97c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7542:	b140      	cbz	r0, 7556 <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7544:	b945      	cbnz	r5, 7558 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7546:	78a3      	ldrb	r3, [r4, #2]
    7548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    754c:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    754e:	78a3      	ldrb	r3, [r4, #2]
    7550:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7554:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7556:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    7558:	3501      	adds	r5, #1
    755a:	6923      	ldr	r3, [r4, #16]
    755c:	42ab      	cmp	r3, r5
    755e:	d0f6      	beq.n	754e <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7560:	78a3      	ldrb	r3, [r4, #2]
    7562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7566:	70a3      	strb	r3, [r4, #2]
    7568:	e7f1      	b.n	754e <FatFile::addCluster()+0x1e>
	...

0000756c <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    7570:	7803      	ldrb	r3, [r0, #0]
    7572:	f013 0f20 	tst.w	r3, #32
    7576:	d133      	bne.n	75e0 <FatFile::addDirCluster()+0x74>
    7578:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    757a:	6942      	ldr	r2, [r0, #20]
    757c:	4b1b      	ldr	r3, [pc, #108]	; (75ec <FatFile::addDirCluster()+0x80>)
    757e:	429a      	cmp	r2, r3
    7580:	d301      	bcc.n	7586 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    7582:	2700      	movs	r7, #0
    7584:	e02d      	b.n	75e2 <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    7586:	f7ff ffd3 	bl	7530 <FatFile::addCluster()>
    758a:	4607      	mov	r7, r0
    758c:	b348      	cbz	r0, 75e2 <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    758e:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7590:	692e      	ldr	r6, [r5, #16]
    7592:	3e02      	subs	r6, #2
    7594:	7983      	ldrb	r3, [r0, #6]
    7596:	409e      	lsls	r6, r3
    7598:	6943      	ldr	r3, [r0, #20]
    759a:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    759c:	7903      	ldrb	r3, [r0, #4]
    759e:	b1b3      	cbz	r3, 75ce <FatFile::addDirCluster()+0x62>
    75a0:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    75a2:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    75a6:	f44f 7a00 	mov.w	sl, #512	; 0x200
    75aa:	46a1      	mov	r9, r4
    75ac:	4642      	mov	r2, r8
    75ae:	fa56 f184 	uxtab	r1, r6, r4
    75b2:	3028      	adds	r0, #40	; 0x28
    75b4:	f004 fa09 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    75b8:	b1b0      	cbz	r0, 75e8 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    75ba:	4652      	mov	r2, sl
    75bc:	4649      	mov	r1, r9
    75be:	f009 fe79 	bl	112b4 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    75c2:	68a8      	ldr	r0, [r5, #8]
    75c4:	3401      	adds	r4, #1
    75c6:	7902      	ldrb	r2, [r0, #4]
    75c8:	b2e3      	uxtb	r3, r4
    75ca:	429a      	cmp	r2, r3
    75cc:	d8ee      	bhi.n	75ac <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    75ce:	7982      	ldrb	r2, [r0, #6]
    75d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    75d4:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    75d6:	696a      	ldr	r2, [r5, #20]
    75d8:	fa12 f383 	uxtah	r3, r2, r3
    75dc:	616b      	str	r3, [r5, #20]
  return true;
    75de:	e000      	b.n	75e2 <FatFile::addDirCluster()+0x76>
  return false;
    75e0:	2700      	movs	r7, #0
}
    75e2:	4638      	mov	r0, r7
    75e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    75e8:	2700      	movs	r7, #0
    75ea:	e7fa      	b.n	75e2 <FatFile::addDirCluster()+0x76>
    75ec:	001ffe00 	.word	0x001ffe00

000075f0 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    75f0:	b510      	push	{r4, lr}
    75f2:	4604      	mov	r4, r0
    75f4:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    75f6:	6880      	ldr	r0, [r0, #8]
    75f8:	69a1      	ldr	r1, [r4, #24]
    75fa:	3028      	adds	r0, #40	; 0x28
    75fc:	f004 f9e5 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    7600:	4603      	mov	r3, r0
    7602:	b120      	cbz	r0, 760e <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    7604:	88a2      	ldrh	r2, [r4, #4]
    7606:	f002 020f 	and.w	r2, r2, #15
    760a:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    760e:	4618      	mov	r0, r3
    7610:	bd10      	pop	{r4, pc}

00007612 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    7612:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    7614:	7803      	ldrb	r3, [r0, #0]
    7616:	b10b      	cbz	r3, 761c <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7618:	2000      	movs	r0, #0
}
    761a:	bd38      	pop	{r3, r4, r5, pc}
    761c:	4604      	mov	r4, r0
    761e:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    7620:	2224      	movs	r2, #36	; 0x24
    7622:	2100      	movs	r1, #0
    7624:	f009 fe46 	bl	112b4 <memset>
  m_vol = vol;
    7628:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    762a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    762c:	2b10      	cmp	r3, #16
    762e:	d007      	beq.n	7640 <FatFile::openRoot(FatVolume*)+0x2e>
    7630:	2b20      	cmp	r3, #32
    7632:	d007      	beq.n	7644 <FatFile::openRoot(FatVolume*)+0x32>
    7634:	2b0c      	cmp	r3, #12
    7636:	d001      	beq.n	763c <FatFile::openRoot(FatVolume*)+0x2a>
    7638:	2000      	movs	r0, #0
    763a:	e7ee      	b.n	761a <FatFile::openRoot(FatVolume*)+0x8>
    763c:	2320      	movs	r3, #32
    763e:	e002      	b.n	7646 <FatFile::openRoot(FatVolume*)+0x34>
    7640:	2320      	movs	r3, #32
    7642:	e000      	b.n	7646 <FatFile::openRoot(FatVolume*)+0x34>
    7644:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7646:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7648:	2001      	movs	r0, #1
    764a:	70a0      	strb	r0, [r4, #2]
  return true;
    764c:	e7e5      	b.n	761a <FatFile::openRoot(FatVolume*)+0x8>

0000764e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    764e:	b538      	push	{r3, r4, r5, lr}
    7650:	4604      	mov	r4, r0
    7652:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7654:	68cb      	ldr	r3, [r1, #12]
    7656:	b91b      	cbnz	r3, 7660 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    7658:	6889      	ldr	r1, [r1, #8]
    765a:	f7ff ffda 	bl	7612 <FatFile::openRoot(FatVolume*)>
}
    765e:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    7660:	2224      	movs	r2, #36	; 0x24
    7662:	2100      	movs	r1, #0
    7664:	f009 fe26 	bl	112b4 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7668:	2310      	movs	r3, #16
    766a:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    766c:	2001      	movs	r0, #1
    766e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    7670:	68ab      	ldr	r3, [r5, #8]
    7672:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7674:	68eb      	ldr	r3, [r5, #12]
    7676:	6223      	str	r3, [r4, #32]
  return true;
    7678:	e7f1      	b.n	765e <FatFile::openCluster(FatFile*)+0x10>

0000767a <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    767a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    767e:	b083      	sub	sp, #12
    7680:	4604      	mov	r4, r0
    7682:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7684:	7883      	ldrb	r3, [r0, #2]
    7686:	f013 0f01 	tst.w	r3, #1
    768a:	f000 80b4 	beq.w	77f6 <FatFile::read(void*, unsigned int)+0x17c>
    768e:	4689      	mov	r9, r1
    7690:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7692:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7694:	f013 0f08 	tst.w	r3, #8
    7698:	d012      	beq.n	76c0 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    769a:	69c3      	ldr	r3, [r0, #28]
    769c:	6942      	ldr	r2, [r0, #20]
    769e:	1a9b      	subs	r3, r3, r2
    76a0:	460a      	mov	r2, r1
    76a2:	4299      	cmp	r1, r3
    76a4:	bf28      	it	cs
    76a6:	461a      	movcs	r2, r3
    76a8:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    76aa:	9b00      	ldr	r3, [sp, #0]
    76ac:	2b00      	cmp	r3, #0
    76ae:	f000 80b7 	beq.w	7820 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    76b2:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    76b4:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    76b8:	f104 0310 	add.w	r3, r4, #16
    76bc:	9301      	str	r3, [sp, #4]
    76be:	e05b      	b.n	7778 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    76c0:	f013 0f20 	tst.w	r3, #32
    76c4:	d0f1      	beq.n	76aa <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    76c6:	6883      	ldr	r3, [r0, #8]
    76c8:	895a      	ldrh	r2, [r3, #10]
    76ca:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    76cc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    76d0:	b29b      	uxth	r3, r3
    76d2:	9a00      	ldr	r2, [sp, #0]
    76d4:	429a      	cmp	r2, r3
    76d6:	bf28      	it	cs
    76d8:	461a      	movcs	r2, r3
    76da:	9200      	str	r2, [sp, #0]
    76dc:	e7e5      	b.n	76aa <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    76de:	f890 a005 	ldrb.w	sl, [r0, #5]
    76e2:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    76e6:	f1b8 0f00 	cmp.w	r8, #0
    76ea:	d109      	bne.n	7700 <FatFile::read(void*, unsigned int)+0x86>
    76ec:	f1ba 0f00 	cmp.w	sl, #0
    76f0:	d106      	bne.n	7700 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    76f2:	b973      	cbnz	r3, 7712 <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    76f4:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    76f8:	bf14      	ite	ne
    76fa:	6a03      	ldrne	r3, [r0, #32]
    76fc:	6a23      	ldreq	r3, [r4, #32]
    76fe:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7700:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7702:	6925      	ldr	r5, [r4, #16]
    7704:	3d02      	subs	r5, #2
    7706:	799a      	ldrb	r2, [r3, #6]
    7708:	4095      	lsls	r5, r2
    770a:	695b      	ldr	r3, [r3, #20]
    770c:	441d      	add	r5, r3
    770e:	4455      	add	r5, sl
    7710:	e03d      	b.n	778e <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    7712:	f012 0f08 	tst.w	r2, #8
    7716:	d007      	beq.n	7728 <FatFile::read(void*, unsigned int)+0xae>
    7718:	78a3      	ldrb	r3, [r4, #2]
    771a:	f013 0f40 	tst.w	r3, #64	; 0x40
    771e:	d003      	beq.n	7728 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    7720:	6923      	ldr	r3, [r4, #16]
    7722:	3301      	adds	r3, #1
    7724:	6123      	str	r3, [r4, #16]
    7726:	e7eb      	b.n	7700 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7728:	9a01      	ldr	r2, [sp, #4]
    772a:	6921      	ldr	r1, [r4, #16]
    772c:	f001 ff27 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7730:	2800      	cmp	r0, #0
    7732:	db60      	blt.n	77f6 <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7734:	2800      	cmp	r0, #0
    7736:	d1e3      	bne.n	7700 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7738:	7823      	ldrb	r3, [r4, #0]
    773a:	f013 0f70 	tst.w	r3, #112	; 0x70
    773e:	d05a      	beq.n	77f6 <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7740:	9b00      	ldr	r3, [sp, #0]
    7742:	1bd8      	subs	r0, r3, r7
    7744:	e05d      	b.n	7802 <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7746:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    774a:	42be      	cmp	r6, r7
    774c:	bf28      	it	cs
    774e:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7750:	68a0      	ldr	r0, [r4, #8]
    7752:	2200      	movs	r2, #0
    7754:	4629      	mov	r1, r5
    7756:	3028      	adds	r0, #40	; 0x28
    7758:	f004 f937 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    775c:	4601      	mov	r1, r0
    775e:	2800      	cmp	r0, #0
    7760:	d049      	beq.n	77f6 <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7762:	4632      	mov	r2, r6
    7764:	4441      	add	r1, r8
    7766:	4648      	mov	r0, r9
    7768:	f005 fcda 	bl	d120 <memcpy>
    dst += n;
    776c:	44b1      	add	r9, r6
    m_curPosition += n;
    776e:	6963      	ldr	r3, [r4, #20]
    7770:	4433      	add	r3, r6
    7772:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7774:	1bbf      	subs	r7, r7, r6
    7776:	d0e3      	beq.n	7740 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7778:	6963      	ldr	r3, [r4, #20]
    777a:	68a0      	ldr	r0, [r4, #8]
    777c:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7780:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7782:	f012 0f20 	tst.w	r2, #32
    7786:	d0aa      	beq.n	76de <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7788:	6a05      	ldr	r5, [r0, #32]
    778a:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    778e:	f1b8 0f00 	cmp.w	r8, #0
    7792:	d1d8      	bne.n	7746 <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7794:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7798:	d3d5      	bcc.n	7746 <FatFile::read(void*, unsigned int)+0xcc>
    779a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    779e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    77a2:	429d      	cmp	r5, r3
    77a4:	d0cf      	beq.n	7746 <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    77a6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    77aa:	d32d      	bcc.n	7808 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    77ac:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    77b0:	7822      	ldrb	r2, [r4, #0]
    77b2:	f012 0f20 	tst.w	r2, #32
    77b6:	d106      	bne.n	77c6 <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    77b8:	f89b 2004 	ldrb.w	r2, [fp, #4]
    77bc:	eba2 020a 	sub.w	r2, r2, sl
    77c0:	4590      	cmp	r8, r2
    77c2:	bf28      	it	cs
    77c4:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    77c6:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    77ca:	429d      	cmp	r5, r3
    77cc:	d808      	bhi.n	77e0 <FatFile::read(void*, unsigned int)+0x166>
    77ce:	eb05 0208 	add.w	r2, r5, r8
    77d2:	4293      	cmp	r3, r2
    77d4:	d204      	bcs.n	77e0 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    77d6:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    77da:	f004 f8cf 	bl	b97c <FsCache::sync()>
    77de:	b150      	cbz	r0, 77f6 <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    77e0:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    77e4:	6803      	ldr	r3, [r0, #0]
    77e6:	f8d3 b014 	ldr.w	fp, [r3, #20]
    77ea:	4643      	mov	r3, r8
    77ec:	464a      	mov	r2, r9
    77ee:	4629      	mov	r1, r5
    77f0:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    77f2:	2800      	cmp	r0, #0
    77f4:	d1ba      	bne.n	776c <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    77f6:	7863      	ldrb	r3, [r4, #1]
    77f8:	f043 0302 	orr.w	r3, r3, #2
    77fc:	7063      	strb	r3, [r4, #1]
  return -1;
    77fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7802:	b003      	add	sp, #12
    7804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    7808:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    780c:	6803      	ldr	r3, [r0, #0]
    780e:	691b      	ldr	r3, [r3, #16]
    7810:	464a      	mov	r2, r9
    7812:	4629      	mov	r1, r5
    7814:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7816:	2800      	cmp	r0, #0
    7818:	d0ed      	beq.n	77f6 <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    781a:	f44f 7600 	mov.w	r6, #512	; 0x200
    781e:	e7a5      	b.n	776c <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    7820:	9f00      	ldr	r7, [sp, #0]
    7822:	e78d      	b.n	7740 <FatFile::read(void*, unsigned int)+0xc6>

00007824 <FatFile::peek()>:
int FatFile::peek() {
    7824:	b570      	push	{r4, r5, r6, lr}
    7826:	b082      	sub	sp, #8
    7828:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    782a:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    782c:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    782e:	2201      	movs	r2, #1
    7830:	f10d 0107 	add.w	r1, sp, #7
    7834:	f7ff ff21 	bl	767a <FatFile::read(void*, unsigned int)>
    7838:	2801      	cmp	r0, #1
    783a:	bf0c      	ite	eq
    783c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7840:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7844:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7846:	6125      	str	r5, [r4, #16]
}
    7848:	b002      	add	sp, #8
    784a:	bd70      	pop	{r4, r5, r6, pc}

0000784c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    784c:	b530      	push	{r4, r5, lr}
    784e:	b083      	sub	sp, #12
    7850:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7852:	6943      	ldr	r3, [r0, #20]
    7854:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7858:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    785c:	d009      	beq.n	7872 <FatFile::readDirCache(bool)+0x26>
    785e:	2901      	cmp	r1, #1
    7860:	d107      	bne.n	7872 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7862:	3320      	adds	r3, #32
    7864:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7866:	68a0      	ldr	r0, [r4, #8]
    7868:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    786a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    786e:	b003      	add	sp, #12
    7870:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7872:	2201      	movs	r2, #1
    7874:	f10d 0107 	add.w	r1, sp, #7
    7878:	4620      	mov	r0, r4
    787a:	f7ff fefe 	bl	767a <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    787e:	b240      	sxtb	r0, r0
    7880:	2801      	cmp	r0, #1
    7882:	d103      	bne.n	788c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7884:	6963      	ldr	r3, [r4, #20]
    7886:	331f      	adds	r3, #31
    7888:	6163      	str	r3, [r4, #20]
    788a:	e7ec      	b.n	7866 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    788c:	2000      	movs	r0, #0
    788e:	e7ee      	b.n	786e <FatFile::readDirCache(bool)+0x22>

00007890 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7894:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7896:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7898:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    789a:	b36b      	cbz	r3, 78f8 <FatFile::seekSet(unsigned long)+0x68>
    789c:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    789e:	6942      	ldr	r2, [r0, #20]
    78a0:	428a      	cmp	r2, r1
    78a2:	d045      	beq.n	7930 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    78a4:	b361      	cbz	r1, 7900 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    78a6:	f013 0f08 	tst.w	r3, #8
    78aa:	d032      	beq.n	7912 <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    78ac:	69c1      	ldr	r1, [r0, #28]
    78ae:	42a9      	cmp	r1, r5
    78b0:	d322      	bcc.n	78f8 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    78b2:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    78b6:	f89c 1006 	ldrb.w	r1, [ip, #6]
    78ba:	3109      	adds	r1, #9
    78bc:	b2c9      	uxtb	r1, r1
    78be:	1e6e      	subs	r6, r5, #1
    78c0:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    78c2:	78a0      	ldrb	r0, [r4, #2]
    78c4:	f010 0f40 	tst.w	r0, #64	; 0x40
    78c8:	d12c      	bne.n	7924 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    78ca:	1e50      	subs	r0, r2, #1
    78cc:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    78ce:	b10a      	cbz	r2, 78d4 <FatFile::seekSet(unsigned long)+0x44>
    78d0:	4286      	cmp	r6, r0
    78d2:	d22b      	bcs.n	792c <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    78d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    78d8:	bf14      	ite	ne
    78da:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    78de:	6a23      	ldreq	r3, [r4, #32]
    78e0:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    78e2:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    78e6:	b16e      	cbz	r6, 7904 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    78e8:	4642      	mov	r2, r8
    78ea:	6921      	ldr	r1, [r4, #16]
    78ec:	68a0      	ldr	r0, [r4, #8]
    78ee:	f001 fe46 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
    78f2:	3e01      	subs	r6, #1
    78f4:	2800      	cmp	r0, #0
    78f6:	dcf6      	bgt.n	78e6 <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    78f8:	6127      	str	r7, [r4, #16]
  return false;
    78fa:	2000      	movs	r0, #0
}
    78fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    7900:	2300      	movs	r3, #0
    7902:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    7904:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7906:	78a3      	ldrb	r3, [r4, #2]
    7908:	f023 0320 	bic.w	r3, r3, #32
    790c:	70a3      	strb	r3, [r4, #2]
  return true;
    790e:	2001      	movs	r0, #1
    7910:	e7f4      	b.n	78fc <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    7912:	f013 0f20 	tst.w	r3, #32
    7916:	d0cc      	beq.n	78b2 <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    7918:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    791a:	895b      	ldrh	r3, [r3, #10]
    791c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7920:	d9f0      	bls.n	7904 <FatFile::seekSet(unsigned long)+0x74>
    7922:	e7e9      	b.n	78f8 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    7924:	6a23      	ldr	r3, [r4, #32]
    7926:	4433      	add	r3, r6
    7928:	6123      	str	r3, [r4, #16]
    goto done;
    792a:	e7eb      	b.n	7904 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    792c:	1a36      	subs	r6, r6, r0
    792e:	e7d8      	b.n	78e2 <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7930:	2001      	movs	r0, #1
    7932:	e7e3      	b.n	78fc <FatFile::seekSet(unsigned long)+0x6c>

00007934 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7934:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7936:	7803      	ldrb	r3, [r0, #0]
    7938:	f013 0f10 	tst.w	r3, #16
    793c:	d101      	bne.n	7942 <FatFile::rmdir()+0xe>
  return false;
    793e:	2000      	movs	r0, #0
}
    7940:	bd38      	pop	{r3, r4, r5, pc}
    7942:	4604      	mov	r4, r0
    seekSet(0);
    7944:	2100      	movs	r1, #0
    7946:	f7ff ffa3 	bl	7890 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    794a:	2501      	movs	r5, #1
    794c:	4629      	mov	r1, r5
    794e:	4620      	mov	r0, r4
    7950:	f7ff ff7c 	bl	784c <FatFile::readDirCache(bool)>
    if (!dir) {
    7954:	4603      	mov	r3, r0
    7956:	b168      	cbz	r0, 7974 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7958:	7800      	ldrb	r0, [r0, #0]
    795a:	b170      	cbz	r0, 797a <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    795c:	282e      	cmp	r0, #46	; 0x2e
    795e:	bf18      	it	ne
    7960:	28e5      	cmpne	r0, #229	; 0xe5
    7962:	bf0c      	ite	eq
    7964:	2001      	moveq	r0, #1
    7966:	2000      	movne	r0, #0
    7968:	d0f0      	beq.n	794c <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    796a:	7adb      	ldrb	r3, [r3, #11]
    796c:	f013 0f08 	tst.w	r3, #8
    7970:	d1ec      	bne.n	794c <FatFile::rmdir()+0x18>
    7972:	e7e5      	b.n	7940 <FatFile::rmdir()+0xc>
      if (!getError()) {
    7974:	7863      	ldrb	r3, [r4, #1]
    7976:	2b00      	cmp	r3, #0
    7978:	d1e2      	bne.n	7940 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    797a:	2308      	movs	r3, #8
    797c:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    797e:	78a3      	ldrb	r3, [r4, #2]
    7980:	f043 0302 	orr.w	r3, r3, #2
    7984:	70a3      	strb	r3, [r4, #2]
  return remove();
    7986:	4620      	mov	r0, r4
    7988:	f001 f974 	bl	8c74 <FatFile::remove()>
    798c:	e7d8      	b.n	7940 <FatFile::rmdir()+0xc>

0000798e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    798e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7990:	4604      	mov	r4, r0
    7992:	460e      	mov	r6, r1
    7994:	4615      	mov	r5, r2
    7996:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7998:	2224      	movs	r2, #36	; 0x24
    799a:	2100      	movs	r1, #0
    799c:	f009 fc8a 	bl	112b4 <memset>
  m_vol = dirFile->m_vol;
    79a0:	68b0      	ldr	r0, [r6, #8]
    79a2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    79a4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    79a6:	6a33      	ldr	r3, [r6, #32]
    79a8:	60e3      	str	r3, [r4, #12]
    79aa:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    79ae:	f005 050f 	and.w	r5, r5, #15
    79b2:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    79b6:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    79b8:	f011 0f08 	tst.w	r1, #8
    79bc:	d113      	bne.n	79e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    79be:	f001 0117 	and.w	r1, r1, #23
    79c2:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    79c4:	7ad3      	ldrb	r3, [r2, #11]
    79c6:	f013 0f18 	tst.w	r3, #24
    79ca:	d102      	bne.n	79d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    79cc:	f041 0108 	orr.w	r1, r1, #8
    79d0:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    79d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    79d6:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    79d8:	f007 0303 	and.w	r3, r7, #3
    79dc:	2b01      	cmp	r3, #1
    79de:	d027      	beq.n	7a30 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    79e0:	2b02      	cmp	r3, #2
    79e2:	d027      	beq.n	7a34 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    79e4:	b11b      	cbz	r3, 79ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    79e6:	2000      	movs	r0, #0
    79e8:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    79ea:	70a0      	strb	r0, [r4, #2]
}
    79ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    79ee:	f417 6f80 	tst.w	r7, #1024	; 0x400
    79f2:	d1f8      	bne.n	79e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    79f4:	f007 0308 	and.w	r3, r7, #8
    79f8:	f043 0301 	orr.w	r3, r3, #1
    79fc:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    79fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7a00:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7a02:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7a04:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7a06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    7a0a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7a0c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    7a0e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7a10:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    7a14:	d105      	bne.n	7a22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    7a16:	2001      	movs	r0, #1
    7a18:	e7e8      	b.n	79ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7a1a:	f001 ff19 	bl	9850 <FatPartition::freeChain(unsigned long)>
    7a1e:	b9f0      	cbnz	r0, 7a5e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    7a20:	e7e1      	b.n	79e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7a22:	69e1      	ldr	r1, [r4, #28]
    7a24:	4620      	mov	r0, r4
    7a26:	f7ff ff33 	bl	7890 <FatFile::seekSet(unsigned long)>
    7a2a:	2800      	cmp	r0, #0
    7a2c:	d1de      	bne.n	79ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    7a2e:	e7da      	b.n	79e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    7a30:	2302      	movs	r3, #2
    7a32:	e000      	b.n	7a36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    7a34:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    7a36:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    7a38:	7821      	ldrb	r1, [r4, #0]
    7a3a:	f011 0f11 	tst.w	r1, #17
    7a3e:	d1d2      	bne.n	79e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7a40:	f007 0108 	and.w	r1, r7, #8
    7a44:	430b      	orrs	r3, r1
    7a46:	70a3      	strb	r3, [r4, #2]
    7a48:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7a4a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7a4c:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7a4e:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7a50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    7a54:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7a58:	d0d7      	beq.n	7a0a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7a5a:	2900      	cmp	r1, #0
    7a5c:	d1dd      	bne.n	7a1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7a5e:	78a3      	ldrb	r3, [r4, #2]
    7a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a64:	70a3      	strb	r3, [r4, #2]
    7a66:	e7d3      	b.n	7a10 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00007a68 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a6c:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    7a6e:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7a70:	2d00      	cmp	r5, #0
    7a72:	d14f      	bne.n	7b14 <FatFile::openNext(FatFile*, int)+0xac>
    7a74:	4606      	mov	r6, r0
    7a76:	460c      	mov	r4, r1
    7a78:	4692      	mov	sl, r2
    7a7a:	780b      	ldrb	r3, [r1, #0]
    7a7c:	f013 0f70 	tst.w	r3, #112	; 0x70
    7a80:	d04c      	beq.n	7b1c <FatFile::openNext(FatFile*, int)+0xb4>
    7a82:	694b      	ldr	r3, [r1, #20]
    7a84:	f013 0f1f 	tst.w	r3, #31
    7a88:	d14a      	bne.n	7b20 <FatFile::openNext(FatFile*, int)+0xb8>
    7a8a:	46a9      	mov	r9, r5
    7a8c:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    7a8e:	2700      	movs	r7, #0
    7a90:	e000      	b.n	7a94 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    7a92:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    7a94:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    7a98:	4639      	mov	r1, r7
    7a9a:	4620      	mov	r0, r4
    7a9c:	f7ff fed6 	bl	784c <FatFile::readDirCache(bool)>
    if (!dir) {
    7aa0:	4602      	mov	r2, r0
    7aa2:	2800      	cmp	r0, #0
    7aa4:	d03e      	beq.n	7b24 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    7aa6:	7803      	ldrb	r3, [r0, #0]
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	d03d      	beq.n	7b28 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7aac:	2be5      	cmp	r3, #229	; 0xe5
    7aae:	bf18      	it	ne
    7ab0:	2b2e      	cmpne	r3, #46	; 0x2e
    7ab2:	bf0c      	ite	eq
    7ab4:	2001      	moveq	r0, #1
    7ab6:	2000      	movne	r0, #0
    7ab8:	d0eb      	beq.n	7a92 <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7aba:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    7abc:	f011 0c08 	ands.w	ip, r1, #8
    7ac0:	d003      	beq.n	7aca <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    7ac2:	290f      	cmp	r1, #15
    7ac4:	d01e      	beq.n	7b04 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    7ac6:	46a9      	mov	r9, r5
    7ac8:	e7e4      	b.n	7a94 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7aca:	f1b9 0f00 	cmp.w	r9, #0
    7ace:	d00f      	beq.n	7af0 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7ad0:	1e51      	subs	r1, r2, #1
    7ad2:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7ad4:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    7ad8:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    7adc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    7ae0:	fa55 f383 	uxtab	r3, r5, r3
    7ae4:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    7ae8:	4291      	cmp	r1, r2
    7aea:	d1f3      	bne.n	7ad4 <FatFile::openNext(FatFile*, int)+0x6c>
    7aec:	45e3      	cmp	fp, ip
    7aee:	d112      	bne.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7af0:	f8cd 9000 	str.w	r9, [sp]
    7af4:	4653      	mov	r3, sl
    7af6:	f3c8 124f 	ubfx	r2, r8, #5, #16
    7afa:	4621      	mov	r1, r4
    7afc:	4630      	mov	r0, r6
    7afe:	f7ff ff46 	bl	798e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7b02:	e008      	b.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7b04:	f013 0f40 	tst.w	r3, #64	; 0x40
    7b08:	d0c4      	beq.n	7a94 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    7b0a:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    7b0e:	f892 b00d 	ldrb.w	fp, [r2, #13]
    7b12:	e7bf      	b.n	7a94 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    7b14:	2000      	movs	r0, #0
}
    7b16:	b003      	add	sp, #12
    7b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    7b1c:	2000      	movs	r0, #0
    7b1e:	e7fa      	b.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>
    7b20:	2000      	movs	r0, #0
    7b22:	e7f8      	b.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>
    7b24:	2000      	movs	r0, #0
    7b26:	e7f6      	b.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>
    7b28:	2000      	movs	r0, #0
    7b2a:	e7f4      	b.n	7b16 <FatFile::openNext(FatFile*, int)+0xae>

00007b2c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7b2c:	7803      	ldrb	r3, [r0, #0]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d049      	beq.n	7bc6 <FatFile::sync()+0x9a>
bool FatFile::sync() {
    7b32:	b530      	push	{r4, r5, lr}
    7b34:	b083      	sub	sp, #12
    7b36:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7b38:	f990 3002 	ldrsb.w	r3, [r0, #2]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	db0d      	blt.n	7b5c <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7b40:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7b42:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7b46:	f003 ff19 	bl	b97c <FsCache::sync()>
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d12e      	bne.n	7bac <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7b4e:	7863      	ldrb	r3, [r4, #1]
    7b50:	f043 0301 	orr.w	r3, r3, #1
    7b54:	7063      	strb	r3, [r4, #1]
  return false;
    7b56:	2000      	movs	r0, #0
}
    7b58:	b003      	add	sp, #12
    7b5a:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7b5c:	2101      	movs	r1, #1
    7b5e:	f7ff fd47 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7b62:	4605      	mov	r5, r0
    7b64:	2800      	cmp	r0, #0
    7b66:	d0f2      	beq.n	7b4e <FatFile::sync()+0x22>
    7b68:	7803      	ldrb	r3, [r0, #0]
    7b6a:	2be5      	cmp	r3, #229	; 0xe5
    7b6c:	d0ef      	beq.n	7b4e <FatFile::sync()+0x22>
    if (isFile()) {
    7b6e:	7823      	ldrb	r3, [r4, #0]
    7b70:	f013 0f08 	tst.w	r3, #8
    7b74:	d001      	beq.n	7b7a <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    7b76:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7b78:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7b7a:	6a23      	ldr	r3, [r4, #32]
    7b7c:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7b7e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7b80:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    7b82:	4b12      	ldr	r3, [pc, #72]	; (7bcc <FatFile::sync()+0xa0>)
    7b84:	681b      	ldr	r3, [r3, #0]
    7b86:	b163      	cbz	r3, 7ba2 <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    7b88:	f10d 0203 	add.w	r2, sp, #3
    7b8c:	a901      	add	r1, sp, #4
    7b8e:	f10d 0006 	add.w	r0, sp, #6
    7b92:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    7b94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7b98:	832b      	strh	r3, [r5, #24]
    7b9a:	826b      	strh	r3, [r5, #18]
    7b9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7ba0:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7ba2:	78a3      	ldrb	r3, [r4, #2]
    7ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7ba8:	70a3      	strb	r3, [r4, #2]
    7baa:	e7c9      	b.n	7b40 <FatFile::sync()+0x14>
    7bac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    7bb0:	f003 fee4 	bl	b97c <FsCache::sync()>
    7bb4:	2800      	cmp	r0, #0
    7bb6:	d0ca      	beq.n	7b4e <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    7bb8:	6828      	ldr	r0, [r5, #0]
    7bba:	6803      	ldr	r3, [r0, #0]
    7bbc:	6a1b      	ldr	r3, [r3, #32]
    7bbe:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d1c9      	bne.n	7b58 <FatFile::sync()+0x2c>
 fail:
    7bc4:	e7c3      	b.n	7b4e <FatFile::sync()+0x22>
    return true;
    7bc6:	2001      	movs	r0, #1
}
    7bc8:	4770      	bx	lr
    7bca:	bf00      	nop
    7bcc:	20004b64 	.word	0x20004b64

00007bd0 <FatFile::close()>:
bool FatFile::close() {
    7bd0:	b510      	push	{r4, lr}
    7bd2:	4604      	mov	r4, r0
  bool rtn = sync();
    7bd4:	f7ff ffaa 	bl	7b2c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7bd8:	2300      	movs	r3, #0
    7bda:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7bdc:	70a3      	strb	r3, [r4, #2]
}
    7bde:	bd10      	pop	{r4, pc}

00007be0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7be2:	b095      	sub	sp, #84	; 0x54
    7be4:	9201      	str	r2, [sp, #4]
    7be6:	461f      	mov	r7, r3
  FatFile() {}
    7be8:	2300      	movs	r3, #0
    7bea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7bee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    7bf2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    7bf6:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    7bfa:	7803      	ldrb	r3, [r0, #0]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d14e      	bne.n	7c9e <FatFile::open(FatFile*, char const*, int)+0xbe>
    7c00:	4604      	mov	r4, r0
    7c02:	460d      	mov	r5, r1
    7c04:	780b      	ldrb	r3, [r1, #0]
    7c06:	f013 0f70 	tst.w	r3, #112	; 0x70
    7c0a:	d04c      	beq.n	7ca6 <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    7c0c:	4613      	mov	r3, r2
    7c0e:	7812      	ldrb	r2, [r2, #0]
    7c10:	2a2f      	cmp	r2, #47	; 0x2f
    7c12:	d028      	beq.n	7c66 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7c14:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    7c16:	ab01      	add	r3, sp, #4
    7c18:	aa02      	add	r2, sp, #8
    7c1a:	9901      	ldr	r1, [sp, #4]
    7c1c:	4620      	mov	r0, r4
    7c1e:	f000 ffbb 	bl	8b98 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7c22:	4603      	mov	r3, r0
    7c24:	2800      	cmp	r0, #0
    7c26:	d03b      	beq.n	7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    7c28:	9b01      	ldr	r3, [sp, #4]
    7c2a:	781b      	ldrb	r3, [r3, #0]
    7c2c:	b37b      	cbz	r3, 7c8e <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7c2e:	4633      	mov	r3, r6
    7c30:	aa02      	add	r2, sp, #8
    7c32:	4629      	mov	r1, r5
    7c34:	4620      	mov	r0, r4
    7c36:	f000 fe2f 	bl	8898 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c3a:	4603      	mov	r3, r0
    7c3c:	b380      	cbz	r0, 7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    7c3e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7c42:	46a6      	mov	lr, r4
    7c44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c54:	f8de 3000 	ldr.w	r3, [lr]
    7c58:	f8cc 3000 	str.w	r3, [ip]
    close();
    7c5c:	4620      	mov	r0, r4
    7c5e:	f7ff ffb7 	bl	7bd0 <FatFile::close()>
    dirFile = &tmpDir;
    7c62:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7c64:	e7d7      	b.n	7c16 <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    7c66:	3301      	adds	r3, #1
    7c68:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7c6a:	781a      	ldrb	r2, [r3, #0]
    7c6c:	2a2f      	cmp	r2, #47	; 0x2f
    7c6e:	d0fa      	beq.n	7c66 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    7c70:	b92a      	cbnz	r2, 7c7e <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    7c72:	68a9      	ldr	r1, [r5, #8]
    7c74:	4620      	mov	r0, r4
    7c76:	f7ff fccc 	bl	7612 <FatFile::openRoot(FatVolume*)>
    7c7a:	4603      	mov	r3, r0
    7c7c:	e010      	b.n	7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7c7e:	68a9      	ldr	r1, [r5, #8]
    7c80:	a80b      	add	r0, sp, #44	; 0x2c
    7c82:	f7ff fcc6 	bl	7612 <FatFile::openRoot(FatVolume*)>
    7c86:	4603      	mov	r3, r0
    7c88:	b150      	cbz	r0, 7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    7c8a:	ad0b      	add	r5, sp, #44	; 0x2c
    7c8c:	e7c2      	b.n	7c14 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    7c8e:	463b      	mov	r3, r7
    7c90:	aa02      	add	r2, sp, #8
    7c92:	4629      	mov	r1, r5
    7c94:	4620      	mov	r0, r4
    7c96:	f000 fdff 	bl	8898 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c9a:	4603      	mov	r3, r0
    7c9c:	e000      	b.n	7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    7c9e:	2300      	movs	r3, #0
}
    7ca0:	4618      	mov	r0, r3
    7ca2:	b015      	add	sp, #84	; 0x54
    7ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7ca6:	2300      	movs	r3, #0
    7ca8:	e7fa      	b.n	7ca0 <FatFile::open(FatFile*, char const*, int)+0xc0>

00007caa <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7caa:	b129      	cbz	r1, 7cb8 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    7cac:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    7cae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    7cb2:	f7ff ff95 	bl	7be0 <FatFile::open(FatFile*, char const*, int)>
}
    7cb6:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    7cb8:	2000      	movs	r0, #0
}
    7cba:	4770      	bx	lr

00007cbc <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7cbc:	b570      	push	{r4, r5, r6, lr}
    7cbe:	4605      	mov	r5, r0
    7cc0:	460c      	mov	r4, r1
  if (!sync()) {
    7cc2:	f7ff ff33 	bl	7b2c <FatFile::sync()>
    7cc6:	4606      	mov	r6, r0
    7cc8:	b908      	cbnz	r0, 7cce <FatFile::dirEntry(DirFat_t*)+0x12>
}
    7cca:	4630      	mov	r0, r6
    7ccc:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7cce:	2100      	movs	r1, #0
    7cd0:	4628      	mov	r0, r5
    7cd2:	f7ff fc8d 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7cd6:	4603      	mov	r3, r0
    7cd8:	b180      	cbz	r0, 7cfc <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    7cda:	6805      	ldr	r5, [r0, #0]
    7cdc:	6840      	ldr	r0, [r0, #4]
    7cde:	6899      	ldr	r1, [r3, #8]
    7ce0:	68da      	ldr	r2, [r3, #12]
    7ce2:	6025      	str	r5, [r4, #0]
    7ce4:	6060      	str	r0, [r4, #4]
    7ce6:	60a1      	str	r1, [r4, #8]
    7ce8:	60e2      	str	r2, [r4, #12]
    7cea:	691d      	ldr	r5, [r3, #16]
    7cec:	6958      	ldr	r0, [r3, #20]
    7cee:	6999      	ldr	r1, [r3, #24]
    7cf0:	69da      	ldr	r2, [r3, #28]
    7cf2:	6125      	str	r5, [r4, #16]
    7cf4:	6160      	str	r0, [r4, #20]
    7cf6:	61a1      	str	r1, [r4, #24]
    7cf8:	61e2      	str	r2, [r4, #28]
  return true;
    7cfa:	e7e6      	b.n	7cca <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    7cfc:	2600      	movs	r6, #0
    7cfe:	e7e4      	b.n	7cca <FatFile::dirEntry(DirFat_t*)+0xe>

00007d00 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7d00:	b530      	push	{r4, r5, lr}
    7d02:	b089      	sub	sp, #36	; 0x24
    7d04:	460d      	mov	r5, r1
    7d06:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7d08:	4669      	mov	r1, sp
    7d0a:	f7ff ffd7 	bl	7cbc <FatFile::dirEntry(DirFat_t*)>
    7d0e:	b128      	cbz	r0, 7d1c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7d10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7d14:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7d16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d1a:	8023      	strh	r3, [r4, #0]
}
    7d1c:	b009      	add	sp, #36	; 0x24
    7d1e:	bd30      	pop	{r4, r5, pc}

00007d20 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7d20:	b530      	push	{r4, r5, lr}
    7d22:	b089      	sub	sp, #36	; 0x24
    7d24:	460d      	mov	r5, r1
    7d26:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7d28:	4669      	mov	r1, sp
    7d2a:	f7ff ffc7 	bl	7cbc <FatFile::dirEntry(DirFat_t*)>
    7d2e:	b128      	cbz	r0, 7d3c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7d30:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    7d34:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7d36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7d3a:	8023      	strh	r3, [r4, #0]
}
    7d3c:	b009      	add	sp, #36	; 0x24
    7d3e:	bd30      	pop	{r4, r5, pc}

00007d40 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7d40:	780b      	ldrb	r3, [r1, #0]
    7d42:	f013 0f70 	tst.w	r3, #112	; 0x70
    7d46:	d101      	bne.n	7d4c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    7d48:	2000      	movs	r0, #0
}
    7d4a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d4e:	b089      	sub	sp, #36	; 0x24
    7d50:	4604      	mov	r4, r0
    7d52:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7d54:	f640 2302 	movw	r3, #2562	; 0xa02
    7d58:	f000 fd9e 	bl	8898 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7d5c:	b908      	cbnz	r0, 7d62 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    7d5e:	b009      	add	sp, #36	; 0x24
    7d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    7d62:	2301      	movs	r3, #1
    7d64:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7d66:	2310      	movs	r3, #16
    7d68:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7d6a:	4620      	mov	r0, r4
    7d6c:	f7ff fbfe 	bl	756c <FatFile::addDirCluster()>
    7d70:	2800      	cmp	r0, #0
    7d72:	d0f4      	beq.n	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    7d74:	6923      	ldr	r3, [r4, #16]
    7d76:	6223      	str	r3, [r4, #32]
    seekSet(0);
    7d78:	2100      	movs	r1, #0
    7d7a:	4620      	mov	r0, r4
    7d7c:	f7ff fd88 	bl	7890 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7d80:	4620      	mov	r0, r4
    7d82:	f7ff fed3 	bl	7b2c <FatFile::sync()>
    7d86:	2800      	cmp	r0, #0
    7d88:	d0e9      	beq.n	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7d8a:	2101      	movs	r1, #1
    7d8c:	4620      	mov	r0, r4
    7d8e:	f7ff fc2f 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7d92:	4686      	mov	lr, r0
    7d94:	2800      	cmp	r0, #0
    7d96:	d07b      	beq.n	7e90 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7d98:	2310      	movs	r3, #16
    7d9a:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7d9c:	46ec      	mov	ip, sp
    7d9e:	6800      	ldr	r0, [r0, #0]
    7da0:	f8de 1004 	ldr.w	r1, [lr, #4]
    7da4:	f8de 2008 	ldr.w	r2, [lr, #8]
    7da8:	f8de 300c 	ldr.w	r3, [lr, #12]
    7dac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7db0:	f8de 0010 	ldr.w	r0, [lr, #16]
    7db4:	f8de 1014 	ldr.w	r1, [lr, #20]
    7db8:	f8de 2018 	ldr.w	r2, [lr, #24]
    7dbc:	f8de 301c 	ldr.w	r3, [lr, #28]
    7dc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7dc4:	f8be 6014 	ldrh.w	r6, [lr, #20]
    7dc8:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    7dcc:	232e      	movs	r3, #46	; 0x2e
    7dce:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    7dd2:	466b      	mov	r3, sp
    7dd4:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    7dd8:	2220      	movs	r2, #32
    7dda:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    7dde:	428b      	cmp	r3, r1
    7de0:	d1fb      	bne.n	7dda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    7de2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7de4:	6a23      	ldr	r3, [r4, #32]
    7de6:	3b02      	subs	r3, #2
    7de8:	7982      	ldrb	r2, [r0, #6]
    7dea:	4093      	lsls	r3, r2
    7dec:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7dee:	2201      	movs	r2, #1
    7df0:	4419      	add	r1, r3
    7df2:	3028      	adds	r0, #40	; 0x28
    7df4:	f003 fde9 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7df8:	4684      	mov	ip, r0
    7dfa:	2800      	cmp	r0, #0
    7dfc:	d04a      	beq.n	7e94 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    7dfe:	f8ad 6014 	strh.w	r6, [sp, #20]
    7e02:	f8ad 701a 	strh.w	r7, [sp, #26]
    7e06:	46ee      	mov	lr, sp
    7e08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e0c:	f8cc 0000 	str.w	r0, [ip]
    7e10:	f8cc 1004 	str.w	r1, [ip, #4]
    7e14:	f8cc 2008 	str.w	r2, [ip, #8]
    7e18:	f8cc 300c 	str.w	r3, [ip, #12]
    7e1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e20:	f8cc 0010 	str.w	r0, [ip, #16]
    7e24:	f8cc 1014 	str.w	r1, [ip, #20]
    7e28:	f8cc 2018 	str.w	r2, [ip, #24]
    7e2c:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    7e30:	232e      	movs	r3, #46	; 0x2e
    7e32:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7e36:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7e38:	0c1a      	lsrs	r2, r3, #16
    7e3a:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7e3e:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7e42:	466d      	mov	r5, sp
    7e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7e46:	f8cc 0020 	str.w	r0, [ip, #32]
    7e4a:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    7e4e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7e52:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7e58:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    7e5c:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    7e60:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7e64:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7e68:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7e6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7e6e:	f003 fd85 	bl	b97c <FsCache::sync()>
    7e72:	2800      	cmp	r0, #0
    7e74:	f43f af73 	beq.w	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7e78:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7e7c:	f003 fd7e 	bl	b97c <FsCache::sync()>
    7e80:	2800      	cmp	r0, #0
    7e82:	f43f af6c 	beq.w	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    7e86:	6820      	ldr	r0, [r4, #0]
    7e88:	6803      	ldr	r3, [r0, #0]
    7e8a:	6a1b      	ldr	r3, [r3, #32]
    7e8c:	4798      	blx	r3
    7e8e:	e766      	b.n	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    7e90:	2000      	movs	r0, #0
    7e92:	e764      	b.n	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7e94:	2000      	movs	r0, #0
    7e96:	e762      	b.n	7d5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

00007e98 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e9a:	b095      	sub	sp, #84	; 0x54
    7e9c:	9201      	str	r2, [sp, #4]
    7e9e:	461e      	mov	r6, r3
    7ea0:	2300      	movs	r3, #0
    7ea2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    7ea6:	f88d 3008 	strb.w	r3, [sp, #8]
    7eaa:	f88d 3009 	strb.w	r3, [sp, #9]
    7eae:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    7eb2:	7803      	ldrb	r3, [r0, #0]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d150      	bne.n	7f5a <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    7eb8:	4604      	mov	r4, r0
    7eba:	460d      	mov	r5, r1
    7ebc:	780b      	ldrb	r3, [r1, #0]
    7ebe:	f013 0f70 	tst.w	r3, #112	; 0x70
    7ec2:	d04e      	beq.n	7f62 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    7ec4:	4613      	mov	r3, r2
    7ec6:	7812      	ldrb	r2, [r2, #0]
    7ec8:	2a2f      	cmp	r2, #47	; 0x2f
    7eca:	d001      	beq.n	7ed0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    7ecc:	2700      	movs	r7, #0
    7ece:	e020      	b.n	7f12 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    7ed0:	3301      	adds	r3, #1
    7ed2:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7ed4:	781a      	ldrb	r2, [r3, #0]
    7ed6:	2a2f      	cmp	r2, #47	; 0x2f
    7ed8:	d0fa      	beq.n	7ed0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7eda:	68a9      	ldr	r1, [r5, #8]
    7edc:	a802      	add	r0, sp, #8
    7ede:	f7ff fb98 	bl	7612 <FatFile::openRoot(FatVolume*)>
    7ee2:	4602      	mov	r2, r0
    7ee4:	2800      	cmp	r0, #0
    7ee6:	d039      	beq.n	7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    7ee8:	ad02      	add	r5, sp, #8
    7eea:	e7ef      	b.n	7ecc <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    7eec:	f10d 0c08 	add.w	ip, sp, #8
    7ef0:	46a6      	mov	lr, r4
    7ef2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7ef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7efa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7efe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7f02:	f8de 3000 	ldr.w	r3, [lr]
    7f06:	f8cc 3000 	str.w	r3, [ip]
    close();
    7f0a:	4620      	mov	r0, r4
    7f0c:	f7ff fe60 	bl	7bd0 <FatFile::close()>
    parent = &tmpDir;
    7f10:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7f12:	ab01      	add	r3, sp, #4
    7f14:	aa0b      	add	r2, sp, #44	; 0x2c
    7f16:	9901      	ldr	r1, [sp, #4]
    7f18:	4620      	mov	r0, r4
    7f1a:	f000 fe3d 	bl	8b98 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7f1e:	4602      	mov	r2, r0
    7f20:	b1e0      	cbz	r0, 7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    7f22:	9b01      	ldr	r3, [sp, #4]
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	b18b      	cbz	r3, 7f4c <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    7f28:	463b      	mov	r3, r7
    7f2a:	aa0b      	add	r2, sp, #44	; 0x2c
    7f2c:	4629      	mov	r1, r5
    7f2e:	4620      	mov	r0, r4
    7f30:	f000 fcb2 	bl	8898 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7f34:	2800      	cmp	r0, #0
    7f36:	d1d9      	bne.n	7eec <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    7f38:	b1ae      	cbz	r6, 7f66 <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    7f3a:	aa0b      	add	r2, sp, #44	; 0x2c
    7f3c:	4629      	mov	r1, r5
    7f3e:	4620      	mov	r0, r4
    7f40:	f7ff fefe 	bl	7d40 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7f44:	4602      	mov	r2, r0
    7f46:	2800      	cmp	r0, #0
    7f48:	d1d0      	bne.n	7eec <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    7f4a:	e007      	b.n	7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    7f4c:	aa0b      	add	r2, sp, #44	; 0x2c
    7f4e:	4629      	mov	r1, r5
    7f50:	4620      	mov	r0, r4
    7f52:	f7ff fef5 	bl	7d40 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7f56:	4602      	mov	r2, r0
    7f58:	e000      	b.n	7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    7f5a:	2200      	movs	r2, #0
}
    7f5c:	4610      	mov	r0, r2
    7f5e:	b015      	add	sp, #84	; 0x54
    7f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7f62:	2200      	movs	r2, #0
    7f64:	e7fa      	b.n	7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    7f66:	4632      	mov	r2, r6
    7f68:	e7f8      	b.n	7f5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

00007f6a <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7f6a:	b570      	push	{r4, r5, r6, lr}
    7f6c:	b09a      	sub	sp, #104	; 0x68
    7f6e:	2300      	movs	r3, #0
    7f70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7f74:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    7f78:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    7f7c:	f88d 3000 	strb.w	r3, [sp]
    7f80:	f88d 3001 	strb.w	r3, [sp, #1]
    7f84:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    7f88:	7803      	ldrb	r3, [r0, #0]
    7f8a:	f013 0f18 	tst.w	r3, #24
    7f8e:	f000 80e3 	beq.w	8158 <FatFile::rename(FatFile*, char const*)+0x1ee>
    7f92:	4604      	mov	r4, r0
    7f94:	460d      	mov	r5, r1
    7f96:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    7f98:	6882      	ldr	r2, [r0, #8]
    7f9a:	688b      	ldr	r3, [r1, #8]
    7f9c:	429a      	cmp	r2, r3
    7f9e:	d002      	beq.n	7fa6 <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    7fa0:	2000      	movs	r0, #0
}
    7fa2:	b01a      	add	sp, #104	; 0x68
    7fa4:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    7fa6:	f7ff fdc1 	bl	7b2c <FatFile::sync()>
  oldFile = *this;
    7faa:	46ec      	mov	ip, sp
    7fac:	46a6      	mov	lr, r4
    7fae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7fba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fbe:	f8de 3000 	ldr.w	r3, [lr]
    7fc2:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7fc6:	2100      	movs	r1, #0
    7fc8:	4620      	mov	r0, r4
    7fca:	f7ff fb11 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7fce:	4686      	mov	lr, r0
    7fd0:	2800      	cmp	r0, #0
    7fd2:	f000 80c3 	beq.w	815c <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    7fd6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    7fda:	6800      	ldr	r0, [r0, #0]
    7fdc:	f8de 1004 	ldr.w	r1, [lr, #4]
    7fe0:	f8de 2008 	ldr.w	r2, [lr, #8]
    7fe4:	f8de 300c 	ldr.w	r3, [lr, #12]
    7fe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fec:	f8de 0010 	ldr.w	r0, [lr, #16]
    7ff0:	f8de 1014 	ldr.w	r1, [lr, #20]
    7ff4:	f8de 2018 	ldr.w	r2, [lr, #24]
    7ff8:	f8de 301c 	ldr.w	r3, [lr, #28]
    7ffc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8000:	7823      	ldrb	r3, [r4, #0]
    8002:	f013 0f08 	tst.w	r3, #8
    8006:	d00a      	beq.n	801e <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8008:	f640 2301 	movw	r3, #2561	; 0xa01
    800c:	4632      	mov	r2, r6
    800e:	4629      	mov	r1, r5
    8010:	a809      	add	r0, sp, #36	; 0x24
    8012:	f7ff fde5 	bl	7be0 <FatFile::open(FatFile*, char const*, int)>
    8016:	2800      	cmp	r0, #0
    8018:	d0c3      	beq.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    801a:	2600      	movs	r6, #0
    801c:	e008      	b.n	8030 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    801e:	2300      	movs	r3, #0
    8020:	4632      	mov	r2, r6
    8022:	4629      	mov	r1, r5
    8024:	a809      	add	r0, sp, #36	; 0x24
    8026:	f7ff ff37 	bl	7e98 <FatFile::mkdir(FatFile*, char const*, bool)>
    802a:	2800      	cmp	r0, #0
    802c:	d0b9      	beq.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    802e:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    8030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8032:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    8034:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8038:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    803a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    803e:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    8040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8042:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    8044:	2300      	movs	r3, #0
    8046:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    804a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    804e:	2101      	movs	r1, #1
    8050:	4620      	mov	r0, r4
    8052:	f7ff facd 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8056:	4603      	mov	r3, r0
    8058:	2800      	cmp	r0, #0
    805a:	f000 8081 	beq.w	8160 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    805e:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    8062:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    8066:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    806a:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    806e:	f8c3 500d 	str.w	r5, [r3, #13]
    8072:	f8c3 0011 	str.w	r0, [r3, #17]
    8076:	f8c3 1015 	str.w	r1, [r3, #21]
    807a:	f8c3 2019 	str.w	r2, [r3, #25]
    807e:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    8082:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    8086:	f8a3 101d 	strh.w	r1, [r3, #29]
    808a:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    808c:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    8090:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    8092:	2e00      	cmp	r6, #0
    8094:	d03e      	beq.n	8114 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    8096:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8098:	1eb3      	subs	r3, r6, #2
    809a:	7982      	ldrb	r2, [r0, #6]
    809c:	4093      	lsls	r3, r2
    809e:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    80a0:	2200      	movs	r2, #0
    80a2:	4419      	add	r1, r3
    80a4:	3028      	adds	r0, #40	; 0x28
    80a6:	f003 fc90 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    80aa:	4684      	mov	ip, r0
    80ac:	2800      	cmp	r0, #0
    80ae:	d059      	beq.n	8164 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    80b0:	ad12      	add	r5, sp, #72	; 0x48
    80b2:	6a00      	ldr	r0, [r0, #32]
    80b4:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    80b8:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    80bc:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    80c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    80c2:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    80c6:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    80ca:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    80ce:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    80d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    80d4:	4631      	mov	r1, r6
    80d6:	68a0      	ldr	r0, [r4, #8]
    80d8:	f001 fbba 	bl	9850 <FatPartition::freeChain(unsigned long)>
    80dc:	2800      	cmp	r0, #0
    80de:	f43f af60 	beq.w	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    80e2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    80e4:	6a23      	ldr	r3, [r4, #32]
    80e6:	3b02      	subs	r3, #2
    80e8:	7982      	ldrb	r2, [r0, #6]
    80ea:	4093      	lsls	r3, r2
    80ec:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    80ee:	2201      	movs	r2, #1
    80f0:	4419      	add	r1, r3
    80f2:	3028      	adds	r0, #40	; 0x28
    80f4:	f003 fc69 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    80f8:	4606      	mov	r6, r0
    80fa:	2800      	cmp	r0, #0
    80fc:	d034      	beq.n	8168 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    80fe:	ad12      	add	r5, sp, #72	; 0x48
    8100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8102:	6230      	str	r0, [r6, #32]
    8104:	6271      	str	r1, [r6, #36]	; 0x24
    8106:	62b2      	str	r2, [r6, #40]	; 0x28
    8108:	62f3      	str	r3, [r6, #44]	; 0x2c
    810a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    810c:	6330      	str	r0, [r6, #48]	; 0x30
    810e:	6371      	str	r1, [r6, #52]	; 0x34
    8110:	63b2      	str	r2, [r6, #56]	; 0x38
    8112:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8114:	2300      	movs	r3, #0
    8116:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    8118:	2302      	movs	r3, #2
    811a:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    811e:	2308      	movs	r3, #8
    8120:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    8124:	4668      	mov	r0, sp
    8126:	f000 fda5 	bl	8c74 <FatFile::remove()>
    812a:	2800      	cmp	r0, #0
    812c:	f43f af39 	beq.w	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    8130:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8132:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8136:	f003 fc21 	bl	b97c <FsCache::sync()>
    813a:	2800      	cmp	r0, #0
    813c:	f43f af31 	beq.w	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    8140:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8144:	f003 fc1a 	bl	b97c <FsCache::sync()>
    8148:	2800      	cmp	r0, #0
    814a:	f43f af2a 	beq.w	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    814e:	6820      	ldr	r0, [r4, #0]
    8150:	6803      	ldr	r3, [r0, #0]
    8152:	6a1b      	ldr	r3, [r3, #32]
    8154:	4798      	blx	r3
    8156:	e724      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    8158:	2000      	movs	r0, #0
    815a:	e722      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    815c:	2000      	movs	r0, #0
    815e:	e720      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    8160:	2000      	movs	r0, #0
    8162:	e71e      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    8164:	2000      	movs	r0, #0
    8166:	e71c      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>
    8168:	2000      	movs	r0, #0
    816a:	e71a      	b.n	7fa2 <FatFile::rename(FatFile*, char const*)+0x38>

0000816c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8170:	b083      	sub	sp, #12
    8172:	9101      	str	r1, [sp, #4]
    8174:	461e      	mov	r6, r3
    8176:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    817a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    817e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    8182:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    8186:	7803      	ldrb	r3, [r0, #0]
    8188:	f013 0f08 	tst.w	r3, #8
    818c:	d060      	beq.n	8250 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    818e:	4605      	mov	r5, r0
      || year > 2107
    8190:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    8194:	b294      	uxth	r4, r2
    8196:	2c7f      	cmp	r4, #127	; 0x7f
    8198:	d85e      	bhi.n	8258 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    819a:	1e73      	subs	r3, r6, #1
    819c:	b2db      	uxtb	r3, r3
    819e:	2b0b      	cmp	r3, #11
    81a0:	d85c      	bhi.n	825c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    81a2:	1e7b      	subs	r3, r7, #1
    81a4:	b2db      	uxtb	r3, r3
    81a6:	2b1e      	cmp	r3, #30
    81a8:	d85a      	bhi.n	8260 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    81aa:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    81ae:	bf98      	it	ls
    81b0:	f1b9 0f17 	cmpls.w	r9, #23
    81b4:	bf8c      	ite	hi
    81b6:	f04f 0b01 	movhi.w	fp, #1
    81ba:	f04f 0b00 	movls.w	fp, #0
    81be:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    81c2:	bf88      	it	hi
    81c4:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    81c8:	f1bb 0f00 	cmp.w	fp, #0
    81cc:	d001      	beq.n	81d2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    81ce:	2000      	movs	r0, #0
    81d0:	e03f      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    81d2:	f7ff fcab 	bl	7b2c <FatFile::sync()>
    81d6:	2800      	cmp	r0, #0
    81d8:	d03b      	beq.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    81da:	2101      	movs	r1, #1
    81dc:	4628      	mov	r0, r5
    81de:	f7ff fa07 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    81e2:	4601      	mov	r1, r0
    81e4:	2800      	cmp	r0, #0
    81e6:	d03d      	beq.n	8264 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    81e8:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    81ec:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    81f0:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    81f2:	ea4f 0258 	mov.w	r2, r8, lsr #1
    81f6:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    81fa:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    81fe:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    8200:	9801      	ldr	r0, [sp, #4]
    8202:	f010 0f01 	tst.w	r0, #1
    8206:	bf18      	it	ne
    8208:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    820a:	9801      	ldr	r0, [sp, #4]
    820c:	f010 0f02 	tst.w	r0, #2
    8210:	d008      	beq.n	8224 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    8212:	820b      	strh	r3, [r1, #16]
    8214:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    8216:	f018 0801 	ands.w	r8, r8, #1
    821a:	bf18      	it	ne
    821c:	f04f 0864 	movne.w	r8, #100	; 0x64
    8220:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    8224:	9801      	ldr	r0, [sp, #4]
    8226:	f010 0f04 	tst.w	r0, #4
    822a:	d001      	beq.n	8230 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    822c:	830b      	strh	r3, [r1, #24]
    822e:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    8230:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8232:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8236:	f003 fba1 	bl	b97c <FsCache::sync()>
    823a:	b150      	cbz	r0, 8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    823c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8240:	f003 fb9c 	bl	b97c <FsCache::sync()>
    8244:	b128      	cbz	r0, 8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    8246:	6820      	ldr	r0, [r4, #0]
    8248:	6803      	ldr	r3, [r0, #0]
    824a:	6a1b      	ldr	r3, [r3, #32]
    824c:	4798      	blx	r3
    824e:	e000      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    8250:	2000      	movs	r0, #0
}
    8252:	b003      	add	sp, #12
    8254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8258:	2000      	movs	r0, #0
    825a:	e7fa      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    825c:	2000      	movs	r0, #0
    825e:	e7f8      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8260:	2000      	movs	r0, #0
    8262:	e7f6      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8264:	4658      	mov	r0, fp
    8266:	e7f4      	b.n	8252 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

00008268 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    8268:	7883      	ldrb	r3, [r0, #2]
    826a:	f013 0f02 	tst.w	r3, #2
    826e:	d02f      	beq.n	82d0 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    8270:	b510      	push	{r4, lr}
    8272:	b082      	sub	sp, #8
    8274:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    8276:	6a01      	ldr	r1, [r0, #32]
    8278:	b361      	cbz	r1, 82d4 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    827a:	6903      	ldr	r3, [r0, #16]
    827c:	b93b      	cbnz	r3, 828e <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    827e:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    8280:	2300      	movs	r3, #0
    8282:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    8284:	68a0      	ldr	r0, [r4, #8]
    8286:	f001 fae3 	bl	9850 <FatPartition::freeChain(unsigned long)>
    828a:	b968      	cbnz	r0, 82a8 <FatFile::truncate()+0x40>
    828c:	e015      	b.n	82ba <FatFile::truncate()+0x52>
    toFree = 0;
    828e:	2200      	movs	r2, #0
    8290:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    8292:	aa01      	add	r2, sp, #4
    8294:	4619      	mov	r1, r3
    8296:	6880      	ldr	r0, [r0, #8]
    8298:	f001 f971 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    829c:	2800      	cmp	r0, #0
    829e:	db1b      	blt.n	82d8 <FatFile::truncate()+0x70>
    if (fg) {
    82a0:	b968      	cbnz	r0, 82be <FatFile::truncate()+0x56>
  if (toFree) {
    82a2:	9901      	ldr	r1, [sp, #4]
    82a4:	2900      	cmp	r1, #0
    82a6:	d1ed      	bne.n	8284 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    82a8:	6963      	ldr	r3, [r4, #20]
    82aa:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    82ac:	78a3      	ldrb	r3, [r4, #2]
    82ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    82b2:	70a3      	strb	r3, [r4, #2]
  return sync();
    82b4:	4620      	mov	r0, r4
    82b6:	f7ff fc39 	bl	7b2c <FatFile::sync()>

 fail:
  return false;
}
    82ba:	b002      	add	sp, #8
    82bc:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    82be:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    82c2:	6921      	ldr	r1, [r4, #16]
    82c4:	68a0      	ldr	r0, [r4, #8]
    82c6:	f001 f9e9 	bl	969c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    82ca:	2800      	cmp	r0, #0
    82cc:	d1e9      	bne.n	82a2 <FatFile::truncate()+0x3a>
    82ce:	e7f4      	b.n	82ba <FatFile::truncate()+0x52>
  return false;
    82d0:	2000      	movs	r0, #0
}
    82d2:	4770      	bx	lr
      return true;
    82d4:	2001      	movs	r0, #1
    82d6:	e7f0      	b.n	82ba <FatFile::truncate()+0x52>
  return false;
    82d8:	2000      	movs	r0, #0
    82da:	e7ee      	b.n	82ba <FatFile::truncate()+0x52>

000082dc <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    82dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82e0:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    82e2:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    82e4:	f013 0f02 	tst.w	r3, #2
    82e8:	d017      	beq.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
    82ea:	4688      	mov	r8, r1
    82ec:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    82ee:	f013 0f08 	tst.w	r3, #8
    82f2:	d10d      	bne.n	8310 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    82f4:	6963      	ldr	r3, [r4, #20]
    82f6:	43db      	mvns	r3, r3
    82f8:	454b      	cmp	r3, r9
    82fa:	d30e      	bcc.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    82fc:	f1b9 0f00 	cmp.w	r9, #0
    8300:	f000 80ac 	beq.w	845c <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    8304:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8306:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    830a:	f04f 0a01 	mov.w	sl, #1
    830e:	e064      	b.n	83da <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    8310:	69c1      	ldr	r1, [r0, #28]
    8312:	f7ff fabd 	bl	7890 <FatFile::seekSet(unsigned long)>
    8316:	2800      	cmp	r0, #0
    8318:	d1ec      	bne.n	82f4 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    831a:	7863      	ldrb	r3, [r4, #1]
    831c:	f043 0301 	orr.w	r3, r3, #1
    8320:	7063      	strb	r3, [r4, #1]
  return 0;
    8322:	2000      	movs	r0, #0
}
    8324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8328:	465a      	mov	r2, fp
    832a:	f001 f928 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    832e:	2800      	cmp	r0, #0
    8330:	dbf3      	blt.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    8332:	b938      	cbnz	r0, 8344 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8334:	4620      	mov	r0, r4
    8336:	f7ff f8fb 	bl	7530 <FatFile::addCluster()>
    833a:	b918      	cbnz	r0, 8344 <FatFile::write(void const*, unsigned int)+0x68>
    833c:	e7ed      	b.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    833e:	6a23      	ldr	r3, [r4, #32]
    8340:	b1eb      	cbz	r3, 837e <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    8342:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8344:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8346:	6921      	ldr	r1, [r4, #16]
    8348:	3902      	subs	r1, #2
    834a:	7983      	ldrb	r3, [r0, #6]
    834c:	4099      	lsls	r1, r3
    834e:	6943      	ldr	r3, [r0, #20]
    8350:	4419      	add	r1, r3
                      + sectorOfCluster;
    8352:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8354:	b916      	cbnz	r6, 835c <FatFile::write(void const*, unsigned int)+0x80>
    8356:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    835a:	d218      	bcs.n	838e <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    835c:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    8360:	42bd      	cmp	r5, r7
    8362:	bf28      	it	cs
    8364:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    8366:	bb16      	cbnz	r6, 83ae <FatFile::write(void const*, unsigned int)+0xd2>
    8368:	6962      	ldr	r2, [r4, #20]
    836a:	69e3      	ldr	r3, [r4, #28]
    836c:	429a      	cmp	r2, r3
    836e:	d24b      	bcs.n	8408 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    8370:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8372:	f013 0f20 	tst.w	r3, #32
    8376:	bf0c      	ite	eq
    8378:	2201      	moveq	r2, #1
    837a:	2205      	movne	r2, #5
    837c:	e018      	b.n	83b0 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    837e:	4620      	mov	r0, r4
    8380:	f7ff f8d6 	bl	7530 <FatFile::addCluster()>
    8384:	2800      	cmp	r0, #0
    8386:	d0c8      	beq.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    8388:	6923      	ldr	r3, [r4, #16]
    838a:	6223      	str	r3, [r4, #32]
    838c:	e7da      	b.n	8344 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    838e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    8392:	d241      	bcs.n	8418 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    8394:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8396:	4299      	cmp	r1, r3
    8398:	d059      	beq.n	844e <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    839a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    839c:	6803      	ldr	r3, [r0, #0]
    839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    83a0:	4642      	mov	r2, r8
    83a2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    83a4:	2800      	cmp	r0, #0
    83a6:	d0b8      	beq.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    83a8:	f44f 7500 	mov.w	r5, #512	; 0x200
    83ac:	e00f      	b.n	83ce <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    83ae:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    83b0:	3028      	adds	r0, #40	; 0x28
    83b2:	f003 fb0a 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    83b6:	2800      	cmp	r0, #0
    83b8:	d0af      	beq.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    83ba:	462a      	mov	r2, r5
    83bc:	4641      	mov	r1, r8
    83be:	4430      	add	r0, r6
    83c0:	f004 feae 	bl	d120 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    83c4:	68a0      	ldr	r0, [r4, #8]
    83c6:	442e      	add	r6, r5
    83c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    83cc:	d01e      	beq.n	840c <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    83ce:	6963      	ldr	r3, [r4, #20]
    83d0:	442b      	add	r3, r5
    83d2:	6163      	str	r3, [r4, #20]
    src += n;
    83d4:	44a8      	add	r8, r5
  while (nToWrite) {
    83d6:	1b7f      	subs	r7, r7, r5
    83d8:	d040      	beq.n	845c <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    83da:	68a0      	ldr	r0, [r4, #8]
    83dc:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    83de:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    83e0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    83e4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    83e8:	d1ac      	bne.n	8344 <FatFile::write(void const*, unsigned int)+0x68>
    83ea:	2e00      	cmp	r6, #0
    83ec:	d1aa      	bne.n	8344 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    83ee:	6921      	ldr	r1, [r4, #16]
    83f0:	2900      	cmp	r1, #0
    83f2:	d0a4      	beq.n	833e <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    83f4:	78a2      	ldrb	r2, [r4, #2]
    83f6:	f012 0f40 	tst.w	r2, #64	; 0x40
    83fa:	d095      	beq.n	8328 <FatFile::write(void const*, unsigned int)+0x4c>
    83fc:	69e2      	ldr	r2, [r4, #28]
    83fe:	4293      	cmp	r3, r2
    8400:	d292      	bcs.n	8328 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    8402:	3101      	adds	r1, #1
    8404:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    8406:	e79d      	b.n	8344 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8408:	2205      	movs	r2, #5
    840a:	e7d1      	b.n	83b0 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    840c:	3028      	adds	r0, #40	; 0x28
    840e:	f003 fab5 	bl	b97c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    8412:	2800      	cmp	r0, #0
    8414:	d1db      	bne.n	83ce <FatFile::write(void const*, unsigned int)+0xf2>
    8416:	e780      	b.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8418:	7903      	ldrb	r3, [r0, #4]
    841a:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    841c:	0a7a      	lsrs	r2, r7, #9
    841e:	4293      	cmp	r3, r2
    8420:	bf28      	it	cs
    8422:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8424:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    8426:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8428:	4291      	cmp	r1, r2
    842a:	d808      	bhi.n	843e <FatFile::write(void const*, unsigned int)+0x162>
    842c:	18ce      	adds	r6, r1, r3
    842e:	42b2      	cmp	r2, r6
    8430:	d205      	bcs.n	843e <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    8432:	2200      	movs	r2, #0
    8434:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    843c:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    843e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8440:	6802      	ldr	r2, [r0, #0]
    8442:	6a96      	ldr	r6, [r2, #40]	; 0x28
    8444:	4642      	mov	r2, r8
    8446:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8448:	2800      	cmp	r0, #0
    844a:	d1c0      	bne.n	83ce <FatFile::write(void const*, unsigned int)+0xf2>
    844c:	e765      	b.n	831a <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    844e:	2300      	movs	r3, #0
    8450:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8458:	6343      	str	r3, [r0, #52]	; 0x34
  }
    845a:	e79e      	b.n	839a <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    845c:	6963      	ldr	r3, [r4, #20]
    845e:	69e2      	ldr	r2, [r4, #28]
    8460:	4293      	cmp	r3, r2
    8462:	d906      	bls.n	8472 <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    8464:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8466:	78a3      	ldrb	r3, [r4, #2]
    8468:	f063 037f 	orn	r3, r3, #127	; 0x7f
    846c:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    846e:	4648      	mov	r0, r9
    8470:	e758      	b.n	8324 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    8472:	4b05      	ldr	r3, [pc, #20]	; (8488 <FatFile::write(void const*, unsigned int)+0x1ac>)
    8474:	681b      	ldr	r3, [r3, #0]
    8476:	b12b      	cbz	r3, 8484 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8478:	78a3      	ldrb	r3, [r4, #2]
    847a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    847e:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    8480:	4648      	mov	r0, r9
    8482:	e74f      	b.n	8324 <FatFile::write(void const*, unsigned int)+0x48>
    8484:	4648      	mov	r0, r9
    8486:	e74d      	b.n	8324 <FatFile::write(void const*, unsigned int)+0x48>
    8488:	20004b64 	.word	0x20004b64

0000848c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8490:	b08d      	sub	sp, #52	; 0x34
    8492:	4680      	mov	r8, r0
    8494:	9100      	str	r1, [sp, #0]
    8496:	4614      	mov	r4, r2
    8498:	461f      	mov	r7, r3
  FatFile dir = *this;
    849a:	ad03      	add	r5, sp, #12
    849c:	4606      	mov	r6, r0
    849e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    84a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    84a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    84a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    84a6:	6833      	ldr	r3, [r6, #0]
    84a8:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    84aa:	6823      	ldr	r3, [r4, #0]
    84ac:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    84ae:	2300      	movs	r3, #0
    84b0:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    84b2:	9701      	str	r7, [sp, #4]
    84b4:	2f00      	cmp	r7, #0
    84b6:	d040      	beq.n	853a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    84b8:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    84bc:	9b00      	ldr	r3, [sp, #0]
    84be:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    84c2:	b289      	uxth	r1, r1
    84c4:	0149      	lsls	r1, r1, #5
    84c6:	a803      	add	r0, sp, #12
    84c8:	f7ff f9e2 	bl	7890 <FatFile::seekSet(unsigned long)>
    84cc:	4682      	mov	sl, r0
    84ce:	b340      	cbz	r0, 8522 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    84d0:	2100      	movs	r1, #0
    84d2:	a803      	add	r0, sp, #12
    84d4:	f7ff f9ba 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    84d8:	4681      	mov	r9, r0
    84da:	b388      	cbz	r0, 8540 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    84dc:	2600      	movs	r6, #0
    84de:	e00f      	b.n	8500 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    84e0:	4620      	mov	r0, r4
    84e2:	f003 fab1 	bl	ba48 <FsName::get16()>
    84e6:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    84e8:	4628      	mov	r0, r5
    84ea:	f003 fbcb 	bl	bc84 <toUpcase(unsigned short)>
    84ee:	4605      	mov	r5, r0
    84f0:	4638      	mov	r0, r7
    84f2:	f003 fbc7 	bl	bc84 <toUpcase(unsigned short)>
    84f6:	4285      	cmp	r5, r0
    84f8:	d125      	bne.n	8546 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    84fa:	3601      	adds	r6, #1
    84fc:	2e0d      	cmp	r6, #13
    84fe:	d014      	beq.n	852a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    8500:	b2f2      	uxtb	r2, r6
    8502:	4649      	mov	r1, r9
    8504:	4640      	mov	r0, r8
    8506:	f000 ff19 	bl	933c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    850a:	4605      	mov	r5, r0
    return !ls && next == end;
    850c:	89a3      	ldrh	r3, [r4, #12]
    850e:	2b00      	cmp	r3, #0
    8510:	d1e6      	bne.n	84e0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    8512:	6862      	ldr	r2, [r4, #4]
    8514:	68a3      	ldr	r3, [r4, #8]
    8516:	429a      	cmp	r2, r3
    8518:	d1e2      	bne.n	84e0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    851a:	fab0 fa80 	clz	sl, r0
    851e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    8522:	4650      	mov	r0, sl
    8524:	b00d      	add	sp, #52	; 0x34
    8526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    852a:	f10b 0b01 	add.w	fp, fp, #1
    852e:	fa5f fb8b 	uxtb.w	fp, fp
    8532:	9b01      	ldr	r3, [sp, #4]
    8534:	455b      	cmp	r3, fp
    8536:	d2c1      	bcs.n	84bc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8538:	e7f3      	b.n	8522 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    853a:	f04f 0a01 	mov.w	sl, #1
    853e:	e7f0      	b.n	8522 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    8540:	f04f 0a00 	mov.w	sl, #0
    8544:	e7ed      	b.n	8522 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    8546:	f04f 0a00 	mov.w	sl, #0
    854a:	e7ea      	b.n	8522 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

0000854c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8550:	b08f      	sub	sp, #60	; 0x3c
    8552:	9102      	str	r1, [sp, #8]
    8554:	4617      	mov	r7, r2
    8556:	461e      	mov	r6, r3
  FatFile dir = *this;
    8558:	ad05      	add	r5, sp, #20
    855a:	4604      	mov	r4, r0
    855c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    855e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8564:	6823      	ldr	r3, [r4, #0]
    8566:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    8568:	f107 0215 	add.w	r2, r7, #21
    856c:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    8570:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8574:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    8578:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    857c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    8580:	fa50 f383 	uxtab	r3, r0, r3
    8584:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    8588:	428a      	cmp	r2, r1
    858a:	d1f3      	bne.n	8574 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    858c:	683b      	ldr	r3, [r7, #0]
    858e:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    8590:	2300      	movs	r3, #0
    8592:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8594:	2e00      	cmp	r6, #0
    8596:	d064      	beq.n	8662 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    8598:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    859c:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    859e:	f8cd a00c 	str.w	sl, [sp, #12]
    85a2:	46b2      	mov	sl, r6
    85a4:	e032      	b.n	860c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    85a6:	4638      	mov	r0, r7
    85a8:	f003 fa4e 	bl	ba48 <FsName::get16()>
  if (i < 5) {
    85ac:	f1b8 0f04 	cmp.w	r8, #4
    85b0:	d818      	bhi.n	85e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    85b2:	b2f3      	uxtb	r3, r6
    85b4:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    85b8:	f8a3 0001 	strh.w	r0, [r3, #1]
    85bc:	3601      	adds	r6, #1
    85be:	3501      	adds	r5, #1
    85c0:	b2ed      	uxtb	r5, r5
    85c2:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    85c6:	89bb      	ldrh	r3, [r7, #12]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d1ec      	bne.n	85a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    85cc:	687a      	ldr	r2, [r7, #4]
    85ce:	68bb      	ldr	r3, [r7, #8]
    85d0:	429a      	cmp	r2, r3
    85d2:	d1e8      	bne.n	85a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    85d4:	1c63      	adds	r3, r4, #1
    85d6:	1e20      	subs	r0, r4, #0
    85d8:	bf18      	it	ne
    85da:	2001      	movne	r0, #1
    85dc:	4240      	negs	r0, r0
    85de:	b280      	uxth	r0, r0
    85e0:	b2dc      	uxtb	r4, r3
    85e2:	e7e3      	b.n	85ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    85e4:	f1b8 0f0a 	cmp.w	r8, #10
    85e8:	d804      	bhi.n	85f4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    85ea:	b2f3      	uxtb	r3, r6
    85ec:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    85f0:	8098      	strh	r0, [r3, #4]
}
    85f2:	e7e3      	b.n	85bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    85f4:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    85f6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    85fa:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    85fc:	2d0c      	cmp	r5, #12
    85fe:	d9dd      	bls.n	85bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8600:	f10b 0b01 	add.w	fp, fp, #1
    8604:	fa5f fb8b 	uxtb.w	fp, fp
    8608:	45da      	cmp	sl, fp
    860a:	d32c      	bcc.n	8666 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    860c:	9b02      	ldr	r3, [sp, #8]
    860e:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8612:	b289      	uxth	r1, r1
    8614:	0149      	lsls	r1, r1, #5
    8616:	a805      	add	r0, sp, #20
    8618:	f7ff f93a 	bl	7890 <FatFile::seekSet(unsigned long)>
    861c:	9001      	str	r0, [sp, #4]
    861e:	b310      	cbz	r0, 8666 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8620:	2100      	movs	r1, #0
    8622:	a805      	add	r0, sp, #20
    8624:	f7ff f912 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8628:	4681      	mov	r9, r0
    862a:	b300      	cbz	r0, 866e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    862c:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    862e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8632:	f043 0301 	orr.w	r3, r3, #1
    8636:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    863a:	45da      	cmp	sl, fp
    863c:	bf0c      	ite	eq
    863e:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    8642:	465b      	movne	r3, fp
    8644:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8646:	f04f 030f 	mov.w	r3, #15
    864a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    864c:	f04f 0300 	mov.w	r3, #0
    8650:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    8652:	9b03      	ldr	r3, [sp, #12]
    8654:	7343      	strb	r3, [r0, #13]
    8656:	f04f 0300 	mov.w	r3, #0
    865a:	8343      	strh	r3, [r0, #26]
    865c:	2501      	movs	r5, #1
    865e:	2600      	movs	r6, #0
    8660:	e7af      	b.n	85c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8662:	2301      	movs	r3, #1
    8664:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    8666:	9801      	ldr	r0, [sp, #4]
    8668:	b00f      	add	sp, #60	; 0x3c
    866a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    866e:	2300      	movs	r3, #0
    8670:	9301      	str	r3, [sp, #4]
    8672:	e7f8      	b.n	8666 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

00008674 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    8674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8678:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    867a:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    867c:	4602      	mov	r2, r0
    867e:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8682:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    8684:	2120      	movs	r1, #32
    8686:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    868a:	4282      	cmp	r2, r0
    868c:	d1fb      	bne.n	8686 <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    868e:	781a      	ldrb	r2, [r3, #0]
    8690:	2a2e      	cmp	r2, #46	; 0x2e
    8692:	bf14      	ite	ne
    8694:	2501      	movne	r5, #1
    8696:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8698:	d103      	bne.n	86a2 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    869a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    869e:	2a2e      	cmp	r2, #46	; 0x2e
    86a0:	d0fb      	beq.n	869a <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    86a2:	1e62      	subs	r2, r4, #1
    86a4:	429a      	cmp	r2, r3
    86a6:	d909      	bls.n	86bc <FatFile::makeSFN(FatLfn_t*)+0x48>
    86a8:	4611      	mov	r1, r2
    86aa:	461e      	mov	r6, r3
    86ac:	460a      	mov	r2, r1
    86ae:	3901      	subs	r1, #1
    86b0:	7810      	ldrb	r0, [r2, #0]
    86b2:	282e      	cmp	r0, #46	; 0x2e
    86b4:	d002      	beq.n	86bc <FatFile::makeSFN(FatLfn_t*)+0x48>
    86b6:	460a      	mov	r2, r1
    86b8:	42b1      	cmp	r1, r6
    86ba:	d1f7      	bne.n	86ac <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    86bc:	429c      	cmp	r4, r3
    86be:	d908      	bls.n	86d2 <FatFile::makeSFN(FatLfn_t*)+0x5e>
    86c0:	2600      	movs	r6, #0
    86c2:	2707      	movs	r7, #7
    86c4:	46b4      	mov	ip, r6
    86c6:	46b3      	mov	fp, r6
    86c8:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    86cc:	f04f 0a0a 	mov.w	sl, #10
    86d0:	e061      	b.n	8796 <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    86d2:	2600      	movs	r6, #0
    86d4:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    86d6:	f89e 3016 	ldrb.w	r3, [lr, #22]
    86da:	2b20      	cmp	r3, #32
    86dc:	f000 8084 	beq.w	87e8 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    86e0:	2d00      	cmp	r5, #0
    86e2:	d03b      	beq.n	875c <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    86e4:	ea1b 0f06 	tst.w	fp, r6
    86e8:	bf18      	it	ne
    86ea:	2602      	movne	r6, #2
    86ec:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    86f0:	4628      	mov	r0, r5

 fail:
  return false;
}
    86f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    86f6:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    86fa:	fa5f f888 	uxtb.w	r8, r8
    86fe:	f1b8 0f05 	cmp.w	r8, #5
    8702:	d964      	bls.n	87ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    8704:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    8708:	fa5f f888 	uxtb.w	r8, r8
    870c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8710:	d85d      	bhi.n	87ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    8712:	45bc      	cmp	ip, r7
    8714:	d815      	bhi.n	8742 <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    8716:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    871a:	b2c0      	uxtb	r0, r0
    871c:	2819      	cmp	r0, #25
    871e:	d82a      	bhi.n	8776 <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    8720:	3920      	subs	r1, #32
    8722:	b2c9      	uxtb	r1, r1
        lc |= bit;
    8724:	ea49 0606 	orr.w	r6, r9, r6
    8728:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    872a:	f10c 0001 	add.w	r0, ip, #1
    872e:	b2c0      	uxtb	r0, r0
    8730:	44f4      	add	ip, lr
    8732:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8736:	2806      	cmp	r0, #6
    8738:	d854      	bhi.n	87e4 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    873a:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    873e:	4684      	mov	ip, r0
    8740:	e026      	b.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8742:	429a      	cmp	r2, r3
    8744:	bf2c      	ite	cs
    8746:	2500      	movcs	r5, #0
    8748:	2501      	movcc	r5, #1
    874a:	2f0a      	cmp	r7, #10
    874c:	bf08      	it	eq
    874e:	f045 0501 	orreq.w	r5, r5, #1
    8752:	b175      	cbz	r5, 8772 <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8754:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8758:	2b20      	cmp	r3, #32
    875a:	d0ca      	beq.n	86f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    875c:	2001      	movs	r0, #1
    875e:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8762:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8766:	4473      	add	r3, lr
    8768:	227e      	movs	r2, #126	; 0x7e
    876a:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    876c:	2231      	movs	r2, #49	; 0x31
    876e:	75da      	strb	r2, [r3, #23]
    8770:	e7bf      	b.n	86f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8772:	1e53      	subs	r3, r2, #1
        continue;
    8774:	e00c      	b.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8776:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    877a:	b2c0      	uxtb	r0, r0
    877c:	2819      	cmp	r0, #25
        uc |= bit;
    877e:	bf98      	it	ls
    8780:	ea49 0b0b 	orrls.w	fp, r9, fp
    8784:	e7d1      	b.n	872a <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8786:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8788:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    878c:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8790:	3301      	adds	r3, #1
    8792:	429c      	cmp	r4, r3
    8794:	d99f      	bls.n	86d6 <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8796:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8798:	292e      	cmp	r1, #46	; 0x2e
    879a:	bf08      	it	eq
    879c:	429a      	cmpeq	r2, r3
    879e:	bf0c      	ite	eq
    87a0:	2001      	moveq	r0, #1
    87a2:	2000      	movne	r0, #0
    87a4:	d0ef      	beq.n	8786 <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    87a6:	2922      	cmp	r1, #34	; 0x22
    87a8:	d011      	beq.n	87ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
    87aa:	297c      	cmp	r1, #124	; 0x7c
    87ac:	d00f      	beq.n	87ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
    87ae:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    87b2:	fa5f f888 	uxtb.w	r8, r8
    87b6:	f1b8 0f02 	cmp.w	r8, #2
    87ba:	d908      	bls.n	87ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    87bc:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    87c0:	fa5f f888 	uxtb.w	r8, r8
    87c4:	f1b8 0f05 	cmp.w	r8, #5
    87c8:	d895      	bhi.n	86f6 <FatFile::makeSFN(FatLfn_t*)+0x82>
    87ca:	292d      	cmp	r1, #45	; 0x2d
    87cc:	d093      	beq.n	86f6 <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    87ce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    87d2:	2980      	cmp	r1, #128	; 0x80
    87d4:	d004      	beq.n	87e0 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    87d6:	45bc      	cmp	ip, r7
    87d8:	d8b3      	bhi.n	8742 <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    87da:	4605      	mov	r5, r0
        c = '_';
    87dc:	215f      	movs	r1, #95	; 0x5f
    87de:	e7a4      	b.n	872a <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    87e0:	4605      	mov	r5, r0
    87e2:	e7d5      	b.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    87e4:	4684      	mov	ip, r0
    87e6:	e7d3      	b.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    87e8:	2000      	movs	r0, #0
    87ea:	e782      	b.n	86f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>

000087ec <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    87ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87f0:	b083      	sub	sp, #12
    87f2:	4604      	mov	r4, r0
    87f4:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    87f6:	f891 8014 	ldrb.w	r8, [r1, #20]
    87fa:	2362      	movs	r3, #98	; 0x62
    87fc:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    87fe:	2500      	movs	r5, #0
	return systick_millis_count;
    8800:	f8df b090 	ldr.w	fp, [pc, #144]	; 8894 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8804:	f101 0a16 	add.w	sl, r1, #22
    8808:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    880c:	442b      	add	r3, r5
    880e:	b29d      	uxth	r5, r3
    if (pos > 3) {
    8810:	f1b8 0f03 	cmp.w	r8, #3
    8814:	bf28      	it	cs
    8816:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    881a:	f108 0304 	add.w	r3, r8, #4
    881e:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8820:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8824:	2a09      	cmp	r2, #9
    8826:	bf94      	ite	ls
    8828:	3230      	addls	r2, #48	; 0x30
    882a:	3237      	addhi	r2, #55	; 0x37
    882c:	18f9      	adds	r1, r7, r3
    882e:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8830:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8832:	3b01      	subs	r3, #1
    8834:	b2db      	uxtb	r3, r3
    8836:	4598      	cmp	r8, r3
    8838:	d1f2      	bne.n	8820 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    883a:	eb07 0308 	add.w	r3, r7, r8
    883e:	227e      	movs	r2, #126	; 0x7e
    8840:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8842:	2100      	movs	r1, #0
    8844:	4620      	mov	r0, r4
    8846:	f7ff f823 	bl	7890 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    884a:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    884c:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8850:	4631      	mov	r1, r6
    8852:	4620      	mov	r0, r4
    8854:	f7fe fffa 	bl	784c <FatFile::readDirCache(bool)>
      if (!dir) {
    8858:	4601      	mov	r1, r0
    885a:	b190      	cbz	r0, 8882 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    885c:	7803      	ldrb	r3, [r0, #0]
    885e:	b1bb      	cbz	r3, 8890 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8860:	7ac3      	ldrb	r3, [r0, #11]
    8862:	f013 0f08 	tst.w	r3, #8
    8866:	d1f3      	bne.n	8850 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8868:	464a      	mov	r2, r9
    886a:	4650      	mov	r0, sl
    886c:	f008 fc56 	bl	1111c <memcmp>
    8870:	2800      	cmp	r0, #0
    8872:	d1ed      	bne.n	8850 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8874:	9b01      	ldr	r3, [sp, #4]
    8876:	3b01      	subs	r3, #1
    8878:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    887c:	9301      	str	r3, [sp, #4]
    887e:	d1c3      	bne.n	8808 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8880:	e003      	b.n	888a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8882:	7860      	ldrb	r0, [r4, #1]
    8884:	fab0 f080 	clz	r0, r0
    8888:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    888a:	b003      	add	sp, #12
    888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8890:	2001      	movs	r0, #1
    8892:	e7fa      	b.n	888a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8894:	200052a8 	.word	0x200052a8

00008898 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    889c:	b08f      	sub	sp, #60	; 0x3c
    889e:	900a      	str	r0, [sp, #40]	; 0x28
    88a0:	460e      	mov	r6, r1
    88a2:	9204      	str	r2, [sp, #16]
    88a4:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    88a6:	780b      	ldrb	r3, [r1, #0]
    88a8:	f013 0f70 	tst.w	r3, #112	; 0x70
    88ac:	f000 8158 	beq.w	8b60 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    88b0:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    88b2:	f890 8000 	ldrb.w	r8, [r0]
    88b6:	f1b8 0f00 	cmp.w	r8, #0
    88ba:	f040 8157 	bne.w	8b6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    88be:	6913      	ldr	r3, [r2, #16]
    88c0:	330c      	adds	r3, #12
    88c2:	4ab0      	ldr	r2, [pc, #704]	; (8b84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    88c4:	fba2 2303 	umull	r2, r3, r2, r3
    88c8:	f3c3 0287 	ubfx	r2, r3, #2, #8
    88cc:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    88ce:	7d4b      	ldrb	r3, [r1, #21]
    88d0:	f013 0f03 	tst.w	r3, #3
    88d4:	d017      	beq.n	8906 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    88d6:	1c57      	adds	r7, r2, #1
    88d8:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    88da:	68b3      	ldr	r3, [r6, #8]
    88dc:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    88de:	2100      	movs	r1, #0
    88e0:	4630      	mov	r0, r6
    88e2:	f7fe ffd5 	bl	7890 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    88e6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    88ea:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    88ee:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    88f0:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    88f4:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    88f8:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    88fc:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    88fe:	9b04      	ldr	r3, [sp, #16]
    8900:	3316      	adds	r3, #22
    8902:	9305      	str	r3, [sp, #20]
  }
    8904:	e087      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8906:	2701      	movs	r7, #1
    8908:	e7e7      	b.n	88da <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    890a:	f8cd 8008 	str.w	r8, [sp, #8]
    890e:	e082      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    8910:	f8cd 8008 	str.w	r8, [sp, #8]
    8914:	e07f      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    8916:	f8cd 8008 	str.w	r8, [sp, #8]
    891a:	e07c      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    891c:	7873      	ldrb	r3, [r6, #1]
    891e:	2b00      	cmp	r3, #0
    8920:	f040 8127 	bne.w	8b72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8924:	9b06      	ldr	r3, [sp, #24]
    8926:	f413 7f00 	tst.w	r3, #512	; 0x200
    892a:	f000 8125 	beq.w	8b78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    892e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8932:	3b01      	subs	r3, #1
    8934:	2b01      	cmp	r3, #1
    8936:	f200 8122 	bhi.w	8b7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    893a:	2c00      	cmp	r4, #0
    893c:	bf08      	it	eq
    893e:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8940:	42bc      	cmp	r4, r7
    8942:	d20b      	bcs.n	895c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8944:	2500      	movs	r5, #0
    8946:	4629      	mov	r1, r5
    8948:	4630      	mov	r0, r6
    894a:	f7fe ff7f 	bl	784c <FatFile::readDirCache(bool)>
    if (!dir) {
    894e:	2800      	cmp	r0, #0
    8950:	f000 80ee 	beq.w	8b30 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8954:	3401      	adds	r4, #1
    8956:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8958:	42a7      	cmp	r7, r4
    895a:	d1f4      	bne.n	8946 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    895c:	9b08      	ldr	r3, [sp, #32]
    895e:	b13b      	cbz	r3, 8970 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8960:	9904      	ldr	r1, [sp, #16]
    8962:	4630      	mov	r0, r6
    8964:	f7ff ff42 	bl	87ec <FatFile::makeUniqueSfn(FatLfn_t*)>
    8968:	4681      	mov	r9, r0
    896a:	2800      	cmp	r0, #0
    896c:	f000 80fa 	beq.w	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8970:	3f01      	subs	r7, #1
    8972:	b2fb      	uxtb	r3, r7
    8974:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8976:	449a      	add	sl, r3
    8978:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    897c:	9f04      	ldr	r7, [sp, #16]
    897e:	463a      	mov	r2, r7
    8980:	4629      	mov	r1, r5
    8982:	4630      	mov	r0, r6
    8984:	f7ff fde2 	bl	854c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8988:	4681      	mov	r9, r0
    898a:	2800      	cmp	r0, #0
    898c:	f000 80ea 	beq.w	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8990:	0169      	lsls	r1, r5, #5
    8992:	4630      	mov	r0, r6
    8994:	f7fe ff7c 	bl	7890 <FatFile::seekSet(unsigned long)>
    8998:	4681      	mov	r9, r0
    899a:	2800      	cmp	r0, #0
    899c:	f000 80e2 	beq.w	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    89a0:	2100      	movs	r1, #0
    89a2:	4630      	mov	r0, r6
    89a4:	f7fe ff52 	bl	784c <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    89a8:	4604      	mov	r4, r0
    89aa:	2800      	cmp	r0, #0
    89ac:	f000 80f1 	beq.w	8b92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    89b0:	2220      	movs	r2, #32
    89b2:	2100      	movs	r1, #0
    89b4:	f008 fc7e 	bl	112b4 <memset>
  memcpy(dir->name, fname->sfn, 11);
    89b8:	f8d7 2016 	ldr.w	r2, [r7, #22]
    89bc:	f8d7 301a 	ldr.w	r3, [r7, #26]
    89c0:	6022      	str	r2, [r4, #0]
    89c2:	6063      	str	r3, [r4, #4]
    89c4:	8bfa      	ldrh	r2, [r7, #30]
    89c6:	f897 3020 	ldrb.w	r3, [r7, #32]
    89ca:	8122      	strh	r2, [r4, #8]
    89cc:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    89ce:	7d7b      	ldrb	r3, [r7, #21]
    89d0:	f003 0318 	and.w	r3, r3, #24
    89d4:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    89d6:	4b6c      	ldr	r3, [pc, #432]	; (8b88 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    89d8:	681b      	ldr	r3, [r3, #0]
    89da:	2b00      	cmp	r3, #0
    89dc:	f000 80ba 	beq.w	8b54 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    89e0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    89e4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    89e8:	a80d      	add	r0, sp, #52	; 0x34
    89ea:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    89ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    89f0:	8223      	strh	r3, [r4, #16]
    89f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    89f6:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    89f8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    89fc:	7363      	strb	r3, [r4, #13]
    89fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8a00:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8a04:	f043 0301 	orr.w	r3, r3, #1
    8a08:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    8a0c:	e086      	b.n	8b1c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    8a0e:	2b00      	cmp	r3, #0
    8a10:	d088      	beq.n	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    8a12:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8a16:	6975      	ldr	r5, [r6, #20]
    8a18:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    8a1c:	4659      	mov	r1, fp
    8a1e:	4630      	mov	r0, r6
    8a20:	f7fe ff14 	bl	784c <FatFile::readDirCache(bool)>
    if (!dir) {
    8a24:	2800      	cmp	r0, #0
    8a26:	f43f af79 	beq.w	891c <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8a2a:	7803      	ldrb	r3, [r0, #0]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	bf18      	it	ne
    8a30:	2be5      	cmpne	r3, #229	; 0xe5
    8a32:	bf0c      	ite	eq
    8a34:	f04f 0901 	moveq.w	r9, #1
    8a38:	f04f 0900 	movne.w	r9, #0
    8a3c:	d107      	bne.n	8a4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8a3e:	2c00      	cmp	r4, #0
    8a40:	bf08      	it	eq
    8a42:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8a44:	42bc      	cmp	r4, r7
    8a46:	d2e2      	bcs.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    8a48:	3401      	adds	r4, #1
    8a4a:	b2e4      	uxtb	r4, r4
    8a4c:	e7df      	b.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    8a4e:	42bc      	cmp	r4, r7
    8a50:	bf38      	it	cc
    8a52:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8a54:	2b2e      	cmp	r3, #46	; 0x2e
    8a56:	f43f af58 	beq.w	890a <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8a5a:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    8a5c:	2a0f      	cmp	r2, #15
    8a5e:	d014      	beq.n	8a8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    8a60:	f012 0208 	ands.w	r2, r2, #8
    8a64:	f47f af57 	bne.w	8916 <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    8a68:	9b02      	ldr	r3, [sp, #8]
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d13b      	bne.n	8ae6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8a6e:	220b      	movs	r2, #11
    8a70:	9905      	ldr	r1, [sp, #20]
    8a72:	f008 fb53 	bl	1111c <memcmp>
    8a76:	2800      	cmp	r0, #0
    8a78:	d1cd      	bne.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8a7a:	9b04      	ldr	r3, [sp, #16]
    8a7c:	7d5b      	ldrb	r3, [r3, #21]
    8a7e:	f013 0301 	ands.w	r3, r3, #1
    8a82:	d046      	beq.n	8b12 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    8a84:	2301      	movs	r3, #1
    8a86:	9308      	str	r3, [sp, #32]
    8a88:	e7c5      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    8a8a:	9a02      	ldr	r2, [sp, #8]
    8a8c:	b9ea      	cbnz	r2, 8aca <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    8a8e:	f003 021f 	and.w	r2, r3, #31
    8a92:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    8a94:	9907      	ldr	r1, [sp, #28]
    8a96:	4291      	cmp	r1, r2
    8a98:	d1bd      	bne.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    8a9a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    8a9e:	9302      	str	r3, [sp, #8]
    8aa0:	d0b9      	beq.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    8aa2:	7b43      	ldrb	r3, [r0, #13]
    8aa4:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    8aa6:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    8aa8:	9b03      	ldr	r3, [sp, #12]
    8aaa:	2b01      	cmp	r3, #1
    8aac:	d1b3      	bne.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8aae:	1c69      	adds	r1, r5, #1
    8ab0:	9d02      	ldr	r5, [sp, #8]
    8ab2:	462b      	mov	r3, r5
    8ab4:	9a04      	ldr	r2, [sp, #16]
    8ab6:	b289      	uxth	r1, r1
    8ab8:	4630      	mov	r0, r6
    8aba:	f7ff fce7 	bl	848c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8abe:	462b      	mov	r3, r5
    8ac0:	2800      	cmp	r0, #0
    8ac2:	bf08      	it	eq
    8ac4:	4643      	moveq	r3, r8
    8ac6:	9302      	str	r3, [sp, #8]
    8ac8:	e7a5      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8aca:	9a03      	ldr	r2, [sp, #12]
    8acc:	3a01      	subs	r2, #1
    8ace:	b2d2      	uxtb	r2, r2
    8ad0:	9203      	str	r2, [sp, #12]
    8ad2:	4293      	cmp	r3, r2
    8ad4:	f47f af1c 	bne.w	8910 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    8ad8:	7b43      	ldrb	r3, [r0, #13]
    8ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8adc:	4293      	cmp	r3, r2
    8ade:	d0e3      	beq.n	8aa8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    8ae0:	f8cd 8008 	str.w	r8, [sp, #8]
    8ae4:	e797      	b.n	8a16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8ae6:	9b03      	ldr	r3, [sp, #12]
    8ae8:	2b01      	cmp	r3, #1
    8aea:	d13b      	bne.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    8aec:	1e41      	subs	r1, r0, #1
    8aee:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8af2:	01d3      	lsls	r3, r2, #7
    8af4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    8af8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8afc:	fa52 f383 	uxtab	r3, r2, r3
    8b00:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    8b02:	4561      	cmp	r1, ip
    8b04:	d1f5      	bne.n	8af2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    8b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b08:	4293      	cmp	r3, r2
    8b0a:	d12b      	bne.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b0c:	9b02      	ldr	r3, [sp, #8]
    8b0e:	4698      	mov	r8, r3
    8b10:	e000      	b.n	8b14 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    8b12:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    8b14:	9b06      	ldr	r3, [sp, #24]
    8b16:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8b1a:	d123      	bne.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8b1c:	f8cd 8000 	str.w	r8, [sp]
    8b20:	9b06      	ldr	r3, [sp, #24]
    8b22:	462a      	mov	r2, r5
    8b24:	4631      	mov	r1, r6
    8b26:	980a      	ldr	r0, [sp, #40]	; 0x28
    8b28:	f7fe ff31 	bl	798e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8b2c:	4681      	mov	r9, r0
    8b2e:	e019      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    8b30:	7873      	ldrb	r3, [r6, #1]
    8b32:	bb5b      	cbnz	r3, 8b8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    8b34:	42a7      	cmp	r7, r4
    8b36:	f67f af11 	bls.w	895c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    8b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    8b3c:	4630      	mov	r0, r6
    8b3e:	f7fe fd15 	bl	756c <FatFile::addDirCluster()>
    8b42:	4681      	mov	r9, r0
    8b44:	b170      	cbz	r0, 8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8b46:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8b48:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8b4c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8b4e:	42a7      	cmp	r7, r4
    8b50:	d8f4      	bhi.n	8b3c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    8b52:	e703      	b.n	895c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b54:	f245 6321 	movw	r3, #22049	; 0x5621
    8b58:	8223      	strh	r3, [r4, #16]
    8b5a:	8323      	strh	r3, [r4, #24]
    8b5c:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    8b5e:	e74e      	b.n	89fe <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    8b60:	f04f 0900 	mov.w	r9, #0
}
    8b64:	4648      	mov	r0, r9
    8b66:	b00f      	add	sp, #60	; 0x3c
    8b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8b6c:	f04f 0900 	mov.w	r9, #0
    8b70:	e7f8      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b72:	f04f 0900 	mov.w	r9, #0
    8b76:	e7f5      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b78:	f04f 0900 	mov.w	r9, #0
    8b7c:	e7f2      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b7e:	f04f 0900 	mov.w	r9, #0
    8b82:	e7ef      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b84:	4ec4ec4f 	.word	0x4ec4ec4f
    8b88:	20004b64 	.word	0x20004b64
    8b8c:	f04f 0900 	mov.w	r9, #0
    8b90:	e7e8      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8b92:	f04f 0900 	mov.w	r9, #0
    8b96:	e7e5      	b.n	8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00008b98 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9a:	b083      	sub	sp, #12
    8b9c:	4608      	mov	r0, r1
    8b9e:	4615      	mov	r5, r2
    8ba0:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8ba2:	780b      	ldrb	r3, [r1, #0]
    8ba4:	2b20      	cmp	r3, #32
    8ba6:	d103      	bne.n	8bb0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    8ba8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8bac:	2b20      	cmp	r3, #32
    8bae:	d0fb      	beq.n	8ba8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    8bb0:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8bb2:	7803      	ldrb	r3, [r0, #0]
    8bb4:	b1d3      	cbz	r3, 8bec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8bb6:	2b2f      	cmp	r3, #47	; 0x2f
    8bb8:	d018      	beq.n	8bec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    8bba:	2400      	movs	r4, #0
    8bbc:	4e2c      	ldr	r6, [pc, #176]	; (8c70 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    8bbe:	e033      	b.n	8c28 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8bc0:	f1bc 0f1f 	cmp.w	ip, #31
    8bc4:	d90f      	bls.n	8be6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8bc6:	e04d      	b.n	8c64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8bc8:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    8bcc:	d00b      	beq.n	8be6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8bce:	d903      	bls.n	8bd8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    8bd0:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    8bd4:	d007      	beq.n	8be6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8bd6:	e020      	b.n	8c1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8bd8:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    8bdc:	fa5f fc8c 	uxtb.w	ip, ip
    8be0:	f1bc 0f01 	cmp.w	ip, #1
    8be4:	d819      	bhi.n	8c1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    8be6:	2000      	movs	r0, #0
}
    8be8:	b003      	add	sp, #12
    8bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8bec:	692b      	ldr	r3, [r5, #16]
    8bee:	3b01      	subs	r3, #1
    8bf0:	2bfe      	cmp	r3, #254	; 0xfe
    8bf2:	d80f      	bhi.n	8c14 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8bf4:	7803      	ldrb	r3, [r0, #0]
    8bf6:	2b20      	cmp	r3, #32
    8bf8:	d001      	beq.n	8bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8bfa:	2b2f      	cmp	r3, #47	; 0x2f
    8bfc:	d105      	bne.n	8c0a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8bfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8c02:	2b20      	cmp	r3, #32
    8c04:	d0fb      	beq.n	8bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8c06:	2b2f      	cmp	r3, #47	; 0x2f
    8c08:	d0f9      	beq.n	8bfe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    8c0a:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    8c0c:	4628      	mov	r0, r5
    8c0e:	f7ff fd31 	bl	8674 <FatFile::makeSFN(FatLfn_t*)>
    8c12:	e7e9      	b.n	8be8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    8c14:	2000      	movs	r0, #0
    8c16:	e7e7      	b.n	8be8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    8c18:	3402      	adds	r4, #2
      fname->len = len;
    8c1a:	612c      	str	r4, [r5, #16]
      fname->end = path;
    8c1c:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    8c1e:	7803      	ldrb	r3, [r0, #0]
    8c20:	2b00      	cmp	r3, #0
    8c22:	d0e3      	beq.n	8bec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8c24:	2b2f      	cmp	r3, #47	; 0x2f
    8c26:	d0e1      	beq.n	8bec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8c28:	aa01      	add	r2, sp, #4
    8c2a:	1d01      	adds	r1, r0, #4
    8c2c:	f002 ffd6 	bl	bbdc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8c30:	2800      	cmp	r0, #0
    8c32:	d0d8      	beq.n	8be6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    8c34:	9b01      	ldr	r3, [sp, #4]
    8c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8c3a:	d2ed      	bcs.n	8c18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    8c3c:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8c3e:	2b7f      	cmp	r3, #127	; 0x7f
    8c40:	d810      	bhi.n	8c64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8c42:	fa5f fc83 	uxtb.w	ip, r3
    8c46:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    8c4a:	d8bd      	bhi.n	8bc8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    8c4c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    8c50:	d9b6      	bls.n	8bc0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    8c52:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    8c56:	fa5f fc8c 	uxtb.w	ip, ip
    8c5a:	fa26 fc0c 	lsr.w	ip, r6, ip
    8c5e:	f01c 0f01 	tst.w	ip, #1
    8c62:	d1c0      	bne.n	8be6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    8c64:	2b2e      	cmp	r3, #46	; 0x2e
    8c66:	d0da      	beq.n	8c1e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8c68:	2b20      	cmp	r3, #32
    8c6a:	d0d8      	beq.n	8c1e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8c6c:	e7d5      	b.n	8c1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8c6e:	bf00      	nop
    8c70:	05002101 	.word	0x05002101

00008c74 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c78:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    8c7a:	2300      	movs	r3, #0
    8c7c:	f88d 3004 	strb.w	r3, [sp, #4]
    8c80:	f88d 3005 	strb.w	r3, [sp, #5]
    8c84:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8c88:	7883      	ldrb	r3, [r0, #2]
    8c8a:	f013 0f02 	tst.w	r3, #2
    8c8e:	f000 8091 	beq.w	8db4 <FatFile::remove()+0x140>
    8c92:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8c94:	6a01      	ldr	r1, [r0, #32]
    8c96:	b129      	cbz	r1, 8ca4 <FatFile::remove()+0x30>
    8c98:	6880      	ldr	r0, [r0, #8]
    8c9a:	f000 fdd9 	bl	9850 <FatPartition::freeChain(unsigned long)>
    8c9e:	4603      	mov	r3, r0
    8ca0:	2800      	cmp	r0, #0
    8ca2:	d06c      	beq.n	8d7e <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8ca4:	2101      	movs	r1, #1
    8ca6:	4628      	mov	r0, r5
    8ca8:	f7fe fca2 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8cac:	4606      	mov	r6, r0
    8cae:	2800      	cmp	r0, #0
    8cb0:	f000 8082 	beq.w	8db8 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    8cb4:	1e42      	subs	r2, r0, #1
    8cb6:	300a      	adds	r0, #10
    uint8_t sum = 0;
    8cb8:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8cba:	01e3      	lsls	r3, r4, #7
    8cbc:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    8cc0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8cc4:	fa51 f383 	uxtab	r3, r1, r3
    8cc8:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8cca:	4290      	cmp	r0, r2
    8ccc:	d1f5      	bne.n	8cba <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8cce:	23e5      	movs	r3, #229	; 0xe5
    8cd0:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8cd2:	2300      	movs	r3, #0
    8cd4:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    8cd6:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8cd8:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8cda:	f106 0028 	add.w	r0, r6, #40	; 0x28
    8cde:	f002 fe4d 	bl	b97c <FsCache::sync()>
    8ce2:	b908      	cbnz	r0, 8ce8 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8ce4:	2300      	movs	r3, #0
    8ce6:	e04a      	b.n	8d7e <FatFile::remove()+0x10a>
    8ce8:	f506 700e 	add.w	r0, r6, #568	; 0x238
    8cec:	f002 fe46 	bl	b97c <FsCache::sync()>
    8cf0:	2800      	cmp	r0, #0
    8cf2:	d0f7      	beq.n	8ce4 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    8cf4:	6830      	ldr	r0, [r6, #0]
    8cf6:	6803      	ldr	r3, [r0, #0]
    8cf8:	6a1b      	ldr	r3, [r3, #32]
    8cfa:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    8cfc:	4603      	mov	r3, r0
    8cfe:	2800      	cmp	r0, #0
    8d00:	d03d      	beq.n	8d7e <FatFile::remove()+0x10a>
  if (!isLFN()) {
    8d02:	78ea      	ldrb	r2, [r5, #3]
    8d04:	2a00      	cmp	r2, #0
    8d06:	d03a      	beq.n	8d7e <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    8d08:	4629      	mov	r1, r5
    8d0a:	a801      	add	r0, sp, #4
    8d0c:	f7fe fc9f 	bl	764e <FatFile::openCluster(FatFile*)>
    8d10:	4603      	mov	r3, r0
    8d12:	2800      	cmp	r0, #0
    8d14:	d033      	beq.n	8d7e <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8d16:	78eb      	ldrb	r3, [r5, #3]
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d04f      	beq.n	8dbc <FatFile::remove()+0x148>
    8d1c:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8d1e:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    8d20:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    8d24:	e021      	b.n	8d6a <FatFile::remove()+0xf6>
    8d26:	4639      	mov	r1, r7
    8d28:	a801      	add	r0, sp, #4
    8d2a:	f7fe fd8f 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8d2e:	2800      	cmp	r0, #0
    8d30:	d046      	beq.n	8dc0 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8d32:	7ac2      	ldrb	r2, [r0, #11]
    8d34:	2a0f      	cmp	r2, #15
    8d36:	d145      	bne.n	8dc4 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    8d38:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8d3a:	f002 011f 	and.w	r1, r2, #31
    8d3e:	428e      	cmp	r6, r1
    8d40:	d142      	bne.n	8dc8 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    8d42:	7b41      	ldrb	r1, [r0, #13]
    8d44:	42a1      	cmp	r1, r4
    8d46:	d141      	bne.n	8dcc <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    8d48:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    8d4c:	68a9      	ldr	r1, [r5, #8]
    8d4e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8d52:	f043 0301 	orr.w	r3, r3, #1
    8d56:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    8d5a:	f012 0f40 	tst.w	r2, #64	; 0x40
    8d5e:	d112      	bne.n	8d86 <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8d60:	3601      	adds	r6, #1
    8d62:	b2f6      	uxtb	r6, r6
    8d64:	78eb      	ldrb	r3, [r5, #3]
    8d66:	42b3      	cmp	r3, r6
    8d68:	d322      	bcc.n	8db0 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8d6a:	88a9      	ldrh	r1, [r5, #4]
    8d6c:	1b89      	subs	r1, r1, r6
    8d6e:	b289      	uxth	r1, r1
    8d70:	0149      	lsls	r1, r1, #5
    8d72:	a801      	add	r0, sp, #4
    8d74:	f7fe fd8c 	bl	7890 <FatFile::seekSet(unsigned long)>
    8d78:	4603      	mov	r3, r0
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d1d3      	bne.n	8d26 <FatFile::remove()+0xb2>
}
    8d7e:	4618      	mov	r0, r3
    8d80:	b00a      	add	sp, #40	; 0x28
    8d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    8d86:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8d88:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8d8c:	f002 fdf6 	bl	b97c <FsCache::sync()>
    8d90:	4603      	mov	r3, r0
    8d92:	2800      	cmp	r0, #0
    8d94:	d0f3      	beq.n	8d7e <FatFile::remove()+0x10a>
    8d96:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8d9a:	f002 fdef 	bl	b97c <FsCache::sync()>
    8d9e:	4603      	mov	r3, r0
    8da0:	2800      	cmp	r0, #0
    8da2:	d0ec      	beq.n	8d7e <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    8da4:	6820      	ldr	r0, [r4, #0]
    8da6:	6803      	ldr	r3, [r0, #0]
    8da8:	6a1b      	ldr	r3, [r3, #32]
    8daa:	4798      	blx	r3
    8dac:	4603      	mov	r3, r0
    8dae:	e7e6      	b.n	8d7e <FatFile::remove()+0x10a>
  return false;
    8db0:	2300      	movs	r3, #0
 fail:
    8db2:	e7e4      	b.n	8d7e <FatFile::remove()+0x10a>
  return false;
    8db4:	2300      	movs	r3, #0
    8db6:	e7e2      	b.n	8d7e <FatFile::remove()+0x10a>
    8db8:	2300      	movs	r3, #0
    8dba:	e7e0      	b.n	8d7e <FatFile::remove()+0x10a>
    8dbc:	2300      	movs	r3, #0
    8dbe:	e7de      	b.n	8d7e <FatFile::remove()+0x10a>
    8dc0:	2300      	movs	r3, #0
    8dc2:	e7dc      	b.n	8d7e <FatFile::remove()+0x10a>
    8dc4:	2300      	movs	r3, #0
    8dc6:	e7da      	b.n	8d7e <FatFile::remove()+0x10a>
    8dc8:	2300      	movs	r3, #0
    8dca:	e7d8      	b.n	8d7e <FatFile::remove()+0x10a>
    8dcc:	2300      	movs	r3, #0
    8dce:	e7d6      	b.n	8d7e <FatFile::remove()+0x10a>

00008dd0 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    8dd0:	b510      	push	{r4, lr}
    8dd2:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    8dd4:	6848      	ldr	r0, [r1, #4]
    8dd6:	b130      	cbz	r0, 8de6 <initFatDirCallback(unsigned long, void*)+0x16>
    8dd8:	890b      	ldrh	r3, [r1, #8]
    8dda:	3301      	adds	r3, #1
    8ddc:	b29b      	uxth	r3, r3
    8dde:	810b      	strh	r3, [r1, #8]
    8de0:	894a      	ldrh	r2, [r1, #10]
    8de2:	429a      	cmp	r2, r3
    8de4:	d901      	bls.n	8dea <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    8de6:	6820      	ldr	r0, [r4, #0]
    8de8:	bd10      	pop	{r4, pc}
    8dea:	6803      	ldr	r3, [r0, #0]
    8dec:	685b      	ldr	r3, [r3, #4]
    8dee:	2201      	movs	r2, #1
    8df0:	4902      	ldr	r1, [pc, #8]	; (8dfc <initFatDirCallback(unsigned long, void*)+0x2c>)
    8df2:	4798      	blx	r3
    state->count = 0;
    8df4:	2300      	movs	r3, #0
    8df6:	8123      	strh	r3, [r4, #8]
    8df8:	e7f5      	b.n	8de6 <initFatDirCallback(unsigned long, void*)+0x16>
    8dfa:	bf00      	nop
    8dfc:	20002c50 	.word	0x20002c50

00008e00 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    8e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e02:	b087      	sub	sp, #28
    8e04:	4604      	mov	r4, r0
    8e06:	460e      	mov	r6, r1
    8e08:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
    8e0e:	2100      	movs	r1, #0
    8e10:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8e12:	f008 fa4f 	bl	112b4 <memset>
  writeMsg("Writing FAT ");
    8e16:	6a20      	ldr	r0, [r4, #32]
    8e18:	b120      	cbz	r0, 8e24 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    8e1a:	6803      	ldr	r3, [r0, #0]
    8e1c:	685b      	ldr	r3, [r3, #4]
    8e1e:	220c      	movs	r2, #12
    8e20:	4920      	ldr	r1, [pc, #128]	; (8ea4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    8e22:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    8e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8e26:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    8e28:	6a23      	ldr	r3, [r4, #32]
    8e2a:	9304      	str	r3, [sp, #16]
  state.count = 0;
    8e2c:	2300      	movs	r3, #0
    8e2e:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    8e32:	096b      	lsrs	r3, r5, #5
    8e34:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    8e38:	69e0      	ldr	r0, [r4, #28]
    8e3a:	68e1      	ldr	r1, [r4, #12]
    8e3c:	6803      	ldr	r3, [r0, #0]
    8e3e:	aa03      	add	r2, sp, #12
    8e40:	9200      	str	r2, [sp, #0]
    8e42:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    8e44:	4b18      	ldr	r3, [pc, #96]	; (8ea8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    8e46:	1e6a      	subs	r2, r5, #1
    8e48:	3101      	adds	r1, #1
    8e4a:	47b8      	blx	r7
    8e4c:	4603      	mov	r3, r0
    8e4e:	b328      	cbz	r0, 8e9c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    8e50:	6a20      	ldr	r0, [r4, #32]
    8e52:	b120      	cbz	r0, 8e5e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    8e54:	6803      	ldr	r3, [r0, #0]
    8e56:	685b      	ldr	r3, [r3, #4]
    8e58:	2202      	movs	r2, #2
    8e5a:	4914      	ldr	r1, [pc, #80]	; (8eac <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    8e5c:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    8e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8e60:	22f8      	movs	r2, #248	; 0xf8
    8e62:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    8e64:	2e10      	cmp	r6, #16
    8e66:	bf0c      	ite	eq
    8e68:	2004      	moveq	r0, #4
    8e6a:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    8e6c:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    8e6e:	21ff      	movs	r1, #255	; 0xff
    8e70:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e72:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    8e74:	3301      	adds	r3, #1
    8e76:	4298      	cmp	r0, r3
    8e78:	d1fa      	bne.n	8e70 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    8e7a:	69e0      	ldr	r0, [r4, #28]
    8e7c:	6803      	ldr	r3, [r0, #0]
    8e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e80:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e82:	68e1      	ldr	r1, [r4, #12]
    8e84:	4798      	blx	r3
    8e86:	4603      	mov	r3, r0
    8e88:	b140      	cbz	r0, 8e9c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    8e8a:	69e0      	ldr	r0, [r4, #28]
    8e8c:	68e5      	ldr	r5, [r4, #12]
    8e8e:	68a1      	ldr	r1, [r4, #8]
    8e90:	6803      	ldr	r3, [r0, #0]
    8e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e94:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e96:	4429      	add	r1, r5
    8e98:	4798      	blx	r3
    8e9a:	4603      	mov	r3, r0
}
    8e9c:	4618      	mov	r0, r3
    8e9e:	b007      	add	sp, #28
    8ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ea2:	bf00      	nop
    8ea4:	20001fe8 	.word	0x20001fe8
    8ea8:	00008dd1 	.word	0x00008dd1
    8eac:	2000200c 	.word	0x2000200c

00008eb0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    8eb0:	b570      	push	{r4, r5, r6, lr}
    8eb2:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8eb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8eb6:	f44f 7600 	mov.w	r6, #512	; 0x200
    8eba:	4632      	mov	r2, r6
    8ebc:	2100      	movs	r1, #0
    8ebe:	4620      	mov	r0, r4
    8ec0:	f008 f9f8 	bl	112b4 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    8ec4:	23eb      	movs	r3, #235	; 0xeb
    8ec6:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    8ec8:	2376      	movs	r3, #118	; 0x76
    8eca:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    8ecc:	2390      	movs	r3, #144	; 0x90
    8ece:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    8ed0:	2320      	movs	r3, #32
    8ed2:	70e3      	strb	r3, [r4, #3]
    8ed4:	7123      	strb	r3, [r4, #4]
    8ed6:	7163      	strb	r3, [r4, #5]
    8ed8:	71a3      	strb	r3, [r4, #6]
    8eda:	71e3      	strb	r3, [r4, #7]
    8edc:	7223      	strb	r3, [r4, #8]
    8ede:	7263      	strb	r3, [r4, #9]
    8ee0:	72a3      	strb	r3, [r4, #10]
    8ee2:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    8ee6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    8eea:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    8eec:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    8eee:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    8ef0:	2302      	movs	r3, #2
    8ef2:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    8ef4:	23f8      	movs	r3, #248	; 0xf8
    8ef6:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    8ef8:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8efa:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    8efc:	69ab      	ldr	r3, [r5, #24]
    8efe:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8f00:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8f04:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    8f08:	bd70      	pop	{r4, r5, r6, pc}

00008f0a <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    8f0a:	b538      	push	{r3, r4, r5, lr}
    8f0c:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8f12:	2100      	movs	r1, #0
    8f14:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8f16:	f008 f9cd 	bl	112b4 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    8f1a:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    8f1c:	6922      	ldr	r2, [r4, #16]
    8f1e:	6821      	ldr	r1, [r4, #0]
    8f20:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    8f24:	f002 fdb6 	bl	ba94 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    8f28:	6922      	ldr	r2, [r4, #16]
    8f2a:	69a3      	ldr	r3, [r4, #24]
    8f2c:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    8f2e:	3a01      	subs	r2, #1
    8f30:	6821      	ldr	r1, [r4, #0]
    8f32:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    8f36:	f002 fdad 	bl	ba94 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    8f3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    8f3e:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    8f42:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8f44:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    8f48:	69a3      	ldr	r3, [r4, #24]
    8f4a:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    8f4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8f52:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    8f56:	69e0      	ldr	r0, [r4, #28]
    8f58:	6803      	ldr	r3, [r0, #0]
    8f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8f5e:	2100      	movs	r1, #0
    8f60:	4798      	blx	r3
}
    8f62:	bd38      	pop	{r3, r4, r5, pc}

00008f64 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    8f64:	b570      	push	{r4, r5, r6, lr}
    8f66:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8f68:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    8f6e:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f70:	6946      	ldr	r6, [r0, #20]
    8f72:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    8f76:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    8f7a:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8f7e:	f202 1001 	addw	r0, r2, #257	; 0x101
    8f82:	0a00      	lsrs	r0, r0, #8
    8f84:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8f86:	0040      	lsls	r0, r0, #1
    8f88:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8f8c:	459c      	cmp	ip, r3
    8f8e:	d90f      	bls.n	8fb0 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f90:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8f94:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f96:	1af2      	subs	r2, r6, r3
    8f98:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8f9c:	f202 1101 	addw	r1, r2, #257	; 0x101
    8fa0:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8fa2:	0048      	lsls	r0, r1, #1
    8fa4:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8fa8:	4563      	cmp	r3, ip
    8faa:	d3f3      	bcc.n	8f94 <FatFormatter::makeFat16()+0x30>
    8fac:	6063      	str	r3, [r4, #4]
    8fae:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    8fb0:	eba3 030c 	sub.w	r3, r3, ip
    8fb4:	f103 0180 	add.w	r1, r3, #128	; 0x80
    8fb8:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    8fba:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    8fbe:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    8fc2:	d213      	bcs.n	8fec <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    8fc4:	2101      	movs	r1, #1
    8fc6:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8fc8:	3381      	adds	r3, #129	; 0x81
    8fca:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8fcc:	3021      	adds	r0, #33	; 0x21
    8fce:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    8fd2:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    8fd4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    8fd8:	bf34      	ite	cc
    8fda:	2304      	movcc	r3, #4
    8fdc:	2306      	movcs	r3, #6
    8fde:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8fe2:	4620      	mov	r0, r4
    8fe4:	f7ff ff91 	bl	8f0a <FatFormatter::writeMbr()>
    8fe8:	b950      	cbnz	r0, 9000 <FatFormatter::makeFat16()+0x9c>
}
    8fea:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    8fec:	6a20      	ldr	r0, [r4, #32]
    8fee:	2800      	cmp	r0, #0
    8ff0:	d040      	beq.n	9074 <FatFormatter::makeFat16()+0x110>
    8ff2:	6803      	ldr	r3, [r0, #0]
    8ff4:	685b      	ldr	r3, [r3, #4]
    8ff6:	2213      	movs	r2, #19
    8ff8:	491f      	ldr	r1, [pc, #124]	; (9078 <FatFormatter::makeFat16()+0x114>)
    8ffa:	4798      	blx	r3
    return false;
    8ffc:	2000      	movs	r0, #0
    8ffe:	e7f4      	b.n	8fea <FatFormatter::makeFat16()+0x86>
  initPbs();
    9000:	4620      	mov	r0, r4
    9002:	f7ff ff55 	bl	8eb0 <FatFormatter::initPbs()>
    9006:	f44f 7300 	mov.w	r3, #512	; 0x200
    900a:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    900e:	68a3      	ldr	r3, [r4, #8]
    9010:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    9012:	2380      	movs	r3, #128	; 0x80
    9014:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    9018:	2329      	movs	r3, #41	; 0x29
    901a:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    901e:	4b17      	ldr	r3, [pc, #92]	; (907c <FatFormatter::makeFat16()+0x118>)
    9020:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9024:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    9028:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    902c:	2220      	movs	r2, #32
    902e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9032:	4299      	cmp	r1, r3
    9034:	d1fb      	bne.n	902e <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    9036:	2346      	movs	r3, #70	; 0x46
    9038:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    903c:	2341      	movs	r3, #65	; 0x41
    903e:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    9042:	2354      	movs	r3, #84	; 0x54
    9044:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    9048:	2331      	movs	r3, #49	; 0x31
    904a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    904e:	2336      	movs	r3, #54	; 0x36
    9050:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    9054:	69e0      	ldr	r0, [r4, #28]
    9056:	6803      	ldr	r3, [r0, #0]
    9058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    905a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    905c:	6921      	ldr	r1, [r4, #16]
    905e:	4798      	blx	r3
    9060:	2800      	cmp	r0, #0
    9062:	d0c2      	beq.n	8fea <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    9064:	6862      	ldr	r2, [r4, #4]
    9066:	68e3      	ldr	r3, [r4, #12]
    9068:	1ad2      	subs	r2, r2, r3
    906a:	2110      	movs	r1, #16
    906c:	4620      	mov	r0, r4
    906e:	f7ff fec7 	bl	8e00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    9072:	e7ba      	b.n	8fea <FatFormatter::makeFat16()+0x86>
    return false;
    9074:	2000      	movs	r0, #0
    9076:	e7b8      	b.n	8fea <FatFormatter::makeFat16()+0x86>
    9078:	20001fbc 	.word	0x20001fbc
    907c:	0012d687 	.word	0x0012d687

00009080 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    9080:	b570      	push	{r4, r5, r6, lr}
    9082:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    9084:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    9086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    908a:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    908c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    9090:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    9092:	6946      	ldr	r6, [r0, #20]
    9094:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    9098:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    909c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    90a0:	f101 0381 	add.w	r3, r1, #129	; 0x81
    90a4:	09db      	lsrs	r3, r3, #7
    90a6:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    90a8:	f242 0209 	movw	r2, #8201	; 0x2009
    90ac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    90b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    90b4:	d931      	bls.n	911a <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    90b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    90ba:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    90be:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    90c2:	1ab1      	subs	r1, r6, r2
    90c4:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    90c8:	f101 0381 	add.w	r3, r1, #129	; 0x81
    90cc:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    90ce:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    90d2:	4282      	cmp	r2, r0
    90d4:	d3f3      	bcc.n	90be <FatFormatter::makeFat32()+0x3e>
    90d6:	6062      	str	r2, [r4, #4]
    90d8:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    90da:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    90de:	4281      	cmp	r1, r0
    90e0:	d91e      	bls.n	9120 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    90e2:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    90e6:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    90ea:	b29b      	uxth	r3, r3
    90ec:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    90ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    90f2:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    90f4:	fb01 220c 	mla	r2, r1, ip, r2
    90f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    90fc:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    90fe:	4b55      	ldr	r3, [pc, #340]	; (9254 <FatFormatter::makeFat32()+0x1d4>)
    9100:	429a      	cmp	r2, r3
    9102:	bf94      	ite	ls
    9104:	220b      	movls	r2, #11
    9106:	220c      	movhi	r2, #12
    9108:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    910c:	4620      	mov	r0, r4
    910e:	f7ff fefc 	bl	8f0a <FatFormatter::writeMbr()>
    9112:	4603      	mov	r3, r0
    9114:	b978      	cbnz	r0, 9136 <FatFormatter::makeFat32()+0xb6>
}
    9116:	4618      	mov	r0, r3
    9118:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    911a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    911e:	e7dc      	b.n	90da <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    9120:	6a20      	ldr	r0, [r4, #32]
    9122:	2800      	cmp	r0, #0
    9124:	f000 8093 	beq.w	924e <FatFormatter::makeFat32()+0x1ce>
    9128:	6803      	ldr	r3, [r0, #0]
    912a:	685b      	ldr	r3, [r3, #4]
    912c:	2213      	movs	r2, #19
    912e:	494a      	ldr	r1, [pc, #296]	; (9258 <FatFormatter::makeFat32()+0x1d8>)
    9130:	4798      	blx	r3
    return false;
    9132:	2300      	movs	r3, #0
    9134:	e7ef      	b.n	9116 <FatFormatter::makeFat32()+0x96>
  initPbs();
    9136:	4620      	mov	r0, r4
    9138:	f7ff feba 	bl	8eb0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    913c:	68a3      	ldr	r3, [r4, #8]
    913e:	626b      	str	r3, [r5, #36]	; 0x24
    9140:	2302      	movs	r3, #2
    9142:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    9144:	2301      	movs	r3, #1
    9146:	862b      	strh	r3, [r5, #48]	; 0x30
    9148:	2306      	movs	r3, #6
    914a:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    914c:	2380      	movs	r3, #128	; 0x80
    914e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    9152:	2329      	movs	r3, #41	; 0x29
    9154:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    9158:	4b40      	ldr	r3, [pc, #256]	; (925c <FatFormatter::makeFat32()+0x1dc>)
    915a:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    915e:	f105 0346 	add.w	r3, r5, #70	; 0x46
    9162:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    9166:	2220      	movs	r2, #32
    9168:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    916c:	4299      	cmp	r1, r3
    916e:	d1fb      	bne.n	9168 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    9170:	2346      	movs	r3, #70	; 0x46
    9172:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    9176:	2341      	movs	r3, #65	; 0x41
    9178:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    917c:	2354      	movs	r3, #84	; 0x54
    917e:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    9182:	2333      	movs	r3, #51	; 0x33
    9184:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    9188:	2332      	movs	r3, #50	; 0x32
    918a:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    918e:	69e0      	ldr	r0, [r4, #28]
    9190:	6803      	ldr	r3, [r0, #0]
    9192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9194:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9196:	6921      	ldr	r1, [r4, #16]
    9198:	4798      	blx	r3
    919a:	4603      	mov	r3, r0
    919c:	2800      	cmp	r0, #0
    919e:	d0ba      	beq.n	9116 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    91a0:	69e0      	ldr	r0, [r4, #28]
    91a2:	6921      	ldr	r1, [r4, #16]
    91a4:	6803      	ldr	r3, [r0, #0]
    91a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91aa:	3106      	adds	r1, #6
    91ac:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    91ae:	4603      	mov	r3, r0
    91b0:	2800      	cmp	r0, #0
    91b2:	d0b0      	beq.n	9116 <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    91b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    91b8:	2100      	movs	r1, #0
    91ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    91bc:	f008 f87a 	bl	112b4 <memset>
    91c0:	4b27      	ldr	r3, [pc, #156]	; (9260 <FatFormatter::makeFat32()+0x1e0>)
    91c2:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    91c6:	69e0      	ldr	r0, [r4, #28]
    91c8:	6921      	ldr	r1, [r4, #16]
    91ca:	6803      	ldr	r3, [r0, #0]
    91cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91d0:	3102      	adds	r1, #2
    91d2:	4798      	blx	r3
    91d4:	4603      	mov	r3, r0
    91d6:	2800      	cmp	r0, #0
    91d8:	d09d      	beq.n	9116 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    91da:	69e0      	ldr	r0, [r4, #28]
    91dc:	6921      	ldr	r1, [r4, #16]
    91de:	6803      	ldr	r3, [r0, #0]
    91e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91e4:	3108      	adds	r1, #8
    91e6:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    91e8:	4603      	mov	r3, r0
    91ea:	2800      	cmp	r0, #0
    91ec:	d093      	beq.n	9116 <FatFormatter::makeFat32()+0x96>
    91ee:	4b1d      	ldr	r3, [pc, #116]	; (9264 <FatFormatter::makeFat32()+0x1e4>)
    91f0:	602b      	str	r3, [r5, #0]
    91f2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    91f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    91fa:	3320      	adds	r3, #32
    91fc:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    9200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9204:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    9208:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    920c:	69e0      	ldr	r0, [r4, #28]
    920e:	6921      	ldr	r1, [r4, #16]
    9210:	6803      	ldr	r3, [r0, #0]
    9212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9214:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9216:	3101      	adds	r1, #1
    9218:	4798      	blx	r3
    921a:	4603      	mov	r3, r0
    921c:	2800      	cmp	r0, #0
    921e:	f43f af7a 	beq.w	9116 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    9222:	69e0      	ldr	r0, [r4, #28]
    9224:	6921      	ldr	r1, [r4, #16]
    9226:	6803      	ldr	r3, [r0, #0]
    9228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    922a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    922c:	3107      	adds	r1, #7
    922e:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9230:	4603      	mov	r3, r0
    9232:	2800      	cmp	r0, #0
    9234:	f43f af6f 	beq.w	9116 <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    9238:	68a2      	ldr	r2, [r4, #8]
    923a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    923e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9242:	2120      	movs	r1, #32
    9244:	4620      	mov	r0, r4
    9246:	f7ff fddb 	bl	8e00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    924a:	4603      	mov	r3, r0
    924c:	e763      	b.n	9116 <FatFormatter::makeFat32()+0x96>
    return false;
    924e:	2300      	movs	r3, #0
    9250:	e761      	b.n	9116 <FatFormatter::makeFat32()+0x96>
    9252:	bf00      	nop
    9254:	00fb0400 	.word	0x00fb0400
    9258:	20001fbc 	.word	0x20001fbc
    925c:	0012d687 	.word	0x0012d687
    9260:	aa550000 	.word	0xaa550000
    9264:	41615252 	.word	0x41615252

00009268 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    9268:	b538      	push	{r3, r4, r5, lr}
    926a:	4604      	mov	r4, r0
    926c:	4608      	mov	r0, r1
  m_dev = dev;
    926e:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    9270:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    9272:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    9274:	680b      	ldr	r3, [r1, #0]
    9276:	69db      	ldr	r3, [r3, #28]
    9278:	4798      	blx	r3
    927a:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    927c:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    9280:	0ada      	lsrs	r2, r3, #11
    9282:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    9284:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    9288:	d31d      	bcc.n	92c6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    928a:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    928e:	d333      	bcc.n	92f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    9290:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    9294:	d342      	bcc.n	931c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    9296:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    929a:	d341      	bcc.n	9320 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    929c:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    92a0:	d340      	bcc.n	9324 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    92a2:	4a22      	ldr	r2, [pc, #136]	; (932c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    92a4:	4293      	cmp	r3, r2
    92a6:	d93f      	bls.n	9328 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    92a8:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    92ac:	4293      	cmp	r3, r2
    92ae:	d814      	bhi.n	92da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    92b0:	2340      	movs	r3, #64	; 0x40
    92b2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    92b6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    92ba:	d320      	bcc.n	92fe <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    92bc:	4620      	mov	r0, r4
    92be:	f7ff fedf 	bl	9080 <FatFormatter::makeFat32()>
    92c2:	4605      	mov	r5, r0
    92c4:	e01f      	b.n	9306 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    92c6:	6a20      	ldr	r0, [r4, #32]
    92c8:	b1a0      	cbz	r0, 92f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    92ca:	6803      	ldr	r3, [r0, #0]
    92cc:	685b      	ldr	r3, [r3, #4]
    92ce:	2214      	movs	r2, #20
    92d0:	4917      	ldr	r1, [pc, #92]	; (9330 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    92d2:	4798      	blx	r3
    return false;
    92d4:	2500      	movs	r5, #0
}
    92d6:	4628      	mov	r0, r5
    92d8:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    92da:	2380      	movs	r3, #128	; 0x80
    92dc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    92e0:	e7ec      	b.n	92bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    92e2:	6a20      	ldr	r0, [r4, #32]
    92e4:	2800      	cmp	r0, #0
    92e6:	d0f6      	beq.n	92d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    92e8:	6803      	ldr	r3, [r0, #0]
    92ea:	685b      	ldr	r3, [r3, #4]
    92ec:	220f      	movs	r2, #15
    92ee:	4911      	ldr	r1, [pc, #68]	; (9334 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    92f0:	4798      	blx	r3
    92f2:	e7f0      	b.n	92d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    92f4:	2500      	movs	r5, #0
    92f6:	e7ee      	b.n	92d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    92f8:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    92fa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    92fe:	4620      	mov	r0, r4
    9300:	f7ff fe30 	bl	8f64 <FatFormatter::makeFat16()>
    9304:	4605      	mov	r5, r0
  if (rtn) {
    9306:	2d00      	cmp	r5, #0
    9308:	d0eb      	beq.n	92e2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    930a:	6a20      	ldr	r0, [r4, #32]
    930c:	2800      	cmp	r0, #0
    930e:	d0e2      	beq.n	92d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9310:	6803      	ldr	r3, [r0, #0]
    9312:	685b      	ldr	r3, [r3, #4]
    9314:	220d      	movs	r2, #13
    9316:	4908      	ldr	r1, [pc, #32]	; (9338 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    9318:	4798      	blx	r3
    931a:	e7dc      	b.n	92d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    931c:	2304      	movs	r3, #4
    931e:	e7ec      	b.n	92fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9320:	2308      	movs	r3, #8
    9322:	e7ea      	b.n	92fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9324:	2310      	movs	r3, #16
    9326:	e7e8      	b.n	92fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9328:	2320      	movs	r3, #32
    932a:	e7e6      	b.n	92fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    932c:	002007ff 	.word	0x002007ff
    9330:	20001f84 	.word	0x20001f84
    9334:	20001fac 	.word	0x20001fac
    9338:	20001f9c 	.word	0x20001f9c

0000933c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    933c:	2a04      	cmp	r2, #4
    933e:	d804      	bhi.n	934a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9340:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9344:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9348:	4770      	bx	lr
  } else if (i < 11) {
    934a:	2a0a      	cmp	r2, #10
    934c:	d803      	bhi.n	9356 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    934e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9352:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    9354:	4770      	bx	lr
  } else if (i < 13) {
    9356:	2a0c      	cmp	r2, #12
    9358:	d803      	bhi.n	9362 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    935a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    935e:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9360:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9362:	2000      	movs	r0, #0
}
    9364:	4770      	bx	lr

00009366 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9366:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    936a:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    936c:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    936e:	2c00      	cmp	r4, #0
    9370:	d041      	beq.n	93f6 <FatFile::getSFN(char*, unsigned int)+0x90>
    9372:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9374:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9378:	d007      	beq.n	938a <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    937a:	2a01      	cmp	r2, #1
    937c:	d93b      	bls.n	93f6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    937e:	232f      	movs	r3, #47	; 0x2f
    9380:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    9382:	2300      	movs	r3, #0
    9384:	704b      	strb	r3, [r1, #1]
    return 1;
    9386:	2001      	movs	r0, #1
    9388:	e037      	b.n	93fa <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    938a:	2100      	movs	r1, #0
    938c:	f7fe f930 	bl	75f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9390:	4686      	mov	lr, r0
    9392:	b380      	cbz	r0, 93f6 <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    9394:	4603      	mov	r3, r0
    9396:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9398:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    939a:	f04f 0810 	mov.w	r8, #16
      c = '.';
    939e:	272e      	movs	r7, #46	; 0x2e
    93a0:	e012      	b.n	93c8 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    93a2:	781a      	ldrb	r2, [r3, #0]
    93a4:	2a20      	cmp	r2, #32
    93a6:	d022      	beq.n	93ee <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    93a8:	4641      	mov	r1, r8
      c = '.';
    93aa:	46bc      	mov	ip, r7
    93ac:	e002      	b.n	93b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    93ae:	f1bc 0f20 	cmp.w	ip, #32
    93b2:	d006      	beq.n	93c2 <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    93b4:	46a1      	mov	r9, r4
    93b6:	1c62      	adds	r2, r4, #1
    93b8:	42b2      	cmp	r2, r6
    93ba:	d21c      	bcs.n	93f6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    93bc:	b2d4      	uxtb	r4, r2
    93be:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    93c2:	3001      	adds	r0, #1
    93c4:	280c      	cmp	r0, #12
    93c6:	d012      	beq.n	93ee <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    93c8:	b2c2      	uxtb	r2, r0
    93ca:	2a08      	cmp	r2, #8
    93cc:	d0e9      	beq.n	93a2 <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    93ce:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    93d2:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    93d6:	b2d2      	uxtb	r2, r2
    93d8:	2a19      	cmp	r2, #25
    93da:	d8e8      	bhi.n	93ae <FatFile::getSFN(char*, unsigned int)+0x48>
    93dc:	f89e 200c 	ldrb.w	r2, [lr, #12]
    93e0:	4211      	tst	r1, r2
    93e2:	d0e7      	beq.n	93b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    93e4:	f10c 0c20 	add.w	ip, ip, #32
    93e8:	fa5f fc8c 	uxtb.w	ip, ip
    93ec:	e7e2      	b.n	93b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    93ee:	4620      	mov	r0, r4
    93f0:	2300      	movs	r3, #0
    93f2:	552b      	strb	r3, [r5, r4]
  return j;
    93f4:	e001      	b.n	93fa <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    93f6:	2000      	movs	r0, #0
    93f8:	7028      	strb	r0, [r5, #0]
  return 0;
}
    93fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00009400 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9404:	b08b      	sub	sp, #44	; 0x2c
    9406:	4689      	mov	r9, r1
  FatFile() {}
    9408:	2300      	movs	r3, #0
    940a:	f88d 3004 	strb.w	r3, [sp, #4]
    940e:	f88d 3005 	strb.w	r3, [sp, #5]
    9412:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    9416:	7803      	ldrb	r3, [r0, #0]
    9418:	2b00      	cmp	r3, #0
    941a:	d05d      	beq.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    941c:	4604      	mov	r4, r0
    941e:	4617      	mov	r7, r2
  if (!isLFN()) {
    9420:	78c3      	ldrb	r3, [r0, #3]
    9422:	b913      	cbnz	r3, 942a <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    9424:	f7ff ff9f 	bl	9366 <FatFile::getSFN(char*, unsigned int)>
    9428:	e059      	b.n	94de <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    942a:	4601      	mov	r1, r0
    942c:	a801      	add	r0, sp, #4
    942e:	f7fe f90e 	bl	764e <FatFile::openCluster(FatFile*)>
    9432:	2800      	cmp	r0, #0
    9434:	d050      	beq.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9436:	78e3      	ldrb	r3, [r4, #3]
    9438:	2b00      	cmp	r3, #0
    943a:	d05d      	beq.n	94f8 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    943c:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    943e:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    9442:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9444:	3f01      	subs	r7, #1
    9446:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9448:	88a1      	ldrh	r1, [r4, #4]
    944a:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    944e:	b289      	uxth	r1, r1
    9450:	0149      	lsls	r1, r1, #5
    9452:	a801      	add	r0, sp, #4
    9454:	f7fe fa1c 	bl	7890 <FatFile::seekSet(unsigned long)>
    9458:	2800      	cmp	r0, #0
    945a:	d03d      	beq.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    945c:	2100      	movs	r1, #0
    945e:	a801      	add	r0, sp, #4
    9460:	f7fe f9f4 	bl	784c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9464:	4682      	mov	sl, r0
    9466:	b3b8      	cbz	r0, 94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9468:	7ac3      	ldrb	r3, [r0, #11]
    946a:	2b0f      	cmp	r3, #15
    946c:	d134      	bne.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    946e:	7803      	ldrb	r3, [r0, #0]
    9470:	f003 031f 	and.w	r3, r3, #31
    9474:	455b      	cmp	r3, fp
    9476:	d12f      	bne.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9478:	f04f 0800 	mov.w	r8, #0
    947c:	e012      	b.n	94a4 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    947e:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    9482:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    9484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9488:	d323      	bcc.n	94d2 <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    948a:	b3b0      	cbz	r0, 94fa <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    948c:	463a      	mov	r2, r7
    948e:	4629      	mov	r1, r5
    9490:	f002 fb55 	bl	bb3e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9494:	4605      	mov	r5, r0
    9496:	b1f8      	cbz	r0, 94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9498:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    949a:	f108 0801 	add.w	r8, r8, #1
    949e:	f1b8 0f0d 	cmp.w	r8, #13
    94a2:	d021      	beq.n	94e8 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    94a4:	fa5f f288 	uxtb.w	r2, r8
    94a8:	4651      	mov	r1, sl
    94aa:	4620      	mov	r0, r4
    94ac:	f7ff ff46 	bl	933c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    94b0:	2e00      	cmp	r6, #0
    94b2:	d0e4      	beq.n	947e <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    94b4:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    94b8:	b29b      	uxth	r3, r3
    94ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    94be:	d20b      	bcs.n	94d8 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    94c0:	4b10      	ldr	r3, [pc, #64]	; (9504 <FatFile::getName8(char*, unsigned int)+0x104>)
    94c2:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    94c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
    94ca:	4306      	orrs	r6, r0
    94cc:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    94d0:	e7dc      	b.n	948c <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    94d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    94d6:	d305      	bcc.n	94e4 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    94d8:	2000      	movs	r0, #0
    94da:	f889 0000 	strb.w	r0, [r9]
}
    94de:	b00b      	add	sp, #44	; 0x2c
    94e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    94e4:	4606      	mov	r6, r0
    94e6:	e7d8      	b.n	949a <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    94e8:	f10b 0b01 	add.w	fp, fp, #1
    94ec:	fa5f fb8b 	uxtb.w	fp, fp
    94f0:	78e3      	ldrb	r3, [r4, #3]
    94f2:	455b      	cmp	r3, fp
    94f4:	d2a8      	bcs.n	9448 <FatFile::getName8(char*, unsigned int)+0x48>
    94f6:	e000      	b.n	94fa <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    94f8:	464d      	mov	r5, r9
  *str = '\0';
    94fa:	2300      	movs	r3, #0
    94fc:	702b      	strb	r3, [r5, #0]
  return str - name;
    94fe:	eba5 0009 	sub.w	r0, r5, r9
    9502:	e7ec      	b.n	94de <FatFile::getName8(char*, unsigned int)+0xde>
    9504:	000ffc00 	.word	0x000ffc00

00009508 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    9508:	b508      	push	{r3, lr}
  return getName8(name, size);
    950a:	f7ff ff79 	bl	9400 <FatFile::getName8(char*, unsigned int)>
}
    950e:	bd08      	pop	{r3, pc}

00009510 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9510:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    9512:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9514:	46a4      	mov	ip, r4
    9516:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    951a:	bf28      	it	cs
    951c:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9520:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9524:	4281      	cmp	r1, r0
    9526:	d307      	bcc.n	9538 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9528:	eba4 040c 	sub.w	r4, r4, ip
    952c:	6014      	str	r4, [r2, #0]
}
    952e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9532:	4770      	bx	lr
  while (p < e) {
    9534:	4288      	cmp	r0, r1
    9536:	d9f7      	bls.n	9528 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9538:	f831 3b02 	ldrh.w	r3, [r1], #2
    953c:	2b00      	cmp	r3, #0
    953e:	d1f9      	bne.n	9534 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9540:	6853      	ldr	r3, [r2, #4]
    9542:	3301      	adds	r3, #1
    9544:	6053      	str	r3, [r2, #4]
    9546:	e7f5      	b.n	9534 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

00009548 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9548:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    954a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    954c:	46a4      	mov	ip, r4
    954e:	2c80      	cmp	r4, #128	; 0x80
    9550:	bf28      	it	cs
    9552:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    9556:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    955a:	4281      	cmp	r1, r0
    955c:	d307      	bcc.n	956e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    955e:	eba4 040c 	sub.w	r4, r4, ip
    9562:	6014      	str	r4, [r2, #0]
}
    9564:	f85d 4b04 	ldr.w	r4, [sp], #4
    9568:	4770      	bx	lr
  while (p < e) {
    956a:	4288      	cmp	r0, r1
    956c:	d9f7      	bls.n	955e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    956e:	f851 3b04 	ldr.w	r3, [r1], #4
    9572:	2b00      	cmp	r3, #0
    9574:	d1f9      	bne.n	956a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9576:	6853      	ldr	r3, [r2, #4]
    9578:	3301      	adds	r3, #1
    957a:	6053      	str	r3, [r2, #4]
    957c:	e7f5      	b.n	956a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

0000957e <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    957e:	2901      	cmp	r1, #1
    9580:	d974      	bls.n	966c <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9586:	4606      	mov	r6, r0
    9588:	460c      	mov	r4, r1
    958a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    958c:	69c3      	ldr	r3, [r0, #28]
    958e:	428b      	cmp	r3, r1
    9590:	d36f      	bcc.n	9672 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    9592:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9594:	2b20      	cmp	r3, #32
    9596:	d02d      	beq.n	95f4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    9598:	2b10      	cmp	r3, #16
    959a:	d044      	beq.n	9626 <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    959c:	2b0c      	cmp	r3, #12
    959e:	d172      	bne.n	9686 <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    95a0:	f3c1 034e 	ubfx	r3, r1, #1, #15
    95a4:	fa13 f381 	uxtah	r3, r3, r1
    95a8:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    95aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
    95ae:	6982      	ldr	r2, [r0, #24]
    95b0:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    95b4:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95b8:	7a02      	ldrb	r2, [r0, #8]
    95ba:	2a02      	cmp	r2, #2
    95bc:	bf14      	ite	ne
    95be:	2200      	movne	r2, #0
    95c0:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    95c2:	0052      	lsls	r2, r2, #1
    95c4:	4641      	mov	r1, r8
    95c6:	4648      	mov	r0, r9
    95c8:	f002 f9ff 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    95cc:	4602      	mov	r2, r0
    95ce:	2800      	cmp	r0, #0
    95d0:	d05c      	beq.n	968c <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    95d2:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    95d6:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    95d8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    95da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95de:	d036      	beq.n	964e <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    95e0:	5cd3      	ldrb	r3, [r2, r3]
    95e2:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    95e6:	f014 0f01 	tst.w	r4, #1
    95ea:	bf14      	ite	ne
    95ec:	091b      	lsrne	r3, r3, #4
    95ee:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    95f2:	e012      	b.n	961a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95f4:	7a02      	ldrb	r2, [r0, #8]
    95f6:	2a02      	cmp	r2, #2
    95f8:	bf14      	ite	ne
    95fa:	2200      	movne	r2, #0
    95fc:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    95fe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9600:	0052      	lsls	r2, r2, #1
    9602:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9606:	f500 700e 	add.w	r0, r0, #568	; 0x238
    960a:	f002 f9de 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    960e:	2800      	cmp	r0, #0
    9610:	d033      	beq.n	967a <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9612:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    9614:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9618:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    961a:	69f2      	ldr	r2, [r6, #28]
    961c:	4293      	cmp	r3, r2
    961e:	d83b      	bhi.n	9698 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    9620:	602b      	str	r3, [r5, #0]
  return 1;
    9622:	2001      	movs	r0, #1
    9624:	e027      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9626:	7a02      	ldrb	r2, [r0, #8]
    9628:	2a02      	cmp	r2, #2
    962a:	bf14      	ite	ne
    962c:	2200      	movne	r2, #0
    962e:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9630:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9634:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9636:	0052      	lsls	r2, r2, #1
    9638:	4419      	add	r1, r3
    963a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    963e:	f002 f9c4 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9642:	b1e8      	cbz	r0, 9680 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9644:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    9646:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    964a:	5b03      	ldrh	r3, [r0, r4]
    964c:	e7e5      	b.n	961a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    964e:	7a32      	ldrb	r2, [r6, #8]
    9650:	2a02      	cmp	r2, #2
    9652:	bf14      	ite	ne
    9654:	2200      	movne	r2, #0
    9656:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9658:	0052      	lsls	r2, r2, #1
    965a:	f108 0101 	add.w	r1, r8, #1
    965e:	4648      	mov	r0, r9
    9660:	f002 f9b3 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9664:	4602      	mov	r2, r0
    9666:	b1a0      	cbz	r0, 9692 <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    9668:	2300      	movs	r3, #0
    966a:	e7b9      	b.n	95e0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    966c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9670:	4770      	bx	lr
  return -1;
    9672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    967a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    967e:	e7fa      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9684:	e7f7      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    968a:	e7f4      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    968c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9690:	e7f1      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9696:	e7ee      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    9698:	2000      	movs	r0, #0
    969a:	e7ec      	b.n	9676 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

0000969c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    969c:	2901      	cmp	r1, #1
    969e:	d972      	bls.n	9786 <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    96a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96a4:	4606      	mov	r6, r0
    96a6:	460c      	mov	r4, r1
    96a8:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    96aa:	69c3      	ldr	r3, [r0, #28]
    96ac:	428b      	cmp	r3, r1
    96ae:	d36c      	bcc.n	978a <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    96b0:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    96b2:	2b20      	cmp	r3, #32
    96b4:	d02d      	beq.n	9712 <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    96b6:	2b10      	cmp	r3, #16
    96b8:	d03e      	beq.n	9738 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    96ba:	2b0c      	cmp	r3, #12
    96bc:	d16c      	bne.n	9798 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    96be:	f3c1 034e 	ubfx	r3, r1, #1, #15
    96c2:	fa13 f381 	uxtah	r3, r3, r1
    96c6:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    96c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
    96cc:	6982      	ldr	r2, [r0, #24]
    96ce:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    96d2:	7a03      	ldrb	r3, [r0, #8]
    96d4:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    96d6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    96da:	bf14      	ite	ne
    96dc:	2201      	movne	r2, #1
    96de:	2203      	moveq	r2, #3
    96e0:	4641      	mov	r1, r8
    96e2:	4648      	mov	r0, r9
    96e4:	f002 f971 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    96e8:	4601      	mov	r1, r0
    96ea:	2800      	cmp	r0, #0
    96ec:	d056      	beq.n	979c <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    96ee:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    96f2:	f014 0401 	ands.w	r4, r4, #1
    96f6:	d055      	beq.n	97a4 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    96f8:	5cc2      	ldrb	r2, [r0, r3]
    96fa:	f002 020f 	and.w	r2, r2, #15
    96fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    9702:	54c2      	strb	r2, [r0, r3]
    index++;
    9704:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    970a:	d029      	beq.n	9760 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    970c:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9710:	e054      	b.n	97bc <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9712:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9714:	7a03      	ldrb	r3, [r0, #8]
    9716:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9718:	bf14      	ite	ne
    971a:	2201      	movne	r2, #1
    971c:	2203      	moveq	r2, #3
    971e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9722:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9726:	f002 f950 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    972a:	b388      	cbz	r0, 9790 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    972c:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    972e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9732:	5105      	str	r5, [r0, r4]
    return true;
    9734:	2001      	movs	r0, #1
    9736:	e029      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9738:	f3c1 2107 	ubfx	r1, r1, #8, #8
    973c:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    973e:	7a02      	ldrb	r2, [r0, #8]
    9740:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9742:	bf14      	ite	ne
    9744:	2201      	movne	r2, #1
    9746:	2203      	moveq	r2, #3
    9748:	4419      	add	r1, r3
    974a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    974e:	f002 f93c 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9752:	b1f8      	cbz	r0, 9794 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9754:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9756:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    975a:	5305      	strh	r5, [r0, r4]
    return true;
    975c:	2001      	movs	r0, #1
    975e:	e015      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9760:	7a33      	ldrb	r3, [r6, #8]
    9762:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9764:	bf14      	ite	ne
    9766:	2201      	movne	r2, #1
    9768:	2203      	moveq	r2, #3
    976a:	f108 0101 	add.w	r1, r8, #1
    976e:	4648      	mov	r0, r9
    9770:	f002 f92b 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9774:	4601      	mov	r1, r0
    9776:	b198      	cbz	r0, 97a0 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9778:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    977c:	b90c      	cbnz	r4, 9782 <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    977e:	2300      	movs	r3, #0
    9780:	e017      	b.n	97b2 <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9782:	2300      	movs	r3, #0
    9784:	e01a      	b.n	97bc <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9786:	2000      	movs	r0, #0
}
    9788:	4770      	bx	lr
  return false;
    978a:	2000      	movs	r0, #0
}
    978c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9790:	2000      	movs	r0, #0
    9792:	e7fb      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9794:	2000      	movs	r0, #0
    9796:	e7f9      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9798:	2000      	movs	r0, #0
    979a:	e7f7      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    979c:	2000      	movs	r0, #0
    979e:	e7f5      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    97a0:	2000      	movs	r0, #0
    97a2:	e7f3      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    97a4:	54c5      	strb	r5, [r0, r3]
    index++;
    97a6:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    97a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    97ac:	d0d8      	beq.n	9760 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    97ae:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    97b2:	5cc8      	ldrb	r0, [r1, r3]
    97b4:	f020 000f 	bic.w	r0, r0, #15
    97b8:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    97bc:	54ca      	strb	r2, [r1, r3]
    return true;
    97be:	2001      	movs	r0, #1
    97c0:	e7e4      	b.n	978c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

000097c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    97c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    97c6:	b083      	sub	sp, #12
    97c8:	4605      	mov	r5, r0
    97ca:	460e      	mov	r6, r1
    97cc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    97ce:	68c4      	ldr	r4, [r0, #12]
    97d0:	428c      	cmp	r4, r1
    97d2:	d30c      	bcc.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    97d4:	2701      	movs	r7, #1
      setStart = true;
    97d6:	f04f 0901 	mov.w	r9, #1
    find++;
    97da:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    97dc:	69eb      	ldr	r3, [r5, #28]
    97de:	42a3      	cmp	r3, r4
    97e0:	d20b      	bcs.n	97fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    97e2:	b13f      	cbz	r7, 97f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    97e4:	2700      	movs	r7, #0
}
    97e6:	4638      	mov	r0, r7
    97e8:	b003      	add	sp, #12
    97ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    97ee:	460c      	mov	r4, r1
    setStart = false;
    97f0:	2700      	movs	r7, #0
    97f2:	e7f0      	b.n	97d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    97f4:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    97f6:	464f      	mov	r7, r9
    97f8:	e7ef      	b.n	97da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    97fa:	42a6      	cmp	r6, r4
    97fc:	d0f2      	beq.n	97e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    97fe:	aa01      	add	r2, sp, #4
    9800:	4621      	mov	r1, r4
    9802:	4628      	mov	r0, r5
    9804:	f7ff febb 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9808:	2800      	cmp	r0, #0
    980a:	dbeb      	blt.n	97e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    980c:	2800      	cmp	r0, #0
    980e:	d0e4      	beq.n	97da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9810:	9b01      	ldr	r3, [sp, #4]
    9812:	2b00      	cmp	r3, #0
    9814:	d1e1      	bne.n	97da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    9816:	b107      	cbz	r7, 981a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    9818:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    981a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    981e:	4621      	mov	r1, r4
    9820:	4628      	mov	r0, r5
    9822:	f7ff ff3b 	bl	969c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    9826:	4607      	mov	r7, r0
    9828:	2800      	cmp	r0, #0
    982a:	d0dc      	beq.n	97e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    982c:	b93e      	cbnz	r6, 983e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    982e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9830:	2b00      	cmp	r3, #0
    9832:	db01      	blt.n	9838 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9834:	3b01      	subs	r3, #1
    9836:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9838:	f8c8 4000 	str.w	r4, [r8]
  return true;
    983c:	e7d3      	b.n	97e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    983e:	4622      	mov	r2, r4
    9840:	4631      	mov	r1, r6
    9842:	4628      	mov	r0, r5
    9844:	f7ff ff2a 	bl	969c <FatPartition::fatPut(unsigned long, unsigned long)>
    9848:	2800      	cmp	r0, #0
    984a:	d1f0      	bne.n	982e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    984c:	4607      	mov	r7, r0
    984e:	e7ca      	b.n	97e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009850 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9850:	b5f0      	push	{r4, r5, r6, r7, lr}
    9852:	b083      	sub	sp, #12
    9854:	4605      	mov	r5, r0
    9856:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9858:	2700      	movs	r7, #0
    985a:	e001      	b.n	9860 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    985c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    985e:	b1ce      	cbz	r6, 9894 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9860:	aa01      	add	r2, sp, #4
    9862:	4621      	mov	r1, r4
    9864:	4628      	mov	r0, r5
    9866:	f7ff fe8a 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    986a:	1e06      	subs	r6, r0, #0
    986c:	db11      	blt.n	9892 <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    986e:	463a      	mov	r2, r7
    9870:	4621      	mov	r1, r4
    9872:	4628      	mov	r0, r5
    9874:	f7ff ff12 	bl	969c <FatPartition::fatPut(unsigned long, unsigned long)>
    9878:	4602      	mov	r2, r0
    987a:	b158      	cbz	r0, 9894 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    987c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    987e:	2b00      	cmp	r3, #0
    9880:	db01      	blt.n	9886 <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9882:	3301      	adds	r3, #1
    9884:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9886:	68eb      	ldr	r3, [r5, #12]
    9888:	42a3      	cmp	r3, r4
    988a:	d9e7      	bls.n	985c <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    988c:	3c01      	subs	r4, #1
    988e:	60ec      	str	r4, [r5, #12]
    9890:	e7e4      	b.n	985c <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9892:	2200      	movs	r2, #0
}
    9894:	4610      	mov	r0, r2
    9896:	b003      	add	sp, #12
    9898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000989c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    989c:	b5f0      	push	{r4, r5, r6, r7, lr}
    989e:	b087      	sub	sp, #28
    98a0:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    98a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    98a4:	2800      	cmp	r0, #0
    98a6:	da45      	bge.n	9934 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    98a8:	79e3      	ldrb	r3, [r4, #7]
    98aa:	2b0c      	cmp	r3, #12
    98ac:	d11e      	bne.n	98ec <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    98ae:	69e7      	ldr	r7, [r4, #28]
    98b0:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    98b2:	2b02      	cmp	r3, #2
    98b4:	d917      	bls.n	98e6 <FatPartition::freeClusterCount()+0x4a>
    98b6:	2502      	movs	r5, #2
    uint32_t free = 0;
    98b8:	2600      	movs	r6, #0
    98ba:	e006      	b.n	98ca <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    98bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    98c0:	e038      	b.n	9934 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    98c2:	1c6b      	adds	r3, r5, #1
    98c4:	42af      	cmp	r7, r5
    98c6:	d00f      	beq.n	98e8 <FatPartition::freeClusterCount()+0x4c>
    98c8:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    98ca:	aa03      	add	r2, sp, #12
    98cc:	4629      	mov	r1, r5
    98ce:	4620      	mov	r0, r4
    98d0:	f7ff fe55 	bl	957e <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    98d4:	2800      	cmp	r0, #0
    98d6:	dbf1      	blt.n	98bc <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    98d8:	2800      	cmp	r0, #0
    98da:	d0f2      	beq.n	98c2 <FatPartition::freeClusterCount()+0x26>
    98dc:	9b03      	ldr	r3, [sp, #12]
    98de:	2b00      	cmp	r3, #0
    98e0:	d1ef      	bne.n	98c2 <FatPartition::freeClusterCount()+0x26>
        free++;
    98e2:	3601      	adds	r6, #1
    98e4:	e7ed      	b.n	98c2 <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    98e6:	2600      	movs	r6, #0
      }
    }
    return free;
    98e8:	4630      	mov	r0, r6
    98ea:	e023      	b.n	9934 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    98ec:	2300      	movs	r3, #0
    98ee:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    98f0:	69e3      	ldr	r3, [r4, #28]
    98f2:	3301      	adds	r3, #1
    98f4:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    98f6:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    98f8:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    98fc:	f013 0f01 	tst.w	r3, #1
    9900:	d11a      	bne.n	9938 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    9902:	2300      	movs	r3, #0
    9904:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    990c:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    9910:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    9914:	79e3      	ldrb	r3, [r4, #7]
    9916:	2b20      	cmp	r3, #32
    9918:	d017      	beq.n	994a <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    991a:	6820      	ldr	r0, [r4, #0]
    991c:	6803      	ldr	r3, [r0, #0]
    991e:	a904      	add	r1, sp, #16
    9920:	9101      	str	r1, [sp, #4]
    9922:	4913      	ldr	r1, [pc, #76]	; (9970 <FatPartition::freeClusterCount()+0xd4>)
    9924:	9100      	str	r1, [sp, #0]
    9926:	699e      	ldr	r6, [r3, #24]
    9928:	462b      	mov	r3, r5
    992a:	69a1      	ldr	r1, [r4, #24]
    992c:	47b0      	blx	r6
    992e:	b1d8      	cbz	r0, 9968 <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9930:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9932:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9934:	b007      	add	sp, #28
    9936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9938:	f504 700e 	add.w	r0, r4, #568	; 0x238
    993c:	f002 f81e 	bl	b97c <FsCache::sync()>
    9940:	2800      	cmp	r0, #0
    9942:	d1de      	bne.n	9902 <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9948:	e7f4      	b.n	9934 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    994a:	6820      	ldr	r0, [r4, #0]
    994c:	6803      	ldr	r3, [r0, #0]
    994e:	a904      	add	r1, sp, #16
    9950:	9101      	str	r1, [sp, #4]
    9952:	4908      	ldr	r1, [pc, #32]	; (9974 <FatPartition::freeClusterCount()+0xd8>)
    9954:	9100      	str	r1, [sp, #0]
    9956:	699e      	ldr	r6, [r3, #24]
    9958:	462b      	mov	r3, r5
    995a:	69a1      	ldr	r1, [r4, #24]
    995c:	47b0      	blx	r6
    995e:	2800      	cmp	r0, #0
    9960:	d1e6      	bne.n	9930 <FatPartition::freeClusterCount()+0x94>
    9962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9966:	e7e5      	b.n	9934 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    996c:	e7e2      	b.n	9934 <FatPartition::freeClusterCount()+0x98>
    996e:	bf00      	nop
    9970:	00009511 	.word	0x00009511
    9974:	00009549 	.word	0x00009549

00009978 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9978:	b570      	push	{r4, r5, r6, lr}
    997a:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    997c:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    997e:	2300      	movs	r3, #0
    9980:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9982:	2001      	movs	r0, #1
    9984:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9986:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    998a:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    998c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9994:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9996:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    999a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    999e:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    99a2:	b1e2      	cbz	r2, 99de <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    99a4:	4616      	mov	r6, r2
    if (part > 4) {
    99a6:	2a04      	cmp	r2, #4
    99a8:	d901      	bls.n	99ae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    99aa:	2000      	movs	r0, #0
}
    99ac:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    99ae:	461a      	mov	r2, r3
    99b0:	4619      	mov	r1, r3
    99b2:	4628      	mov	r0, r5
    99b4:	f002 f809 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    99b8:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    99bc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    99c0:	4433      	add	r3, r6
    99c2:	011e      	lsls	r6, r3, #4
    99c4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    99c8:	2800      	cmp	r0, #0
    99ca:	d06a      	beq.n	9aa2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    99cc:	7919      	ldrb	r1, [r3, #4]
    99ce:	2900      	cmp	r1, #0
    99d0:	d069      	beq.n	9aa6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    99d2:	5d92      	ldrb	r2, [r2, r6]
    99d4:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    99d8:	d167      	bne.n	9aaa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    99da:	689e      	ldr	r6, [r3, #8]
    99dc:	e000      	b.n	99e0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    99de:	2600      	movs	r6, #0
    99e0:	2200      	movs	r2, #0
    99e2:	4631      	mov	r1, r6
    99e4:	4628      	mov	r0, r5
    99e6:	f001 fff0 	bl	b9ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    99ea:	4601      	mov	r1, r0
    99ec:	2800      	cmp	r0, #0
    99ee:	d05e      	beq.n	9aae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    99f0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    99f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    99f8:	d15b      	bne.n	9ab2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    99fa:	7c03      	ldrb	r3, [r0, #16]
    99fc:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    99fe:	3b01      	subs	r3, #1
    9a00:	b2db      	uxtb	r3, r3
    9a02:	2b01      	cmp	r3, #1
    9a04:	d857      	bhi.n	9ab6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9a06:	7b40      	ldrb	r0, [r0, #13]
    9a08:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9a0a:	1e43      	subs	r3, r0, #1
    9a0c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    9a0e:	2300      	movs	r3, #0
    9a10:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9a12:	2801      	cmp	r0, #1
    9a14:	d00d      	beq.n	9a32 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    9a16:	2200      	movs	r2, #0
    9a18:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    9a1a:	3201      	adds	r2, #1
    9a1c:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9a1e:	005b      	lsls	r3, r3, #1
    9a20:	b2db      	uxtb	r3, r3
    9a22:	4298      	cmp	r0, r3
    9a24:	d004      	beq.n	9a30 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    9a26:	2b00      	cmp	r3, #0
    9a28:	d1f7      	bne.n	9a1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    9a2a:	71a2      	strb	r2, [r4, #6]
  return false;
    9a2c:	2000      	movs	r0, #0
    9a2e:	e7bd      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9a30:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9a32:	8acb      	ldrh	r3, [r1, #22]
    9a34:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9a36:	b90b      	cbnz	r3, 9a3c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    9a38:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9a3a:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9a3c:	89cb      	ldrh	r3, [r1, #14]
    9a3e:	4433      	add	r3, r6
    9a40:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    9a42:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9a46:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9a48:	6920      	ldr	r0, [r4, #16]
    9a4a:	7c0d      	ldrb	r5, [r1, #16]
    9a4c:	fb00 3305 	mla	r3, r0, r5, r3
    9a50:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9a52:	0152      	lsls	r2, r2, #5
    9a54:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    9a58:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    9a5c:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    9a5e:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    9a62:	b902      	cbnz	r2, 9a66 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    9a64:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9a66:	1af3      	subs	r3, r6, r3
    9a68:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9a6a:	79a2      	ldrb	r2, [r4, #6]
    9a6c:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    9a6e:	1c5a      	adds	r2, r3, #1
    9a70:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a76:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9a78:	f640 72f4 	movw	r2, #4084	; 0xff4
    9a7c:	4293      	cmp	r3, r2
    9a7e:	d907      	bls.n	9a90 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9a80:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9a84:	4293      	cmp	r3, r2
    9a86:	d90a      	bls.n	9a9e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    9a88:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9a8a:	6223      	str	r3, [r4, #32]
    9a8c:	2320      	movs	r3, #32
    9a8e:	e000      	b.n	9a92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    9a90:	230c      	movs	r3, #12
    m_fatType = 12;
    9a92:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9a94:	6320      	str	r0, [r4, #48]	; 0x30
    9a96:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    9a9a:	2001      	movs	r0, #1
    9a9c:	e786      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9a9e:	2310      	movs	r3, #16
    9aa0:	e7f7      	b.n	9a92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    9aa2:	2000      	movs	r0, #0
    9aa4:	e782      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9aa6:	2000      	movs	r0, #0
    9aa8:	e780      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9aaa:	2000      	movs	r0, #0
    9aac:	e77e      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9aae:	2000      	movs	r0, #0
    9ab0:	e77c      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9ab2:	2000      	movs	r0, #0
    9ab4:	e77a      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9ab6:	2000      	movs	r0, #0
    9ab8:	e778      	b.n	99ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

00009aba <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9aba:	b538      	push	{r3, r4, r5, lr}
    9abc:	4604      	mov	r4, r0
    9abe:	460d      	mov	r5, r1
    9ac0:	2300      	movs	r3, #0
    9ac2:	6383      	str	r3, [r0, #56]	; 0x38
    9ac4:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9ac6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9ac8:	b1ab      	cbz	r3, 9af6 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    9aca:	4601      	mov	r1, r0
    9acc:	2024      	movs	r0, #36	; 0x24
    9ace:	f000 f8b3 	bl	9c38 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    9ad2:	2300      	movs	r3, #0
    9ad4:	7003      	strb	r3, [r0, #0]
    9ad6:	7043      	strb	r3, [r0, #1]
    9ad8:	7083      	strb	r3, [r0, #2]
    9ada:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9adc:	4684      	mov	ip, r0
    9ade:	6bad      	ldr	r5, [r5, #56]	; 0x38
    9ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9ae2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9aec:	682b      	ldr	r3, [r5, #0]
    9aee:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    9af2:	4620      	mov	r0, r4
    9af4:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    9af6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    9af8:	2b00      	cmp	r3, #0
    9afa:	d0fa      	beq.n	9af2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    9afc:	4601      	mov	r1, r0
    9afe:	2038      	movs	r0, #56	; 0x38
    9b00:	f000 f89a 	bl	9c38 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9b04:	2300      	movs	r3, #0
    9b06:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    9b0a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    9b0e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    9b12:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9b14:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9b16:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    9b1a:	f8d3 c000 	ldr.w	ip, [r3]
    9b1e:	685d      	ldr	r5, [r3, #4]
    9b20:	6899      	ldr	r1, [r3, #8]
    9b22:	68da      	ldr	r2, [r3, #12]
    9b24:	f8c0 c000 	str.w	ip, [r0]
    9b28:	6045      	str	r5, [r0, #4]
    9b2a:	6081      	str	r1, [r0, #8]
    9b2c:	60c2      	str	r2, [r0, #12]
    9b2e:	3310      	adds	r3, #16
    9b30:	3010      	adds	r0, #16
    9b32:	4573      	cmp	r3, lr
    9b34:	d1f1      	bne.n	9b1a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    9b36:	681b      	ldr	r3, [r3, #0]
    9b38:	6003      	str	r3, [r0, #0]
    9b3a:	e7da      	b.n	9af2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

00009b3c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    9b3c:	b510      	push	{r4, lr}
    9b3e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9b40:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9b42:	b110      	cbz	r0, 9b4a <FsBaseFile::close()+0xe>
    9b44:	f7fe f844 	bl	7bd0 <FatFile::close()>
    9b48:	b938      	cbnz	r0, 9b5a <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9b4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9b4c:	b140      	cbz	r0, 9b60 <FsBaseFile::close()+0x24>
    9b4e:	f7fb fcbf 	bl	54d0 <ExFatFile::close()>
    9b52:	b130      	cbz	r0, 9b62 <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    9b54:	2300      	movs	r3, #0
    9b56:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9b58:	e003      	b.n	9b62 <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    9b5a:	2300      	movs	r3, #0
    9b5c:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9b5e:	e000      	b.n	9b62 <FsBaseFile::close()+0x26>
  }
  return false;
    9b60:	2000      	movs	r0, #0
}
    9b62:	bd10      	pop	{r4, pc}

00009b64 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9b64:	b3a1      	cbz	r1, 9bd0 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b68:	4604      	mov	r4, r0
    9b6a:	4617      	mov	r7, r2
    9b6c:	461e      	mov	r6, r3
    9b6e:	460d      	mov	r5, r1
    return false;
  }
  close();
    9b70:	f7ff ffe4 	bl	9b3c <FsBaseFile::close()>
  if (vol->m_fVol) {
    9b74:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    9b78:	b18b      	cbz	r3, 9b9e <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    9b7a:	4621      	mov	r1, r4
    9b7c:	2024      	movs	r0, #36	; 0x24
    9b7e:	f000 f85b 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9b82:	2300      	movs	r3, #0
    9b84:	7003      	strb	r3, [r0, #0]
    9b86:	7043      	strb	r3, [r0, #1]
    9b88:	7083      	strb	r3, [r0, #2]
    9b8a:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9b8c:	4633      	mov	r3, r6
    9b8e:	463a      	mov	r2, r7
    9b90:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9b94:	f7fe f889 	bl	7caa <FatFile::open(FatVolume*, char const*, int)>
    9b98:	b900      	cbnz	r0, 9b9c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    9b9a:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    9b9e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9ba2:	b1bb      	cbz	r3, 9bd4 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    9ba4:	4621      	mov	r1, r4
    9ba6:	2038      	movs	r0, #56	; 0x38
    9ba8:	f000 f846 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9bac:	2200      	movs	r2, #0
    9bae:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9bb2:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9bb6:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9bba:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9bbc:	4633      	mov	r3, r6
    9bbe:	463a      	mov	r2, r7
    9bc0:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9bc4:	f7fc f8cd 	bl	5d62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9bc8:	2800      	cmp	r0, #0
    9bca:	d1e7      	bne.n	9b9c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    9bcc:	63e0      	str	r0, [r4, #60]	; 0x3c
    9bce:	e7e5      	b.n	9b9c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    9bd0:	2000      	movs	r0, #0
}
    9bd2:	4770      	bx	lr
  return false;
    9bd4:	2000      	movs	r0, #0
    9bd6:	e7e1      	b.n	9b9c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

00009bd8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9bd8:	b570      	push	{r4, r5, r6, lr}
    9bda:	4605      	mov	r5, r0
    9bdc:	460c      	mov	r4, r1
    9bde:	4616      	mov	r6, r2
  close();
    9be0:	f7ff ffac 	bl	9b3c <FsBaseFile::close()>
  if (dir->m_fFile) {
    9be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9be6:	b17b      	cbz	r3, 9c08 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    9be8:	4629      	mov	r1, r5
    9bea:	2024      	movs	r0, #36	; 0x24
    9bec:	f000 f824 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9bf0:	2100      	movs	r1, #0
    9bf2:	7001      	strb	r1, [r0, #0]
    9bf4:	7041      	strb	r1, [r0, #1]
    9bf6:	7081      	strb	r1, [r0, #2]
    9bf8:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9bfa:	4632      	mov	r2, r6
    9bfc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9bfe:	f7fd ff33 	bl	7a68 <FatFile::openNext(FatFile*, int)>
    9c02:	b900      	cbnz	r0, 9c06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    9c04:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9c06:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    9c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9c0a:	b19b      	cbz	r3, 9c34 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    9c0c:	4629      	mov	r1, r5
    9c0e:	2038      	movs	r0, #56	; 0x38
    9c10:	f000 f812 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9c14:	2200      	movs	r2, #0
    9c16:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9c1a:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9c1e:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9c22:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9c24:	4632      	mov	r2, r6
    9c26:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9c28:	f7fc f8a4 	bl	5d74 <ExFatFile::openNext(ExFatFile*, int)>
    9c2c:	2800      	cmp	r0, #0
    9c2e:	d1ea      	bne.n	9c06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    9c30:	63e8      	str	r0, [r5, #60]	; 0x3c
    9c32:	e7e8      	b.n	9c06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    9c34:	2000      	movs	r0, #0
    9c36:	e7e6      	b.n	9c06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00009c38 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9c38:	4608      	mov	r0, r1
    9c3a:	4770      	bx	lr

00009c3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c40:	4604      	mov	r4, r0
    9c42:	4690      	mov	r8, r2
    9c44:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    9c46:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9c4a:	2600      	movs	r6, #0
    9c4c:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9c50:	4601      	mov	r1, r0
    9c52:	f44f 6090 	mov.w	r0, #1152	; 0x480
    9c56:	f7ff ffef 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9c5a:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9c5c:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9c60:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9c64:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    9c68:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    9c6c:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9c70:	463a      	mov	r2, r7
    9c72:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9c76:	f7fd fbcd 	bl	7414 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9c7a:	bb00      	cbnz	r0, 9cbe <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9c7c:	2500      	movs	r5, #0
    9c7e:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9c82:	4621      	mov	r1, r4
    9c84:	f240 406c 	movw	r0, #1132	; 0x46c
    9c88:	f7ff ffd6 	bl	9c38 <operator new(unsigned int, unsigned long*)>
    9c8c:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9c8e:	71c5      	strb	r5, [r0, #7]
    9c90:	2302      	movs	r3, #2
    9c92:	7203      	strb	r3, [r0, #8]
    9c94:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    9c98:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    9c9c:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    9ca0:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9ca4:	463a      	mov	r2, r7
    9ca6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9caa:	f7ff fe65 	bl	9978 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9cae:	b9f8      	cbnz	r0, 9cf0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9cb0:	2000      	movs	r0, #0
    9cb2:	4b1a      	ldr	r3, [pc, #104]	; (9d1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9cb4:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    9cb6:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    9cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9cbe:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9cc2:	4630      	mov	r0, r6
    9cc4:	f7fb fc04 	bl	54d0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9cc8:	4629      	mov	r1, r5
    9cca:	4630      	mov	r0, r6
    9ccc:	f7fb fc2e 	bl	552c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    9cd0:	2800      	cmp	r0, #0
    9cd2:	d0d3      	beq.n	9c7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    9cd4:	4b12      	ldr	r3, [pc, #72]	; (9d20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	b13b      	cbz	r3, 9cea <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    9cda:	f1b8 0f00 	cmp.w	r8, #0
    9cde:	d119      	bne.n	9d14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    9ce0:	4b0e      	ldr	r3, [pc, #56]	; (9d1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	b1b3      	cbz	r3, 9d14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    9ce6:	2001      	movs	r0, #1
    9ce8:	e7e7      	b.n	9cba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    9cea:	4b0d      	ldr	r3, [pc, #52]	; (9d20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9cec:	601d      	str	r5, [r3, #0]
    9cee:	e7f4      	b.n	9cda <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9cf0:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    9cf4:	4628      	mov	r0, r5
    9cf6:	f7fd ff6b 	bl	7bd0 <FatFile::close()>
    return m_vwd.openRoot(this);
    9cfa:	4631      	mov	r1, r6
    9cfc:	4628      	mov	r0, r5
    9cfe:	f7fd fc88 	bl	7612 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    9d02:	2800      	cmp	r0, #0
    9d04:	d0d4      	beq.n	9cb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    9d06:	4b07      	ldr	r3, [pc, #28]	; (9d24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d1e5      	bne.n	9cda <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    9d0e:	4b05      	ldr	r3, [pc, #20]	; (9d24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9d10:	601e      	str	r6, [r3, #0]
    9d12:	e7e2      	b.n	9cda <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    9d14:	4b01      	ldr	r3, [pc, #4]	; (9d1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9d16:	601c      	str	r4, [r3, #0]
  return true;
    9d18:	2001      	movs	r0, #1
    9d1a:	e7ce      	b.n	9cba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    9d1c:	20004ba0 	.word	0x20004ba0
    9d20:	20004b6c 	.word	0x20004b6c
    9d24:	20004bac 	.word	0x20004bac

00009d28 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9d28:	b538      	push	{r3, r4, r5, lr}
    9d2a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    9d2c:	2000      	movs	r0, #0
    9d2e:	6060      	str	r0, [r4, #4]
    9d30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    9d34:	60a5      	str	r5, [r4, #8]
    9d36:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    9d38:	64a0      	str	r0, [r4, #72]	; 0x48
    9d3a:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9d3c:	4620      	mov	r0, r4
    9d3e:	4d03      	ldr	r5, [pc, #12]	; (9d4c <FsVolume::open(char const*, int)+0x24>)
    9d40:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9d44:	f7ff ff0e 	bl	9b64 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9d48:	4620      	mov	r0, r4
    9d4a:	bd38      	pop	{r3, r4, r5, pc}
    9d4c:	200022b8 	.word	0x200022b8

00009d50 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9d54:	4770      	bx	lr

00009d56 <SharedSpiCard::errorCode() const>:
  }
    9d56:	7c40      	ldrb	r0, [r0, #17]
    9d58:	4770      	bx	lr

00009d5a <SharedSpiCard::errorData() const>:
  }
    9d5a:	7d00      	ldrb	r0, [r0, #20]
    9d5c:	4770      	bx	lr

00009d5e <SharedSpiCard::type() const>:
  }
    9d5e:	7d40      	ldrb	r0, [r0, #21]
    9d60:	4770      	bx	lr

00009d62 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9d62:	2001      	movs	r0, #1
    9d64:	4770      	bx	lr

00009d66 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9d66:	7f00      	ldrb	r0, [r0, #28]
    9d68:	4770      	bx	lr

00009d6a <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    9d6a:	b500      	push	{lr}
    9d6c:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9d6e:	6803      	ldr	r3, [r0, #0]
    9d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9d72:	4669      	mov	r1, sp
    9d74:	4798      	blx	r3
    9d76:	b3b0      	cbz	r0, 9de6 <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    9d78:	f89d 3000 	ldrb.w	r3, [sp]
    9d7c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    9d80:	d003      	beq.n	9d8a <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    9d82:	2b40      	cmp	r3, #64	; 0x40
    9d84:	d020      	beq.n	9dc8 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    9d86:	2000      	movs	r0, #0
    9d88:	e02e      	b.n	9de8 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9d8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9d8e:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9d92:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d96:	0080      	lsls	r0, r0, #2
    9d98:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    9d9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9da0:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9da4:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9da6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    9daa:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9dae:	f89d 200a 	ldrb.w	r2, [sp, #10]
    9db2:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9db4:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9db8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9dbc:	f002 020f 	and.w	r2, r2, #15
    9dc0:	4413      	add	r3, r2
    9dc2:	3b07      	subs	r3, #7
    9dc4:	4098      	lsls	r0, r3
    9dc6:	e00f      	b.n	9de8 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9dc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9dd0:	f89d 0009 	ldrb.w	r0, [sp, #9]
    9dd4:	3001      	adds	r0, #1
    9dd6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    9dda:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9dde:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    9de2:	0280      	lsls	r0, r0, #10
    9de4:	e000      	b.n	9de8 <SharedSpiCard::sectorCount()+0x7e>
    9de6:	2000      	movs	r0, #0
}
    9de8:	b005      	add	sp, #20
    9dea:	f85d fb04 	ldr.w	pc, [sp], #4

00009dee <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    9dee:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    9df0:	6803      	ldr	r3, [r0, #0]
    9df2:	695c      	ldr	r4, [r3, #20]
    9df4:	2301      	movs	r3, #1
    9df6:	47a0      	blx	r4
}
    9df8:	bd10      	pop	{r4, pc}

00009dfa <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9dfa:	b538      	push	{r3, r4, r5, lr}
    9dfc:	4604      	mov	r4, r0
    9dfe:	460d      	mov	r5, r1
  if (!syncDevice()) {
    9e00:	6803      	ldr	r3, [r0, #0]
    9e02:	6a1b      	ldr	r3, [r3, #32]
    9e04:	4798      	blx	r3
    9e06:	b100      	cbz	r0, 9e0a <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    9e08:	7725      	strb	r5, [r4, #28]
  return true;
}
    9e0a:	bd38      	pop	{r3, r4, r5, pc}

00009e0c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    9e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e0e:	4605      	mov	r5, r0
    9e10:	460e      	mov	r6, r1
    9e12:	4614      	mov	r4, r2
    9e14:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9e16:	7cc3      	ldrb	r3, [r0, #19]
    9e18:	2b02      	cmp	r3, #2
    9e1a:	d021      	beq.n	9e60 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    9e1c:	682b      	ldr	r3, [r5, #0]
    9e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9e20:	4631      	mov	r1, r6
    9e22:	4628      	mov	r0, r5
    9e24:	4798      	blx	r3
    9e26:	4603      	mov	r3, r0
    9e28:	b1c0      	cbz	r0, 9e5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    9e2a:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9e2c:	b167      	cbz	r7, 9e48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    9e2e:	2600      	movs	r6, #0
    if (!writeData(src)) {
    9e30:	682a      	ldr	r2, [r5, #0]
    9e32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    9e34:	4621      	mov	r1, r4
    9e36:	4628      	mov	r0, r5
    9e38:	4790      	blx	r2
    9e3a:	4603      	mov	r3, r0
    9e3c:	b170      	cbz	r0, 9e5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9e3e:	3601      	adds	r6, #1
    9e40:	f504 7400 	add.w	r4, r4, #512	; 0x200
    9e44:	42b7      	cmp	r7, r6
    9e46:	d1f3      	bne.n	9e30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    9e48:	69ab      	ldr	r3, [r5, #24]
    9e4a:	443b      	add	r3, r7
    9e4c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9e4e:	7f2b      	ldrb	r3, [r5, #28]
    9e50:	b923      	cbnz	r3, 9e5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    9e52:	682b      	ldr	r3, [r5, #0]
    9e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9e56:	4628      	mov	r0, r5
    9e58:	4798      	blx	r3
    9e5a:	4603      	mov	r3, r0

fail:
  return false;
}
    9e5c:	4618      	mov	r0, r3
    9e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9e60:	6983      	ldr	r3, [r0, #24]
    9e62:	428b      	cmp	r3, r1
    9e64:	d1da      	bne.n	9e1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    9e66:	e7e1      	b.n	9e2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009e68 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e6c:	4605      	mov	r5, r0
    9e6e:	460c      	mov	r4, r1
    9e70:	4692      	mov	sl, r2
    9e72:	461f      	mov	r7, r3
    9e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9e78:	7cc3      	ldrb	r3, [r0, #19]
    9e7a:	2b02      	cmp	r3, #2
    9e7c:	d026      	beq.n	9ecc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    9e7e:	682b      	ldr	r3, [r5, #0]
    9e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9e82:	4621      	mov	r1, r4
    9e84:	4628      	mov	r0, r5
    9e86:	4798      	blx	r3
    9e88:	4603      	mov	r3, r0
    9e8a:	b1e0      	cbz	r0, 9ec6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    9e8c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9e8e:	f1ba 0f00 	cmp.w	sl, #0
    9e92:	d00e      	beq.n	9eb2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9e94:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    9e98:	4641      	mov	r1, r8
    9e9a:	4620      	mov	r0, r4
    9e9c:	47b8      	blx	r7
    9e9e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9ea0:	682b      	ldr	r3, [r5, #0]
    9ea2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    9ea4:	4628      	mov	r0, r5
    9ea6:	47b0      	blx	r6
    9ea8:	4603      	mov	r3, r0
    9eaa:	b160      	cbz	r0, 9ec6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    9eac:	3401      	adds	r4, #1
    9eae:	45a1      	cmp	r9, r4
    9eb0:	d1f2      	bne.n	9e98 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    9eb2:	69ab      	ldr	r3, [r5, #24]
    9eb4:	4453      	add	r3, sl
    9eb6:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9eb8:	7f2b      	ldrb	r3, [r5, #28]
    9eba:	b923      	cbnz	r3, 9ec6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    9ebc:	682b      	ldr	r3, [r5, #0]
    9ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9ec0:	4628      	mov	r0, r5
    9ec2:	4798      	blx	r3
    9ec4:	4603      	mov	r3, r0

 fail:
  return false;
}
    9ec6:	4618      	mov	r0, r3
    9ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ecc:	6983      	ldr	r3, [r0, #24]
    9ece:	428b      	cmp	r3, r1
    9ed0:	d1d5      	bne.n	9e7e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    9ed2:	e7dc      	b.n	9e8e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

00009ed4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9ed4:	4770      	bx	lr

00009ed6 <SharedSpiCard::end()>:
  void end() {
    9ed6:	b508      	push	{r3, lr}
    m_spiDriver.end();
    9ed8:	3004      	adds	r0, #4
    9eda:	f001 fcfd 	bl	b8d8 <SdSpiArduinoDriver::end()>
  }
    9ede:	bd08      	pop	{r3, pc}

00009ee0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9ee0:	b510      	push	{r4, lr}
    9ee2:	4604      	mov	r4, r0
    9ee4:	2120      	movs	r1, #32
    9ee6:	f003 f9b9 	bl	d25c <operator delete(void*, unsigned int)>
    9eea:	4620      	mov	r0, r4
    9eec:	bd10      	pop	{r4, pc}

00009eee <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    9eee:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    9ef0:	7c83      	ldrb	r3, [r0, #18]
    9ef2:	b103      	cbz	r3, 9ef6 <SharedSpiCard::spiStart()+0x8>
}
    9ef4:	bd38      	pop	{r3, r4, r5, pc}
    9ef6:	4604      	mov	r4, r0
    m_spiDriver.activate();
    9ef8:	1d05      	adds	r5, r0, #4
    9efa:	4628      	mov	r0, r5
    9efc:	f001 fc14 	bl	b728 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9f00:	2100      	movs	r1, #0
    9f02:	7c20      	ldrb	r0, [r4, #16]
    9f04:	f001 fc0c 	bl	b720 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9f08:	21ff      	movs	r1, #255	; 0xff
    9f0a:	4628      	mov	r0, r5
    9f0c:	f001 fd05 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9f10:	2301      	movs	r3, #1
    9f12:	74a3      	strb	r3, [r4, #18]
}
    9f14:	e7ee      	b.n	9ef4 <SharedSpiCard::spiStart()+0x6>

00009f16 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    9f16:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    9f18:	7c83      	ldrb	r3, [r0, #18]
    9f1a:	b903      	cbnz	r3, 9f1e <SharedSpiCard::spiStop()+0x8>
}
    9f1c:	bd38      	pop	{r3, r4, r5, pc}
    9f1e:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    9f20:	2101      	movs	r1, #1
    9f22:	7c00      	ldrb	r0, [r0, #16]
    9f24:	f001 fbfc 	bl	b720 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9f28:	1d25      	adds	r5, r4, #4
    9f2a:	21ff      	movs	r1, #255	; 0xff
    9f2c:	4628      	mov	r0, r5
    9f2e:	f001 fcf4 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9f32:	4628      	mov	r0, r5
    9f34:	f001 fca0 	bl	b878 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9f38:	2300      	movs	r3, #0
    9f3a:	74a3      	strb	r3, [r4, #18]
}
    9f3c:	e7ee      	b.n	9f1c <SharedSpiCard::spiStop()+0x6>

00009f3e <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9f3e:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    9f40:	7cc3      	ldrb	r3, [r0, #19]
    9f42:	2b01      	cmp	r3, #1
    9f44:	d018      	beq.n	9f78 <SharedSpiCard::isBusy()+0x3a>
    9f46:	4604      	mov	r4, r0
  if (!spiActive) {
    9f48:	7c83      	ldrb	r3, [r0, #18]
    9f4a:	b143      	cbz	r3, 9f5e <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    9f4c:	3004      	adds	r0, #4
    9f4e:	f001 fcc8 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9f52:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9f56:	bf18      	it	ne
    9f58:	2501      	movne	r5, #1
}
    9f5a:	4628      	mov	r0, r5
    9f5c:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    9f5e:	f7ff ffc6 	bl	9eee <SharedSpiCard::spiStart()>
    9f62:	1d20      	adds	r0, r4, #4
    9f64:	f001 fcbd 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9f68:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9f6c:	bf18      	it	ne
    9f6e:	2501      	movne	r5, #1
    spiStop();
    9f70:	4620      	mov	r0, r4
    9f72:	f7ff ffd0 	bl	9f16 <SharedSpiCard::spiStop()>
    9f76:	e7f0      	b.n	9f5a <SharedSpiCard::isBusy()+0x1c>
    return false;
    9f78:	2500      	movs	r5, #0
    9f7a:	e7ee      	b.n	9f5a <SharedSpiCard::isBusy()+0x1c>

00009f7c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f80:	4604      	mov	r4, r0
    9f82:	4688      	mov	r8, r1
    9f84:	4691      	mov	r9, r2
    9f86:	4b17      	ldr	r3, [pc, #92]	; (9fe4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    9f88:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    9f8a:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9f8e:	b2ad      	uxth	r5, r5
    9f90:	1d06      	adds	r6, r0, #4
    9f92:	461f      	mov	r7, r3
    9f94:	4630      	mov	r0, r6
    9f96:	f001 fca4 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9f9a:	7520      	strb	r0, [r4, #20]
    9f9c:	28ff      	cmp	r0, #255	; 0xff
    9f9e:	d10c      	bne.n	9fba <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    9fa0:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9fa2:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9fa4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9fa8:	d0f4      	beq.n	9f94 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    9faa:	231d      	movs	r3, #29
    m_errorCode = code;
    9fac:	7463      	strb	r3, [r4, #17]
  spiStop();
    9fae:	4620      	mov	r0, r4
    9fb0:	f7ff ffb1 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    9fb4:	2000      	movs	r0, #0
}
    9fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    9fba:	28fe      	cmp	r0, #254	; 0xfe
    9fbc:	d001      	beq.n	9fc2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    9fbe:	2318      	movs	r3, #24
    9fc0:	e7f4      	b.n	9fac <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    9fc2:	464a      	mov	r2, r9
    9fc4:	4641      	mov	r1, r8
    9fc6:	4630      	mov	r0, r6
    9fc8:	f001 fc97 	bl	b8fa <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9fcc:	7520      	strb	r0, [r4, #20]
    9fce:	b108      	cbz	r0, 9fd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    9fd0:	2325      	movs	r3, #37	; 0x25
    9fd2:	e7eb      	b.n	9fac <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    9fd4:	4630      	mov	r0, r6
    9fd6:	f001 fc84 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    9fda:	4630      	mov	r0, r6
    9fdc:	f001 fc81 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  return true;
    9fe0:	2001      	movs	r0, #1
    9fe2:	e7e8      	b.n	9fb6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    9fe4:	200052a8 	.word	0x200052a8

00009fe8 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    9fe8:	b508      	push	{r3, lr}
  return readData(dst, 512);
    9fea:	f44f 7200 	mov.w	r2, #512	; 0x200
    9fee:	f7ff ffc5 	bl	9f7c <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    9ff2:	bd08      	pop	{r3, pc}

00009ff4 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    9ff4:	b570      	push	{r4, r5, r6, lr}
    9ff6:	4b0a      	ldr	r3, [pc, #40]	; (a020 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    9ff8:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    9ffa:	440c      	add	r4, r1
    9ffc:	b2a4      	uxth	r4, r4
    9ffe:	1d05      	adds	r5, r0, #4
    a000:	461e      	mov	r6, r3
    a002:	4628      	mov	r0, r5
    a004:	f001 fc6d 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a008:	28ff      	cmp	r0, #255	; 0xff
    a00a:	d006      	beq.n	a01a <SharedSpiCard::waitReady(unsigned short)+0x26>
    a00c:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a00e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a010:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a014:	d0f5      	beq.n	a002 <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    a016:	2000      	movs	r0, #0
    a018:	e000      	b.n	a01c <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    a01a:	2001      	movs	r0, #1
}
    a01c:	bd70      	pop	{r4, r5, r6, pc}
    a01e:	bf00      	nop
    a020:	200052a8 	.word	0x200052a8

0000a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a028:	b082      	sub	sp, #8
    a02a:	4605      	mov	r5, r0
    a02c:	460f      	mov	r7, r1
    a02e:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    a030:	6803      	ldr	r3, [r0, #0]
    a032:	6a1b      	ldr	r3, [r3, #32]
    a034:	4798      	blx	r3
    a036:	2800      	cmp	r0, #0
    a038:	d03b      	beq.n	a0b2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    a03a:	7cab      	ldrb	r3, [r5, #18]
    a03c:	b3ab      	cbz	r3, a0aa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    a03e:	2f0c      	cmp	r7, #12
    a040:	d00a      	beq.n	a058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a042:	f44f 7196 	mov.w	r1, #300	; 0x12c
    a046:	4628      	mov	r0, r5
    a048:	f7ff ffd4 	bl	9ff4 <SharedSpiCard::waitReady(unsigned short)>
    a04c:	b127      	cbz	r7, a058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    a04e:	f080 0001 	eor.w	r0, r0, #1
    a052:	f010 0fff 	tst.w	r0, #255	; 0xff
    a056:	d12e      	bne.n	a0b6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    a058:	1d2e      	adds	r6, r5, #4
    a05a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    a05e:	4630      	mov	r0, r6
    a060:	f001 fc5b 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    a064:	f10d 0804 	add.w	r8, sp, #4
    a068:	ac02      	add	r4, sp, #8
    a06a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a06e:	4630      	mov	r0, r6
    a070:	f001 fc53 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    a074:	4544      	cmp	r4, r8
    a076:	d1f8      	bne.n	a06a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    a078:	2f00      	cmp	r7, #0
    a07a:	bf0c      	ite	eq
    a07c:	2195      	moveq	r1, #149	; 0x95
    a07e:	2187      	movne	r1, #135	; 0x87
    a080:	4630      	mov	r0, r6
    a082:	f001 fc4a 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a086:	4630      	mov	r0, r6
    a088:	f001 fc2b 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    a08c:	240a      	movs	r4, #10
    a08e:	4630      	mov	r0, r6
    a090:	f001 fc27 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    a094:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    a096:	f010 0f80 	tst.w	r0, #128	; 0x80
    a09a:	d003      	beq.n	a0a4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    a09c:	3c01      	subs	r4, #1
    a09e:	b2a4      	uxth	r4, r4
    a0a0:	2c00      	cmp	r4, #0
    a0a2:	d1f4      	bne.n	a08e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    a0a4:	b002      	add	sp, #8
    a0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    a0aa:	4628      	mov	r0, r5
    a0ac:	f7ff ff1f 	bl	9eee <SharedSpiCard::spiStart()>
    a0b0:	e7c5      	b.n	a03e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    a0b2:	20ff      	movs	r0, #255	; 0xff
    a0b4:	e7f6      	b.n	a0a4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    a0b6:	20ff      	movs	r0, #255	; 0xff
    a0b8:	e7f4      	b.n	a0a4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

0000a0bc <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0c0:	b089      	sub	sp, #36	; 0x24
    a0c2:	4605      	mov	r5, r0
    a0c4:	ac01      	add	r4, sp, #4
    a0c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    a0ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a0ce:	4617      	mov	r7, r2
  m_spiActive = false;
    a0d0:	f04f 0800 	mov.w	r8, #0
    a0d4:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    a0d8:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    a0dc:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    a0e0:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    a0e2:	f001 fb18 	bl	b716 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    a0e6:	2101      	movs	r1, #1
    a0e8:	7c28      	ldrb	r0, [r5, #16]
    a0ea:	f001 fb19 	bl	b720 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    a0ee:	4b55      	ldr	r3, [pc, #340]	; (a244 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    a0f0:	60ab      	str	r3, [r5, #8]
    a0f2:	2307      	movs	r3, #7
    a0f4:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    a0f6:	ab05      	add	r3, sp, #20
    a0f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a0fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    a100:	1d2e      	adds	r6, r5, #4
    a102:	cb0e      	ldmia	r3, {r1, r2, r3}
    a104:	4630      	mov	r0, r6
    a106:	f001 fba3 	bl	b850 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    a10a:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    a10e:	4628      	mov	r0, r5
    a110:	f7ff feed 	bl	9eee <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    a114:	2101      	movs	r1, #1
    a116:	7c28      	ldrb	r0, [r5, #16]
    a118:	f001 fb02 	bl	b720 <sdCsWrite(unsigned char, bool)>
    a11c:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    a11e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    a122:	4641      	mov	r1, r8
    a124:	4630      	mov	r0, r6
    a126:	f001 fbf8 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    a12a:	1e63      	subs	r3, r4, #1
    a12c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a130:	d1f7      	bne.n	a122 <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    a132:	2100      	movs	r1, #0
    a134:	7c28      	ldrb	r0, [r5, #16]
    a136:	f001 faf3 	bl	b720 <sdCsWrite(unsigned char, bool)>
    a13a:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    a13c:	f04f 0800 	mov.w	r8, #0
    a140:	4642      	mov	r2, r8
    a142:	4641      	mov	r1, r8
    a144:	4628      	mov	r0, r5
    a146:	f7ff ff6d 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a14a:	2801      	cmp	r0, #1
    a14c:	d00c      	beq.n	a168 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    a14e:	1e63      	subs	r3, r4, #1
    a150:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a154:	d1f4      	bne.n	a140 <SharedSpiCard::begin(SdSpiConfig)+0x84>
    a156:	2301      	movs	r3, #1
    m_errorCode = code;
    a158:	746b      	strb	r3, [r5, #17]
  spiStop();
    a15a:	4628      	mov	r0, r5
    a15c:	f7ff fedb 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a160:	2000      	movs	r0, #0
}
    a162:	b009      	add	sp, #36	; 0x24
    a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    a168:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    a16c:	2108      	movs	r1, #8
    a16e:	4628      	mov	r0, r5
    a170:	f7ff ff58 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a174:	f010 0f04 	tst.w	r0, #4
    a178:	d10e      	bne.n	a198 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    a17a:	2302      	movs	r3, #2
    a17c:	756b      	strb	r3, [r5, #21]
    a17e:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    a180:	4630      	mov	r0, r6
    a182:	f001 fbae 	bl	b8e2 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    a186:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a188:	1e63      	subs	r3, r4, #1
    a18a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a18e:	d1f7      	bne.n	a180 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    a190:	28aa      	cmp	r0, #170	; 0xaa
    a192:	d003      	beq.n	a19c <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    a194:	2306      	movs	r3, #6
    a196:	e7df      	b.n	a158 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    a198:	2301      	movs	r3, #1
    a19a:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a19c:	682b      	ldr	r3, [r5, #0]
    a19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a1a0:	4628      	mov	r0, r5
    a1a2:	4798      	blx	r3
    a1a4:	2802      	cmp	r0, #2
    a1a6:	bf14      	ite	ne
    a1a8:	2400      	movne	r4, #0
    a1aa:	2401      	moveq	r4, #1
    a1ac:	07a4      	lsls	r4, r4, #30
    a1ae:	4b26      	ldr	r3, [pc, #152]	; (a248 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    a1b0:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    a1b2:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    a1b6:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    a1ba:	f04f 0a00 	mov.w	sl, #0
    a1be:	f04f 0937 	mov.w	r9, #55	; 0x37
    a1c2:	f8df b084 	ldr.w	fp, [pc, #132]	; a248 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    a1c6:	4652      	mov	r2, sl
    a1c8:	4649      	mov	r1, r9
    a1ca:	4628      	mov	r0, r5
    a1cc:	f7ff ff2a 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    a1d0:	4622      	mov	r2, r4
    a1d2:	2129      	movs	r1, #41	; 0x29
    a1d4:	4628      	mov	r0, r5
    a1d6:	f7ff ff25 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    a1da:	b140      	cbz	r0, a1ee <SharedSpiCard::begin(SdSpiConfig)+0x132>
    a1dc:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    a1e0:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    a1e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a1e8:	d0ed      	beq.n	a1c6 <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    a1ea:	2317      	movs	r3, #23
    a1ec:	e7b4      	b.n	a158 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    a1ee:	682b      	ldr	r3, [r5, #0]
    a1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a1f2:	4628      	mov	r0, r5
    a1f4:	4798      	blx	r3
    a1f6:	2802      	cmp	r0, #2
    a1f8:	d007      	beq.n	a20a <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    a1fa:	4628      	mov	r0, r5
    a1fc:	f7ff fe8b 	bl	9f16 <SharedSpiCard::spiStop()>
    a200:	60af      	str	r7, [r5, #8]
    a202:	2307      	movs	r3, #7
    a204:	60eb      	str	r3, [r5, #12]
  return true;
    a206:	2001      	movs	r0, #1
    a208:	e7ab      	b.n	a162 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a20a:	2200      	movs	r2, #0
    a20c:	213a      	movs	r1, #58	; 0x3a
    a20e:	4628      	mov	r0, r5
    a210:	f7ff ff08 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a214:	b108      	cbz	r0, a21a <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a216:	2312      	movs	r3, #18
    a218:	e79e      	b.n	a158 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a21a:	4630      	mov	r0, r6
    a21c:	f001 fb61 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a220:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a224:	2bc0      	cmp	r3, #192	; 0xc0
    a226:	d009      	beq.n	a23c <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a228:	4630      	mov	r0, r6
    a22a:	f001 fb5a 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    a22e:	4630      	mov	r0, r6
    a230:	f001 fb57 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    a234:	4630      	mov	r0, r6
    a236:	f001 fb54 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a23a:	e7de      	b.n	a1fa <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a23c:	2303      	movs	r3, #3
    a23e:	756b      	strb	r3, [r5, #21]
  }
    a240:	e7f2      	b.n	a228 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a242:	bf00      	nop
    a244:	00061a80 	.word	0x00061a80
    a248:	200052a8 	.word	0x200052a8

0000a24c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a24e:	4606      	mov	r6, r0
    a250:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a252:	2200      	movs	r2, #0
    a254:	213a      	movs	r1, #58	; 0x3a
    a256:	f7ff fee5 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a25a:	b968      	cbnz	r0, a278 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a25c:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a25e:	1d37      	adds	r7, r6, #4
    a260:	4638      	mov	r0, r7
    a262:	f001 fb3e 	bl	b8e2 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a266:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a26a:	42ac      	cmp	r4, r5
    a26c:	d1f8      	bne.n	a260 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a26e:	4630      	mov	r0, r6
    a270:	f7ff fe51 	bl	9f16 <SharedSpiCard::spiStop()>
  return true;
    a274:	2001      	movs	r0, #1
}
    a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a278:	2312      	movs	r3, #18
    a27a:	7473      	strb	r3, [r6, #17]
  spiStop();
    a27c:	4630      	mov	r0, r6
    a27e:	f7ff fe4a 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a282:	2000      	movs	r0, #0
    a284:	e7f7      	b.n	a276 <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a286 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a286:	b538      	push	{r3, r4, r5, lr}
    a288:	4604      	mov	r4, r0
    a28a:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a28c:	2200      	movs	r2, #0
    a28e:	f7ff fec9 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a292:	b138      	cbz	r0, a2a4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a294:	231b      	movs	r3, #27
    a296:	7463      	strb	r3, [r4, #17]
  spiStop();
    a298:	4620      	mov	r0, r4
    a29a:	f7ff fe3c 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a29e:	2500      	movs	r5, #0
}
    a2a0:	4628      	mov	r0, r5
    a2a2:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a2a4:	2210      	movs	r2, #16
    a2a6:	4629      	mov	r1, r5
    a2a8:	4620      	mov	r0, r4
    a2aa:	f7ff fe67 	bl	9f7c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a2ae:	4605      	mov	r5, r0
    a2b0:	2800      	cmp	r0, #0
    a2b2:	d0f1      	beq.n	a298 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a2b4:	4620      	mov	r0, r4
    a2b6:	f7ff fe2e 	bl	9f16 <SharedSpiCard::spiStop()>
  return true;
    a2ba:	e7f1      	b.n	a2a0 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a2bc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a2bc:	b508      	push	{r3, lr}
    a2be:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a2c0:	2109      	movs	r1, #9
    a2c2:	f7ff ffe0 	bl	a286 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a2c6:	bd08      	pop	{r3, pc}

0000a2c8 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a2c8:	b508      	push	{r3, lr}
    a2ca:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a2cc:	210a      	movs	r1, #10
    a2ce:	f7ff ffda 	bl	a286 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a2d2:	bd08      	pop	{r3, pc}

0000a2d4 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a2d4:	b538      	push	{r3, r4, r5, lr}
    a2d6:	4604      	mov	r4, r0
    a2d8:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a2da:	6803      	ldr	r3, [r0, #0]
    a2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a2de:	4798      	blx	r3
    a2e0:	2803      	cmp	r0, #3
    sector <<= 9;
    a2e2:	bf18      	it	ne
    a2e4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a2e6:	462a      	mov	r2, r5
    a2e8:	2112      	movs	r1, #18
    a2ea:	4620      	mov	r0, r4
    a2ec:	f7ff fe9a 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a2f0:	b910      	cbnz	r0, a2f8 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a2f2:	2001      	movs	r0, #1
    a2f4:	74e0      	strb	r0, [r4, #19]
}
    a2f6:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a2f8:	230c      	movs	r3, #12
    a2fa:	7463      	strb	r3, [r4, #17]
  spiStop();
    a2fc:	4620      	mov	r0, r4
    a2fe:	f7ff fe0a 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a302:	2000      	movs	r0, #0
    a304:	e7f7      	b.n	a2f6 <SharedSpiCard::readStart(unsigned long)+0x22>

0000a306 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a306:	b510      	push	{r4, lr}
    a308:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a30a:	2200      	movs	r2, #0
    a30c:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a30e:	210c      	movs	r1, #12
    a310:	f7ff fe88 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a314:	b920      	cbnz	r0, a320 <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a316:	4620      	mov	r0, r4
    a318:	f7ff fdfd 	bl	9f16 <SharedSpiCard::spiStop()>
  return true;
    a31c:	2001      	movs	r0, #1
}
    a31e:	bd10      	pop	{r4, pc}
    a320:	2309      	movs	r3, #9
    a322:	7463      	strb	r3, [r4, #17]
  spiStop();
    a324:	4620      	mov	r0, r4
    a326:	f7ff fdf6 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a32a:	2000      	movs	r0, #0
    a32c:	e7f7      	b.n	a31e <SharedSpiCard::readStop()+0x18>

0000a32e <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a32e:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a330:	7cc3      	ldrb	r3, [r0, #19]
    a332:	2b02      	cmp	r3, #2
    a334:	d003      	beq.n	a33e <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a336:	2b01      	cmp	r3, #1
    a338:	d005      	beq.n	a346 <SharedSpiCard::syncDevice()+0x18>
  return true;
    a33a:	2001      	movs	r0, #1
}
    a33c:	bd08      	pop	{r3, pc}
    return writeStop();
    a33e:	6803      	ldr	r3, [r0, #0]
    a340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a342:	4798      	blx	r3
    a344:	e7fa      	b.n	a33c <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a346:	f7ff ffde 	bl	a306 <SharedSpiCard::readStop()>
    a34a:	e7f7      	b.n	a33c <SharedSpiCard::syncDevice()+0xe>

0000a34c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a34e:	4606      	mov	r6, r0
    a350:	460d      	mov	r5, r1
    a352:	4614      	mov	r4, r2
    a354:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a356:	7cc3      	ldrb	r3, [r0, #19]
    a358:	2b01      	cmp	r3, #1
    a35a:	d102      	bne.n	a362 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a35c:	6983      	ldr	r3, [r0, #24]
    a35e:	428b      	cmp	r3, r1
    a360:	d006      	beq.n	a370 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a362:	4629      	mov	r1, r5
    a364:	4630      	mov	r0, r6
    a366:	f7ff ffb5 	bl	a2d4 <SharedSpiCard::readStart(unsigned long)>
    a36a:	4603      	mov	r3, r0
    a36c:	b190      	cbz	r0, a394 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a36e:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a370:	b15f      	cbz	r7, a38a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a372:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a374:	4621      	mov	r1, r4
    a376:	4630      	mov	r0, r6
    a378:	f7ff fe36 	bl	9fe8 <SharedSpiCard::readData(unsigned char*)>
    a37c:	4603      	mov	r3, r0
    a37e:	b148      	cbz	r0, a394 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a380:	3501      	adds	r5, #1
    a382:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a386:	42af      	cmp	r7, r5
    a388:	d1f4      	bne.n	a374 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a38a:	69b3      	ldr	r3, [r6, #24]
    a38c:	443b      	add	r3, r7
    a38e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a390:	7f33      	ldrb	r3, [r6, #28]
    a392:	b10b      	cbz	r3, a398 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a394:	4618      	mov	r0, r3
    a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a398:	4630      	mov	r0, r6
    a39a:	f7ff ffb4 	bl	a306 <SharedSpiCard::readStop()>
    a39e:	4603      	mov	r3, r0
    a3a0:	e7f8      	b.n	a394 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a3a2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a3a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a3a6:	4606      	mov	r6, r0
    a3a8:	460c      	mov	r4, r1
    a3aa:	4615      	mov	r5, r2
    a3ac:	469a      	mov	sl, r3
    a3ae:	9f08      	ldr	r7, [sp, #32]
    a3b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a3b4:	7cc3      	ldrb	r3, [r0, #19]
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d102      	bne.n	a3c0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a3ba:	6983      	ldr	r3, [r0, #24]
    a3bc:	428b      	cmp	r3, r1
    a3be:	d006      	beq.n	a3ce <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a3c0:	4621      	mov	r1, r4
    a3c2:	4630      	mov	r0, r6
    a3c4:	f7ff ff86 	bl	a2d4 <SharedSpiCard::readStart(unsigned long)>
    a3c8:	4603      	mov	r3, r0
    a3ca:	b1b8      	cbz	r0, a3fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    a3cc:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a3ce:	f1ba 0f00 	cmp.w	sl, #0
    a3d2:	d00e      	beq.n	a3f2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    a3d4:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    a3d8:	4629      	mov	r1, r5
    a3da:	4630      	mov	r0, r6
    a3dc:	f7ff fe04 	bl	9fe8 <SharedSpiCard::readData(unsigned char*)>
    a3e0:	4603      	mov	r3, r0
    a3e2:	b158      	cbz	r0, a3fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    a3e4:	4642      	mov	r2, r8
    a3e6:	4629      	mov	r1, r5
    a3e8:	4620      	mov	r0, r4
    a3ea:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    a3ec:	3401      	adds	r4, #1
    a3ee:	45a1      	cmp	r9, r4
    a3f0:	d1f2      	bne.n	a3d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    a3f2:	69b3      	ldr	r3, [r6, #24]
    a3f4:	4453      	add	r3, sl
    a3f6:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a3f8:	7f33      	ldrb	r3, [r6, #28]
    a3fa:	b113      	cbz	r3, a402 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    a3fc:	4618      	mov	r0, r3
    a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    a402:	4630      	mov	r0, r6
    a404:	f7ff ff7f 	bl	a306 <SharedSpiCard::readStop()>
    a408:	4603      	mov	r3, r0
    a40a:	e7f7      	b.n	a3fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000a40c <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    a40c:	b538      	push	{r3, r4, r5, lr}
    a40e:	4604      	mov	r4, r0
    a410:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a412:	6803      	ldr	r3, [r0, #0]
    a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a416:	4798      	blx	r3
    a418:	2803      	cmp	r0, #3
    sector <<= 9;
    a41a:	bf18      	it	ne
    a41c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    a41e:	462a      	mov	r2, r5
    a420:	2119      	movs	r1, #25
    a422:	4620      	mov	r0, r4
    a424:	f7ff fdfe 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a428:	b918      	cbnz	r0, a432 <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    a42a:	2302      	movs	r3, #2
    a42c:	74e3      	strb	r3, [r4, #19]
  return true;
    a42e:	2001      	movs	r0, #1
}
    a430:	bd38      	pop	{r3, r4, r5, pc}
    a432:	230e      	movs	r3, #14
    a434:	7463      	strb	r3, [r4, #17]
  spiStop();
    a436:	4620      	mov	r0, r4
    a438:	f7ff fd6d 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a43c:	2000      	movs	r0, #0
    a43e:	e7f7      	b.n	a430 <SharedSpiCard::writeStart(unsigned long)+0x24>

0000a440 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a440:	b570      	push	{r4, r5, r6, lr}
    a442:	b084      	sub	sp, #16
    a444:	4604      	mov	r4, r0
    a446:	460d      	mov	r5, r1
    a448:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    a44a:	6803      	ldr	r3, [r0, #0]
    a44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a44e:	4669      	mov	r1, sp
    a450:	4798      	blx	r3
    a452:	b1f8      	cbz	r0, a494 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    a454:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a458:	f013 0f40 	tst.w	r3, #64	; 0x40
    a45c:	d10d      	bne.n	a47a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a462:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a466:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a468:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a46c:	1c72      	adds	r2, r6, #1
    a46e:	432a      	orrs	r2, r5
    a470:	4213      	tst	r3, r2
    a472:	d002      	beq.n	a47a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    a474:	2327      	movs	r3, #39	; 0x27
    a476:	7463      	strb	r3, [r4, #17]
      goto fail;
    a478:	e00c      	b.n	a494 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a47a:	7d63      	ldrb	r3, [r4, #21]
    a47c:	2b03      	cmp	r3, #3
    a47e:	d001      	beq.n	a484 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    a480:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    a482:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    a484:	462a      	mov	r2, r5
    a486:	2120      	movs	r1, #32
    a488:	4620      	mov	r0, r4
    a48a:	f7ff fdcb 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a48e:	b140      	cbz	r0, a4a2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    a490:	2326      	movs	r3, #38	; 0x26
    a492:	7463      	strb	r3, [r4, #17]
  spiStop();
    a494:	4620      	mov	r0, r4
    a496:	f7ff fd3e 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a49a:	2500      	movs	r5, #0
}
    a49c:	4628      	mov	r0, r5
    a49e:	b004      	add	sp, #16
    a4a0:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    a4a2:	4632      	mov	r2, r6
    a4a4:	2121      	movs	r1, #33	; 0x21
    a4a6:	4620      	mov	r0, r4
    a4a8:	f7ff fdbc 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4ac:	2800      	cmp	r0, #0
    a4ae:	d1ef      	bne.n	a490 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    a4b0:	2200      	movs	r2, #0
    a4b2:	2126      	movs	r1, #38	; 0x26
    a4b4:	4620      	mov	r0, r4
    a4b6:	f7ff fdb5 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d1e8      	bne.n	a490 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    a4be:	f242 7110 	movw	r1, #10000	; 0x2710
    a4c2:	4620      	mov	r0, r4
    a4c4:	f7ff fd96 	bl	9ff4 <SharedSpiCard::waitReady(unsigned short)>
    a4c8:	4605      	mov	r5, r0
    a4ca:	b910      	cbnz	r0, a4d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    a4cc:	2328      	movs	r3, #40	; 0x28
    a4ce:	7463      	strb	r3, [r4, #17]
    goto fail;
    a4d0:	e7e0      	b.n	a494 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    a4d2:	4620      	mov	r0, r4
    a4d4:	f7ff fd1f 	bl	9f16 <SharedSpiCard::spiStop()>
  return true;
    a4d8:	e7e0      	b.n	a49c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000a4da <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    a4da:	b538      	push	{r3, r4, r5, lr}
    a4dc:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a4de:	f44f 7116 	mov.w	r1, #600	; 0x258
    a4e2:	f7ff fd87 	bl	9ff4 <SharedSpiCard::waitReady(unsigned short)>
    a4e6:	4605      	mov	r5, r0
    a4e8:	b150      	cbz	r0, a500 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    a4ea:	21fd      	movs	r1, #253	; 0xfd
    a4ec:	1d20      	adds	r0, r4, #4
    a4ee:	f001 fa14 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    a4f2:	4620      	mov	r0, r4
    a4f4:	f7ff fd0f 	bl	9f16 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    a4f8:	2300      	movs	r3, #0
    a4fa:	74e3      	strb	r3, [r4, #19]
}
    a4fc:	4628      	mov	r0, r5
    a4fe:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a500:	231e      	movs	r3, #30
    a502:	7463      	strb	r3, [r4, #17]
  spiStop();
    a504:	4620      	mov	r0, r4
    a506:	f7ff fd06 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a50a:	e7f7      	b.n	a4fc <SharedSpiCard::writeStop()+0x22>

0000a50c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a50c:	b570      	push	{r4, r5, r6, lr}
    a50e:	4605      	mov	r5, r0
    a510:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    a512:	1d04      	adds	r4, r0, #4
    a514:	4620      	mov	r0, r4
    a516:	f001 fa00 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a51a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a51e:	4631      	mov	r1, r6
    a520:	4620      	mov	r0, r4
    a522:	f001 fa04 	bl	b92e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a526:	21ff      	movs	r1, #255	; 0xff
    a528:	4620      	mov	r0, r4
    a52a:	f001 f9f6 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    a52e:	21ff      	movs	r1, #255	; 0xff
    a530:	4620      	mov	r0, r4
    a532:	f001 f9f2 	bl	b91a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a536:	4620      	mov	r0, r4
    a538:	f001 f9d3 	bl	b8e2 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    a53c:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a53e:	f000 031f 	and.w	r3, r0, #31
    a542:	2b05      	cmp	r3, #5
    a544:	d101      	bne.n	a54a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    a546:	2001      	movs	r0, #1
}
    a548:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    a54a:	2320      	movs	r3, #32
    a54c:	746b      	strb	r3, [r5, #17]
  spiStop();
    a54e:	4628      	mov	r0, r5
    a550:	f7ff fce1 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a554:	2000      	movs	r0, #0
    a556:	e7f7      	b.n	a548 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000a558 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a558:	b538      	push	{r3, r4, r5, lr}
    a55a:	4604      	mov	r4, r0
    a55c:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a55e:	f44f 7116 	mov.w	r1, #600	; 0x258
    a562:	f7ff fd47 	bl	9ff4 <SharedSpiCard::waitReady(unsigned short)>
    a566:	b930      	cbnz	r0, a576 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    a568:	2324      	movs	r3, #36	; 0x24
    a56a:	7463      	strb	r3, [r4, #17]
  spiStop();
    a56c:	4620      	mov	r0, r4
    a56e:	f7ff fcd2 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a572:	2000      	movs	r0, #0
}
    a574:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a576:	462a      	mov	r2, r5
    a578:	21fc      	movs	r1, #252	; 0xfc
    a57a:	4620      	mov	r0, r4
    a57c:	f7ff ffc6 	bl	a50c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a580:	2800      	cmp	r0, #0
    a582:	d1f7      	bne.n	a574 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    a584:	e7f2      	b.n	a56c <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000a586 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a586:	b570      	push	{r4, r5, r6, lr}
    a588:	4604      	mov	r4, r0
    a58a:	460d      	mov	r5, r1
    a58c:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    a58e:	6803      	ldr	r3, [r0, #0]
    a590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a592:	4798      	blx	r3
    a594:	2803      	cmp	r0, #3
    sector <<= 9;
    a596:	bf18      	it	ne
    a598:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a59a:	462a      	mov	r2, r5
    a59c:	2118      	movs	r1, #24
    a59e:	4620      	mov	r0, r4
    a5a0:	f7ff fd40 	bl	a024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5a4:	b138      	cbz	r0, a5b6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    a5a6:	230d      	movs	r3, #13
    a5a8:	7463      	strb	r3, [r4, #17]
  spiStop();
    a5aa:	4620      	mov	r0, r4
    a5ac:	f7ff fcb3 	bl	9f16 <SharedSpiCard::spiStop()>
  return false;
    a5b0:	2500      	movs	r5, #0
}
    a5b2:	4628      	mov	r0, r5
    a5b4:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a5b6:	4632      	mov	r2, r6
    a5b8:	21fe      	movs	r1, #254	; 0xfe
    a5ba:	4620      	mov	r0, r4
    a5bc:	f7ff ffa6 	bl	a50c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a5c0:	4605      	mov	r5, r0
    a5c2:	2800      	cmp	r0, #0
    a5c4:	d0f1      	beq.n	a5aa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    a5c6:	4620      	mov	r0, r4
    a5c8:	f7ff fca5 	bl	9f16 <SharedSpiCard::spiStop()>
  return true;
    a5cc:	e7f1      	b.n	a5b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000a5ce <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a5ce:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    a5d0:	7f03      	ldrb	r3, [r0, #28]
    a5d2:	b123      	cbz	r3, a5de <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    a5d4:	6803      	ldr	r3, [r0, #0]
    a5d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a5d8:	2301      	movs	r3, #1
    a5da:	47a0      	blx	r4
}
    a5dc:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    a5de:	f7ff ffd2 	bl	a586 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    a5e2:	e7fb      	b.n	a5dc <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000a5e4 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a5e4:	b510      	push	{r4, lr}
    a5e6:	b084      	sub	sp, #16
    a5e8:	4604      	mov	r4, r0
    a5ea:	f10d 0c04 	add.w	ip, sp, #4
    a5ee:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a5f2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a5f6:	f7ff fd61 	bl	a0bc <SharedSpiCard::begin(SdSpiConfig)>
    a5fa:	b120      	cbz	r0, a606 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a5fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a600:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    a604:	7723      	strb	r3, [r4, #28]
}
    a606:	b004      	add	sp, #16
    a608:	bd10      	pop	{r4, pc}

0000a60a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a60a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a60e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a612:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a616:	b1b3      	cbz	r3, a646 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a618:	4605      	mov	r5, r0
    a61a:	460c      	mov	r4, r1
    a61c:	4616      	mov	r6, r2
    a61e:	461f      	mov	r7, r3
    a620:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    a622:	682b      	ldr	r3, [r5, #0]
    a624:	691b      	ldr	r3, [r3, #16]
    a626:	4632      	mov	r2, r6
    a628:	4621      	mov	r1, r4
    a62a:	4628      	mov	r0, r5
    a62c:	4798      	blx	r3
    a62e:	4682      	mov	sl, r0
    a630:	b130      	cbz	r0, a640 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    a632:	464a      	mov	r2, r9
    a634:	4631      	mov	r1, r6
    a636:	4620      	mov	r0, r4
    a638:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a63a:	3401      	adds	r4, #1
    a63c:	42bc      	cmp	r4, r7
    a63e:	d1f0      	bne.n	a622 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    a640:	4650      	mov	r0, sl
    a642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    a646:	f04f 0a01 	mov.w	sl, #1
    a64a:	e7f9      	b.n	a640 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000a64c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a650:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a654:	b1aa      	cbz	r2, a682 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    a656:	4605      	mov	r5, r0
    a658:	460c      	mov	r4, r1
    a65a:	461f      	mov	r7, r3
    a65c:	4690      	mov	r8, r2
    a65e:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a660:	682b      	ldr	r3, [r5, #0]
    a662:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a664:	4649      	mov	r1, r9
    a666:	4620      	mov	r0, r4
    a668:	47b8      	blx	r7
    a66a:	4602      	mov	r2, r0
    a66c:	4621      	mov	r1, r4
    a66e:	4628      	mov	r0, r5
    a670:	47b0      	blx	r6
    a672:	4603      	mov	r3, r0
    a674:	b110      	cbz	r0, a67c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    a676:	3401      	adds	r4, #1
    a678:	4544      	cmp	r4, r8
    a67a:	d1f1      	bne.n	a660 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a67c:	4618      	mov	r0, r3
    a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a682:	2301      	movs	r3, #1
    a684:	e7fa      	b.n	a67c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000a686 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a686:	2000      	movs	r0, #0
    a688:	4770      	bx	lr

0000a68a <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a68a:	2000      	movs	r0, #0
    a68c:	4770      	bx	lr

0000a68e <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a68e:	2000      	movs	r0, #0
    a690:	4770      	bx	lr

0000a692 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a692:	4770      	bx	lr

0000a694 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a694:	4b07      	ldr	r3, [pc, #28]	; (a6b4 <sdIrs()+0x20>)
    a696:	2100      	movs	r1, #0
    a698:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a69a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a69c:	4a06      	ldr	r2, [pc, #24]	; (a6b8 <sdIrs()+0x24>)
    a69e:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a6a0:	6812      	ldr	r2, [r2, #0]
    a6a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a6a6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a6aa:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    a6ac:	4b03      	ldr	r3, [pc, #12]	; (a6bc <sdIrs()+0x28>)
    a6ae:	7019      	strb	r1, [r3, #0]
}
    a6b0:	4770      	bx	lr
    a6b2:	bf00      	nop
    a6b4:	402c0000 	.word	0x402c0000
    a6b8:	20004b60 	.word	0x20004b60
    a6bc:	200052e3 	.word	0x200052e3

0000a6c0 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a6c0:	4b06      	ldr	r3, [pc, #24]	; (a6dc <gpioMux(unsigned char)+0x1c>)
    a6c2:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a6c6:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a6ca:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a6ce:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a6d2:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a6d6:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    a6da:	4770      	bx	lr
    a6dc:	401f8000 	.word	0x401f8000

0000a6e0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    a6e0:	4b03      	ldr	r3, [pc, #12]	; (a6f0 <isBusyCommandComplete()+0x10>)
    a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a6e4:	4803      	ldr	r0, [pc, #12]	; (a6f4 <isBusyCommandComplete()+0x14>)
    a6e6:	4018      	ands	r0, r3
}
    a6e8:	fab0 f080 	clz	r0, r0
    a6ec:	0940      	lsrs	r0, r0, #5
    a6ee:	4770      	bx	lr
    a6f0:	402c0000 	.word	0x402c0000
    a6f4:	000f0001 	.word	0x000f0001

0000a6f8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    a6f8:	4b02      	ldr	r3, [pc, #8]	; (a704 <isBusyCommandInhibit()+0xc>)
    a6fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a6fc:	f000 0001 	and.w	r0, r0, #1
    a700:	4770      	bx	lr
    a702:	bf00      	nop
    a704:	402c0000 	.word	0x402c0000

0000a708 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a708:	4b03      	ldr	r3, [pc, #12]	; (a718 <isBusyDat()+0x10>)
    a70a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a70c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a710:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a714:	4770      	bx	lr
    a716:	bf00      	nop
    a718:	402c0000 	.word	0x402c0000

0000a71c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a71c:	4b01      	ldr	r3, [pc, #4]	; (a724 <isBusyDMA()+0x8>)
    a71e:	7818      	ldrb	r0, [r3, #0]
}
    a720:	4770      	bx	lr
    a722:	bf00      	nop
    a724:	200052e3 	.word	0x200052e3

0000a728 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a728:	4b03      	ldr	r3, [pc, #12]	; (a738 <isBusyFifoRead()+0x10>)
    a72a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a72c:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    a730:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    a734:	4770      	bx	lr
    a736:	bf00      	nop
    a738:	402c0000 	.word	0x402c0000

0000a73c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    a73c:	4b03      	ldr	r3, [pc, #12]	; (a74c <isBusyFifoWrite()+0x10>)
    a73e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a740:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    a744:	f3c0 2080 	ubfx	r0, r0, #10, #1
    a748:	4770      	bx	lr
    a74a:	bf00      	nop
    a74c:	402c0000 	.word	0x402c0000

0000a750 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a750:	4b03      	ldr	r3, [pc, #12]	; (a760 <isBusyTransferComplete()+0x10>)
    a752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a754:	4803      	ldr	r0, [pc, #12]	; (a764 <isBusyTransferComplete()+0x14>)
    a756:	4018      	ands	r0, r3
}
    a758:	fab0 f080 	clz	r0, r0
    a75c:	0940      	lsrs	r0, r0, #5
    a75e:	4770      	bx	lr
    a760:	402c0000 	.word	0x402c0000
    a764:	117f0002 	.word	0x117f0002

0000a768 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a768:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a76a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a76e:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a772:	4b2b      	ldr	r3, [pc, #172]	; (a820 <setSdclk(unsigned long)+0xb8>)
    a774:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a776:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    a77a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    a77e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    a782:	4b28      	ldr	r3, [pc, #160]	; (a824 <setSdclk(unsigned long)+0xbc>)
    a784:	fba3 3202 	umull	r3, r2, r3, r2
    a788:	0892      	lsrs	r2, r2, #2
    a78a:	4b27      	ldr	r3, [pc, #156]	; (a828 <setSdclk(unsigned long)+0xc0>)
    a78c:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a790:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    a794:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a796:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a79a:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    a79e:	d239      	bcs.n	a814 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    a7a0:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    a7a2:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a7a4:	0113      	lsls	r3, r2, #4
    a7a6:	fbbc f3f3 	udiv	r3, ip, r3
    a7aa:	4573      	cmp	r3, lr
    a7ac:	d901      	bls.n	a7b2 <setSdclk(unsigned long)+0x4a>
    a7ae:	2aff      	cmp	r2, #255	; 0xff
    a7b0:	d9f7      	bls.n	a7a2 <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a7b2:	fbbc f3f2 	udiv	r3, ip, r2
    a7b6:	459e      	cmp	lr, r3
    a7b8:	d22e      	bcs.n	a818 <setSdclk(unsigned long)+0xb0>
    a7ba:	0051      	lsls	r1, r2, #1
    a7bc:	2301      	movs	r3, #1
    dvs++;
    a7be:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a7c0:	fbbc f0f1 	udiv	r0, ip, r1
    a7c4:	4570      	cmp	r0, lr
    a7c6:	bf94      	ite	ls
    a7c8:	2000      	movls	r0, #0
    a7ca:	2001      	movhi	r0, #1
    a7cc:	2b0f      	cmp	r3, #15
    a7ce:	bf88      	it	hi
    a7d0:	2000      	movhi	r0, #0
    a7d2:	460c      	mov	r4, r1
    a7d4:	4411      	add	r1, r2
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d1f1      	bne.n	a7be <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a7da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a7de:	fb01 f404 	mul.w	r4, r1, r4
    a7e2:	fbbc f4f4 	udiv	r4, ip, r4
    a7e6:	4811      	ldr	r0, [pc, #68]	; (a82c <setSdclk(unsigned long)+0xc4>)
    a7e8:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a7ea:	4811      	ldr	r0, [pc, #68]	; (a830 <setSdclk(unsigned long)+0xc8>)
    a7ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    a7ee:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a7f0:	011b      	lsls	r3, r3, #4
    a7f2:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a7f4:	490f      	ldr	r1, [pc, #60]	; (a834 <setSdclk(unsigned long)+0xcc>)
    a7f6:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a7f8:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a7fa:	01d2      	lsls	r2, r2, #7
    a7fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    a800:	4313      	orrs	r3, r2
    a802:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a806:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a808:	4602      	mov	r2, r0
    a80a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a80c:	f013 0f08 	tst.w	r3, #8
    a810:	d0fb      	beq.n	a80a <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a812:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    a814:	2201      	movs	r2, #1
    a816:	e7cc      	b.n	a7b2 <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a818:	4614      	mov	r4, r2
    a81a:	2301      	movs	r3, #1
    a81c:	e7dd      	b.n	a7da <setSdclk(unsigned long)+0x72>
    a81e:	bf00      	nop
    a820:	400fc000 	.word	0x400fc000
    a824:	aaaaaaab 	.word	0xaaaaaaab
    a828:	5e69ec00 	.word	0x5e69ec00
    a82c:	20004ac4 	.word	0x20004ac4
    a830:	402c0000 	.word	0x402c0000
    a834:	fff0000f 	.word	0xfff0000f

0000a838 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    a838:	4b01      	ldr	r3, [pc, #4]	; (a840 <SdioCard::errorCode() const+0x8>)
    a83a:	7818      	ldrb	r0, [r3, #0]
    a83c:	4770      	bx	lr
    a83e:	bf00      	nop
    a840:	200038bc 	.word	0x200038bc

0000a844 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a844:	4b01      	ldr	r3, [pc, #4]	; (a84c <SdioCard::errorData() const+0x8>)
    a846:	6818      	ldr	r0, [r3, #0]
}
    a848:	4770      	bx	lr
    a84a:	bf00      	nop
    a84c:	20004b60 	.word	0x20004b60

0000a850 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a850:	b410      	push	{r4}
    a852:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a854:	4c06      	ldr	r4, [pc, #24]	; (a870 <SdioCard::readCID(CID*)+0x20>)
    a856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a858:	f8cc 0000 	str.w	r0, [ip]
    a85c:	f8cc 1004 	str.w	r1, [ip, #4]
    a860:	f8cc 2008 	str.w	r2, [ip, #8]
    a864:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a868:	2001      	movs	r0, #1
    a86a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a86e:	4770      	bx	lr
    a870:	20004b34 	.word	0x20004b34

0000a874 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a874:	b410      	push	{r4}
    a876:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a878:	4c06      	ldr	r4, [pc, #24]	; (a894 <SdioCard::readCSD(csd_t*)+0x20>)
    a87a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a87c:	f8cc 0000 	str.w	r0, [ip]
    a880:	f8cc 1004 	str.w	r1, [ip, #4]
    a884:	f8cc 2008 	str.w	r2, [ip, #8]
    a888:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a88c:	2001      	movs	r0, #1
    a88e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a892:	4770      	bx	lr
    a894:	20004b44 	.word	0x20004b44

0000a898 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a898:	4b02      	ldr	r3, [pc, #8]	; (a8a4 <SdioCard::readOCR(unsigned long*)+0xc>)
    a89a:	681b      	ldr	r3, [r3, #0]
    a89c:	600b      	str	r3, [r1, #0]
  return true;
}
    a89e:	2001      	movs	r0, #1
    a8a0:	4770      	bx	lr
    a8a2:	bf00      	nop
    a8a4:	20004b54 	.word	0x20004b54

0000a8a8 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a8a8:	4b17      	ldr	r3, [pc, #92]	; (a908 <SdioCard::sectorCount()+0x60>)
    a8aa:	781b      	ldrb	r3, [r3, #0]
    a8ac:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a8b0:	d003      	beq.n	a8ba <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    a8b2:	2b40      	cmp	r3, #64	; 0x40
    a8b4:	d01b      	beq.n	a8ee <SdioCard::sectorCount()+0x46>
    return 0;
    a8b6:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    a8b8:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a8ba:	4a13      	ldr	r2, [pc, #76]	; (a908 <SdioCard::sectorCount()+0x60>)
    a8bc:	7993      	ldrb	r3, [r2, #6]
    a8be:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a8c2:	79d0      	ldrb	r0, [r2, #7]
    a8c4:	0080      	lsls	r0, r0, #2
    a8c6:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a8ca:	7a13      	ldrb	r3, [r2, #8]
    a8cc:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a8d0:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a8d2:	7a53      	ldrb	r3, [r2, #9]
    a8d4:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a8d8:	7a91      	ldrb	r1, [r2, #10]
    a8da:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a8dc:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a8e0:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a8e2:	f002 020f 	and.w	r2, r2, #15
    a8e6:	4413      	add	r3, r2
    a8e8:	3b07      	subs	r3, #7
    a8ea:	4098      	lsls	r0, r3
    a8ec:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a8ee:	4b06      	ldr	r3, [pc, #24]	; (a908 <SdioCard::sectorCount()+0x60>)
    a8f0:	79da      	ldrb	r2, [r3, #7]
    a8f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a8f6:	7a58      	ldrb	r0, [r3, #9]
    a8f8:	3001      	adds	r0, #1
    a8fa:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    a8fe:	7a1b      	ldrb	r3, [r3, #8]
    a900:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a904:	0280      	lsls	r0, r0, #10
    a906:	4770      	bx	lr
    a908:	20004b44 	.word	0x20004b44

0000a90c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a90c:	4b04      	ldr	r3, [pc, #16]	; (a920 <SdioCard::type() const+0x14>)
    a90e:	781b      	ldrb	r3, [r3, #0]
    a910:	b123      	cbz	r3, a91c <SdioCard::type() const+0x10>
    a912:	4b04      	ldr	r3, [pc, #16]	; (a924 <SdioCard::type() const+0x18>)
    a914:	7818      	ldrb	r0, [r3, #0]
    a916:	3002      	adds	r0, #2
    a918:	b2c0      	uxtb	r0, r0
    a91a:	4770      	bx	lr
    a91c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a91e:	4770      	bx	lr
    a920:	200052e0 	.word	0x200052e0
    a924:	200052e1 	.word	0x200052e1

0000a928 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a928:	4770      	bx	lr
	...

0000a92c <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a92e:	4604      	mov	r4, r0
  uint32_t m = micros();
    a930:	f002 fb38 	bl	cfa4 <micros>
    a934:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a936:	4f05      	ldr	r7, [pc, #20]	; (a94c <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    a938:	47a0      	blx	r4
    a93a:	4606      	mov	r6, r0
    a93c:	b120      	cbz	r0, a948 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a93e:	f002 fb31 	bl	cfa4 <micros>
    a942:	1b40      	subs	r0, r0, r5
    a944:	42b8      	cmp	r0, r7
    a946:	d9f7      	bls.n	a938 <waitTimeout(bool (*)())+0xc>
}
    a948:	4630      	mov	r0, r6
    a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a94c:	000f4240 	.word	0x000f4240

0000a950 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    a950:	b570      	push	{r4, r5, r6, lr}
    a952:	4604      	mov	r4, r0
    a954:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    a956:	4819      	ldr	r0, [pc, #100]	; (a9bc <cardCommand(unsigned long, unsigned long)+0x6c>)
    a958:	f7ff ffe8 	bl	a92c <waitTimeout(bool (*)())>
    a95c:	bb40      	cbnz	r0, a9b0 <cardCommand(unsigned long, unsigned long)+0x60>
    a95e:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    a960:	4b17      	ldr	r3, [pc, #92]	; (a9c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a962:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    a964:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    a968:	d007      	beq.n	a97a <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    a96a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a96c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    a970:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    a972:	6c99      	ldr	r1, [r3, #72]	; 0x48
    a974:	b2e2      	uxtb	r2, r4
    a976:	430a      	orrs	r2, r1
    a978:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    a97a:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    a97e:	4b10      	ldr	r3, [pc, #64]	; (a9c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a980:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    a982:	4810      	ldr	r0, [pc, #64]	; (a9c4 <cardCommand(unsigned long, unsigned long)+0x74>)
    a984:	f7ff ffd2 	bl	a92c <waitTimeout(bool (*)())>
    a988:	4601      	mov	r1, r0
    a98a:	b990      	cbnz	r0, a9b2 <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    a98c:	4a0c      	ldr	r2, [pc, #48]	; (a9c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a98e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    a990:	4b0d      	ldr	r3, [pc, #52]	; (a9c8 <cardCommand(unsigned long, unsigned long)+0x78>)
    a992:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a994:	6818      	ldr	r0, [r3, #0]
    a996:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a998:	681b      	ldr	r3, [r3, #0]
    a99a:	f013 0f01 	tst.w	r3, #1
    a99e:	d00a      	beq.n	a9b6 <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    a9a0:	4b09      	ldr	r3, [pc, #36]	; (a9c8 <cardCommand(unsigned long, unsigned long)+0x78>)
    a9a2:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a9a4:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    a9a8:	bf0c      	ite	eq
    a9aa:	2601      	moveq	r6, #1
    a9ac:	2600      	movne	r6, #0
    a9ae:	e000      	b.n	a9b2 <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    a9b0:	2600      	movs	r6, #0
}
    a9b2:	4630      	mov	r0, r6
    a9b4:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a9b6:	460e      	mov	r6, r1
    a9b8:	e7fb      	b.n	a9b2 <cardCommand(unsigned long, unsigned long)+0x62>
    a9ba:	bf00      	nop
    a9bc:	0000a6f9 	.word	0x0000a6f9
    a9c0:	402c0000 	.word	0x402c0000
    a9c4:	0000a6e1 	.word	0x0000a6e1
    a9c8:	20004b60 	.word	0x20004b60

0000a9cc <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    a9cc:	b510      	push	{r4, lr}
    a9ce:	b084      	sub	sp, #16
    a9d0:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    a9d2:	4b19      	ldr	r3, [pc, #100]	; (aa38 <readReg16(unsigned long, void*)+0x6c>)
    a9d4:	6819      	ldr	r1, [r3, #0]
    a9d6:	f7ff ffbb 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    a9da:	b350      	cbz	r0, aa32 <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a9dc:	4b17      	ldr	r3, [pc, #92]	; (aa3c <readReg16(unsigned long, void*)+0x70>)
    a9de:	691a      	ldr	r2, [r3, #16]
    a9e0:	9200      	str	r2, [sp, #0]
    a9e2:	695a      	ldr	r2, [r3, #20]
    a9e4:	9201      	str	r2, [sp, #4]
    a9e6:	699a      	ldr	r2, [r3, #24]
    a9e8:	9202      	str	r2, [sp, #8]
    a9ea:	69db      	ldr	r3, [r3, #28]
    a9ec:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    a9ee:	f104 0e0f 	add.w	lr, r4, #15
    a9f2:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a9f4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    a9f8:	461a      	mov	r2, r3
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	bfb8      	it	lt
    a9fe:	1cda      	addlt	r2, r3, #3
    aa00:	f022 0203 	bic.w	r2, r2, #3
    aa04:	3210      	adds	r2, #16
    aa06:	446a      	add	r2, sp
    aa08:	4259      	negs	r1, r3
    aa0a:	f003 0c03 	and.w	ip, r3, #3
    aa0e:	f001 0103 	and.w	r1, r1, #3
    aa12:	bf58      	it	pl
    aa14:	f1c1 0c00 	rsbpl	ip, r1, #0
    aa18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    aa1c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    aa20:	fa22 f20c 	lsr.w	r2, r2, ip
    aa24:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    aa28:	3301      	adds	r3, #1
    aa2a:	2b0f      	cmp	r3, #15
    aa2c:	d1e2      	bne.n	a9f4 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    aa2e:	2300      	movs	r3, #0
    aa30:	73e3      	strb	r3, [r4, #15]
}
    aa32:	b004      	add	sp, #16
    aa34:	bd10      	pop	{r4, pc}
    aa36:	bf00      	nop
    aa38:	20004b58 	.word	0x20004b58
    aa3c:	402c0000 	.word	0x402c0000

0000aa40 <statusCMD13()>:
static uint32_t statusCMD13() {
    aa40:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    aa42:	4b05      	ldr	r3, [pc, #20]	; (aa58 <statusCMD13()+0x18>)
    aa44:	6819      	ldr	r1, [r3, #0]
    aa46:	4805      	ldr	r0, [pc, #20]	; (aa5c <statusCMD13()+0x1c>)
    aa48:	f7ff ff82 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    aa4c:	b110      	cbz	r0, aa54 <statusCMD13()+0x14>
    aa4e:	4b04      	ldr	r3, [pc, #16]	; (aa60 <statusCMD13()+0x20>)
    aa50:	6918      	ldr	r0, [r3, #16]
}
    aa52:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    aa54:	2000      	movs	r0, #0
    aa56:	e7fc      	b.n	aa52 <statusCMD13()+0x12>
    aa58:	20004b58 	.word	0x20004b58
    aa5c:	0d1a0000 	.word	0x0d1a0000
    aa60:	402c0000 	.word	0x402c0000

0000aa64 <isBusyCMD13()>:
static bool isBusyCMD13() {
    aa64:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    aa66:	f7ff ffeb 	bl	aa40 <statusCMD13()>
    aa6a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    aa6e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    aa72:	bd08      	pop	{r3, pc}

0000aa74 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    aa74:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    aa76:	7a03      	ldrb	r3, [r0, #8]
    aa78:	f013 0f01 	tst.w	r3, #1
    aa7c:	d00b      	beq.n	aa96 <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    aa7e:	4b0c      	ldr	r3, [pc, #48]	; (aab0 <SdioCard::isBusy()+0x3c>)
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	b10b      	cbz	r3, aa88 <SdioCard::isBusy()+0x14>
    aa84:	4798      	blx	r3
}
    aa86:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    aa88:	4b0a      	ldr	r3, [pc, #40]	; (aab4 <SdioCard::isBusy()+0x40>)
    aa8a:	7818      	ldrb	r0, [r3, #0]
    aa8c:	2800      	cmp	r0, #0
    aa8e:	d0fa      	beq.n	aa86 <SdioCard::isBusy()+0x12>
    aa90:	f7ff ffe8 	bl	aa64 <isBusyCMD13()>
    aa94:	e7f7      	b.n	aa86 <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    aa96:	4b08      	ldr	r3, [pc, #32]	; (aab8 <SdioCard::isBusy()+0x44>)
    aa98:	781b      	ldrb	r3, [r3, #0]
    aa9a:	b933      	cbnz	r3, aaaa <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aa9c:	4b07      	ldr	r3, [pc, #28]	; (aabc <SdioCard::isBusy()+0x48>)
    aa9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aaa0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    aaa4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    aaa8:	e7ed      	b.n	aa86 <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    aaaa:	f7ff fe51 	bl	a750 <isBusyTransferComplete()>
    aaae:	e7ea      	b.n	aa86 <SdioCard::isBusy()+0x12>
    aab0:	20004b5c 	.word	0x20004b5c
    aab4:	200052df 	.word	0x200052df
    aab8:	200052e2 	.word	0x200052e2
    aabc:	402c0000 	.word	0x402c0000

0000aac0 <SdioCard::status()>:
uint32_t SdioCard::status() {
    aac0:	b508      	push	{r3, lr}
  return statusCMD13();
    aac2:	f7ff ffbd 	bl	aa40 <statusCMD13()>
}
    aac6:	bd08      	pop	{r3, pc}

0000aac8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    aac8:	b538      	push	{r3, r4, r5, lr}
    aaca:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    aacc:	4b2a      	ldr	r3, [pc, #168]	; (ab78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    aace:	7a9b      	ldrb	r3, [r3, #10]
    aad0:	f013 0f40 	tst.w	r3, #64	; 0x40
    aad4:	d113      	bne.n	aafe <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    aad6:	4a28      	ldr	r2, [pc, #160]	; (ab78 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    aad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aadc:	7ad2      	ldrb	r2, [r2, #11]
    aade:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    aae0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    aae4:	1c62      	adds	r2, r4, #1
    aae6:	430a      	orrs	r2, r1
    aae8:	4213      	tst	r3, r2
    aaea:	d008      	beq.n	aafe <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    aaec:	4b23      	ldr	r3, [pc, #140]	; (ab7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aaee:	2227      	movs	r2, #39	; 0x27
    aaf0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aaf2:	4b23      	ldr	r3, [pc, #140]	; (ab80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aaf4:	f240 22e3 	movw	r2, #739	; 0x2e3
    aaf8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    aafa:	2500      	movs	r5, #0
    aafc:	e010      	b.n	ab20 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    aafe:	4b21      	ldr	r3, [pc, #132]	; (ab84 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    ab00:	781b      	ldrb	r3, [r3, #0]
    ab02:	b90b      	cbnz	r3, ab08 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    ab04:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    ab06:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    ab08:	481f      	ldr	r0, [pc, #124]	; (ab88 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    ab0a:	f7ff ff21 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ab0e:	4605      	mov	r5, r0
    ab10:	b940      	cbnz	r0, ab24 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    ab12:	4b1a      	ldr	r3, [pc, #104]	; (ab7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ab14:	220f      	movs	r2, #15
    ab16:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab18:	4b19      	ldr	r3, [pc, #100]	; (ab80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ab1a:	f240 22eb 	movw	r2, #747	; 0x2eb
    ab1e:	601a      	str	r2, [r3, #0]
}
    ab20:	4628      	mov	r0, r5
    ab22:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    ab24:	4621      	mov	r1, r4
    ab26:	4819      	ldr	r0, [pc, #100]	; (ab8c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    ab28:	f7ff ff12 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ab2c:	4605      	mov	r5, r0
    ab2e:	b938      	cbnz	r0, ab40 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    ab30:	4b12      	ldr	r3, [pc, #72]	; (ab7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ab32:	2210      	movs	r2, #16
    ab34:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab36:	4b12      	ldr	r3, [pc, #72]	; (ab80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ab38:	f240 22ee 	movw	r2, #750	; 0x2ee
    ab3c:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    ab3e:	e7ef      	b.n	ab20 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    ab40:	2100      	movs	r1, #0
    ab42:	4813      	ldr	r0, [pc, #76]	; (ab90 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    ab44:	f7ff ff04 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ab48:	4605      	mov	r5, r0
    ab4a:	b938      	cbnz	r0, ab5c <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    ab4c:	4b0b      	ldr	r3, [pc, #44]	; (ab7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ab4e:	2211      	movs	r2, #17
    ab50:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab52:	4b0b      	ldr	r3, [pc, #44]	; (ab80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ab54:	f240 22f1 	movw	r2, #753	; 0x2f1
    ab58:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    ab5a:	e7e1      	b.n	ab20 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    ab5c:	480d      	ldr	r0, [pc, #52]	; (ab94 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    ab5e:	f7ff fee5 	bl	a92c <waitTimeout(bool (*)())>
    ab62:	2800      	cmp	r0, #0
    ab64:	d0dc      	beq.n	ab20 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    ab66:	4b05      	ldr	r3, [pc, #20]	; (ab7c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ab68:	2228      	movs	r2, #40	; 0x28
    ab6a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab6c:	4b04      	ldr	r3, [pc, #16]	; (ab80 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ab6e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    ab72:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    ab74:	2500      	movs	r5, #0
    ab76:	e7d3      	b.n	ab20 <SdioCard::erase(unsigned long, unsigned long)+0x58>
    ab78:	20004b44 	.word	0x20004b44
    ab7c:	200038bc 	.word	0x200038bc
    ab80:	20004b30 	.word	0x20004b30
    ab84:	200052e1 	.word	0x200052e1
    ab88:	201a0000 	.word	0x201a0000
    ab8c:	211a0000 	.word	0x211a0000
    ab90:	261b0000 	.word	0x261b0000
    ab94:	0000aa65 	.word	0x0000aa65

0000ab98 <waitTransferComplete()>:
static bool waitTransferComplete() {
    ab98:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    ab9a:	4b10      	ldr	r3, [pc, #64]	; (abdc <waitTransferComplete()+0x44>)
    ab9c:	781c      	ldrb	r4, [r3, #0]
    ab9e:	b914      	cbnz	r4, aba6 <waitTransferComplete()+0xe>
    return true;
    aba0:	2401      	movs	r4, #1
}
    aba2:	4620      	mov	r0, r4
    aba4:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    aba6:	480e      	ldr	r0, [pc, #56]	; (abe0 <waitTransferComplete()+0x48>)
    aba8:	f7ff fec0 	bl	a92c <waitTimeout(bool (*)())>
  m_transferActive = false;
    abac:	4b0b      	ldr	r3, [pc, #44]	; (abdc <waitTransferComplete()+0x44>)
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    abb2:	4b0c      	ldr	r3, [pc, #48]	; (abe4 <waitTransferComplete()+0x4c>)
    abb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    abb6:	4a0c      	ldr	r2, [pc, #48]	; (abe8 <waitTransferComplete()+0x50>)
    abb8:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    abba:	6812      	ldr	r2, [r2, #0]
    abbc:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    abbe:	b920      	cbnz	r0, abca <waitTransferComplete()+0x32>
    abc0:	4b09      	ldr	r3, [pc, #36]	; (abe8 <waitTransferComplete()+0x50>)
    abc2:	681a      	ldr	r2, [r3, #0]
    abc4:	4b09      	ldr	r3, [pc, #36]	; (abec <waitTransferComplete()+0x54>)
    abc6:	421a      	tst	r2, r3
    abc8:	d0eb      	beq.n	aba2 <waitTransferComplete()+0xa>
  m_errorCode = code;
    abca:	4b09      	ldr	r3, [pc, #36]	; (abf0 <waitTransferComplete()+0x58>)
    abcc:	221f      	movs	r2, #31
    abce:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    abd0:	4b08      	ldr	r3, [pc, #32]	; (abf4 <waitTransferComplete()+0x5c>)
    abd2:	f240 227a 	movw	r2, #634	; 0x27a
    abd6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    abd8:	2400      	movs	r4, #0
    abda:	e7e2      	b.n	aba2 <waitTransferComplete()+0xa>
    abdc:	200052e2 	.word	0x200052e2
    abe0:	0000a751 	.word	0x0000a751
    abe4:	402c0000 	.word	0x402c0000
    abe8:	20004b60 	.word	0x20004b60
    abec:	117f0000 	.word	0x117f0000
    abf0:	200038bc 	.word	0x200038bc
    abf4:	20004b30 	.word	0x20004b30

0000abf8 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    abf8:	b538      	push	{r3, r4, r5, lr}
    abfa:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    abfc:	f7ff ffcc 	bl	ab98 <waitTransferComplete()>
    ac00:	4604      	mov	r4, r0
    ac02:	b1f0      	cbz	r0, ac42 <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    ac04:	4b1c      	ldr	r3, [pc, #112]	; (ac78 <SdioCard::writeData(unsigned char const*)+0x80>)
    ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ac08:	f413 7f80 	tst.w	r3, #256	; 0x100
    ac0c:	d108      	bne.n	ac20 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ac0e:	4b1a      	ldr	r3, [pc, #104]	; (ac78 <SdioCard::writeData(unsigned char const*)+0x80>)
    ac10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ac12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ac16:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ac18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ac1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ac1e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ac20:	4a15      	ldr	r2, [pc, #84]	; (ac78 <SdioCard::writeData(unsigned char const*)+0x80>)
    ac22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ac24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ac28:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    ac2a:	4814      	ldr	r0, [pc, #80]	; (ac7c <SdioCard::writeData(unsigned char const*)+0x84>)
    ac2c:	f7ff fe7e 	bl	a92c <waitTimeout(bool (*)())>
    ac30:	b148      	cbz	r0, ac46 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    ac32:	4b13      	ldr	r3, [pc, #76]	; (ac80 <SdioCard::writeData(unsigned char const*)+0x88>)
    ac34:	2221      	movs	r2, #33	; 0x21
    ac36:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac38:	4b12      	ldr	r3, [pc, #72]	; (ac84 <SdioCard::writeData(unsigned char const*)+0x8c>)
    ac3a:	f240 32d9 	movw	r2, #985	; 0x3d9
    ac3e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    ac40:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    ac42:	4620      	mov	r0, r4
    ac44:	bd38      	pop	{r3, r4, r5, pc}
    ac46:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    ac4a:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    ac4e:	480a      	ldr	r0, [pc, #40]	; (ac78 <SdioCard::writeData(unsigned char const*)+0x80>)
    ac50:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ac52:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ac56:	d0fb      	beq.n	ac50 <SdioCard::writeData(unsigned char const*)+0x58>
    ac58:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    ac5c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ac60:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ac62:	4563      	cmp	r3, ip
    ac64:	d1fa      	bne.n	ac5c <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ac66:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ac6a:	458c      	cmp	ip, r1
    ac6c:	d1f0      	bne.n	ac50 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    ac6e:	4b06      	ldr	r3, [pc, #24]	; (ac88 <SdioCard::writeData(unsigned char const*)+0x90>)
    ac70:	2201      	movs	r2, #1
    ac72:	701a      	strb	r2, [r3, #0]
  return true;
    ac74:	e7e5      	b.n	ac42 <SdioCard::writeData(unsigned char const*)+0x4a>
    ac76:	bf00      	nop
    ac78:	402c0000 	.word	0x402c0000
    ac7c:	0000a73d 	.word	0x0000a73d
    ac80:	200038bc 	.word	0x200038bc
    ac84:	20004b30 	.word	0x20004b30
    ac88:	200052e2 	.word	0x200052e2

0000ac8c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac8e:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    ac90:	4b0a      	ldr	r3, [pc, #40]	; (acbc <yieldTimeout(bool (*)())+0x30>)
    ac92:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    ac94:	f002 f986 	bl	cfa4 <micros>
    ac98:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac9a:	4f09      	ldr	r7, [pc, #36]	; (acc0 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    ac9c:	e001      	b.n	aca2 <yieldTimeout(bool (*)())+0x16>
    yield();
    ac9e:	f004 f89f 	bl	ede0 <yield>
  while (fcn()) {
    aca2:	47a0      	blx	r4
    aca4:	4606      	mov	r6, r0
    aca6:	b120      	cbz	r0, acb2 <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aca8:	f002 f97c 	bl	cfa4 <micros>
    acac:	1b40      	subs	r0, r0, r5
    acae:	42b8      	cmp	r0, r7
    acb0:	d9f5      	bls.n	ac9e <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    acb2:	4b02      	ldr	r3, [pc, #8]	; (acbc <yieldTimeout(bool (*)())+0x30>)
    acb4:	2200      	movs	r2, #0
    acb6:	601a      	str	r2, [r3, #0]
}
    acb8:	4630      	mov	r0, r6
    acba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acbc:	20004b5c 	.word	0x20004b5c
    acc0:	000f4240 	.word	0x000f4240

0000acc4 <waitDmaStatus()>:
static bool waitDmaStatus() {
    acc4:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    acc6:	4809      	ldr	r0, [pc, #36]	; (acec <waitDmaStatus()+0x28>)
    acc8:	f7ff ffe0 	bl	ac8c <yieldTimeout(bool (*)())>
    accc:	b960      	cbnz	r0, ace8 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    acce:	4b08      	ldr	r3, [pc, #32]	; (acf0 <waitDmaStatus()+0x2c>)
    acd0:	681b      	ldr	r3, [r3, #0]
    acd2:	f013 0f02 	tst.w	r3, #2
    acd6:	d008      	beq.n	acea <waitDmaStatus()+0x26>
    acd8:	4b05      	ldr	r3, [pc, #20]	; (acf0 <waitDmaStatus()+0x2c>)
    acda:	681a      	ldr	r2, [r3, #0]
    acdc:	4b05      	ldr	r3, [pc, #20]	; (acf4 <waitDmaStatus()+0x30>)
    acde:	421a      	tst	r2, r3
    ace0:	bf0c      	ite	eq
    ace2:	2001      	moveq	r0, #1
    ace4:	2000      	movne	r0, #0
    ace6:	e000      	b.n	acea <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    ace8:	2000      	movs	r0, #0
}
    acea:	bd08      	pop	{r3, pc}
    acec:	0000a71d 	.word	0x0000a71d
    acf0:	20004b60 	.word	0x20004b60
    acf4:	117f0000 	.word	0x117f0000

0000acf8 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    acf8:	b538      	push	{r3, r4, r5, lr}
    acfa:	4605      	mov	r5, r0
    acfc:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    acfe:	4819      	ldr	r0, [pc, #100]	; (ad64 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    ad00:	f7ff fe14 	bl	a92c <waitTimeout(bool (*)())>
    ad04:	b140      	cbz	r0, ad18 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    ad06:	4b18      	ldr	r3, [pc, #96]	; (ad68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ad08:	220a      	movs	r2, #10
    ad0a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad0c:	4b17      	ldr	r3, [pc, #92]	; (ad6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ad0e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    ad12:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ad14:	2000      	movs	r0, #0
}
    ad16:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    ad18:	4b15      	ldr	r3, [pc, #84]	; (ad70 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    ad1a:	2201      	movs	r2, #1
    ad1c:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    ad1e:	4b15      	ldr	r3, [pc, #84]	; (ad74 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    ad20:	2200      	movs	r2, #0
    ad22:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    ad24:	4b14      	ldr	r3, [pc, #80]	; (ad78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    ad26:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    ad28:	4a14      	ldr	r2, [pc, #80]	; (ad7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
    ad2a:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    ad2c:	4a14      	ldr	r2, [pc, #80]	; (ad80 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    ad2e:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    ad30:	4629      	mov	r1, r5
    ad32:	4814      	ldr	r0, [pc, #80]	; (ad84 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    ad34:	f7ff fe0c 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ad38:	b938      	cbnz	r0, ad4a <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    ad3a:	4b0b      	ldr	r3, [pc, #44]	; (ad68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ad3c:	2204      	movs	r2, #4
    ad3e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad40:	4b0a      	ldr	r3, [pc, #40]	; (ad6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ad42:	f240 129f 	movw	r2, #415	; 0x19f
    ad46:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    ad48:	e7e5      	b.n	ad16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    ad4a:	f7ff ffbb 	bl	acc4 <waitDmaStatus()>
    ad4e:	2800      	cmp	r0, #0
    ad50:	d1e1      	bne.n	ad16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    ad52:	4b05      	ldr	r3, [pc, #20]	; (ad68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ad54:	2225      	movs	r2, #37	; 0x25
    ad56:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad58:	4b04      	ldr	r3, [pc, #16]	; (ad6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ad5a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    ad5e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    ad60:	e7d9      	b.n	ad16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
    ad62:	bf00      	nop
    ad64:	0000aa65 	.word	0x0000aa65
    ad68:	200038bc 	.word	0x200038bc
    ad6c:	20004b30 	.word	0x20004b30
    ad70:	200052e3 	.word	0x200052e3
    ad74:	20004b60 	.word	0x20004b60
    ad78:	402c0000 	.word	0x402c0000
    ad7c:	00010040 	.word	0x00010040
    ad80:	117f0002 	.word	0x117f0002
    ad84:	063a0011 	.word	0x063a0011

0000ad88 <transferStop()>:
static bool transferStop() {
    ad88:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ad8a:	4a19      	ldr	r2, [pc, #100]	; (adf0 <transferStop()+0x68>)
    ad8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ad8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ad92:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ad94:	2100      	movs	r1, #0
    ad96:	4817      	ldr	r0, [pc, #92]	; (adf4 <transferStop()+0x6c>)
    ad98:	f7ff fdda 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ad9c:	4604      	mov	r4, r0
    ad9e:	b940      	cbnz	r0, adb2 <transferStop()+0x2a>
  m_errorCode = code;
    ada0:	4b15      	ldr	r3, [pc, #84]	; (adf8 <transferStop()+0x70>)
    ada2:	2209      	movs	r2, #9
    ada4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ada6:	4b15      	ldr	r3, [pc, #84]	; (adfc <transferStop()+0x74>)
    ada8:	f240 223d 	movw	r2, #573	; 0x23d
    adac:	601a      	str	r2, [r3, #0]
}
    adae:	4620      	mov	r0, r4
    adb0:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    adb2:	4813      	ldr	r0, [pc, #76]	; (ae00 <transferStop()+0x78>)
    adb4:	f7ff ff6a 	bl	ac8c <yieldTimeout(bool (*)())>
    adb8:	b140      	cbz	r0, adcc <transferStop()+0x44>
  m_errorCode = code;
    adba:	4b0f      	ldr	r3, [pc, #60]	; (adf8 <transferStop()+0x70>)
    adbc:	220a      	movs	r2, #10
    adbe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    adc0:	4b0e      	ldr	r3, [pc, #56]	; (adfc <transferStop()+0x74>)
    adc2:	f44f 7210 	mov.w	r2, #576	; 0x240
    adc6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    adc8:	2400      	movs	r4, #0
    adca:	e7f0      	b.n	adae <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    adcc:	4b08      	ldr	r3, [pc, #32]	; (adf0 <transferStop()+0x68>)
    adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    add0:	f013 0f02 	tst.w	r3, #2
    add4:	d0eb      	beq.n	adae <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    add6:	4b06      	ldr	r3, [pc, #24]	; (adf0 <transferStop()+0x68>)
    add8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    adda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    addc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    ade0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ade2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    ade6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    ade8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    adea:	629a      	str	r2, [r3, #40]	; 0x28
    adec:	e7df      	b.n	adae <transferStop()+0x26>
    adee:	bf00      	nop
    adf0:	402c0000 	.word	0x402c0000
    adf4:	0cdb0000 	.word	0x0cdb0000
    adf8:	200038bc 	.word	0x200038bc
    adfc:	20004b30 	.word	0x20004b30
    ae00:	0000a709 	.word	0x0000a709

0000ae04 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    ae04:	b508      	push	{r3, lr}
  return transferStop();
    ae06:	f7ff ffbf 	bl	ad88 <transferStop()>
}
    ae0a:	bd08      	pop	{r3, pc}

0000ae0c <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    ae0c:	b510      	push	{r4, lr}
    ae0e:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    ae10:	4813      	ldr	r0, [pc, #76]	; (ae60 <SdioCard::writeStart(unsigned long)+0x54>)
    ae12:	f7ff ff3b 	bl	ac8c <yieldTimeout(bool (*)())>
    ae16:	b140      	cbz	r0, ae2a <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    ae18:	4b12      	ldr	r3, [pc, #72]	; (ae64 <SdioCard::writeStart(unsigned long)+0x58>)
    ae1a:	220a      	movs	r2, #10
    ae1c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae1e:	4b12      	ldr	r3, [pc, #72]	; (ae68 <SdioCard::writeStart(unsigned long)+0x5c>)
    ae20:	f240 422c 	movw	r2, #1068	; 0x42c
    ae24:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ae26:	2000      	movs	r0, #0
}
    ae28:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ae2a:	4b10      	ldr	r3, [pc, #64]	; (ae6c <SdioCard::writeStart(unsigned long)+0x60>)
    ae2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ae2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ae32:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ae34:	f44f 7200 	mov.w	r2, #512	; 0x200
    ae38:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae3a:	4b0d      	ldr	r3, [pc, #52]	; (ae70 <SdioCard::writeStart(unsigned long)+0x64>)
    ae3c:	781b      	ldrb	r3, [r3, #0]
    ae3e:	b903      	cbnz	r3, ae42 <SdioCard::writeStart(unsigned long)+0x36>
    ae40:	0264      	lsls	r4, r4, #9
    ae42:	4621      	mov	r1, r4
    ae44:	480b      	ldr	r0, [pc, #44]	; (ae74 <SdioCard::writeStart(unsigned long)+0x68>)
    ae46:	f7ff fd83 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d1ec      	bne.n	ae28 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    ae4e:	4b05      	ldr	r3, [pc, #20]	; (ae64 <SdioCard::writeStart(unsigned long)+0x58>)
    ae50:	220e      	movs	r2, #14
    ae52:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae54:	4b04      	ldr	r3, [pc, #16]	; (ae68 <SdioCard::writeStart(unsigned long)+0x5c>)
    ae56:	f44f 6287 	mov.w	r2, #1080	; 0x438
    ae5a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    ae5c:	e7e4      	b.n	ae28 <SdioCard::writeStart(unsigned long)+0x1c>
    ae5e:	bf00      	nop
    ae60:	0000aa65 	.word	0x0000aa65
    ae64:	200038bc 	.word	0x200038bc
    ae68:	20004b30 	.word	0x20004b30
    ae6c:	402c0000 	.word	0x402c0000
    ae70:	200052e1 	.word	0x200052e1
    ae74:	193a0020 	.word	0x193a0020

0000ae78 <SdioCard::~SdioCard()>:
    ae78:	b510      	push	{r4, lr}
    ae7a:	4604      	mov	r4, r0
    ae7c:	210c      	movs	r1, #12
    ae7e:	f002 f9ed 	bl	d25c <operator delete(void*, unsigned int)>
    ae82:	4620      	mov	r0, r4
    ae84:	bd10      	pop	{r4, pc}
	...

0000ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae8c:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    ae8e:	f012 0203 	ands.w	r2, r2, #3
    ae92:	bf18      	it	ne
    ae94:	2201      	movne	r2, #1
    ae96:	2b00      	cmp	r3, #0
    ae98:	bf14      	ite	ne
    ae9a:	4615      	movne	r5, r2
    ae9c:	f042 0501 	orreq.w	r5, r2, #1
    aea0:	b155      	cbz	r5, aeb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    aea2:	4b1c      	ldr	r3, [pc, #112]	; (af14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    aea4:	2225      	movs	r2, #37	; 0x25
    aea6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aea8:	4b1b      	ldr	r3, [pc, #108]	; (af18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    aeaa:	f240 12f5 	movw	r2, #501	; 0x1f5
    aeae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    aeb0:	2500      	movs	r5, #0
}
    aeb2:	4628      	mov	r0, r5
    aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aeb8:	4607      	mov	r7, r0
    aeba:	460e      	mov	r6, r1
    aebc:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    aebe:	4817      	ldr	r0, [pc, #92]	; (af1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    aec0:	f7ff fee4 	bl	ac8c <yieldTimeout(bool (*)())>
    aec4:	b138      	cbz	r0, aed6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    aec6:	4b13      	ldr	r3, [pc, #76]	; (af14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    aec8:	220a      	movs	r2, #10
    aeca:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aecc:	4b12      	ldr	r3, [pc, #72]	; (af18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    aece:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    aed2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    aed4:	e7ed      	b.n	aeb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    aed6:	4b12      	ldr	r3, [pc, #72]	; (af20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    aed8:	2201      	movs	r2, #1
    aeda:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    aedc:	4b11      	ldr	r3, [pc, #68]	; (af24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    aede:	2200      	movs	r2, #0
    aee0:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    aee2:	4a11      	ldr	r2, [pc, #68]	; (af28 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    aee4:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    aee6:	4b11      	ldr	r3, [pc, #68]	; (af2c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    aee8:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    aeec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    aef0:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    aef2:	4b0f      	ldr	r3, [pc, #60]	; (af30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    aef4:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    aef6:	4b0f      	ldr	r3, [pc, #60]	; (af34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	b903      	cbnz	r3, aefe <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    aefc:	0276      	lsls	r6, r6, #9
    aefe:	4631      	mov	r1, r6
    af00:	4638      	mov	r0, r7
    af02:	f7ff fd25 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    af06:	4605      	mov	r5, r0
    af08:	2800      	cmp	r0, #0
    af0a:	d0d2      	beq.n	aeb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    af0c:	f7ff feda 	bl	acc4 <waitDmaStatus()>
    af10:	4605      	mov	r5, r0
    af12:	e7ce      	b.n	aeb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    af14:	200038bc 	.word	0x200038bc
    af18:	20004b30 	.word	0x20004b30
    af1c:	0000aa65 	.word	0x0000aa65
    af20:	200052e3 	.word	0x200052e3
    af24:	20004b60 	.word	0x20004b60
    af28:	402c0000 	.word	0x402c0000
    af2c:	1fff0000 	.word	0x1fff0000
    af30:	117f0002 	.word	0x117f0002
    af34:	200052e1 	.word	0x200052e1

0000af38 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af3a:	4606      	mov	r6, r0
    af3c:	460c      	mov	r4, r1
    af3e:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    af40:	7a02      	ldrb	r2, [r0, #8]
    af42:	f012 0f01 	tst.w	r2, #1
    af46:	d112      	bne.n	af6e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    af48:	b17b      	cbz	r3, af6a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    af4a:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    af4c:	6833      	ldr	r3, [r6, #0]
    af4e:	691b      	ldr	r3, [r3, #16]
    af50:	462a      	mov	r2, r5
    af52:	4621      	mov	r1, r4
    af54:	4630      	mov	r0, r6
    af56:	4798      	blx	r3
    af58:	4603      	mov	r3, r0
    af5a:	b120      	cbz	r0, af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    af5c:	3401      	adds	r4, #1
    af5e:	f505 7500 	add.w	r5, r5, #512	; 0x200
    af62:	42a7      	cmp	r7, r4
    af64:	d1f2      	bne.n	af4c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    af66:	4618      	mov	r0, r3
    af68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    af6a:	2301      	movs	r3, #1
    af6c:	e7fb      	b.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    af6e:	f015 0f03 	tst.w	r5, #3
    af72:	d010      	beq.n	af96 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    af74:	b1f3      	cbz	r3, afb4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    af76:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    af78:	6833      	ldr	r3, [r6, #0]
    af7a:	691b      	ldr	r3, [r3, #16]
    af7c:	462a      	mov	r2, r5
    af7e:	4621      	mov	r1, r4
    af80:	4630      	mov	r0, r6
    af82:	4798      	blx	r3
    af84:	4603      	mov	r3, r0
    af86:	2800      	cmp	r0, #0
    af88:	d0ed      	beq.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    af8a:	3401      	adds	r4, #1
    af8c:	f505 7500 	add.w	r5, r5, #512	; 0x200
    af90:	42bc      	cmp	r4, r7
    af92:	d1f1      	bne.n	af78 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    af94:	e7e7      	b.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    af96:	462a      	mov	r2, r5
    af98:	4807      	ldr	r0, [pc, #28]	; (afb8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    af9a:	f7ff ff75 	bl	ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    af9e:	4603      	mov	r3, r0
    afa0:	2800      	cmp	r0, #0
    afa2:	d1e0      	bne.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    afa4:	4a05      	ldr	r2, [pc, #20]	; (afbc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    afa6:	210c      	movs	r1, #12
    afa8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    afaa:	4a05      	ldr	r2, [pc, #20]	; (afc0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    afac:	f240 3182 	movw	r1, #898	; 0x382
    afb0:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    afb2:	e7d8      	b.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    afb4:	2301      	movs	r3, #1
    afb6:	e7d6      	b.n	af66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    afb8:	123a0037 	.word	0x123a0037
    afbc:	200038bc 	.word	0x200038bc
    afc0:	20004b30 	.word	0x20004b30

0000afc4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    afc4:	b570      	push	{r4, r5, r6, lr}
    afc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    afca:	460e      	mov	r6, r1
    afcc:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    afce:	7a03      	ldrb	r3, [r0, #8]
    afd0:	f013 0f01 	tst.w	r3, #1
    afd4:	d01c      	beq.n	b010 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    afd6:	f012 0f03 	tst.w	r2, #3
    afda:	d006      	beq.n	afea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    afdc:	f44f 7200 	mov.w	r2, #512	; 0x200
    afe0:	4629      	mov	r1, r5
    afe2:	4668      	mov	r0, sp
    afe4:	f002 f89c 	bl	d120 <memcpy>
      ptr = aligned;
    afe8:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    afea:	2301      	movs	r3, #1
    afec:	462a      	mov	r2, r5
    afee:	4631      	mov	r1, r6
    aff0:	481d      	ldr	r0, [pc, #116]	; (b068 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    aff2:	f7ff ff49 	bl	ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    aff6:	4603      	mov	r3, r0
    aff8:	b930      	cbnz	r0, b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    affa:	4a1c      	ldr	r2, [pc, #112]	; (b06c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    affc:	210d      	movs	r1, #13
    affe:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b000:	4a1b      	ldr	r2, [pc, #108]	; (b070 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    b002:	f240 31f2 	movw	r1, #1010	; 0x3f2
    b006:	6011      	str	r1, [r2, #0]
}
    b008:	4618      	mov	r0, r3
    b00a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b00e:	bd70      	pop	{r4, r5, r6, pc}
    b010:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b012:	f7ff fdc1 	bl	ab98 <waitTransferComplete()>
    b016:	4603      	mov	r3, r0
    b018:	2800      	cmp	r0, #0
    b01a:	d0f5      	beq.n	b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b01c:	7a63      	ldrb	r3, [r4, #9]
    b01e:	2b02      	cmp	r3, #2
    b020:	d01d      	beq.n	b05e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    b022:	6823      	ldr	r3, [r4, #0]
    b024:	6a1b      	ldr	r3, [r3, #32]
    b026:	4620      	mov	r0, r4
    b028:	4798      	blx	r3
    b02a:	4603      	mov	r3, r0
    b02c:	2800      	cmp	r0, #0
    b02e:	d0eb      	beq.n	b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    b030:	6823      	ldr	r3, [r4, #0]
    b032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b034:	4631      	mov	r1, r6
    b036:	4620      	mov	r0, r4
    b038:	4798      	blx	r3
    b03a:	4603      	mov	r3, r0
    b03c:	2800      	cmp	r0, #0
    b03e:	d0e3      	beq.n	b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    b040:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    b042:	2302      	movs	r3, #2
    b044:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    b046:	6823      	ldr	r3, [r4, #0]
    b048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b04a:	4629      	mov	r1, r5
    b04c:	4620      	mov	r0, r4
    b04e:	4798      	blx	r3
    b050:	4603      	mov	r3, r0
    b052:	2800      	cmp	r0, #0
    b054:	d0d8      	beq.n	b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    b056:	6862      	ldr	r2, [r4, #4]
    b058:	3201      	adds	r2, #1
    b05a:	6062      	str	r2, [r4, #4]
    b05c:	e7d4      	b.n	b008 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b05e:	6863      	ldr	r3, [r4, #4]
    b060:	42b3      	cmp	r3, r6
    b062:	d1de      	bne.n	b022 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    b064:	e7ef      	b.n	b046 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    b066:	bf00      	nop
    b068:	183a0001 	.word	0x183a0001
    b06c:	200038bc 	.word	0x200038bc
    b070:	20004b30 	.word	0x20004b30

0000b074 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b076:	4606      	mov	r6, r0
    b078:	460c      	mov	r4, r1
    b07a:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b07c:	7a02      	ldrb	r2, [r0, #8]
    b07e:	f012 0f01 	tst.w	r2, #1
    b082:	d112      	bne.n	b0aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b084:	b17b      	cbz	r3, b0a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    b086:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    b088:	6833      	ldr	r3, [r6, #0]
    b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b08c:	462a      	mov	r2, r5
    b08e:	4621      	mov	r1, r4
    b090:	4630      	mov	r0, r6
    b092:	4798      	blx	r3
    b094:	4603      	mov	r3, r0
    b096:	b120      	cbz	r0, b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b098:	3401      	adds	r4, #1
    b09a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b09e:	42a7      	cmp	r7, r4
    b0a0:	d1f2      	bne.n	b088 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    b0a2:	4618      	mov	r0, r3
    b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b0a6:	2301      	movs	r3, #1
    b0a8:	e7fb      	b.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    b0aa:	f015 0f03 	tst.w	r5, #3
    b0ae:	d010      	beq.n	b0d2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b0b0:	b1f3      	cbz	r3, b0f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    b0b2:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    b0b4:	6833      	ldr	r3, [r6, #0]
    b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b0b8:	462a      	mov	r2, r5
    b0ba:	4621      	mov	r1, r4
    b0bc:	4630      	mov	r0, r6
    b0be:	4798      	blx	r3
    b0c0:	4603      	mov	r3, r0
    b0c2:	2800      	cmp	r0, #0
    b0c4:	d0ed      	beq.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b0c6:	3401      	adds	r4, #1
    b0c8:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b0cc:	42bc      	cmp	r4, r7
    b0ce:	d1f1      	bne.n	b0b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    b0d0:	e7e7      	b.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b0d2:	462a      	mov	r2, r5
    b0d4:	4807      	ldr	r0, [pc, #28]	; (b0f4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b0d6:	f7ff fed7 	bl	ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b0da:	4603      	mov	r3, r0
    b0dc:	2800      	cmp	r0, #0
    b0de:	d1e0      	bne.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    b0e0:	4a05      	ldr	r2, [pc, #20]	; (b0f8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b0e2:	210e      	movs	r1, #14
    b0e4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b0e6:	4a05      	ldr	r2, [pc, #20]	; (b0fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    b0e8:	f240 411e 	movw	r1, #1054	; 0x41e
    b0ec:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    b0ee:	e7d8      	b.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    b0f0:	2301      	movs	r3, #1
    b0f2:	e7d6      	b.n	b0a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    b0f4:	193a0027 	.word	0x193a0027
    b0f8:	200038bc 	.word	0x200038bc
    b0fc:	20004b30 	.word	0x20004b30

0000b100 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b104:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    b106:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b108:	2300      	movs	r3, #0
    b10a:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    b10c:	4aae      	ldr	r2, [pc, #696]	; (b3c8 <SdioCard::begin(SdioConfig)+0x2c8>)
    b10e:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    b110:	4aae      	ldr	r2, [pc, #696]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b112:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    b114:	4aae      	ldr	r2, [pc, #696]	; (b3d0 <SdioCard::begin(SdioConfig)+0x2d0>)
    b116:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    b118:	4aae      	ldr	r2, [pc, #696]	; (b3d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b11a:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b11c:	4bae      	ldr	r3, [pc, #696]	; (b3d8 <SdioCard::begin(SdioConfig)+0x2d8>)
    b11e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b126:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b12a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b12e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    b132:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b136:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b13a:	f042 0218 	orr.w	r2, r2, #24
    b13e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b142:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b14a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b14e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    b152:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b156:	f042 020c 	orr.w	r2, r2, #12
    b15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b160:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b164:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b166:	69da      	ldr	r2, [r3, #28]
    b168:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b16c:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b16e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b174:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    b176:	2005      	movs	r0, #5
    b178:	f7ff faa2 	bl	a6c0 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    b17c:	4b97      	ldr	r3, [pc, #604]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b17e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b180:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b184:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b186:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b188:	4a95      	ldr	r2, [pc, #596]	; (b3e0 <SdioCard::begin(SdioConfig)+0x2e0>)
    b18a:	430a      	orrs	r2, r1
    b18c:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b18e:	461a      	mov	r2, r3
    b190:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b192:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    b196:	d1fb      	bne.n	b190 <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b198:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b19c:	f7ff fae4 	bl	a768 <setSdclk(unsigned long)>
    gpioMux(0);
    b1a0:	2000      	movs	r0, #0
    b1a2:	f7ff fa8d 	bl	a6c0 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b1a6:	4b8f      	ldr	r3, [pc, #572]	; (b3e4 <SdioCard::begin(SdioConfig)+0x2e4>)
    b1a8:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b1ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b1b0:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b1b4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b1b8:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b1bc:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b1c0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b1c4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b1c8:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    b1cc:	4a86      	ldr	r2, [pc, #536]	; (b3e8 <SdioCard::begin(SdioConfig)+0x2e8>)
    b1ce:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b1d0:	4a86      	ldr	r2, [pc, #536]	; (b3ec <SdioCard::begin(SdioConfig)+0x2ec>)
    b1d2:	4987      	ldr	r1, [pc, #540]	; (b3f0 <SdioCard::begin(SdioConfig)+0x2f0>)
    b1d4:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b1d8:	4a86      	ldr	r2, [pc, #536]	; (b3f4 <SdioCard::begin(SdioConfig)+0x2f4>)
    b1da:	2160      	movs	r1, #96	; 0x60
    b1dc:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b1e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b1e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b1e8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b1ee:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    b1f2:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b1f4:	461a      	mov	r2, r3
    b1f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b1f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    b1fc:	d1fb      	bne.n	b1f6 <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b1fe:	2100      	movs	r1, #0
    b200:	4608      	mov	r0, r1
    b202:	f7ff fba5 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b206:	4604      	mov	r4, r0
    b208:	b950      	cbnz	r0, b220 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b20a:	4b70      	ldr	r3, [pc, #448]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b20c:	2201      	movs	r2, #1
    b20e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b210:	4b79      	ldr	r3, [pc, #484]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b212:	f240 228e 	movw	r2, #654	; 0x28e
    b216:	601a      	str	r2, [r3, #0]
}
    b218:	4620      	mov	r0, r4
    b21a:	b010      	add	sp, #64	; 0x40
    b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b220:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b222:	4e76      	ldr	r6, [pc, #472]	; (b3fc <SdioCard::begin(SdioConfig)+0x2fc>)
    b224:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b228:	4629      	mov	r1, r5
    b22a:	4630      	mov	r0, r6
    b22c:	f7ff fb90 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b230:	b980      	cbnz	r0, b254 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b232:	3c01      	subs	r4, #1
    b234:	d1f8      	bne.n	b228 <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b236:	4b67      	ldr	r3, [pc, #412]	; (b3d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b238:	781b      	ldrb	r3, [r3, #0]
    b23a:	2b00      	cmp	r3, #0
    b23c:	4d70      	ldr	r5, [pc, #448]	; (b400 <SdioCard::begin(SdioConfig)+0x300>)
    b23e:	bf08      	it	eq
    b240:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b244:	f001 feae 	bl	cfa4 <micros>
    b248:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b24a:	4e6e      	ldr	r6, [pc, #440]	; (b404 <SdioCard::begin(SdioConfig)+0x304>)
    b24c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; b438 <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b250:	4f6d      	ldr	r7, [pc, #436]	; (b408 <SdioCard::begin(SdioConfig)+0x308>)
    b252:	e020      	b.n	b296 <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b254:	4b61      	ldr	r3, [pc, #388]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b256:	691b      	ldr	r3, [r3, #16]
    b258:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b25c:	d008      	beq.n	b270 <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b25e:	4b5b      	ldr	r3, [pc, #364]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b260:	2206      	movs	r2, #6
    b262:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b264:	4b64      	ldr	r3, [pc, #400]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b266:	f44f 7225 	mov.w	r2, #660	; 0x294
    b26a:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b26c:	2400      	movs	r4, #0
    b26e:	e7d3      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b270:	4b58      	ldr	r3, [pc, #352]	; (b3d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b272:	2201      	movs	r2, #1
    b274:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b276:	4d62      	ldr	r5, [pc, #392]	; (b400 <SdioCard::begin(SdioConfig)+0x300>)
    b278:	e7e4      	b.n	b244 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b27a:	4629      	mov	r1, r5
    b27c:	4640      	mov	r0, r8
    b27e:	f7ff fb67 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b282:	b170      	cbz	r0, b2a2 <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b284:	f001 fe8e 	bl	cfa4 <micros>
    b288:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b28a:	42b8      	cmp	r0, r7
    b28c:	d809      	bhi.n	b2a2 <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b28e:	4b53      	ldr	r3, [pc, #332]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b290:	691b      	ldr	r3, [r3, #16]
    b292:	2b00      	cmp	r3, #0
    b294:	db0e      	blt.n	b2b4 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b296:	2100      	movs	r1, #0
    b298:	4630      	mov	r0, r6
    b29a:	f7ff fb59 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b29e:	2800      	cmp	r0, #0
    b2a0:	d1eb      	bne.n	b27a <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b2a2:	4b4a      	ldr	r3, [pc, #296]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b2a4:	2217      	movs	r2, #23
    b2a6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b2a8:	4b53      	ldr	r3, [pc, #332]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b2aa:	f240 229f 	movw	r2, #671	; 0x29f
    b2ae:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b2b0:	2400      	movs	r4, #0
    b2b2:	e7b1      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b2b4:	4b49      	ldr	r3, [pc, #292]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b2b6:	6919      	ldr	r1, [r3, #16]
    b2b8:	4a54      	ldr	r2, [pc, #336]	; (b40c <SdioCard::begin(SdioConfig)+0x30c>)
    b2ba:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b2bc:	691b      	ldr	r3, [r3, #16]
    b2be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b2c2:	d002      	beq.n	b2ca <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b2c4:	4b42      	ldr	r3, [pc, #264]	; (b3d0 <SdioCard::begin(SdioConfig)+0x2d0>)
    b2c6:	2201      	movs	r2, #1
    b2c8:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b2ca:	2100      	movs	r1, #0
    b2cc:	4850      	ldr	r0, [pc, #320]	; (b410 <SdioCard::begin(SdioConfig)+0x310>)
    b2ce:	f7ff fb3f 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b2d2:	4604      	mov	r4, r0
    b2d4:	b938      	cbnz	r0, b2e6 <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b2d6:	4b3d      	ldr	r3, [pc, #244]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b2d8:	2202      	movs	r2, #2
    b2da:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b2dc:	4b46      	ldr	r3, [pc, #280]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b2de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b2e2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b2e4:	e798      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b2e6:	2100      	movs	r1, #0
    b2e8:	484a      	ldr	r0, [pc, #296]	; (b414 <SdioCard::begin(SdioConfig)+0x314>)
    b2ea:	f7ff fb31 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b2ee:	4604      	mov	r4, r0
    b2f0:	b938      	cbnz	r0, b302 <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b2f2:	4b36      	ldr	r3, [pc, #216]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b2f4:	2203      	movs	r2, #3
    b2f6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b2f8:	4b3f      	ldr	r3, [pc, #252]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b2fa:	f240 22ab 	movw	r2, #683	; 0x2ab
    b2fe:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b300:	e78a      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b302:	4b36      	ldr	r3, [pc, #216]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b304:	691a      	ldr	r2, [r3, #16]
    b306:	4b44      	ldr	r3, [pc, #272]	; (b418 <SdioCard::begin(SdioConfig)+0x318>)
    b308:	4013      	ands	r3, r2
    b30a:	4a44      	ldr	r2, [pc, #272]	; (b41c <SdioCard::begin(SdioConfig)+0x31c>)
    b30c:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b30e:	4944      	ldr	r1, [pc, #272]	; (b420 <SdioCard::begin(SdioConfig)+0x320>)
    b310:	4844      	ldr	r0, [pc, #272]	; (b424 <SdioCard::begin(SdioConfig)+0x324>)
    b312:	f7ff fb5b 	bl	a9cc <readReg16(unsigned long, void*)>
    b316:	4604      	mov	r4, r0
    b318:	b938      	cbnz	r0, b32a <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b31a:	4b2c      	ldr	r3, [pc, #176]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b31c:	2207      	movs	r2, #7
    b31e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b320:	4b35      	ldr	r3, [pc, #212]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b322:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b326:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b328:	e776      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b32a:	493f      	ldr	r1, [pc, #252]	; (b428 <SdioCard::begin(SdioConfig)+0x328>)
    b32c:	483f      	ldr	r0, [pc, #252]	; (b42c <SdioCard::begin(SdioConfig)+0x32c>)
    b32e:	f7ff fb4d 	bl	a9cc <readReg16(unsigned long, void*)>
    b332:	4604      	mov	r4, r0
    b334:	b938      	cbnz	r0, b346 <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b336:	4b25      	ldr	r3, [pc, #148]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b338:	2208      	movs	r2, #8
    b33a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b33c:	4b2e      	ldr	r3, [pc, #184]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b33e:	f240 22b3 	movw	r2, #691	; 0x2b3
    b342:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b344:	e768      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b346:	4b35      	ldr	r3, [pc, #212]	; (b41c <SdioCard::begin(SdioConfig)+0x31c>)
    b348:	6819      	ldr	r1, [r3, #0]
    b34a:	4839      	ldr	r0, [pc, #228]	; (b430 <SdioCard::begin(SdioConfig)+0x330>)
    b34c:	f7ff fb00 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b350:	4604      	mov	r4, r0
    b352:	b938      	cbnz	r0, b364 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b354:	4b1d      	ldr	r3, [pc, #116]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b356:	2205      	movs	r2, #5
    b358:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b35a:	4b27      	ldr	r3, [pc, #156]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b35c:	f240 22b6 	movw	r2, #694	; 0x2b6
    b360:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b362:	e759      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b364:	4b2d      	ldr	r3, [pc, #180]	; (b41c <SdioCard::begin(SdioConfig)+0x31c>)
    b366:	6819      	ldr	r1, [r3, #0]
    b368:	4826      	ldr	r0, [pc, #152]	; (b404 <SdioCard::begin(SdioConfig)+0x304>)
    b36a:	f7ff faf1 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b36e:	b940      	cbnz	r0, b382 <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b370:	4b16      	ldr	r3, [pc, #88]	; (b3cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b372:	2214      	movs	r2, #20
    b374:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b376:	4b20      	ldr	r3, [pc, #128]	; (b3f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b378:	f240 22ba 	movw	r2, #698	; 0x2ba
    b37c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b37e:	2400      	movs	r4, #0
    b380:	e74a      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b382:	2102      	movs	r1, #2
    b384:	482b      	ldr	r0, [pc, #172]	; (b434 <SdioCard::begin(SdioConfig)+0x334>)
    b386:	f7ff fae3 	bl	a950 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b38a:	4604      	mov	r4, r0
    b38c:	2800      	cmp	r0, #0
    b38e:	d0ef      	beq.n	b370 <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b390:	4b12      	ldr	r3, [pc, #72]	; (b3dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b394:	f022 0206 	bic.w	r2, r2, #6
    b398:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b39c:	f042 0202 	orr.w	r2, r2, #2
    b3a0:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b3a2:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b3a6:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b3a8:	4669      	mov	r1, sp
    b3aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b3ae:	f7ff fca3 	bl	acf8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b3b2:	2800      	cmp	r0, #0
    b3b4:	d053      	beq.n	b45e <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b3b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b3ba:	f013 0f02 	tst.w	r3, #2
    b3be:	d13d      	bne.n	b43c <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b3c0:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b3c4:	e04d      	b.n	b462 <SdioCard::begin(SdioConfig)+0x362>
    b3c6:	bf00      	nop
    b3c8:	200052df 	.word	0x200052df
    b3cc:	200038bc 	.word	0x200038bc
    b3d0:	200052e1 	.word	0x200052e1
    b3d4:	200052e0 	.word	0x200052e0
    b3d8:	400d8000 	.word	0x400d8000
    b3dc:	402c0000 	.word	0x402c0000
    b3e0:	01008000 	.word	0x01008000
    b3e4:	401f8000 	.word	0x401f8000
    b3e8:	117f000b 	.word	0x117f000b
    b3ec:	20003c00 	.word	0x20003c00
    b3f0:	0000a695 	.word	0x0000a695
    b3f4:	e000e400 	.word	0xe000e400
    b3f8:	20004b30 	.word	0x20004b30
    b3fc:	081a0000 	.word	0x081a0000
    b400:	40300000 	.word	0x40300000
    b404:	371a0000 	.word	0x371a0000
    b408:	000f4240 	.word	0x000f4240
    b40c:	20004b54 	.word	0x20004b54
    b410:	02090000 	.word	0x02090000
    b414:	031a0000 	.word	0x031a0000
    b418:	ffff0000 	.word	0xffff0000
    b41c:	20004b58 	.word	0x20004b58
    b420:	20004b44 	.word	0x20004b44
    b424:	09090000 	.word	0x09090000
    b428:	20004b34 	.word	0x20004b34
    b42c:	0a090000 	.word	0x0a090000
    b430:	071b0000 	.word	0x071b0000
    b434:	061a0000 	.word	0x061a0000
    b438:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b43c:	4669      	mov	r1, sp
    b43e:	4819      	ldr	r0, [pc, #100]	; (b4a4 <SdioCard::begin(SdioConfig)+0x3a4>)
    b440:	f7ff fc5a 	bl	acf8 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b444:	b358      	cbz	r0, b49e <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b446:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b44a:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    b44e:	f24c 3550 	movw	r5, #50000	; 0xc350
    b452:	f246 12a8 	movw	r2, #25000	; 0x61a8
    b456:	2b01      	cmp	r3, #1
    b458:	bf18      	it	ne
    b45a:	4615      	movne	r5, r2
    b45c:	e001      	b.n	b462 <SdioCard::begin(SdioConfig)+0x362>
    b45e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    b462:	2005      	movs	r0, #5
    b464:	f7ff f92c 	bl	a6c0 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    b468:	4628      	mov	r0, r5
    b46a:	f7ff f97d 	bl	a768 <setSdclk(unsigned long)>
    gpioMux(0);
    b46e:	2000      	movs	r0, #0
    b470:	f7ff f926 	bl	a6c0 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b474:	4b0c      	ldr	r3, [pc, #48]	; (b4a8 <SdioCard::begin(SdioConfig)+0x3a8>)
    b476:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b47a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b47e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b482:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b486:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b48a:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b48e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b492:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    b496:	4b05      	ldr	r3, [pc, #20]	; (b4ac <SdioCard::begin(SdioConfig)+0x3ac>)
    b498:	2201      	movs	r2, #1
    b49a:	701a      	strb	r2, [r3, #0]
  return true;
    b49c:	e6bc      	b.n	b218 <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    b49e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b4a2:	e7de      	b.n	b462 <SdioCard::begin(SdioConfig)+0x362>
    b4a4:	80fffff1 	.word	0x80fffff1
    b4a8:	401f8000 	.word	0x401f8000
    b4ac:	200052df 	.word	0x200052df

0000b4b0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    b4b0:	b538      	push	{r3, r4, r5, lr}
    b4b2:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b4b4:	4b2b      	ldr	r3, [pc, #172]	; (b564 <SdioCard::readData(unsigned char*)+0xb4>)
    b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b4b8:	f413 7f00 	tst.w	r3, #512	; 0x200
    b4bc:	d10e      	bne.n	b4dc <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b4be:	4b29      	ldr	r3, [pc, #164]	; (b564 <SdioCard::readData(unsigned char*)+0xb4>)
    b4c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b4c6:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b4c8:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b4ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b4d0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b4d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b4d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b4d8:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b4da:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    b4dc:	4822      	ldr	r0, [pc, #136]	; (b568 <SdioCard::readData(unsigned char*)+0xb8>)
    b4de:	f7ff fa25 	bl	a92c <waitTimeout(bool (*)())>
    b4e2:	4605      	mov	r5, r0
    b4e4:	b148      	cbz	r0, b4fa <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    b4e6:	4b21      	ldr	r3, [pc, #132]	; (b56c <SdioCard::readData(unsigned char*)+0xbc>)
    b4e8:	221a      	movs	r2, #26
    b4ea:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b4ec:	4b20      	ldr	r3, [pc, #128]	; (b570 <SdioCard::readData(unsigned char*)+0xc0>)
    b4ee:	f240 3237 	movw	r2, #823	; 0x337
    b4f2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b4f4:	2500      	movs	r5, #0
}
    b4f6:	4628      	mov	r0, r5
    b4f8:	bd38      	pop	{r3, r4, r5, pc}
    b4fa:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    b4fe:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b502:	4818      	ldr	r0, [pc, #96]	; (b564 <SdioCard::readData(unsigned char*)+0xb4>)
    b504:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b506:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b50a:	d0fb      	beq.n	b504 <SdioCard::readData(unsigned char*)+0x54>
    b50c:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b510:	6a02      	ldr	r2, [r0, #32]
    b512:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b516:	4563      	cmp	r3, ip
    b518:	d1fa      	bne.n	b510 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b51a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b51e:	458c      	cmp	ip, r1
    b520:	d1f0      	bne.n	b504 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    b522:	4814      	ldr	r0, [pc, #80]	; (b574 <SdioCard::readData(unsigned char*)+0xc4>)
    b524:	f7ff fa02 	bl	a92c <waitTimeout(bool (*)())>
    b528:	4601      	mov	r1, r0
    b52a:	b138      	cbz	r0, b53c <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    b52c:	4b0f      	ldr	r3, [pc, #60]	; (b56c <SdioCard::readData(unsigned char*)+0xbc>)
    b52e:	221d      	movs	r2, #29
    b530:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b532:	4b0f      	ldr	r3, [pc, #60]	; (b570 <SdioCard::readData(unsigned char*)+0xc0>)
    b534:	f240 3242 	movw	r2, #834	; 0x342
    b538:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b53a:	e7dc      	b.n	b4f6 <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    b53c:	4a09      	ldr	r2, [pc, #36]	; (b564 <SdioCard::readData(unsigned char*)+0xb4>)
    b53e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    b540:	4b0d      	ldr	r3, [pc, #52]	; (b578 <SdioCard::readData(unsigned char*)+0xc8>)
    b542:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b544:	6818      	ldr	r0, [r3, #0]
    b546:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b548:	681b      	ldr	r3, [r3, #0]
    b54a:	f013 0f02 	tst.w	r3, #2
    b54e:	d007      	beq.n	b560 <SdioCard::readData(unsigned char*)+0xb0>
    b550:	4b09      	ldr	r3, [pc, #36]	; (b578 <SdioCard::readData(unsigned char*)+0xc8>)
    b552:	681a      	ldr	r2, [r3, #0]
    b554:	4b09      	ldr	r3, [pc, #36]	; (b57c <SdioCard::readData(unsigned char*)+0xcc>)
    b556:	421a      	tst	r2, r3
    b558:	bf0c      	ite	eq
    b55a:	2501      	moveq	r5, #1
    b55c:	2500      	movne	r5, #0
    b55e:	e7ca      	b.n	b4f6 <SdioCard::readData(unsigned char*)+0x46>
    b560:	460d      	mov	r5, r1
    b562:	e7c8      	b.n	b4f6 <SdioCard::readData(unsigned char*)+0x46>
    b564:	402c0000 	.word	0x402c0000
    b568:	0000a729 	.word	0x0000a729
    b56c:	200038bc 	.word	0x200038bc
    b570:	20004b30 	.word	0x20004b30
    b574:	0000a751 	.word	0x0000a751
    b578:	20004b60 	.word	0x20004b60
    b57c:	117f0000 	.word	0x117f0000

0000b580 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b580:	b510      	push	{r4, lr}
    b582:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b584:	4813      	ldr	r0, [pc, #76]	; (b5d4 <SdioCard::readStart(unsigned long)+0x54>)
    b586:	f7ff fb81 	bl	ac8c <yieldTimeout(bool (*)())>
    b58a:	b140      	cbz	r0, b59e <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    b58c:	4b12      	ldr	r3, [pc, #72]	; (b5d8 <SdioCard::readStart(unsigned long)+0x58>)
    b58e:	220a      	movs	r2, #10
    b590:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b592:	4b12      	ldr	r3, [pc, #72]	; (b5dc <SdioCard::readStart(unsigned long)+0x5c>)
    b594:	f240 3292 	movw	r2, #914	; 0x392
    b598:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b59a:	2000      	movs	r0, #0
}
    b59c:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b59e:	4b10      	ldr	r3, [pc, #64]	; (b5e0 <SdioCard::readStart(unsigned long)+0x60>)
    b5a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b5a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b5a6:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b5a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    b5ac:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b5ae:	4b0d      	ldr	r3, [pc, #52]	; (b5e4 <SdioCard::readStart(unsigned long)+0x64>)
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	b903      	cbnz	r3, b5b6 <SdioCard::readStart(unsigned long)+0x36>
    b5b4:	0264      	lsls	r4, r4, #9
    b5b6:	4621      	mov	r1, r4
    b5b8:	480b      	ldr	r0, [pc, #44]	; (b5e8 <SdioCard::readStart(unsigned long)+0x68>)
    b5ba:	f7ff f9c9 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b5be:	2800      	cmp	r0, #0
    b5c0:	d1ec      	bne.n	b59c <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    b5c2:	4b05      	ldr	r3, [pc, #20]	; (b5d8 <SdioCard::readStart(unsigned long)+0x58>)
    b5c4:	220c      	movs	r2, #12
    b5c6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b5c8:	4b04      	ldr	r3, [pc, #16]	; (b5dc <SdioCard::readStart(unsigned long)+0x5c>)
    b5ca:	f240 329e 	movw	r2, #926	; 0x39e
    b5ce:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    b5d0:	e7e4      	b.n	b59c <SdioCard::readStart(unsigned long)+0x1c>
    b5d2:	bf00      	nop
    b5d4:	0000aa65 	.word	0x0000aa65
    b5d8:	200038bc 	.word	0x200038bc
    b5dc:	20004b30 	.word	0x20004b30
    b5e0:	402c0000 	.word	0x402c0000
    b5e4:	200052e1 	.word	0x200052e1
    b5e8:	123a0030 	.word	0x123a0030

0000b5ec <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b5ec:	b570      	push	{r4, r5, r6, lr}
    b5ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b5f2:	460e      	mov	r6, r1
    b5f4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b5f6:	7a03      	ldrb	r3, [r0, #8]
    b5f8:	f013 0f01 	tst.w	r3, #1
    b5fc:	d013      	beq.n	b626 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b5fe:	f012 0f03 	tst.w	r2, #3
    b602:	d135      	bne.n	b670 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b604:	2301      	movs	r3, #1
    b606:	4822      	ldr	r0, [pc, #136]	; (b690 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b608:	f7ff fc3e 	bl	ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b60c:	2800      	cmp	r0, #0
    b60e:	d13c      	bne.n	b68a <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    b610:	4b20      	ldr	r3, [pc, #128]	; (b694 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    b612:	220b      	movs	r2, #11
    b614:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b616:	4b20      	ldr	r3, [pc, #128]	; (b698 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    b618:	f240 3255 	movw	r2, #853	; 0x355
    b61c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    b61e:	2000      	movs	r0, #0
}
    b620:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b624:	bd70      	pop	{r4, r5, r6, pc}
    b626:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b628:	f7ff fab6 	bl	ab98 <waitTransferComplete()>
    b62c:	2800      	cmp	r0, #0
    b62e:	d0f7      	beq.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b630:	7a63      	ldrb	r3, [r4, #9]
    b632:	2b01      	cmp	r3, #1
    b634:	d018      	beq.n	b668 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    b636:	6823      	ldr	r3, [r4, #0]
    b638:	6a1b      	ldr	r3, [r3, #32]
    b63a:	4620      	mov	r0, r4
    b63c:	4798      	blx	r3
    b63e:	2800      	cmp	r0, #0
    b640:	d0ee      	beq.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    b642:	4631      	mov	r1, r6
    b644:	4620      	mov	r0, r4
    b646:	f7ff ff9b 	bl	b580 <SdioCard::readStart(unsigned long)>
    b64a:	2800      	cmp	r0, #0
    b64c:	d0e8      	beq.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    b64e:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    b650:	2301      	movs	r3, #1
    b652:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b654:	4629      	mov	r1, r5
    b656:	4620      	mov	r0, r4
    b658:	f7ff ff2a 	bl	b4b0 <SdioCard::readData(unsigned char*)>
    b65c:	2800      	cmp	r0, #0
    b65e:	d0df      	beq.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    b660:	6863      	ldr	r3, [r4, #4]
    b662:	3301      	adds	r3, #1
    b664:	6063      	str	r3, [r4, #4]
    b666:	e7db      	b.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b668:	6863      	ldr	r3, [r4, #4]
    b66a:	42b3      	cmp	r3, r6
    b66c:	d1e3      	bne.n	b636 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    b66e:	e7f1      	b.n	b654 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b670:	2301      	movs	r3, #1
    b672:	466a      	mov	r2, sp
    b674:	4806      	ldr	r0, [pc, #24]	; (b690 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b676:	f7ff fc07 	bl	ae88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b67a:	2800      	cmp	r0, #0
    b67c:	d0c8      	beq.n	b610 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    b67e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b682:	4669      	mov	r1, sp
    b684:	4628      	mov	r0, r5
    b686:	f001 fd4b 	bl	d120 <memcpy>
  return true;
    b68a:	2001      	movs	r0, #1
    b68c:	e7c8      	b.n	b620 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    b68e:	bf00      	nop
    b690:	113a0011 	.word	0x113a0011
    b694:	200038bc 	.word	0x200038bc
    b698:	20004b30 	.word	0x20004b30

0000b69c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b69c:	b510      	push	{r4, lr}
    b69e:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    b6a0:	2100      	movs	r1, #0
    b6a2:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b6a4:	4a10      	ldr	r2, [pc, #64]	; (b6e8 <SdioCard::stopTransmission(bool)+0x4c>)
    b6a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b6a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b6ac:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b6ae:	480f      	ldr	r0, [pc, #60]	; (b6ec <SdioCard::stopTransmission(bool)+0x50>)
    b6b0:	f7ff f94e 	bl	a950 <cardCommand(unsigned long, unsigned long)>
    b6b4:	b938      	cbnz	r0, b6c6 <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    b6b6:	4b0e      	ldr	r3, [pc, #56]	; (b6f0 <SdioCard::stopTransmission(bool)+0x54>)
    b6b8:	2209      	movs	r2, #9
    b6ba:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6bc:	4b0d      	ldr	r3, [pc, #52]	; (b6f4 <SdioCard::stopTransmission(bool)+0x58>)
    b6be:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    b6c2:	601a      	str	r2, [r3, #0]
}
    b6c4:	bd10      	pop	{r4, pc}
  if (blocking) {
    b6c6:	2c00      	cmp	r4, #0
    b6c8:	d0fc      	beq.n	b6c4 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    b6ca:	480b      	ldr	r0, [pc, #44]	; (b6f8 <SdioCard::stopTransmission(bool)+0x5c>)
    b6cc:	f7ff fade 	bl	ac8c <yieldTimeout(bool (*)())>
    b6d0:	b140      	cbz	r0, b6e4 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    b6d2:	4b07      	ldr	r3, [pc, #28]	; (b6f0 <SdioCard::stopTransmission(bool)+0x54>)
    b6d4:	220a      	movs	r2, #10
    b6d6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6d8:	4b06      	ldr	r3, [pc, #24]	; (b6f4 <SdioCard::stopTransmission(bool)+0x58>)
    b6da:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    b6de:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b6e0:	2000      	movs	r0, #0
    b6e2:	e7ef      	b.n	b6c4 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    b6e4:	4620      	mov	r0, r4
    b6e6:	e7ed      	b.n	b6c4 <SdioCard::stopTransmission(bool)+0x28>
    b6e8:	402c0000 	.word	0x402c0000
    b6ec:	0cdb0000 	.word	0x0cdb0000
    b6f0:	200038bc 	.word	0x200038bc
    b6f4:	20004b30 	.word	0x20004b30
    b6f8:	0000a709 	.word	0x0000a709

0000b6fc <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    b6fc:	b510      	push	{r4, lr}
    b6fe:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    b700:	f7ff fa4a 	bl	ab98 <waitTransferComplete()>
    b704:	b108      	cbz	r0, b70a <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    b706:	7a63      	ldrb	r3, [r4, #9]
    b708:	b903      	cbnz	r3, b70c <SdioCard::syncDevice()+0x10>
}
    b70a:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    b70c:	2101      	movs	r1, #1
    b70e:	4620      	mov	r0, r4
    b710:	f7ff ffc4 	bl	b69c <SdioCard::stopTransmission(bool)>
    b714:	e7f9      	b.n	b70a <SdioCard::syncDevice()+0xe>

0000b716 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    b716:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    b718:	2101      	movs	r1, #1
    b71a:	f001 fcbb 	bl	d094 <pinMode>
}
    b71e:	bd08      	pop	{r3, pc}

0000b720 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    b720:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    b722:	f001 fc7f 	bl	d024 <digitalWrite>
}
    b726:	bd08      	pop	{r3, pc}

0000b728 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    b728:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    b72a:	6803      	ldr	r3, [r0, #0]
    b72c:	6842      	ldr	r2, [r0, #4]
    b72e:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    b730:	7cd9      	ldrb	r1, [r3, #19]
    b732:	2900      	cmp	r1, #0
    b734:	d042      	beq.n	b7bc <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    b736:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b738:	7cd9      	ldrb	r1, [r3, #19]
    b73a:	f011 0f01 	tst.w	r1, #1
    b73e:	d008      	beq.n	b752 <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b740:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b744:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    b748:	695d      	ldr	r5, [r3, #20]
    b74a:	4029      	ands	r1, r5
    b74c:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b74e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    b752:	7cd9      	ldrb	r1, [r3, #19]
    b754:	f011 0f02 	tst.w	r1, #2
    b758:	d008      	beq.n	b76c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b75a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b75e:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    b762:	699d      	ldr	r5, [r3, #24]
    b764:	4029      	ands	r1, r5
    b766:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b768:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    b76c:	7cd9      	ldrb	r1, [r3, #19]
    b76e:	f011 0f04 	tst.w	r1, #4
    b772:	d008      	beq.n	b786 <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b774:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b778:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    b77c:	69dd      	ldr	r5, [r3, #28]
    b77e:	4029      	ands	r1, r5
    b780:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b782:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    b786:	7cd9      	ldrb	r1, [r3, #19]
    b788:	f011 0f08 	tst.w	r1, #8
    b78c:	d008      	beq.n	b7a0 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b78e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b792:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    b796:	6a1d      	ldr	r5, [r3, #32]
    b798:	4029      	ands	r1, r5
    b79a:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b79c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    b7a0:	7cd9      	ldrb	r1, [r3, #19]
    b7a2:	f011 0f10 	tst.w	r1, #16
    b7a6:	d008      	beq.n	b7ba <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    b7a8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b7ac:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    b7b0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b7b2:	4029      	ands	r1, r5
    b7b4:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    b7b6:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    b7ba:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    b7bc:	6899      	ldr	r1, [r3, #8]
    b7be:	428a      	cmp	r2, r1
    b7c0:	d025      	beq.n	b80e <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    b7c2:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b7c4:	4920      	ldr	r1, [pc, #128]	; (b848 <SdSpiArduinoDriver::activate()+0x120>)
    b7c6:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b7c8:	f3c1 1501 	ubfx	r5, r1, #4, #2
    b7cc:	481f      	ldr	r0, [pc, #124]	; (b84c <SdSpiArduinoDriver::activate()+0x124>)
    b7ce:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    b7d2:	f3c1 6182 	ubfx	r1, r1, #26, #3
    b7d6:	3101      	adds	r1, #1
    b7d8:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    b7dc:	b37a      	cbz	r2, b83e <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    b7de:	4282      	cmp	r2, r0
    b7e0:	d82b      	bhi.n	b83a <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    b7e2:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    b7e6:	fbb0 f0f1 	udiv	r0, r0, r1
    b7ea:	4282      	cmp	r2, r0
    b7ec:	d31f      	bcc.n	b82e <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    b7ee:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b7f2:	d31e      	bcc.n	b832 <SdSpiArduinoDriver::activate()+0x10a>
    b7f4:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    b7f8:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b7fa:	0850      	lsrs	r0, r2, #1
    b7fc:	0201      	lsls	r1, r0, #8
    b7fe:	b289      	uxth	r1, r1
    b800:	0400      	lsls	r0, r0, #16
    b802:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    b806:	4301      	orrs	r1, r0
    b808:	b2d2      	uxtb	r2, r2
    b80a:	430a      	orrs	r2, r1
    b80c:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b80e:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    b810:	2100      	movs	r1, #0
    b812:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b814:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b816:	2103      	movs	r1, #3
    b818:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b81a:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    b81c:	68d9      	ldr	r1, [r3, #12]
    b81e:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b820:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    b822:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b824:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    b826:	2201      	movs	r2, #1
    b828:	611a      	str	r2, [r3, #16]
}
    b82a:	bc30      	pop	{r4, r5}
    b82c:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    b82e:	4608      	mov	r0, r1
    b830:	e007      	b.n	b842 <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    b832:	2902      	cmp	r1, #2
    b834:	d8e0      	bhi.n	b7f8 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    b836:	2200      	movs	r2, #0
    b838:	e7df      	b.n	b7fa <SdSpiArduinoDriver::activate()+0xd2>
    b83a:	2200      	movs	r2, #0
    b83c:	e7dd      	b.n	b7fa <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    b83e:	428d      	cmp	r5, r1
    b840:	d3db      	bcc.n	b7fa <SdSpiArduinoDriver::activate()+0xd2>
    b842:	1c41      	adds	r1, r0, #1
    b844:	e7d3      	b.n	b7ee <SdSpiArduinoDriver::activate()+0xc6>
    b846:	bf00      	nop
    b848:	400fc000 	.word	0x400fc000
    b84c:	20002418 	.word	0x20002418

0000b850 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    b850:	b500      	push	{lr}
    b852:	b085      	sub	sp, #20
    b854:	4684      	mov	ip, r0
    b856:	a804      	add	r0, sp, #16
    b858:	e900 000e 	stmdb	r0, {r1, r2, r3}
    b85c:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    b85e:	b133      	cbz	r3, b86e <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    b860:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    b864:	f7f9 f836 	bl	48d4 <SPIClass::begin()>
}
    b868:	b005      	add	sp, #20
    b86a:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    b86e:	4801      	ldr	r0, [pc, #4]	; (b874 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    b870:	e7f6      	b.n	b860 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    b872:	bf00      	nop
    b874:	200045b0 	.word	0x200045b0

0000b878 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    b878:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    b87a:	7cda      	ldrb	r2, [r3, #19]
    b87c:	b35a      	cbz	r2, b8d6 <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    b87e:	f012 0f01 	tst.w	r2, #1
    b882:	d004      	beq.n	b88e <SdSpiArduinoDriver::deactivate()+0x16>
    b884:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b886:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b88a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    b88e:	7cda      	ldrb	r2, [r3, #19]
    b890:	f012 0f02 	tst.w	r2, #2
    b894:	d004      	beq.n	b8a0 <SdSpiArduinoDriver::deactivate()+0x28>
    b896:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b898:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b89c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    b8a0:	7cda      	ldrb	r2, [r3, #19]
    b8a2:	f012 0f04 	tst.w	r2, #4
    b8a6:	d004      	beq.n	b8b2 <SdSpiArduinoDriver::deactivate()+0x3a>
    b8a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b8aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b8ae:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    b8b2:	7cda      	ldrb	r2, [r3, #19]
    b8b4:	f012 0f08 	tst.w	r2, #8
    b8b8:	d004      	beq.n	b8c4 <SdSpiArduinoDriver::deactivate()+0x4c>
    b8ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b8bc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b8c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    b8c4:	7cda      	ldrb	r2, [r3, #19]
    b8c6:	f012 0f10 	tst.w	r2, #16
    b8ca:	d004      	beq.n	b8d6 <SdSpiArduinoDriver::deactivate()+0x5e>
    b8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b8ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b8d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    b8d6:	4770      	bx	lr

0000b8d8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    b8d8:	b508      	push	{r3, lr}
  m_spi->end();
    b8da:	6800      	ldr	r0, [r0, #0]
    b8dc:	f7f9 f971 	bl	4bc2 <SPIClass::end()>
}
    b8e0:	bd08      	pop	{r3, pc}

0000b8e2 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    b8e2:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b8e4:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b8e6:	21ff      	movs	r1, #255	; 0xff
    b8e8:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b8ea:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b8ec:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b8ee:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b8f2:	d0fb      	beq.n	b8ec <SdSpiArduinoDriver::receive()+0xa>
    b8f4:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    b8f6:	b2c0      	uxtb	r0, r0
    b8f8:	4770      	bx	lr

0000b8fa <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b8fa:	b570      	push	{r4, r5, r6, lr}
    b8fc:	4605      	mov	r5, r0
    b8fe:	460c      	mov	r4, r1
    b900:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    b902:	21ff      	movs	r1, #255	; 0xff
    b904:	4620      	mov	r0, r4
    b906:	f005 fcd5 	bl	112b4 <memset>
		transfer(buf, buf, count);
    b90a:	4633      	mov	r3, r6
    b90c:	4622      	mov	r2, r4
    b90e:	4621      	mov	r1, r4
    b910:	6828      	ldr	r0, [r5, #0]
    b912:	f7f9 f917 	bl	4b44 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    b916:	2000      	movs	r0, #0
    b918:	bd70      	pop	{r4, r5, r6, pc}

0000b91a <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    b91a:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b91c:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b91e:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b920:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b922:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b924:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b928:	d0fb      	beq.n	b922 <SdSpiArduinoDriver::send(unsigned char)+0x8>
    b92a:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    b92c:	4770      	bx	lr

0000b92e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    b92e:	b530      	push	{r4, r5, lr}
    b930:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    b934:	4604      	mov	r4, r0
    b936:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b938:	1e53      	subs	r3, r2, #1
    b93a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b93e:	d313      	bcc.n	b968 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b940:	b17a      	cbz	r2, b962 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    b942:	3901      	subs	r1, #1
    b944:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    b948:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b94a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b94c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b950:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b952:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b954:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b956:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b95a:	d0fb      	beq.n	b954 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    b95c:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    b95e:	4561      	cmp	r1, ip
    b960:	d1f2      	bne.n	b948 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    b962:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    b966:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    b968:	4668      	mov	r0, sp
    b96a:	f001 fbd9 	bl	d120 <memcpy>
		transfer(buf, buf, count);
    b96e:	462b      	mov	r3, r5
    b970:	466a      	mov	r2, sp
    b972:	4669      	mov	r1, sp
    b974:	6820      	ldr	r0, [r4, #0]
    b976:	f7f9 f8e5 	bl	4b44 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    b97a:	e7f2      	b.n	b962 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000b97c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    b97c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    b97e:	7803      	ldrb	r3, [r0, #0]
    b980:	f013 0f01 	tst.w	r3, #1
    b984:	d01c      	beq.n	b9c0 <FsCache::sync()+0x44>
    b986:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    b988:	6840      	ldr	r0, [r0, #4]
    b98a:	f104 0610 	add.w	r6, r4, #16
    b98e:	6803      	ldr	r3, [r0, #0]
    b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b992:	4632      	mov	r2, r6
    b994:	68e1      	ldr	r1, [r4, #12]
    b996:	4798      	blx	r3
    b998:	4605      	mov	r5, r0
    b99a:	b190      	cbz	r0, b9c2 <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    b99c:	7823      	ldrb	r3, [r4, #0]
    b99e:	f013 0f02 	tst.w	r3, #2
    b9a2:	d008      	beq.n	b9b6 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b9a4:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    b9a6:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b9a8:	6803      	ldr	r3, [r0, #0]
    b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b9ac:	4632      	mov	r2, r6
    b9ae:	68e6      	ldr	r6, [r4, #12]
    b9b0:	4431      	add	r1, r6
    b9b2:	4798      	blx	r3
    b9b4:	b138      	cbz	r0, b9c6 <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    b9b6:	7823      	ldrb	r3, [r4, #0]
    b9b8:	f023 0301 	bic.w	r3, r3, #1
    b9bc:	7023      	strb	r3, [r4, #0]
    b9be:	e000      	b.n	b9c2 <FsCache::sync()+0x46>
  }
  return true;
    b9c0:	2501      	movs	r5, #1

 fail:
  return false;
}
    b9c2:	4628      	mov	r0, r5
    b9c4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    b9c6:	4605      	mov	r5, r0
    b9c8:	e7fb      	b.n	b9c2 <FsCache::sync()+0x46>

0000b9ca <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    b9ca:	b570      	push	{r4, r5, r6, lr}
    b9cc:	4604      	mov	r4, r0
  if (!m_blockDev) {
    b9ce:	6840      	ldr	r0, [r0, #4]
    b9d0:	b158      	cbz	r0, b9ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
    b9d2:	460e      	mov	r6, r1
    b9d4:	4615      	mov	r5, r2
  if (m_sector != sector) {
    b9d6:	68e3      	ldr	r3, [r4, #12]
    b9d8:	428b      	cmp	r3, r1
    b9da:	d107      	bne.n	b9ec <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    b9dc:	f005 0503 	and.w	r5, r5, #3
    b9e0:	7823      	ldrb	r3, [r4, #0]
    b9e2:	432b      	orrs	r3, r5
    b9e4:	4620      	mov	r0, r4
    b9e6:	f800 3b10 	strb.w	r3, [r0], #16
}
    b9ea:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    b9ec:	4620      	mov	r0, r4
    b9ee:	f7ff ffc5 	bl	b97c <FsCache::sync()>
    b9f2:	b170      	cbz	r0, ba12 <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    b9f4:	f015 0f04 	tst.w	r5, #4
    b9f8:	d107      	bne.n	ba0a <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    b9fa:	6860      	ldr	r0, [r4, #4]
    b9fc:	6803      	ldr	r3, [r0, #0]
    b9fe:	691b      	ldr	r3, [r3, #16]
    ba00:	f104 0210 	add.w	r2, r4, #16
    ba04:	4631      	mov	r1, r6
    ba06:	4798      	blx	r3
    ba08:	b128      	cbz	r0, ba16 <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    ba0a:	2300      	movs	r3, #0
    ba0c:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    ba0e:	60e6      	str	r6, [r4, #12]
    ba10:	e7e4      	b.n	b9dc <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    ba12:	2000      	movs	r0, #0
    ba14:	e7e9      	b.n	b9ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
    ba16:	2000      	movs	r0, #0
    ba18:	e7e7      	b.n	b9ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000ba1c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    ba1c:	b508      	push	{r3, lr}
  *ms10 = 0;
    ba1e:	2300      	movs	r3, #0
    ba20:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    ba22:	4b02      	ldr	r3, [pc, #8]	; (ba2c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    ba24:	681b      	ldr	r3, [r3, #0]
    ba26:	4798      	blx	r3
}
    ba28:	bd08      	pop	{r3, pc}
    ba2a:	bf00      	nop
    ba2c:	20004b68 	.word	0x20004b68

0000ba30 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    ba30:	4b02      	ldr	r3, [pc, #8]	; (ba3c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    ba32:	4a03      	ldr	r2, [pc, #12]	; (ba40 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    ba34:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    ba36:	4b03      	ldr	r3, [pc, #12]	; (ba44 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    ba38:	6018      	str	r0, [r3, #0]
  }
    ba3a:	4770      	bx	lr
    ba3c:	20004b64 	.word	0x20004b64
    ba40:	0000ba1d 	.word	0x0000ba1d
    ba44:	20004b68 	.word	0x20004b68

0000ba48 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    ba48:	b510      	push	{r4, lr}
    ba4a:	b082      	sub	sp, #8
    ba4c:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    ba4e:	8980      	ldrh	r0, [r0, #12]
    ba50:	b118      	cbz	r0, ba5a <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    ba52:	2300      	movs	r3, #0
    ba54:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    ba56:	b002      	add	sp, #8
    ba58:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    ba5a:	6863      	ldr	r3, [r4, #4]
    ba5c:	68a1      	ldr	r1, [r4, #8]
    ba5e:	428b      	cmp	r3, r1
    ba60:	d2f9      	bcs.n	ba56 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    ba62:	aa01      	add	r2, sp, #4
    ba64:	4618      	mov	r0, r3
    ba66:	f000 f8b9 	bl	bbdc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    ba6a:	b130      	cbz	r0, ba7a <FsName::get16()+0x32>
    next = ptr;
    ba6c:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    ba6e:	9801      	ldr	r0, [sp, #4]
    ba70:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ba74:	d204      	bcs.n	ba80 <FsName::get16()+0x38>
      rtn = cp;
    ba76:	b280      	uxth	r0, r0
    ba78:	e7ed      	b.n	ba56 <FsName::get16()+0xe>
  return 0XFFFF;
    ba7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ba7e:	e7ea      	b.n	ba56 <FsName::get16()+0xe>
    ba80:	f3c0 0309 	ubfx	r3, r0, #0, #10
    ba84:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    ba88:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    ba8a:	0a80      	lsrs	r0, r0, #10
    ba8c:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    ba90:	b280      	uxth	r0, r0
    ba92:	e7e0      	b.n	ba56 <FsName::get16()+0xe>

0000ba94 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    ba94:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    ba96:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    ba9a:	d82e      	bhi.n	bafa <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    ba9c:	2910      	cmp	r1, #16
    ba9e:	d81f      	bhi.n	bae0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    baa0:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    baa4:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    baa6:	fb0e f101 	mul.w	r1, lr, r1
    baaa:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    baae:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    bab2:	d23f      	bcs.n	bb34 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    bab4:	fb01 231c 	mls	r3, r1, ip, r2
    bab8:	fbb3 f3fe 	udiv	r3, r3, lr
    babc:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    babe:	fbb2 f1fe 	udiv	r1, r2, lr
    bac2:	fb0e 2211 	mls	r2, lr, r1, r2
    bac6:	3201      	adds	r2, #1
    bac8:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    baca:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    bacc:	ea4f 039c 	mov.w	r3, ip, lsr #2
    bad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    bad4:	431a      	orrs	r2, r3
    bad6:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    bad8:	f880 c002 	strb.w	ip, [r0, #2]
}
    badc:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    bae0:	2920      	cmp	r1, #32
    bae2:	d803      	bhi.n	baec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bae4:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    bae8:	2104      	movs	r1, #4
    baea:	e7dc      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    baec:	f04f 0e20 	mov.w	lr, #32
    baf0:	2980      	cmp	r1, #128	; 0x80
    baf2:	bf8c      	ite	hi
    baf4:	2110      	movhi	r1, #16
    baf6:	2108      	movls	r1, #8
    baf8:	e7d5      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    bafa:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    bafe:	d90d      	bls.n	bb1c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    bb00:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    bb04:	d90e      	bls.n	bb24 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    bb06:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    bb0a:	d90f      	bls.n	bb2c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bb0c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    bb10:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    bb14:	bf94      	ite	ls
    bb16:	2180      	movls	r1, #128	; 0x80
    bb18:	21ff      	movhi	r1, #255	; 0xff
    bb1a:	e7c4      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    bb1c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    bb20:	2110      	movs	r1, #16
    bb22:	e7c0      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bb24:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    bb28:	2120      	movs	r1, #32
    bb2a:	e7bc      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bb2c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    bb30:	2140      	movs	r1, #64	; 0x40
    bb32:	e7b8      	b.n	baa6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    bb34:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    bb36:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    bb38:	f240 3cff 	movw	ip, #1023	; 0x3ff
    bb3c:	e7c5      	b.n	baca <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000bb3e <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    bb3e:	4603      	mov	r3, r0
    size_t n = end - str;
    bb40:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    bb42:	287f      	cmp	r0, #127	; 0x7f
    bb44:	d805      	bhi.n	bb52 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    bb46:	2a00      	cmp	r2, #0
    bb48:	d040      	beq.n	bbcc <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    bb4a:	4608      	mov	r0, r1
    bb4c:	f800 3b01 	strb.w	r3, [r0], #1
    bb50:	4770      	bx	lr
    } else if (cp < 0X800) {
    bb52:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bb56:	d20d      	bcs.n	bb74 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    bb58:	2a01      	cmp	r2, #1
    bb5a:	d939      	bls.n	bbd0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    bb5c:	0982      	lsrs	r2, r0, #6
    bb5e:	f062 023f 	orn	r2, r2, #63	; 0x3f
    bb62:	4608      	mov	r0, r1
    bb64:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bb68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bb6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb70:	704b      	strb	r3, [r1, #1]
    bb72:	4770      	bx	lr
    } else if (cp < 0X10000) {
    bb74:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bb78:	d211      	bcs.n	bb9e <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    bb7a:	2a02      	cmp	r2, #2
    bb7c:	d92a      	bls.n	bbd4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bb7e:	0b02      	lsrs	r2, r0, #12
    bb80:	f062 021f 	orn	r2, r2, #31
    bb84:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bb86:	f3c0 1285 	ubfx	r2, r0, #6, #6
    bb8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bb8e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bb90:	1cc8      	adds	r0, r1, #3
    bb92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bb96:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb9a:	708b      	strb	r3, [r1, #2]
    bb9c:	4770      	bx	lr
       if (n < 4) goto fail;
    bb9e:	2a03      	cmp	r2, #3
    bba0:	d91a      	bls.n	bbd8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    bba2:	0c82      	lsrs	r2, r0, #18
    bba4:	f062 020f 	orn	r2, r2, #15
    bba8:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    bbaa:	f3c0 3205 	ubfx	r2, r0, #12, #6
    bbae:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bbb2:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bbb4:	f3c0 1285 	ubfx	r2, r0, #6, #6
    bbb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bbbc:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bbbe:	1d08      	adds	r0, r1, #4
    bbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bbc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bbc8:	70cb      	strb	r3, [r1, #3]
    bbca:	4770      	bx	lr
    return nullptr;
    bbcc:	2000      	movs	r0, #0
    bbce:	4770      	bx	lr
    bbd0:	2000      	movs	r0, #0
    bbd2:	4770      	bx	lr
    bbd4:	2000      	movs	r0, #0
    bbd6:	4770      	bx	lr
    bbd8:	2000      	movs	r0, #0
  }
    bbda:	4770      	bx	lr

0000bbdc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    bbdc:	4288      	cmp	r0, r1
    bbde:	d242      	bcs.n	bc66 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    bbe0:	b510      	push	{r4, lr}
    bbe2:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    bbe4:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    bbe6:	f990 0000 	ldrsb.w	r0, [r0]
    bbea:	2800      	cmp	r0, #0
    bbec:	da10      	bge.n	bc10 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    bbee:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    bbf2:	28c0      	cmp	r0, #192	; 0xc0
    bbf4:	d00f      	beq.n	bc16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    bbf6:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    bbfa:	28e0      	cmp	r0, #224	; 0xe0
    bbfc:	d02e      	beq.n	bc5c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    bbfe:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    bc02:	28f0      	cmp	r0, #240	; 0xf0
    bc04:	d131      	bne.n	bc6a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    bc06:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    bc0a:	f04f 0c04 	mov.w	ip, #4
    bc0e:	e006      	b.n	bc1e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    bc10:	6014      	str	r4, [r2, #0]
      return str + 1;
    bc12:	1c58      	adds	r0, r3, #1
  }
    bc14:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    bc16:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    bc1a:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    bc1e:	eb03 000c 	add.w	r0, r3, ip
    bc22:	4288      	cmp	r0, r1
    bc24:	d823      	bhi.n	bc6e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    bc26:	1c59      	adds	r1, r3, #1
    bc28:	4684      	mov	ip, r0
      ch = str[i];
    bc2a:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    bc2e:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    bc32:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    bc36:	d11c      	bne.n	bc72 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    bc38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bc3c:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    bc40:	4561      	cmp	r1, ip
    bc42:	d1f2      	bne.n	bc2a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    bc44:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    bc48:	4b0d      	ldr	r3, [pc, #52]	; (bc80 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    bc4a:	4299      	cmp	r1, r3
    bc4c:	d813      	bhi.n	bc76 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    bc4e:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    bc52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bc56:	d310      	bcc.n	bc7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    bc58:	6014      	str	r4, [r2, #0]
    return str + n;
    bc5a:	e7db      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    bc5c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    bc60:	f04f 0c03 	mov.w	ip, #3
    bc64:	e7db      	b.n	bc1e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    bc66:	2000      	movs	r0, #0
  }
    bc68:	4770      	bx	lr
      return nullptr;
    bc6a:	2000      	movs	r0, #0
    bc6c:	e7d2      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bc6e:	2000      	movs	r0, #0
    bc70:	e7d0      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    bc72:	2000      	movs	r0, #0
    bc74:	e7ce      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bc76:	2000      	movs	r0, #0
    bc78:	e7cc      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bc7a:	2000      	movs	r0, #0
    bc7c:	e7ca      	b.n	bc14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bc7e:	bf00      	nop
    bc80:	0010ff7f 	.word	0x0010ff7f

0000bc84 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bc84:	287e      	cmp	r0, #126	; 0x7e
    bc86:	d80c      	bhi.n	bca2 <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    bc88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bc8c:	b29b      	uxth	r3, r3
    bc8e:	2b19      	cmp	r3, #25
    bc90:	bf8c      	ite	hi
    bc92:	2300      	movhi	r3, #0
    bc94:	2301      	movls	r3, #1
    bc96:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    bc9a:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bc9c:	4770      	bx	lr
    mid = left + (right - left)/2;
    bc9e:	469c      	mov	ip, r3
    bca0:	e004      	b.n	bcac <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    bca2:	b430      	push	{r4, r5}
  size_t right = size;
    bca4:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    bca8:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bcaa:	4c27      	ldr	r4, [pc, #156]	; (bd48 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    bcac:	ebac 0302 	sub.w	r3, ip, r2
    bcb0:	2b01      	cmp	r3, #1
    bcb2:	d907      	bls.n	bcc4 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    bcb4:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bcb8:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    bcbc:	4281      	cmp	r1, r0
    bcbe:	d8ee      	bhi.n	bc9e <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    bcc0:	461a      	mov	r2, r3
    bcc2:	e7f3      	b.n	bcac <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    bcc4:	b292      	uxth	r2, r2
    bcc6:	4b20      	ldr	r3, [pc, #128]	; (bd48 <toUpcase(unsigned short)+0xc4>)
    bcc8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bccc:	4298      	cmp	r0, r3
    bcce:	d31d      	bcc.n	bd0c <toUpcase(unsigned short)+0x88>
    bcd0:	1ac1      	subs	r1, r0, r3
    bcd2:	4c1d      	ldr	r4, [pc, #116]	; (bd48 <toUpcase(unsigned short)+0xc4>)
    bcd4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bcd8:	78e4      	ldrb	r4, [r4, #3]
    bcda:	42a1      	cmp	r1, r4
    bcdc:	da19      	bge.n	bd12 <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    bcde:	491a      	ldr	r1, [pc, #104]	; (bd48 <toUpcase(unsigned short)+0xc4>)
    bce0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    bce4:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    bce8:	2a01      	cmp	r2, #1
    bcea:	d004      	beq.n	bcf6 <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    bcec:	b14a      	cbz	r2, bd02 <toUpcase(unsigned short)+0x7e>
    bcee:	b293      	uxth	r3, r2
    bcf0:	4403      	add	r3, r0
    bcf2:	b298      	uxth	r0, r3
    bcf4:	e021      	b.n	bd3a <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    bcf6:	1ac3      	subs	r3, r0, r3
    bcf8:	f003 0301 	and.w	r3, r3, #1
    bcfc:	1ac3      	subs	r3, r0, r3
    bcfe:	b298      	uxth	r0, r3
    bd00:	e01b      	b.n	bd3a <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    bd02:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    bd06:	e7f3      	b.n	bcf0 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    bd08:	461c      	mov	r4, r3
    bd0a:	e005      	b.n	bd18 <toUpcase(unsigned short)+0x94>
    bd0c:	244b      	movs	r4, #75	; 0x4b
    bd0e:	2200      	movs	r2, #0
    bd10:	e001      	b.n	bd16 <toUpcase(unsigned short)+0x92>
    bd12:	244b      	movs	r4, #75	; 0x4b
    bd14:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bd16:	4d0d      	ldr	r5, [pc, #52]	; (bd4c <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    bd18:	1aa3      	subs	r3, r4, r2
    bd1a:	2b01      	cmp	r3, #1
    bd1c:	d907      	bls.n	bd2e <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    bd1e:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bd22:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    bd26:	4281      	cmp	r1, r0
    bd28:	d8ee      	bhi.n	bd08 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    bd2a:	461a      	mov	r2, r3
    bd2c:	e7f4      	b.n	bd18 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    bd2e:	b292      	uxth	r2, r2
    bd30:	4b06      	ldr	r3, [pc, #24]	; (bd4c <toUpcase(unsigned short)+0xc8>)
    bd32:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    bd36:	4283      	cmp	r3, r0
    bd38:	d001      	beq.n	bd3e <toUpcase(unsigned short)+0xba>
}
    bd3a:	bc30      	pop	{r4, r5}
    bd3c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    bd3e:	4b03      	ldr	r3, [pc, #12]	; (bd4c <toUpcase(unsigned short)+0xc8>)
    bd40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bd44:	8858      	ldrh	r0, [r3, #2]
    bd46:	e7f8      	b.n	bd3a <toUpcase(unsigned short)+0xb6>
    bd48:	20001ea4 	.word	0x20001ea4
    bd4c:	20001d78 	.word	0x20001d78

0000bd50 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bd50:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bd54:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bd56:	4b11      	ldr	r3, [pc, #68]	; (bd9c <EventResponder::runFromInterrupt()+0x4c>)
    bd58:	6818      	ldr	r0, [r3, #0]
		if (first) {
    bd5a:	b1d0      	cbz	r0, bd92 <EventResponder::runFromInterrupt()+0x42>
{
    bd5c:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    bd5e:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bd60:	4e0f      	ldr	r6, [pc, #60]	; (bda0 <EventResponder::runFromInterrupt()+0x50>)
    bd62:	2400      	movs	r4, #0
    bd64:	e009      	b.n	bd7a <EventResponder::runFromInterrupt()+0x2a>
    bd66:	6034      	str	r4, [r6, #0]
    bd68:	e00c      	b.n	bd84 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    bd6a:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    bd6c:	6883      	ldr	r3, [r0, #8]
    bd6e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bd70:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bd74:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    bd76:	6828      	ldr	r0, [r5, #0]
		if (first) {
    bd78:	b140      	cbz	r0, bd8c <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    bd7a:	6943      	ldr	r3, [r0, #20]
    bd7c:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d0f1      	beq.n	bd66 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    bd82:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bd84:	2a00      	cmp	r2, #0
    bd86:	d1f0      	bne.n	bd6a <EventResponder::runFromInterrupt()+0x1a>
    bd88:	b662      	cpsie	i
    bd8a:	e7ee      	b.n	bd6a <EventResponder::runFromInterrupt()+0x1a>
    bd8c:	b902      	cbnz	r2, bd90 <EventResponder::runFromInterrupt()+0x40>
    bd8e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    bd90:	bd70      	pop	{r4, r5, r6, pc}
    bd92:	b90a      	cbnz	r2, bd98 <EventResponder::runFromInterrupt()+0x48>
    bd94:	b662      	cpsie	i
			break;
    bd96:	4770      	bx	lr
    bd98:	4770      	bx	lr
    bd9a:	bf00      	nop
    bd9c:	20004b78 	.word	0x20004b78
    bda0:	20004b74 	.word	0x20004b74

0000bda4 <pendablesrvreq_isr>:
{
    bda4:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    bda6:	f7ff ffd3 	bl	bd50 <EventResponder::runFromInterrupt()>
}
    bdaa:	bd08      	pop	{r3, pc}

0000bdac <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bdac:	4b04      	ldr	r3, [pc, #16]	; (bdc0 <systick_isr+0x14>)
    bdae:	685a      	ldr	r2, [r3, #4]
    bdb0:	4b04      	ldr	r3, [pc, #16]	; (bdc4 <systick_isr+0x18>)
    bdb2:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    bdb4:	4a04      	ldr	r2, [pc, #16]	; (bdc8 <systick_isr+0x1c>)
    bdb6:	6813      	ldr	r3, [r2, #0]
    bdb8:	3301      	adds	r3, #1
    bdba:	6013      	str	r3, [r2, #0]
}
    bdbc:	4770      	bx	lr
    bdbe:	bf00      	nop
    bdc0:	e0001000 	.word	0xe0001000
    bdc4:	200052a4 	.word	0x200052a4
    bdc8:	200052a8 	.word	0x200052a8

0000bdcc <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    bdcc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    bdd0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    bdd2:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    bdd6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bdd8:	4293      	cmp	r3, r2
    bdda:	d202      	bcs.n	bde2 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    bddc:	3a01      	subs	r2, #1
    bdde:	1ad0      	subs	r0, r2, r3
}
    bde0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bde2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    bde4:	3901      	subs	r1, #1
    bde6:	440a      	add	r2, r1
    bde8:	1ad0      	subs	r0, r2, r3
    bdea:	4770      	bx	lr

0000bdec <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    bdec:	b672      	cpsid	i
	head = rx_buffer_head_;
    bdee:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    bdf2:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    bdf4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bdf8:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    bdfa:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    bdfc:	bf3c      	itt	cc
    bdfe:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    be00:	1852      	addcc	r2, r2, r1
    be02:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    be04:	6902      	ldr	r2, [r0, #16]
    be06:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    be08:	f3c0 6002 	ubfx	r0, r0, #24, #3
    be0c:	4418      	add	r0, r3
	__enable_irq();
    be0e:	b662      	cpsie	i
	return avail;
}
    be10:	4770      	bx	lr

0000be12 <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    be12:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    be14:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    be18:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    be1a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    be1e:	b29b      	uxth	r3, r3
	if (head == tail) {
    be20:	4299      	cmp	r1, r3
    be22:	d00b      	beq.n	be3c <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    be24:	3301      	adds	r3, #1
    be26:	6b91      	ldr	r1, [r2, #56]	; 0x38
    be28:	4299      	cmp	r1, r3
    be2a:	bf98      	it	ls
    be2c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    be2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    be30:	4299      	cmp	r1, r3
    be32:	d921      	bls.n	be78 <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    be34:	6a12      	ldr	r2, [r2, #32]
    be36:	5cd0      	ldrb	r0, [r2, r3]
    be38:	b2c0      	uxtb	r0, r0
    be3a:	4770      	bx	lr
		__disable_irq();
    be3c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    be3e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    be42:	b289      	uxth	r1, r1
		if (head == tail) {
    be44:	428b      	cmp	r3, r1
    be46:	d001      	beq.n	be4c <HardwareSerial::peek()+0x3a>
		__enable_irq();
    be48:	b662      	cpsie	i
    be4a:	e7eb      	b.n	be24 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    be4c:	6903      	ldr	r3, [r0, #16]
    be4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    be50:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    be54:	d00c      	beq.n	be70 <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    be56:	69db      	ldr	r3, [r3, #28]
    be58:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    be5c:	2101      	movs	r1, #1
    be5e:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    be62:	2100      	movs	r1, #0
    be64:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    be68:	6a12      	ldr	r2, [r2, #32]
    be6a:	b2db      	uxtb	r3, r3
    be6c:	7053      	strb	r3, [r2, #1]
    be6e:	e001      	b.n	be74 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    be70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    be74:	b662      	cpsie	i
			return c;
    be76:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    be78:	1a5b      	subs	r3, r3, r1
    be7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    be7c:	5cd0      	ldrb	r0, [r2, r3]
    be7e:	b2c0      	uxtb	r0, r0
	}
}
    be80:	4770      	bx	lr

0000be82 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    be82:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    be84:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    be88:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    be8a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    be8e:	b29b      	uxth	r3, r3
	if (head == tail) {
    be90:	4299      	cmp	r1, r3
    be92:	d01b      	beq.n	becc <HardwareSerial::read()+0x4a>
{
    be94:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    be96:	3301      	adds	r3, #1
    be98:	6b94      	ldr	r4, [r2, #56]	; 0x38
    be9a:	429c      	cmp	r4, r3
    be9c:	bf98      	it	ls
    be9e:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    bea0:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bea2:	4298      	cmp	r0, r3
    bea4:	d927      	bls.n	bef6 <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    bea6:	6a10      	ldr	r0, [r2, #32]
    bea8:	5cc0      	ldrb	r0, [r0, r3]
    beaa:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    beac:	b29d      	uxth	r5, r3
    beae:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    beb2:	6d95      	ldr	r5, [r2, #88]	; 0x58
    beb4:	b145      	cbz	r5, bec8 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    beb6:	4299      	cmp	r1, r3
    beb8:	d322      	bcc.n	bf00 <HardwareSerial::read()+0x7e>
    beba:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    bebc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    bebe:	4299      	cmp	r1, r3
    bec0:	d302      	bcc.n	bec8 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    bec2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    bec4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    bec8:	bc30      	pop	{r4, r5}
    beca:	4770      	bx	lr
		__disable_irq();
    becc:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    bece:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bed2:	b289      	uxth	r1, r1
		if (head == tail) {
    bed4:	428b      	cmp	r3, r1
    bed6:	d001      	beq.n	bedc <HardwareSerial::read()+0x5a>
		__enable_irq();
    bed8:	b662      	cpsie	i
    beda:	e7db      	b.n	be94 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    bedc:	6903      	ldr	r3, [r0, #16]
    bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bee0:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    bee4:	d003      	beq.n	beee <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bee6:	69d8      	ldr	r0, [r3, #28]
    bee8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    beec:	e001      	b.n	bef2 <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    beee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    bef2:	b662      	cpsie	i
}	
    bef4:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    bef6:	1a18      	subs	r0, r3, r0
    bef8:	6a55      	ldr	r5, [r2, #36]	; 0x24
    befa:	5c28      	ldrb	r0, [r5, r0]
    befc:	b2c0      	uxtb	r0, r0
    befe:	e7d5      	b.n	beac <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    bf00:	440c      	add	r4, r1
    bf02:	1ae3      	subs	r3, r4, r3
    bf04:	e7da      	b.n	bebc <HardwareSerial::read()+0x3a>

0000bf06 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    bf06:	b510      	push	{r4, lr}
    bf08:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    bf0a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    bf0e:	b12b      	cbz	r3, bf1c <HardwareSerial::flush()+0x16>
    bf10:	f002 ff66 	bl	ede0 <yield>
    bf14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    bf18:	2b00      	cmp	r3, #0
    bf1a:	d1f9      	bne.n	bf10 <HardwareSerial::flush()+0xa>
}
    bf1c:	bd10      	pop	{r4, pc}
	...

0000bf20 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    bf20:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    bf24:	b99b      	cbnz	r3, bf4e <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bf26:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    bf2a:	b998      	cbnz	r0, bf54 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bf2c:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    bf30:	b123      	cbz	r3, bf3c <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    bf32:	2b0f      	cmp	r3, #15
    bf34:	d904      	bls.n	bf40 <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    bf36:	4a08      	ldr	r2, [pc, #32]	; (bf58 <nvic_execution_priority()+0x38>)
    bf38:	5cd0      	ldrb	r0, [r2, r3]
    bf3a:	e001      	b.n	bf40 <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    bf3c:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    bf40:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    bf44:	b13b      	cbz	r3, bf56 <nvic_execution_priority()+0x36>
    bf46:	4298      	cmp	r0, r3
    bf48:	bf28      	it	cs
    bf4a:	4618      	movcs	r0, r3
	return priority;
    bf4c:	4770      	bx	lr
	if (faultmask) return -1;
    bf4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf52:	4770      	bx	lr
	if (primask) return 0;
    bf54:	2000      	movs	r0, #0
}
    bf56:	4770      	bx	lr
    bf58:	e000e3f0 	.word	0xe000e3f0

0000bf5c <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    bf5c:	b570      	push	{r4, r5, r6, lr}
    bf5e:	4604      	mov	r4, r0
    bf60:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    bf62:	6d03      	ldr	r3, [r0, #80]	; 0x50
    bf64:	b113      	cbz	r3, bf6c <HardwareSerial::write9bit(unsigned long)+0x10>
    bf66:	6d42      	ldr	r2, [r0, #84]	; 0x54
    bf68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    bf6c:	7ea3      	ldrb	r3, [r4, #26]
    bf6e:	b133      	cbz	r3, bf7e <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    bf70:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    bf72:	6922      	ldr	r2, [r4, #16]
    bf74:	6993      	ldr	r3, [r2, #24]
    bf76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    bf7a:	6193      	str	r3, [r2, #24]
		__enable_irq();
    bf7c:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    bf7e:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    bf82:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    bf84:	3501      	adds	r5, #1
    bf86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bf88:	42ab      	cmp	r3, r5
    bf8a:	bf98      	it	ls
    bf8c:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    bf8e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bf92:	b29b      	uxth	r3, r3
    bf94:	429d      	cmp	r5, r3
    bf96:	d01f      	beq.n	bfd8 <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    bf98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bf9a:	42ab      	cmp	r3, r5
    bf9c:	d93e      	bls.n	c01c <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    bf9e:	69e3      	ldr	r3, [r4, #28]
    bfa0:	b2f6      	uxtb	r6, r6
    bfa2:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    bfa4:	b672      	cpsid	i
	transmitting_ = 1;
    bfa6:	2001      	movs	r0, #1
    bfa8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    bfac:	b2ad      	uxth	r5, r5
    bfae:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    bfb2:	6922      	ldr	r2, [r4, #16]
    bfb4:	6993      	ldr	r3, [r2, #24]
    bfb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    bfba:	6193      	str	r3, [r2, #24]
	__enable_irq();
    bfbc:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    bfbe:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    bfc0:	1a59      	subs	r1, r3, r1
    bfc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bfc4:	5c41      	ldrb	r1, [r0, r1]
    bfc6:	b2c9      	uxtb	r1, r1
    bfc8:	e020      	b.n	c00c <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    bfca:	28ff      	cmp	r0, #255	; 0xff
    bfcc:	dc23      	bgt.n	c016 <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    bfce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bfd2:	b29b      	uxth	r3, r3
    bfd4:	42ab      	cmp	r3, r5
    bfd6:	d1df      	bne.n	bf98 <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    bfd8:	f7ff ffa2 	bl	bf20 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    bfdc:	6963      	ldr	r3, [r4, #20]
    bfde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    bfe2:	4283      	cmp	r3, r0
    bfe4:	dbf1      	blt.n	bfca <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    bfe6:	6922      	ldr	r2, [r4, #16]
    bfe8:	6953      	ldr	r3, [r2, #20]
    bfea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    bfee:	d0ee      	beq.n	bfce <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    bff0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bff4:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    bff6:	3301      	adds	r3, #1
    bff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bffa:	4299      	cmp	r1, r3
    bffc:	bf98      	it	ls
    bffe:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    c000:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c002:	4299      	cmp	r1, r3
    c004:	d9dc      	bls.n	bfc0 <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    c006:	69e1      	ldr	r1, [r4, #28]
    c008:	5cc9      	ldrb	r1, [r1, r3]
    c00a:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    c00c:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    c00e:	b29b      	uxth	r3, r3
    c010:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    c014:	e7db      	b.n	bfce <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    c016:	f002 fee3 	bl	ede0 <yield>
    c01a:	e7d8      	b.n	bfce <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    c01c:	1aeb      	subs	r3, r5, r3
    c01e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c020:	b2f6      	uxtb	r6, r6
    c022:	54d6      	strb	r6, [r2, r3]
    c024:	e7be      	b.n	bfa4 <HardwareSerial::write9bit(unsigned long)+0x48>

0000c026 <HardwareSerial::write(unsigned char)>:
{
    c026:	b508      	push	{r3, lr}
	return write9bit(c);
    c028:	f7ff ff98 	bl	bf5c <HardwareSerial::write9bit(unsigned long)>
}
    c02c:	bd08      	pop	{r3, pc}

0000c02e <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    c02e:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c030:	6903      	ldr	r3, [r0, #16]
    c032:	695a      	ldr	r2, [r3, #20]
    c034:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    c038:	d047      	beq.n	c0ca <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c03c:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    c040:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    c044:	d038      	beq.n	c0b8 <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    c046:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    c04a:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    c04e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    c052:	b2a4      	uxth	r4, r4
    c054:	e009      	b.n	c06a <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c056:	1a59      	subs	r1, r3, r1
    c058:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c05a:	b2d2      	uxtb	r2, r2
    c05c:	546a      	strb	r2, [r5, r1]
					head = newhead;
    c05e:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    c060:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c064:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    c068:	d016      	beq.n	c098 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c06a:	6903      	ldr	r3, [r0, #16]
    c06c:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    c06e:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c072:	6b81      	ldr	r1, [r0, #56]	; 0x38
    c074:	4299      	cmp	r1, r3
    c076:	bf98      	it	ls
    c078:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    c07a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    c07e:	b289      	uxth	r1, r1
    c080:	4299      	cmp	r1, r3
    c082:	d0ed      	beq.n	c060 <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c084:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    c088:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c08a:	4299      	cmp	r1, r3
    c08c:	d9e3      	bls.n	c056 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    c08e:	6a01      	ldr	r1, [r0, #32]
    c090:	b2d2      	uxtb	r2, r2
    c092:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    c094:	469e      	mov	lr, r3
    c096:	e7e3      	b.n	c060 <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    c098:	fa1f f38e 	uxth.w	r3, lr
    c09c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    c0a0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    c0a2:	b14b      	cbz	r3, c0b8 <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c0a4:	45a6      	cmp	lr, r4
    c0a6:	d320      	bcc.n	c0ea <HardwareSerial::IRQHandler()+0xbc>
    c0a8:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    c0ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c0ae:	4572      	cmp	r2, lr
    c0b0:	d802      	bhi.n	c0b8 <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    c0b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    c0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    c0b8:	6903      	ldr	r3, [r0, #16]
    c0ba:	695a      	ldr	r2, [r3, #20]
    c0bc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    c0c0:	d003      	beq.n	c0ca <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    c0c2:	695a      	ldr	r2, [r3, #20]
    c0c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c0c8:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    c0ca:	6903      	ldr	r3, [r0, #16]
    c0cc:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    c0ce:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    c0d2:	d02c      	beq.n	c12e <HardwareSerial::IRQHandler()+0x100>
    c0d4:	695b      	ldr	r3, [r3, #20]
    c0d6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c0da:	d028      	beq.n	c12e <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c0dc:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    c0e0:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    c0e2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    c0e6:	b29b      	uxth	r3, r3
    c0e8:	e00e      	b.n	c108 <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    c0ea:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c0ec:	1b12      	subs	r2, r2, r4
    c0ee:	4496      	add	lr, r2
    c0f0:	e7dc      	b.n	c0ac <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c0f2:	1a9a      	subs	r2, r3, r2
    c0f4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c0f6:	5c8a      	ldrb	r2, [r1, r2]
    c0f8:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    c0fa:	6901      	ldr	r1, [r0, #16]
    c0fc:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c0fe:	6902      	ldr	r2, [r0, #16]
    c100:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c102:	f412 6f80 	tst.w	r2, #1024	; 0x400
    c106:	d10d      	bne.n	c124 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    c108:	42a3      	cmp	r3, r4
    c10a:	d02f      	beq.n	c16c <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c10c:	3301      	adds	r3, #1
    c10e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c110:	429a      	cmp	r2, r3
    c112:	bf98      	it	ls
    c114:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    c116:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c118:	429a      	cmp	r2, r3
    c11a:	d9ea      	bls.n	c0f2 <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    c11c:	69c2      	ldr	r2, [r0, #28]
    c11e:	5cd2      	ldrb	r2, [r2, r3]
    c120:	b2d2      	uxtb	r2, r2
    c122:	e7ea      	b.n	c0fa <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    c124:	b29a      	uxth	r2, r3
    c126:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    c12a:	42a3      	cmp	r3, r4
    c12c:	d020      	beq.n	c170 <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c12e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    c132:	d01a      	beq.n	c16a <HardwareSerial::IRQHandler()+0x13c>
    c134:	6903      	ldr	r3, [r0, #16]
    c136:	695b      	ldr	r3, [r3, #20]
    c138:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    c13c:	d015      	beq.n	c16a <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    c13e:	2300      	movs	r3, #0
    c140:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c144:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c146:	b113      	cbz	r3, c14e <HardwareSerial::IRQHandler()+0x120>
    c148:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    c14e:	7e83      	ldrb	r3, [r0, #26]
    c150:	b133      	cbz	r3, c160 <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    c152:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    c154:	6902      	ldr	r2, [r0, #16]
    c156:	6993      	ldr	r3, [r2, #24]
    c158:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    c15c:	6193      	str	r3, [r2, #24]
			__enable_irq();
    c15e:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c160:	6902      	ldr	r2, [r0, #16]
    c162:	6993      	ldr	r3, [r2, #24]
    c164:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    c168:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c16a:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    c16c:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c170:	6902      	ldr	r2, [r0, #16]
    c172:	6993      	ldr	r3, [r2, #24]
    c174:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    c178:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c17a:	6902      	ldr	r2, [r0, #16]
    c17c:	6993      	ldr	r3, [r2, #24]
    c17e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    c182:	6193      	str	r3, [r2, #24]
    c184:	e7d3      	b.n	c12e <HardwareSerial::IRQHandler()+0x100>
	...

0000c188 <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    c188:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c18a:	4b0e      	ldr	r3, [pc, #56]	; (c1c4 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c18c:	781c      	ldrb	r4, [r3, #0]
    c18e:	b15c      	cbz	r4, c1a8 <HardwareSerial::addToSerialEventsList()+0x20>
    c190:	490d      	ldr	r1, [pc, #52]	; (c1c8 <HardwareSerial::addToSerialEventsList()+0x40>)
    c192:	1f0b      	subs	r3, r1, #4
    c194:	1e62      	subs	r2, r4, #1
    c196:	b2d2      	uxtb	r2, r2
    c198:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c19c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c1a0:	4282      	cmp	r2, r0
    c1a2:	d00c      	beq.n	c1be <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c1a4:	428b      	cmp	r3, r1
    c1a6:	d1f9      	bne.n	c19c <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c1a8:	1c62      	adds	r2, r4, #1
    c1aa:	4b06      	ldr	r3, [pc, #24]	; (c1c4 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c1ac:	701a      	strb	r2, [r3, #0]
    c1ae:	4b06      	ldr	r3, [pc, #24]	; (c1c8 <HardwareSerial::addToSerialEventsList()+0x40>)
    c1b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c1b4:	4a05      	ldr	r2, [pc, #20]	; (c1cc <HardwareSerial::addToSerialEventsList()+0x44>)
    c1b6:	7813      	ldrb	r3, [r2, #0]
    c1b8:	f043 0302 	orr.w	r3, r3, #2
    c1bc:	7013      	strb	r3, [r2, #0]
}
    c1be:	f85d 4b04 	ldr.w	r4, [sp], #4
    c1c2:	4770      	bx	lr
    c1c4:	200052e5 	.word	0x200052e5
    c1c8:	20004b80 	.word	0x20004b80
    c1cc:	200038bf 	.word	0x200038bf

0000c1d0 <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    c1d0:	b570      	push	{r4, r5, r6, lr}
    c1d2:	ee07 1a90 	vmov	s15, r1
    c1d6:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    c1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c1dc:	ed9f 7a93 	vldr	s14, [pc, #588]	; c42c <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    c1e0:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    c1e4:	2104      	movs	r1, #4
	int bestosr = 4;
    c1e6:	468e      	mov	lr, r1
	int bestdiv = 1;
    c1e8:	2201      	movs	r2, #1
	float besterr = 1e20;
    c1ea:	ed9f 6a91 	vldr	s12, [pc, #580]	; c430 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    c1ee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c1f2:	f641 7cff 	movw	ip, #8191	; 0x1fff
    c1f6:	e002      	b.n	c1fe <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    c1f8:	3101      	adds	r1, #1
    c1fa:	2921      	cmp	r1, #33	; 0x21
    c1fc:	d02a      	beq.n	c254 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    c1fe:	ee07 1a90 	vmov	s15, r1
    c202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c206:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c20a:	ee77 7a25 	vadd.f32	s15, s14, s11
    c20e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c212:	ee17 3a90 	vmov	r3, s15
    c216:	4563      	cmp	r3, ip
    c218:	bfa8      	it	ge
    c21a:	4663      	movge	r3, ip
    c21c:	2b01      	cmp	r3, #1
    c21e:	bfb8      	it	lt
    c220:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c222:	ee07 3a90 	vmov	s15, r3
    c226:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c22a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c22e:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c23a:	bf48      	it	mi
    c23c:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c240:	eef4 7ac6 	vcmpe.f32	s15, s12
    c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c248:	d8d6      	bhi.n	c1f8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c24a:	468e      	mov	lr, r1
			bestdiv = divint;
    c24c:	461a      	mov	r2, r3
			besterr = err;
    c24e:	eeb0 6a67 	vmov.f32	s12, s15
    c252:	e7d1      	b.n	c1f8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c254:	2300      	movs	r3, #0
    c256:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c25a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c25e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c262:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c266:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c268:	6941      	ldr	r1, [r0, #20]
    c26a:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c26e:	1bae      	subs	r6, r5, r6
    c270:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c272:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c276:	1bad      	subs	r5, r5, r6
    c278:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c27a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c27e:	690d      	ldr	r5, [r1, #16]
    c280:	682b      	ldr	r3, [r5, #0]
    c282:	6949      	ldr	r1, [r1, #20]
    c284:	430b      	orrs	r3, r1
    c286:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c288:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c28c:	2b00      	cmp	r3, #0
    c28e:	bf14      	ite	ne
    c290:	2301      	movne	r3, #1
    c292:	2300      	moveq	r3, #0
    c294:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c296:	f040 80aa 	bne.w	c3ee <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c29a:	4966      	ldr	r1, [pc, #408]	; (c434 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c29c:	6943      	ldr	r3, [r0, #20]
    c29e:	7e05      	ldrb	r5, [r0, #24]
    c2a0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2a4:	7e1b      	ldrb	r3, [r3, #24]
    c2a6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c2aa:	689b      	ldr	r3, [r3, #8]
    c2ac:	4d62      	ldr	r5, [pc, #392]	; (c438 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c2ae:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c2b0:	6943      	ldr	r3, [r0, #20]
    c2b2:	7e05      	ldrb	r5, [r0, #24]
    c2b4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2b8:	7e1d      	ldrb	r5, [r3, #24]
    c2ba:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c2be:	6849      	ldr	r1, [r1, #4]
    c2c0:	69db      	ldr	r3, [r3, #28]
    c2c2:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c2c4:	7e01      	ldrb	r1, [r0, #24]
    c2c6:	6943      	ldr	r3, [r0, #20]
    c2c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c2cc:	6a19      	ldr	r1, [r3, #32]
    c2ce:	b109      	cbz	r1, c2d4 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c2d2:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c2d4:	4957      	ldr	r1, [pc, #348]	; (c434 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c2d6:	6943      	ldr	r3, [r0, #20]
    c2d8:	7e45      	ldrb	r5, [r0, #25]
    c2da:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c2e2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c2e6:	689b      	ldr	r3, [r3, #8]
    c2e8:	25d9      	movs	r5, #217	; 0xd9
    c2ea:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c2ec:	6943      	ldr	r3, [r0, #20]
    c2ee:	7e45      	ldrb	r5, [r0, #25]
    c2f0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2f4:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c2f8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c2fc:	6849      	ldr	r1, [r1, #4]
    c2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c300:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c302:	7e41      	ldrb	r1, [r0, #25]
    c304:	6943      	ldr	r3, [r0, #20]
    c306:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c30a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c30c:	b109      	cbz	r1, c312 <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c310:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c312:	6901      	ldr	r1, [r0, #16]
    c314:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c318:	061b      	lsls	r3, r3, #24
    c31a:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c31e:	f1be 0f08 	cmp.w	lr, #8
    c322:	bfcc      	ite	gt
    c324:	f04f 0e00 	movgt.w	lr, #0
    c328:	f04f 0e01 	movle.w	lr, #1
    c32c:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c330:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c334:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c336:	6903      	ldr	r3, [r0, #16]
    c338:	2200      	movs	r2, #0
    c33a:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c33c:	6943      	ldr	r3, [r0, #20]
    c33e:	6859      	ldr	r1, [r3, #4]
    c340:	785b      	ldrb	r3, [r3, #1]
    c342:	3310      	adds	r3, #16
    c344:	4a3d      	ldr	r2, [pc, #244]	; (c43c <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c34a:	6943      	ldr	r3, [r0, #20]
    c34c:	785a      	ldrb	r2, [r3, #1]
    c34e:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c352:	4b3b      	ldr	r3, [pc, #236]	; (c440 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c354:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c356:	6943      	ldr	r3, [r0, #20]
    c358:	785a      	ldrb	r2, [r3, #1]
    c35a:	4b3a      	ldr	r3, [pc, #232]	; (c444 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c35c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c360:	009b      	lsls	r3, r3, #2
    c362:	f002 021f 	and.w	r2, r2, #31
    c366:	2101      	movs	r1, #1
    c368:	fa01 f202 	lsl.w	r2, r1, r2
    c36c:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c36e:	6903      	ldr	r3, [r0, #16]
    c370:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c374:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c376:	6902      	ldr	r2, [r0, #16]
    c378:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c37a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c37e:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c380:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c384:	f014 0f04 	tst.w	r4, #4
    c388:	d14a      	bne.n	c420 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c38a:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c38e:	f004 020f 	and.w	r2, r4, #15
    c392:	2a04      	cmp	r2, #4
    c394:	bf08      	it	eq
    c396:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c39a:	f014 0f20 	tst.w	r4, #32
    c39e:	bf18      	it	ne
    c3a0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c3a4:	7e82      	ldrb	r2, [r0, #26]
    c3a6:	b10a      	cbz	r2, c3ac <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c3a8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c3ac:	6902      	ldr	r2, [r0, #16]
    c3ae:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c3b0:	f014 0f08 	tst.w	r4, #8
    c3b4:	d004      	beq.n	c3c0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c3b6:	6902      	ldr	r2, [r0, #16]
    c3b8:	6913      	ldr	r3, [r2, #16]
    c3ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c3be:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c3c0:	6902      	ldr	r2, [r0, #16]
    c3c2:	6953      	ldr	r3, [r2, #20]
    c3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c3c8:	f014 0f10 	tst.w	r4, #16
    c3cc:	bf18      	it	ne
    c3ce:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c3d2:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c3d4:	f414 7f80 	tst.w	r4, #256	; 0x100
    c3d8:	d004      	beq.n	c3e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    c3da:	6902      	ldr	r2, [r0, #16]
    c3dc:	6913      	ldr	r3, [r2, #16]
    c3de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c3e2:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c3e4:	6943      	ldr	r3, [r0, #20]
    c3e6:	68db      	ldr	r3, [r3, #12]
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	b1e3      	cbz	r3, c426 <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    c3ec:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    c3ee:	4911      	ldr	r1, [pc, #68]	; (c434 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c3f0:	6943      	ldr	r3, [r0, #20]
    c3f2:	7e45      	ldrb	r5, [r0, #25]
    c3f4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c3f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c3fc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c400:	689b      	ldr	r3, [r3, #8]
    c402:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    c406:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c408:	6943      	ldr	r3, [r0, #20]
    c40a:	7e45      	ldrb	r5, [r0, #25]
    c40c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c410:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c414:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c418:	6849      	ldr	r1, [r1, #4]
    c41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c41c:	600b      	str	r3, [r1, #0]
    c41e:	e770      	b.n	c302 <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c420:	4b09      	ldr	r3, [pc, #36]	; (c448 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    c422:	4313      	orrs	r3, r2
    c424:	e7b3      	b.n	c38e <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c426:	f7ff feaf 	bl	c188 <HardwareSerial::addToSerialEventsList()>
};
    c42a:	e7df      	b.n	c3ec <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    c42c:	4bb71b00 	.word	0x4bb71b00
    c430:	60ad78ec 	.word	0x60ad78ec
    c434:	200026d0 	.word	0x200026d0
    c438:	0001f038 	.word	0x0001f038
    c43c:	20003c00 	.word	0x20003c00
    c440:	e000e400 	.word	0xe000e400
    c444:	38003840 	.word	0x38003840
    c448:	003c0010 	.word	0x003c0010

0000c44c <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    c44c:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    c44e:	4802      	ldr	r0, [pc, #8]	; (c458 <IRQHandler_Serial5+0xc>)
    c450:	f7ff fded 	bl	c02e <HardwareSerial::IRQHandler()>
}
    c454:	bd08      	pop	{r3, pc}
    c456:	bf00      	nop
    c458:	200046a0 	.word	0x200046a0

0000c45c <_GLOBAL__sub_I_IRQHandler_Serial5>:
    c45c:	4b16      	ldr	r3, [pc, #88]	; (c4b8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    c45e:	2200      	movs	r2, #0
    c460:	605a      	str	r2, [r3, #4]
    c462:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c466:	6099      	str	r1, [r3, #8]
    c468:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c46a:	4914      	ldr	r1, [pc, #80]	; (c4bc <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    c46c:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    c46e:	4914      	ldr	r1, [pc, #80]	; (c4c0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    c470:	6119      	str	r1, [r3, #16]
    c472:	4914      	ldr	r1, [pc, #80]	; (c4c4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    c474:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c476:	761a      	strb	r2, [r3, #24]
    c478:	765a      	strb	r2, [r3, #25]
    c47a:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c47c:	4912      	ldr	r1, [pc, #72]	; (c4c8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    c47e:	61d9      	str	r1, [r3, #28]
    c480:	4912      	ldr	r1, [pc, #72]	; (c4cc <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    c482:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c484:	625a      	str	r2, [r3, #36]	; 0x24
    c486:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c488:	2028      	movs	r0, #40	; 0x28
    c48a:	62d8      	str	r0, [r3, #44]	; 0x2c
    c48c:	2140      	movs	r1, #64	; 0x40
    c48e:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c490:	6358      	str	r0, [r3, #52]	; 0x34
    c492:	6399      	str	r1, [r3, #56]	; 0x38
    c494:	63da      	str	r2, [r3, #60]	; 0x3c
    c496:	641a      	str	r2, [r3, #64]	; 0x40
    c498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    c49c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    c4a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    c4a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    c4a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    c4ac:	651a      	str	r2, [r3, #80]	; 0x50
    c4ae:	655a      	str	r2, [r3, #84]	; 0x54
    c4b0:	659a      	str	r2, [r3, #88]	; 0x58
    c4b2:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    c4b4:	4770      	bx	lr
    c4b6:	bf00      	nop
    c4b8:	200046a0 	.word	0x200046a0
    c4bc:	200021d0 	.word	0x200021d0
    c4c0:	401a0000 	.word	0x401a0000
    c4c4:	20003180 	.word	0x20003180
    c4c8:	20004b08 	.word	0x20004b08
    c4cc:	20004ac8 	.word	0x20004ac8

0000c4d0 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c4d2:	b179      	cbz	r1, c4f4 <Print::write(unsigned char const*, unsigned int)+0x24>
    c4d4:	4606      	mov	r6, r0
    c4d6:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c4d8:	b172      	cbz	r2, c4f8 <Print::write(unsigned char const*, unsigned int)+0x28>
    c4da:	188f      	adds	r7, r1, r2
	size_t count = 0;
    c4dc:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    c4de:	6833      	ldr	r3, [r6, #0]
    c4e0:	681b      	ldr	r3, [r3, #0]
    c4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
    c4e6:	4630      	mov	r0, r6
    c4e8:	4798      	blx	r3
    c4ea:	4405      	add	r5, r0
    c4ec:	42a7      	cmp	r7, r4
    c4ee:	d1f6      	bne.n	c4de <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    c4f0:	4628      	mov	r0, r5
    c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    c4f4:	2500      	movs	r5, #0
    c4f6:	e7fb      	b.n	c4f0 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    c4f8:	4615      	mov	r5, r2
    c4fa:	e7f9      	b.n	c4f0 <Print::write(unsigned char const*, unsigned int)+0x20>

0000c4fc <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c500:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    c502:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c504:	b1ec      	cbz	r4, c542 <Print::print(String const&)+0x46>
    c506:	4606      	mov	r6, r0
    c508:	4688      	mov	r8, r1
	unsigned int index = 0;
    c50a:	2500      	movs	r5, #0
	size_t count = 0;
    c50c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c50e:	f04f 0921 	mov.w	r9, #33	; 0x21
    c512:	462b      	mov	r3, r5
    c514:	464a      	mov	r2, r9
    c516:	a901      	add	r1, sp, #4
    c518:	4640      	mov	r0, r8
    c51a:	f000 fb8d 	bl	cc38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    c51e:	4622      	mov	r2, r4
    c520:	2c20      	cmp	r4, #32
    c522:	bf28      	it	cs
    c524:	2220      	movcs	r2, #32
		index += nbytes;
    c526:	4415      	add	r5, r2
		len -= nbytes;
    c528:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    c52a:	6833      	ldr	r3, [r6, #0]
    c52c:	685b      	ldr	r3, [r3, #4]
    c52e:	a901      	add	r1, sp, #4
    c530:	4630      	mov	r0, r6
    c532:	4798      	blx	r3
    c534:	4407      	add	r7, r0
	while (len > 0) {
    c536:	2c00      	cmp	r4, #0
    c538:	d1eb      	bne.n	c512 <Print::print(String const&)+0x16>
	}
	return count;
}
    c53a:	4638      	mov	r0, r7
    c53c:	b00b      	add	sp, #44	; 0x2c
    c53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    c542:	4627      	mov	r7, r4
	return count;
    c544:	e7f9      	b.n	c53a <Print::print(String const&)+0x3e>

0000c546 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    c546:	b500      	push	{lr}
    c548:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c54a:	f640 230d 	movw	r3, #2573	; 0xa0d
    c54e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c552:	6803      	ldr	r3, [r0, #0]
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	2202      	movs	r2, #2
    c558:	a901      	add	r1, sp, #4
    c55a:	4798      	blx	r3
}
    c55c:	b003      	add	sp, #12
    c55e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c564 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c564:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c566:	4b04      	ldr	r3, [pc, #16]	; (c578 <_write+0x14>)
    c568:	2802      	cmp	r0, #2
    c56a:	bf88      	it	hi
    c56c:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c56e:	6818      	ldr	r0, [r3, #0]
    c570:	6844      	ldr	r4, [r0, #4]
    c572:	4618      	mov	r0, r3
    c574:	47a0      	blx	r4
}
    c576:	bd10      	pop	{r4, pc}
    c578:	20003170 	.word	0x20003170

0000c57c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c57c:	b530      	push	{r4, r5, lr}
    c57e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c580:	b92a      	cbnz	r2, c58e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    c582:	6803      	ldr	r3, [r0, #0]
    c584:	681b      	ldr	r3, [r3, #0]
    c586:	b2c9      	uxtb	r1, r1
    c588:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c58a:	b00b      	add	sp, #44	; 0x2c
    c58c:	bd30      	pop	{r4, r5, pc}
    c58e:	4696      	mov	lr, r2
		base = 10;
    c590:	2a01      	cmp	r2, #1
    c592:	bf14      	ite	ne
    c594:	4696      	movne	lr, r2
    c596:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    c59a:	b9b9      	cbnz	r1, c5cc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    c59c:	2230      	movs	r2, #48	; 0x30
    c59e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c5a2:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    c5a6:	b14b      	cbz	r3, c5bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    c5a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c5ac:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    c5b0:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    c5b4:	446b      	add	r3, sp
    c5b6:	222d      	movs	r2, #45	; 0x2d
    c5b8:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    c5bc:	6803      	ldr	r3, [r0, #0]
    c5be:	685b      	ldr	r3, [r3, #4]
    c5c0:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    c5c4:	a901      	add	r1, sp, #4
    c5c6:	4461      	add	r1, ip
    c5c8:	4798      	blx	r3
    c5ca:	e7de      	b.n	c58a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    c5cc:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    c5d0:	4674      	mov	r4, lr
    c5d2:	e004      	b.n	c5de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    c5d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c5d8:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    c5dc:	4611      	mov	r1, r2
			digit = n % base;
    c5de:	fbb1 f2fe 	udiv	r2, r1, lr
    c5e2:	fb0e 1212 	mls	r2, lr, r2, r1
    c5e6:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c5e8:	2a09      	cmp	r2, #9
    c5ea:	bf94      	ite	ls
    c5ec:	3230      	addls	r2, #48	; 0x30
    c5ee:	3237      	addhi	r2, #55	; 0x37
    c5f0:	b2d2      	uxtb	r2, r2
    c5f2:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    c5f6:	446d      	add	r5, sp
    c5f8:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    c5fc:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    c600:	428c      	cmp	r4, r1
    c602:	d9e7      	bls.n	c5d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    c604:	e7cf      	b.n	c5a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
	...

0000c608 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    c608:	b570      	push	{r4, r5, r6, lr}
    c60a:	ed2d 8b02 	vpush	{d8}
    c60e:	b086      	sub	sp, #24
    c610:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c612:	eeb4 0b40 	vcmp.f64	d0, d0
    c616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c61a:	d666      	bvs.n	c6ea <Print::printFloat(double, unsigned char)+0xe2>
    c61c:	460c      	mov	r4, r1
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c61e:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c622:	ed9f 6b4b 	vldr	d6, [pc, #300]	; c750 <Print::printFloat(double, unsigned char)+0x148>
    c626:	eeb4 7b46 	vcmp.f64	d7, d6
    c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c62e:	dc63      	bgt.n	c6f8 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c630:	ed9f 7b49 	vldr	d7, [pc, #292]	; c758 <Print::printFloat(double, unsigned char)+0x150>
    c634:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c63c:	dc67      	bgt.n	c70e <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c63e:	ed9f 7b48 	vldr	d7, [pc, #288]	; c760 <Print::printFloat(double, unsigned char)+0x158>
    c642:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c64a:	d467      	bmi.n	c71c <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
    c64c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c654:	d469      	bmi.n	c72a <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
    c656:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    c658:	2c00      	cmp	r4, #0
    c65a:	d06a      	beq.n	c732 <Print::printFloat(double, unsigned char)+0x12a>
    c65c:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
    c660:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
    c664:	ed9f 6b40 	vldr	d6, [pc, #256]	; c768 <Print::printFloat(double, unsigned char)+0x160>
    c668:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c66c:	f10c 0c01 	add.w	ip, ip, #1
    c670:	fa5f f28c 	uxtb.w	r2, ip
    c674:	4294      	cmp	r4, r2
    c676:	d8f7      	bhi.n	c668 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c678:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c67c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c680:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c684:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    c688:	220a      	movs	r2, #10
    c68a:	ee17 1a90 	vmov	r1, s15
    c68e:	4628      	mov	r0, r5
    c690:	f7ff ff74 	bl	c57c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c694:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c696:	232e      	movs	r3, #46	; 0x2e
    c698:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c69c:	2c0f      	cmp	r4, #15
    c69e:	bf28      	it	cs
    c6a0:	240f      	movcs	r4, #15

		while (digits-- > 0) {
    c6a2:	aa02      	add	r2, sp, #8
    c6a4:	1e60      	subs	r0, r4, #1
    c6a6:	f10d 0309 	add.w	r3, sp, #9
    c6aa:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
    c6ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    c6b2:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    c6b6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c6ba:	edcd 7a01 	vstr	s15, [sp, #4]
    c6be:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
    c6c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    c6c6:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
    c6ca:	ee07 3a90 	vmov	s15, r3
    c6ce:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    c6d2:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    c6d6:	4282      	cmp	r2, r0
    c6d8:	d1eb      	bne.n	c6b2 <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
    c6da:	3401      	adds	r4, #1
		}
		count += write(buf, count);
    c6dc:	682b      	ldr	r3, [r5, #0]
    c6de:	685b      	ldr	r3, [r3, #4]
    c6e0:	b2e2      	uxtb	r2, r4
    c6e2:	a902      	add	r1, sp, #8
    c6e4:	4628      	mov	r0, r5
    c6e6:	4798      	blx	r3
    c6e8:	e00c      	b.n	c704 <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
    c6ea:	6803      	ldr	r3, [r0, #0]
    c6ec:	685b      	ldr	r3, [r3, #4]
    c6ee:	2203      	movs	r2, #3
    c6f0:	491f      	ldr	r1, [pc, #124]	; (c770 <Print::printFloat(double, unsigned char)+0x168>)
    c6f2:	4798      	blx	r3
    c6f4:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    c6f6:	e005      	b.n	c704 <Print::printFloat(double, unsigned char)+0xfc>
    c6f8:	6803      	ldr	r3, [r0, #0]
    c6fa:	685b      	ldr	r3, [r3, #4]
    c6fc:	2203      	movs	r2, #3
    c6fe:	491d      	ldr	r1, [pc, #116]	; (c774 <Print::printFloat(double, unsigned char)+0x16c>)
    c700:	4798      	blx	r3
    c702:	4606      	mov	r6, r0
	}
	return count;
}
    c704:	4630      	mov	r0, r6
    c706:	b006      	add	sp, #24
    c708:	ecbd 8b02 	vpop	{d8}
    c70c:	bd70      	pop	{r4, r5, r6, pc}
    c70e:	6803      	ldr	r3, [r0, #0]
    c710:	685b      	ldr	r3, [r3, #4]
    c712:	2203      	movs	r2, #3
    c714:	4918      	ldr	r1, [pc, #96]	; (c778 <Print::printFloat(double, unsigned char)+0x170>)
    c716:	4798      	blx	r3
    c718:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c71a:	e7f3      	b.n	c704 <Print::printFloat(double, unsigned char)+0xfc>
    c71c:	6803      	ldr	r3, [r0, #0]
    c71e:	685b      	ldr	r3, [r3, #4]
    c720:	2203      	movs	r2, #3
    c722:	4915      	ldr	r1, [pc, #84]	; (c778 <Print::printFloat(double, unsigned char)+0x170>)
    c724:	4798      	blx	r3
    c726:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c728:	e7ec      	b.n	c704 <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
    c72a:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    c72e:	2301      	movs	r3, #1
    c730:	e792      	b.n	c658 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
    c732:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    c736:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
    c73a:	220a      	movs	r2, #10
    c73c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c740:	ee17 1a90 	vmov	r1, s15
    c744:	4628      	mov	r0, r5
    c746:	f7ff ff19 	bl	c57c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c74a:	4606      	mov	r6, r0
	if (digits > 0) {
    c74c:	e7da      	b.n	c704 <Print::printFloat(double, unsigned char)+0xfc>
    c74e:	bf00      	nop
    c750:	ffffffff 	.word	0xffffffff
    c754:	7fefffff 	.word	0x7fefffff
    c758:	e0000000 	.word	0xe0000000
    c75c:	41efffff 	.word	0x41efffff
    c760:	e0000000 	.word	0xe0000000
    c764:	c1efffff 	.word	0xc1efffff
    c768:	9999999a 	.word	0x9999999a
    c76c:	3fb99999 	.word	0x3fb99999
    c770:	20002048 	.word	0x20002048
    c774:	2000204c 	.word	0x2000204c
    c778:	20002050 	.word	0x20002050

0000c77c <Stream::timedPeek()>:
{
    c77c:	b570      	push	{r4, r5, r6, lr}
    c77e:	4604      	mov	r4, r0
    c780:	4b09      	ldr	r3, [pc, #36]	; (c7a8 <Stream::timedPeek()+0x2c>)
    c782:	681e      	ldr	r6, [r3, #0]
    c784:	461d      	mov	r5, r3
    c = peek();
    c786:	6823      	ldr	r3, [r4, #0]
    c788:	699b      	ldr	r3, [r3, #24]
    c78a:	4620      	mov	r0, r4
    c78c:	4798      	blx	r3
    if (c >= 0) return c;
    c78e:	2800      	cmp	r0, #0
    c790:	da08      	bge.n	c7a4 <Stream::timedPeek()+0x28>
    yield();
    c792:	f002 fb25 	bl	ede0 <yield>
    c796:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c798:	1b9b      	subs	r3, r3, r6
    c79a:	68a2      	ldr	r2, [r4, #8]
    c79c:	4293      	cmp	r3, r2
    c79e:	d3f2      	bcc.n	c786 <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    c7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c7a4:	bd70      	pop	{r4, r5, r6, pc}
    c7a6:	bf00      	nop
    c7a8:	200052a8 	.word	0x200052a8

0000c7ac <Stream::peekNextDigit()>:
{
    c7ac:	b510      	push	{r4, lr}
    c7ae:	4604      	mov	r4, r0
    c7b0:	e003      	b.n	c7ba <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    c7b2:	6823      	ldr	r3, [r4, #0]
    c7b4:	695b      	ldr	r3, [r3, #20]
    c7b6:	4620      	mov	r0, r4
    c7b8:	4798      	blx	r3
    c = timedPeek();
    c7ba:	4620      	mov	r0, r4
    c7bc:	f7ff ffde 	bl	c77c <Stream::timedPeek()>
    if (c == '-') return c;
    c7c0:	282d      	cmp	r0, #45	; 0x2d
    c7c2:	d005      	beq.n	c7d0 <Stream::peekNextDigit()+0x24>
    c7c4:	2800      	cmp	r0, #0
    c7c6:	db03      	blt.n	c7d0 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    c7c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c7cc:	2b09      	cmp	r3, #9
    c7ce:	d8f0      	bhi.n	c7b2 <Stream::peekNextDigit()+0x6>
}
    c7d0:	bd10      	pop	{r4, pc}
	...

0000c7d4 <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7d8:	ed2d 8b02 	vpush	{d8}
    c7dc:	4604      	mov	r4, r0
    c7de:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    c7e0:	f7ff ffe4 	bl	c7ac <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    c7e4:	2800      	cmp	r0, #0
    c7e6:	db45      	blt.n	c874 <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    c7e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    c7ec:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    c7f0:	464f      	mov	r7, r9
  boolean isNegative = false;
    c7f2:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    c7f4:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    c7f6:	eddf 8a21 	vldr	s17, [pc, #132]	; c87c <Stream::parseFloat(char)+0xa8>
    c7fa:	e00f      	b.n	c81c <Stream::parseFloat(char)+0x48>
      isNegative = true;
    c7fc:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    c7fe:	6823      	ldr	r3, [r4, #0]
    c800:	695b      	ldr	r3, [r3, #20]
    c802:	4620      	mov	r0, r4
    c804:	4798      	blx	r3
    c = timedPeek();
    c806:	4620      	mov	r0, r4
    c808:	f7ff ffb8 	bl	c77c <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    c80c:	4285      	cmp	r5, r0
    c80e:	bf18      	it	ne
    c810:	282e      	cmpne	r0, #46	; 0x2e
    c812:	d003      	beq.n	c81c <Stream::parseFloat(char)+0x48>
    c814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c818:	2b09      	cmp	r3, #9
    c81a:	d816      	bhi.n	c84a <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    c81c:	4285      	cmp	r5, r0
    c81e:	d0ee      	beq.n	c7fe <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    c820:	282d      	cmp	r0, #45	; 0x2d
    c822:	d0eb      	beq.n	c7fc <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    c824:	282e      	cmp	r0, #46	; 0x2e
    c826:	d00e      	beq.n	c846 <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    c828:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c82c:	2b09      	cmp	r3, #9
    c82e:	d8e6      	bhi.n	c7fe <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    c830:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    c834:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    c838:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    c83c:	2f00      	cmp	r7, #0
    c83e:	d0de      	beq.n	c7fe <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    c840:	ee28 8a28 	vmul.f32	s16, s16, s17
    c844:	e7db      	b.n	c7fe <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    c846:	4637      	mov	r7, r6
    c848:	e7d9      	b.n	c7fe <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    c84a:	f1b8 0f00 	cmp.w	r8, #0
    c84e:	d001      	beq.n	c854 <Stream::parseFloat(char)+0x80>
    value = -value;
    c850:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    c854:	b14f      	cbz	r7, c86a <Stream::parseFloat(char)+0x96>
    return value * fraction;
    c856:	ee07 9a90 	vmov	s15, r9
    c85a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c85e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    c862:	ecbd 8b02 	vpop	{d8}
    c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    c86a:	ee07 9a90 	vmov	s15, r9
    c86e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c872:	e7f6      	b.n	c862 <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    c874:	ed9f 0a02 	vldr	s0, [pc, #8]	; c880 <Stream::parseFloat(char)+0xac>
    c878:	e7f3      	b.n	c862 <Stream::parseFloat(char)+0x8e>
    c87a:	bf00      	nop
    c87c:	3dcccccd 	.word	0x3dcccccd
    c880:	00000000 	.word	0x00000000

0000c884 <Stream::parseFloat()>:
{
    c884:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    c886:	2101      	movs	r1, #1
    c888:	f7ff ffa4 	bl	c7d4 <Stream::parseFloat(char)>
}
    c88c:	bd08      	pop	{r3, pc}
	...

0000c890 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    c894:	4b59      	ldr	r3, [pc, #356]	; (c9fc <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    c896:	fba3 4200 	umull	r4, r2, r3, r0
    c89a:	0952      	lsrs	r2, r2, #5
    c89c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    c8a0:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    c8a4:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    c8a6:	fba3 0302 	umull	r0, r3, r3, r2
    c8aa:	095b      	lsrs	r3, r3, #5
    c8ac:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    c8b0:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    c8b4:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    c8b6:	4a52      	ldr	r2, [pc, #328]	; (ca00 <breakTime(unsigned long, DateTimeFields&)+0x170>)
    c8b8:	fba2 2e03 	umull	r2, lr, r2, r3
    c8bc:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    c8c0:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    c8c4:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    c8c8:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c8ca:	f10e 0204 	add.w	r2, lr, #4
    c8ce:	4b4d      	ldr	r3, [pc, #308]	; (ca04 <breakTime(unsigned long, DateTimeFields&)+0x174>)
    c8d0:	fba3 0302 	umull	r0, r3, r3, r2
    c8d4:	1ad0      	subs	r0, r2, r3
    c8d6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    c8da:	089b      	lsrs	r3, r3, #2
    c8dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    c8e0:	1ad2      	subs	r2, r2, r3
    c8e2:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c8e4:	2000      	movs	r0, #0
  days = 0;
    c8e6:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c8e8:	f240 176d 	movw	r7, #365	; 0x16d
    c8ec:	4e46      	ldr	r6, [pc, #280]	; (ca08 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c8ee:	f04f 0864 	mov.w	r8, #100	; 0x64
    c8f2:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    c8f6:	f44f 79c8 	mov.w	r9, #400	; 0x190
    c8fa:	e004      	b.n	c906 <breakTime(unsigned long, DateTimeFields&)+0x76>
    c8fc:	463c      	mov	r4, r7
    c8fe:	4422      	add	r2, r4
    c900:	3001      	adds	r0, #1
    c902:	4596      	cmp	lr, r2
    c904:	d319      	bcc.n	c93a <breakTime(unsigned long, DateTimeFields&)+0xaa>
    c906:	fa5f fc80 	uxtb.w	ip, r0
    c90a:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    c90e:	f013 0503 	ands.w	r5, r3, #3
    c912:	d1f3      	bne.n	c8fc <breakTime(unsigned long, DateTimeFields&)+0x6c>
    c914:	fb86 b403 	smull	fp, r4, r6, r3
    c918:	1164      	asrs	r4, r4, #5
    c91a:	fb08 3414 	mls	r4, r8, r4, r3
    c91e:	b954      	cbnz	r4, c936 <breakTime(unsigned long, DateTimeFields&)+0xa6>
    c920:	fb86 b403 	smull	fp, r4, r6, r3
    c924:	11e4      	asrs	r4, r4, #7
    c926:	fb09 3414 	mls	r4, r9, r4, r3
    c92a:	2c00      	cmp	r4, #0
    c92c:	bf14      	ite	ne
    c92e:	463c      	movne	r4, r7
    c930:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    c934:	e7e3      	b.n	c8fe <breakTime(unsigned long, DateTimeFields&)+0x6e>
    c936:	4654      	mov	r4, sl
    c938:	e7e1      	b.n	c8fe <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    c93a:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    c93e:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    c942:	b9b5      	cbnz	r5, c972 <breakTime(unsigned long, DateTimeFields&)+0xe2>
    c944:	4830      	ldr	r0, [pc, #192]	; (ca08 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c946:	fb80 4003 	smull	r4, r0, r0, r3
    c94a:	1140      	asrs	r0, r0, #5
    c94c:	2464      	movs	r4, #100	; 0x64
    c94e:	fb04 3010 	mls	r0, r4, r0, r3
    c952:	bb50      	cbnz	r0, c9aa <breakTime(unsigned long, DateTimeFields&)+0x11a>
    c954:	482c      	ldr	r0, [pc, #176]	; (ca08 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c956:	fb80 4003 	smull	r4, r0, r0, r3
    c95a:	11c0      	asrs	r0, r0, #7
    c95c:	f44f 74c8 	mov.w	r4, #400	; 0x190
    c960:	fb04 3010 	mls	r0, r4, r0, r3
    c964:	2800      	cmp	r0, #0
    c966:	f240 106d 	movw	r0, #365	; 0x16d
    c96a:	bf08      	it	eq
    c96c:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    c970:	e001      	b.n	c976 <breakTime(unsigned long, DateTimeFields&)+0xe6>
    c972:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c976:	ebae 0e02 	sub.w	lr, lr, r2
    c97a:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    c97e:	4f22      	ldr	r7, [pc, #136]	; (ca08 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c980:	fb87 0703 	smull	r0, r7, r7, r3
    c984:	ea4f 1e67 	mov.w	lr, r7, asr #5
    c988:	2064      	movs	r0, #100	; 0x64
    c98a:	fb00 3e1e 	mls	lr, r0, lr, r3
    c98e:	11ff      	asrs	r7, r7, #7
    c990:	f44f 70c8 	mov.w	r0, #400	; 0x190
    c994:	fb00 3717 	mls	r7, r0, r7, r3
    c998:	2301      	movs	r3, #1
    c99a:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    c99c:	f8df c06c 	ldr.w	ip, [pc, #108]	; ca0c <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    c9a0:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    c9a4:	f04f 091d 	mov.w	r9, #29
    c9a8:	e014      	b.n	c9d4 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c9aa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    c9ae:	e7e2      	b.n	c976 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    c9b0:	b94d      	cbnz	r5, c9c6 <breakTime(unsigned long, DateTimeFields&)+0x136>
    c9b2:	f1be 0f00 	cmp.w	lr, #0
    c9b6:	d11c      	bne.n	c9f2 <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    c9b8:	2f00      	cmp	r7, #0
    c9ba:	bf14      	ite	ne
    c9bc:	241c      	movne	r4, #28
    c9be:	241d      	moveq	r4, #29
    c9c0:	e002      	b.n	c9c8 <breakTime(unsigned long, DateTimeFields&)+0x138>
    c9c2:	4633      	mov	r3, r6
    c9c4:	e010      	b.n	c9e8 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    c9c6:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    c9c8:	4294      	cmp	r4, r2
    c9ca:	d814      	bhi.n	c9f6 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    c9cc:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c9ce:	3001      	adds	r0, #1
    c9d0:	3301      	adds	r3, #1
    c9d2:	b2db      	uxtb	r3, r3
    c9d4:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    c9d6:	2e01      	cmp	r6, #1
    c9d8:	d0ea      	beq.n	c9b0 <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    c9da:	f810 400c 	ldrb.w	r4, [r0, ip]
    c9de:	4294      	cmp	r4, r2
    c9e0:	d8ef      	bhi.n	c9c2 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c9e2:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c9e4:	2b0b      	cmp	r3, #11
    c9e6:	d9f2      	bls.n	c9ce <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    c9e8:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    c9ea:	3201      	adds	r2, #1
    c9ec:	710a      	strb	r2, [r1, #4]
}
    c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    c9f2:	464c      	mov	r4, r9
    c9f4:	e7e8      	b.n	c9c8 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    c9f6:	4633      	mov	r3, r6
    c9f8:	e7f6      	b.n	c9e8 <breakTime(unsigned long, DateTimeFields&)+0x158>
    c9fa:	bf00      	nop
    c9fc:	88888889 	.word	0x88888889
    ca00:	aaaaaaab 	.word	0xaaaaaaab
    ca04:	24924925 	.word	0x24924925
    ca08:	51eb851f 	.word	0x51eb851f
    ca0c:	20001f78 	.word	0x20001f78

0000ca10 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    ca10:	b510      	push	{r4, lr}
    ca12:	4604      	mov	r4, r0
{
	free(buffer);
    ca14:	6800      	ldr	r0, [r0, #0]
    ca16:	f004 f8c9 	bl	10bac <free>
}
    ca1a:	4620      	mov	r0, r4
    ca1c:	bd10      	pop	{r4, pc}

0000ca1e <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    ca1e:	b538      	push	{r3, r4, r5, lr}
    ca20:	4604      	mov	r4, r0
    ca22:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    ca24:	3101      	adds	r1, #1
    ca26:	6800      	ldr	r0, [r0, #0]
    ca28:	f005 f936 	bl	11c98 <realloc>
	if (newbuffer) {
    ca2c:	b118      	cbz	r0, ca36 <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    ca2e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    ca30:	6065      	str	r5, [r4, #4]
		return 1;
    ca32:	2001      	movs	r0, #1
	}
	return 0;
}
    ca34:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    ca36:	2000      	movs	r0, #0
    ca38:	e7fc      	b.n	ca34 <String::changeBuffer(unsigned int)+0x16>

0000ca3a <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    ca3a:	6843      	ldr	r3, [r0, #4]
    ca3c:	428b      	cmp	r3, r1
    ca3e:	d301      	bcc.n	ca44 <String::reserve(unsigned int)+0xa>
    ca40:	2001      	movs	r0, #1
}
    ca42:	4770      	bx	lr
{
    ca44:	b510      	push	{r4, lr}
    ca46:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    ca48:	f7ff ffe9 	bl	ca1e <String::changeBuffer(unsigned int)>
    ca4c:	b900      	cbnz	r0, ca50 <String::reserve(unsigned int)+0x16>
}
    ca4e:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    ca50:	68a3      	ldr	r3, [r4, #8]
    ca52:	b923      	cbnz	r3, ca5e <String::reserve(unsigned int)+0x24>
    ca54:	6823      	ldr	r3, [r4, #0]
    ca56:	2200      	movs	r2, #0
    ca58:	701a      	strb	r2, [r3, #0]
		return 1;
    ca5a:	2001      	movs	r0, #1
    ca5c:	e7f7      	b.n	ca4e <String::reserve(unsigned int)+0x14>
    ca5e:	2001      	movs	r0, #1
    ca60:	e7f5      	b.n	ca4e <String::reserve(unsigned int)+0x14>

0000ca62 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    ca62:	b570      	push	{r4, r5, r6, lr}
    ca64:	4604      	mov	r4, r0
	if (length == 0) {
    ca66:	b932      	cbnz	r2, ca76 <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    ca68:	6803      	ldr	r3, [r0, #0]
    ca6a:	b103      	cbz	r3, ca6e <String::copy(char const*, unsigned int)+0xc>
    ca6c:	701a      	strb	r2, [r3, #0]
		len = 0;
    ca6e:	2300      	movs	r3, #0
    ca70:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    ca72:	4620      	mov	r0, r4
    ca74:	bd70      	pop	{r4, r5, r6, pc}
    ca76:	460d      	mov	r5, r1
    ca78:	4616      	mov	r6, r2
	if (!reserve(length)) {
    ca7a:	4611      	mov	r1, r2
    ca7c:	f7ff ffdd 	bl	ca3a <String::reserve(unsigned int)>
    ca80:	b948      	cbnz	r0, ca96 <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    ca82:	6820      	ldr	r0, [r4, #0]
    ca84:	b118      	cbz	r0, ca8e <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    ca86:	f004 f891 	bl	10bac <free>
			buffer = NULL;
    ca8a:	2300      	movs	r3, #0
    ca8c:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    ca8e:	2300      	movs	r3, #0
    ca90:	6063      	str	r3, [r4, #4]
    ca92:	60a3      	str	r3, [r4, #8]
		return *this;
    ca94:	e7ed      	b.n	ca72 <String::copy(char const*, unsigned int)+0x10>
	len = length;
    ca96:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    ca98:	4629      	mov	r1, r5
    ca9a:	6820      	ldr	r0, [r4, #0]
    ca9c:	f004 fc9a 	bl	113d4 <strcpy>
	return *this;
    caa0:	e7e7      	b.n	ca72 <String::copy(char const*, unsigned int)+0x10>

0000caa2 <String::String(char const*)>:
String::String(const char *cstr)
    caa2:	b538      	push	{r3, r4, r5, lr}
    caa4:	4604      	mov	r4, r0
	buffer = NULL;
    caa6:	2300      	movs	r3, #0
    caa8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    caaa:	6043      	str	r3, [r0, #4]
	len = 0;
    caac:	6083      	str	r3, [r0, #8]
	flags = 0;
    caae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    cab0:	b141      	cbz	r1, cac4 <String::String(char const*)+0x22>
    cab2:	460d      	mov	r5, r1
    cab4:	4608      	mov	r0, r1
    cab6:	f005 fa23 	bl	11f00 <strlen>
    caba:	4602      	mov	r2, r0
    cabc:	4629      	mov	r1, r5
    cabe:	4620      	mov	r0, r4
    cac0:	f7ff ffcf 	bl	ca62 <String::copy(char const*, unsigned int)>
}
    cac4:	4620      	mov	r0, r4
    cac6:	bd38      	pop	{r3, r4, r5, pc}

0000cac8 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    cac8:	4281      	cmp	r1, r0
    caca:	d011      	beq.n	caf0 <String::move(String&)+0x28>
{
    cacc:	b538      	push	{r3, r4, r5, lr}
    cace:	4605      	mov	r5, r0
    cad0:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    cad2:	6800      	ldr	r0, [r0, #0]
    cad4:	b108      	cbz	r0, cada <String::move(String&)+0x12>
    cad6:	f004 f869 	bl	10bac <free>
	buffer = rhs.buffer;
    cada:	6823      	ldr	r3, [r4, #0]
    cadc:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    cade:	6863      	ldr	r3, [r4, #4]
    cae0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    cae2:	68a3      	ldr	r3, [r4, #8]
    cae4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    cae6:	2300      	movs	r3, #0
    cae8:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    caea:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    caec:	60a3      	str	r3, [r4, #8]
}
    caee:	bd38      	pop	{r3, r4, r5, pc}
    caf0:	4770      	bx	lr

0000caf2 <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    caf2:	4288      	cmp	r0, r1
    caf4:	d005      	beq.n	cb02 <String::operator=(String const&)+0x10>
{
    caf6:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    caf8:	688a      	ldr	r2, [r1, #8]
    cafa:	6809      	ldr	r1, [r1, #0]
    cafc:	f7ff ffb1 	bl	ca62 <String::copy(char const*, unsigned int)>
}
    cb00:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    cb02:	4608      	mov	r0, r1
}
    cb04:	4770      	bx	lr

0000cb06 <String::String(String const&)>:
String::String(const String &value)
    cb06:	b510      	push	{r4, lr}
    cb08:	4604      	mov	r4, r0
	buffer = NULL;
    cb0a:	2300      	movs	r3, #0
    cb0c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cb0e:	6043      	str	r3, [r0, #4]
	len = 0;
    cb10:	6083      	str	r3, [r0, #8]
	flags = 0;
    cb12:	7303      	strb	r3, [r0, #12]
	*this = value;
    cb14:	f7ff ffed 	bl	caf2 <String::operator=(String const&)>
}
    cb18:	4620      	mov	r0, r4
    cb1a:	bd10      	pop	{r4, pc}

0000cb1c <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    cb1c:	b510      	push	{r4, lr}
    cb1e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    cb20:	4288      	cmp	r0, r1
    cb22:	d001      	beq.n	cb28 <String::operator=(String&&)+0xc>
    cb24:	f7ff ffd0 	bl	cac8 <String::move(String&)>
	return *this;
}
    cb28:	4620      	mov	r0, r4
    cb2a:	bd10      	pop	{r4, pc}

0000cb2c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    cb2c:	b538      	push	{r3, r4, r5, lr}
    cb2e:	4604      	mov	r4, r0
	if (cstr) {
    cb30:	b151      	cbz	r1, cb48 <String::operator=(char const*)+0x1c>
    cb32:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    cb34:	4608      	mov	r0, r1
    cb36:	f005 f9e3 	bl	11f00 <strlen>
    cb3a:	4602      	mov	r2, r0
    cb3c:	4629      	mov	r1, r5
    cb3e:	4620      	mov	r0, r4
    cb40:	f7ff ff8f 	bl	ca62 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    cb44:	4620      	mov	r0, r4
    cb46:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    cb48:	2300      	movs	r3, #0
    cb4a:	6083      	str	r3, [r0, #8]
    cb4c:	e7fa      	b.n	cb44 <String::operator=(char const*)+0x18>

0000cb4e <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    cb4e:	b510      	push	{r4, lr}
    cb50:	b08a      	sub	sp, #40	; 0x28
    cb52:	4604      	mov	r4, r0
    cb54:	4608      	mov	r0, r1
	buffer = NULL;
    cb56:	2300      	movs	r3, #0
    cb58:	6023      	str	r3, [r4, #0]
	capacity = 0;
    cb5a:	6063      	str	r3, [r4, #4]
	len = 0;
    cb5c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    cb5e:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    cb60:	a901      	add	r1, sp, #4
    cb62:	f003 ffff 	bl	10b64 <itoa>
	*this = buf;
    cb66:	a901      	add	r1, sp, #4
    cb68:	4620      	mov	r0, r4
    cb6a:	f7ff ffdf 	bl	cb2c <String::operator=(char const*)>
}
    cb6e:	4620      	mov	r0, r4
    cb70:	b00a      	add	sp, #40	; 0x28
    cb72:	bd10      	pop	{r4, pc}

0000cb74 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    cb74:	b510      	push	{r4, lr}
    cb76:	b08a      	sub	sp, #40	; 0x28
    cb78:	4604      	mov	r4, r0
	buffer = NULL;
    cb7a:	2300      	movs	r3, #0
    cb7c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cb7e:	6043      	str	r3, [r0, #4]
	len = 0;
    cb80:	6083      	str	r3, [r0, #8]
	flags = 0;
    cb82:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    cb84:	466a      	mov	r2, sp
    cb86:	1c88      	adds	r0, r1, #2
    cb88:	f000 fb9e 	bl	d2c8 <dtostrf>
    cb8c:	4601      	mov	r1, r0
    cb8e:	4620      	mov	r0, r4
    cb90:	f7ff ffcc 	bl	cb2c <String::operator=(char const*)>
}
    cb94:	4620      	mov	r0, r4
    cb96:	b00a      	add	sp, #40	; 0x28
    cb98:	bd10      	pop	{r4, pc}

0000cb9a <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    cb9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb9e:	4604      	mov	r4, r0
    cba0:	460d      	mov	r5, r1
    cba2:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    cba4:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    cba6:	6803      	ldr	r3, [r0, #0]
    cba8:	42ab      	cmp	r3, r5
    cbaa:	d806      	bhi.n	cbba <String::append(char const*, unsigned int)+0x20>
    cbac:	185a      	adds	r2, r3, r1
    cbae:	4295      	cmp	r5, r2
    cbb0:	d209      	bcs.n	cbc6 <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    cbb2:	1aef      	subs	r7, r5, r3
		self = true;
    cbb4:	f04f 0901 	mov.w	r9, #1
    cbb8:	e001      	b.n	cbbe <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    cbba:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    cbbe:	b92e      	cbnz	r6, cbcc <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    cbc0:	4620      	mov	r0, r4
    cbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    cbc6:	f04f 0900 	mov.w	r9, #0
    cbca:	e7f8      	b.n	cbbe <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    cbcc:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    cbd0:	4641      	mov	r1, r8
    cbd2:	4620      	mov	r0, r4
    cbd4:	f7ff ff31 	bl	ca3a <String::reserve(unsigned int)>
    cbd8:	2800      	cmp	r0, #0
    cbda:	d0f1      	beq.n	cbc0 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    cbdc:	f1b9 0f00 	cmp.w	r9, #0
    cbe0:	d00d      	beq.n	cbfe <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    cbe2:	6823      	ldr	r3, [r4, #0]
    cbe4:	68a0      	ldr	r0, [r4, #8]
    cbe6:	4632      	mov	r2, r6
    cbe8:	19d9      	adds	r1, r3, r7
    cbea:	4418      	add	r0, r3
    cbec:	f000 fa98 	bl	d120 <memcpy>
		buffer[newlen] = 0;
    cbf0:	6823      	ldr	r3, [r4, #0]
    cbf2:	2200      	movs	r2, #0
    cbf4:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    cbf8:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    cbfc:	e7e0      	b.n	cbc0 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    cbfe:	6820      	ldr	r0, [r4, #0]
    cc00:	68a3      	ldr	r3, [r4, #8]
    cc02:	4629      	mov	r1, r5
    cc04:	4418      	add	r0, r3
    cc06:	f004 fbe5 	bl	113d4 <strcpy>
    cc0a:	e7f5      	b.n	cbf8 <String::append(char const*, unsigned int)+0x5e>

0000cc0c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    cc0c:	b510      	push	{r4, lr}
    cc0e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    cc10:	688a      	ldr	r2, [r1, #8]
    cc12:	6809      	ldr	r1, [r1, #0]
    cc14:	f7ff ffc1 	bl	cb9a <String::append(char const*, unsigned int)>
	return a;
}
    cc18:	4620      	mov	r0, r4
    cc1a:	bd10      	pop	{r4, pc}

0000cc1c <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    cc1c:	b538      	push	{r3, r4, r5, lr}
    cc1e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    cc20:	b141      	cbz	r1, cc34 <operator+(StringSumHelper const&, char const*)+0x18>
    cc22:	460d      	mov	r5, r1
    cc24:	4608      	mov	r0, r1
    cc26:	f005 f96b 	bl	11f00 <strlen>
    cc2a:	4602      	mov	r2, r0
    cc2c:	4629      	mov	r1, r5
    cc2e:	4620      	mov	r0, r4
    cc30:	f7ff ffb3 	bl	cb9a <String::append(char const*, unsigned int)>
	return a;
}
    cc34:	4620      	mov	r0, r4
    cc36:	bd38      	pop	{r3, r4, r5, pc}

0000cc38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    cc38:	b1b2      	cbz	r2, cc68 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    cc3a:	b538      	push	{r3, r4, r5, lr}
    cc3c:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    cc3e:	b124      	cbz	r4, cc4a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    cc40:	6885      	ldr	r5, [r0, #8]
    cc42:	429d      	cmp	r5, r3
    cc44:	d802      	bhi.n	cc4c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    cc46:	2300      	movs	r3, #0
    cc48:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    cc4a:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    cc4c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    cc4e:	1e51      	subs	r1, r2, #1
    cc50:	428d      	cmp	r5, r1
    cc52:	bf28      	it	cs
    cc54:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    cc56:	6801      	ldr	r1, [r0, #0]
    cc58:	462a      	mov	r2, r5
    cc5a:	4419      	add	r1, r3
    cc5c:	4620      	mov	r0, r4
    cc5e:	f003 ff4f 	bl	10b00 <strncpy>
	buf[n] = 0;
    cc62:	2300      	movs	r3, #0
    cc64:	5563      	strb	r3, [r4, r5]
    cc66:	e7f0      	b.n	cc4a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    cc68:	4770      	bx	lr
	...

0000cc6c <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    cc6c:	282a      	cmp	r0, #42	; 0x2a
    cc6e:	d83e      	bhi.n	ccee <analogRead+0x82>
{
    cc70:	b570      	push	{r4, r5, r6, lr}
    cc72:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    cc74:	4b20      	ldr	r3, [pc, #128]	; (ccf8 <analogRead+0x8c>)
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	b9b3      	cbnz	r3, cca8 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    cc7a:	4b20      	ldr	r3, [pc, #128]	; (ccfc <analogRead+0x90>)
    cc7c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    cc7e:	2bff      	cmp	r3, #255	; 0xff
    cc80:	d037      	beq.n	ccf2 <analogRead+0x86>
	if(!(ch & 0x80)) {
    cc82:	f013 0f80 	tst.w	r3, #128	; 0x80
    cc86:	d120      	bne.n	ccca <analogRead+0x5e>
		ADC1_HC0 = ch;
    cc88:	4a1d      	ldr	r2, [pc, #116]	; (cd00 <analogRead+0x94>)
    cc8a:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cc8c:	6a13      	ldr	r3, [r2, #32]
    cc8e:	f013 0f01 	tst.w	r3, #1
    cc92:	d106      	bne.n	cca2 <analogRead+0x36>
    cc94:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    cc96:	f002 f8a3 	bl	ede0 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cc9a:	6a23      	ldr	r3, [r4, #32]
    cc9c:	f013 0f01 	tst.w	r3, #1
    cca0:	d0f9      	beq.n	cc96 <analogRead+0x2a>
		return ADC1_R0;
    cca2:	4b17      	ldr	r3, [pc, #92]	; (cd00 <analogRead+0x94>)
    cca4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    cca6:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cca8:	4d15      	ldr	r5, [pc, #84]	; (cd00 <analogRead+0x94>)
    ccaa:	4e16      	ldr	r6, [pc, #88]	; (cd04 <analogRead+0x98>)
    ccac:	e001      	b.n	ccb2 <analogRead+0x46>
		yield();
    ccae:	f002 f897 	bl	ede0 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    ccb2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    ccb4:	f013 0f80 	tst.w	r3, #128	; 0x80
    ccb8:	d1f9      	bne.n	ccae <analogRead+0x42>
    ccba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    ccbc:	f013 0f80 	tst.w	r3, #128	; 0x80
    ccc0:	d1f5      	bne.n	ccae <analogRead+0x42>
	calibrating = 0;
    ccc2:	4b0d      	ldr	r3, [pc, #52]	; (ccf8 <analogRead+0x8c>)
    ccc4:	2200      	movs	r2, #0
    ccc6:	701a      	strb	r2, [r3, #0]
}
    ccc8:	e7d7      	b.n	cc7a <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    ccca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ccce:	4a0d      	ldr	r2, [pc, #52]	; (cd04 <analogRead+0x98>)
    ccd0:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    ccd2:	6a13      	ldr	r3, [r2, #32]
    ccd4:	f013 0f01 	tst.w	r3, #1
    ccd8:	d106      	bne.n	cce8 <analogRead+0x7c>
    ccda:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    ccdc:	f002 f880 	bl	ede0 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cce0:	6a23      	ldr	r3, [r4, #32]
    cce2:	f013 0f01 	tst.w	r3, #1
    cce6:	d0f9      	beq.n	ccdc <analogRead+0x70>
		return ADC2_R0;
    cce8:	4b06      	ldr	r3, [pc, #24]	; (cd04 <analogRead+0x98>)
    ccea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ccec:	e7db      	b.n	cca6 <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    ccee:	2000      	movs	r0, #0
}
    ccf0:	4770      	bx	lr
	if (ch == 255) return 0;
    ccf2:	2000      	movs	r0, #0
    ccf4:	e7d7      	b.n	cca6 <analogRead+0x3a>
    ccf6:	bf00      	nop
    ccf8:	200052e9 	.word	0x200052e9
    ccfc:	20002b00 	.word	0x20002b00
    cd00:	400c4000 	.word	0x400c4000
    cd04:	400c8000 	.word	0x400c8000

0000cd08 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    cd08:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cd0a:	4b8e      	ldr	r3, [pc, #568]	; (cf44 <set_arm_clock+0x23c>)
    cd0c:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    cd0e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    cd10:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    cd14:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    cd16:	4b8c      	ldr	r3, [pc, #560]	; (cf48 <set_arm_clock+0x240>)
    cd18:	4298      	cmp	r0, r3
    cd1a:	d915      	bls.n	cd48 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    cd1c:	4b8b      	ldr	r3, [pc, #556]	; (cf4c <set_arm_clock+0x244>)
    cd1e:	4298      	cmp	r0, r3
    cd20:	d96d      	bls.n	cdfe <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cd22:	4b8b      	ldr	r3, [pc, #556]	; (cf50 <set_arm_clock+0x248>)
    cd24:	4403      	add	r3, r0
    cd26:	0a1b      	lsrs	r3, r3, #8
    cd28:	498a      	ldr	r1, [pc, #552]	; (cf54 <set_arm_clock+0x24c>)
    cd2a:	fba1 1303 	umull	r1, r3, r1, r3
    cd2e:	09db      	lsrs	r3, r3, #7
    cd30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cd34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cd38:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    cd3c:	f240 6127 	movw	r1, #1575	; 0x627
    cd40:	428b      	cmp	r3, r1
    cd42:	bf28      	it	cs
    cd44:	460b      	movcs	r3, r1
    cd46:	e007      	b.n	cd58 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    cd48:	4e83      	ldr	r6, [pc, #524]	; (cf58 <set_arm_clock+0x250>)
    cd4a:	f240 437e 	movw	r3, #1150	; 0x47e
    cd4e:	f240 31b6 	movw	r1, #950	; 0x3b6
    cd52:	42b0      	cmp	r0, r6
    cd54:	bf98      	it	ls
    cd56:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cd58:	4e7a      	ldr	r6, [pc, #488]	; (cf44 <set_arm_clock+0x23c>)
    cd5a:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    cd5e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cd62:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cd66:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    cd6a:	497c      	ldr	r1, [pc, #496]	; (cf5c <set_arm_clock+0x254>)
    cd6c:	fba1 1303 	umull	r1, r3, r1, r3
    cd70:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    cd74:	f004 011f 	and.w	r1, r4, #31
    cd78:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    cd7c:	d209      	bcs.n	cd92 <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cd7e:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cd82:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cd86:	4b76      	ldr	r3, [pc, #472]	; (cf60 <set_arm_clock+0x258>)
    cd88:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cd8a:	4619      	mov	r1, r3
    cd8c:	680b      	ldr	r3, [r1, #0]
    cd8e:	2b00      	cmp	r3, #0
    cd90:	dafc      	bge.n	cd8c <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cd92:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    cd96:	d12a      	bne.n	cdee <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cd98:	4972      	ldr	r1, [pc, #456]	; (cf64 <set_arm_clock+0x25c>)
    cd9a:	690e      	ldr	r6, [r1, #16]
    cd9c:	4972      	ldr	r1, [pc, #456]	; (cf68 <set_arm_clock+0x260>)
    cd9e:	43b1      	bics	r1, r6
    cda0:	d030      	beq.n	ce04 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    cda2:	4619      	mov	r1, r3
			sel = 1;
    cda4:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cda6:	06ce      	lsls	r6, r1, #27
    cda8:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    cdac:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    cdb0:	d004      	beq.n	cdbc <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cdb2:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cdb6:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    cdb8:	4962      	ldr	r1, [pc, #392]	; (cf44 <set_arm_clock+0x23c>)
    cdba:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cdbc:	0319      	lsls	r1, r3, #12
    cdbe:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    cdc2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    cdc6:	d009      	beq.n	cddc <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cdc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cdcc:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    cdce:	4b5d      	ldr	r3, [pc, #372]	; (cf44 <set_arm_clock+0x23c>)
    cdd0:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cdd2:	461a      	mov	r2, r3
    cdd4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cdd6:	f013 0f08 	tst.w	r3, #8
    cdda:	d1fb      	bne.n	cdd4 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    cddc:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    cde0:	4b58      	ldr	r3, [pc, #352]	; (cf44 <set_arm_clock+0x23c>)
    cde2:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cde4:	461a      	mov	r2, r3
    cde6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cde8:	f013 0f20 	tst.w	r3, #32
    cdec:	d1fb      	bne.n	cde6 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    cdee:	4b5f      	ldr	r3, [pc, #380]	; (cf6c <set_arm_clock+0x264>)
    cdf0:	4298      	cmp	r0, r3
    cdf2:	d817      	bhi.n	ce24 <set_arm_clock+0x11c>
    cdf4:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    cdf6:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    cdf8:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    cdfa:	4e5c      	ldr	r6, [pc, #368]	; (cf6c <set_arm_clock+0x264>)
    cdfc:	e00e      	b.n	ce1c <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    cdfe:	f240 43e2 	movw	r3, #1250	; 0x4e2
    ce02:	e7a9      	b.n	cd58 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    ce04:	2103      	movs	r1, #3
    ce06:	e7ce      	b.n	cda6 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    ce08:	2904      	cmp	r1, #4
    ce0a:	d80e      	bhi.n	ce2a <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    ce0c:	3101      	adds	r1, #1
				div_arm = 1;
    ce0e:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ce10:	fb01 f302 	mul.w	r3, r1, r2
    ce14:	fb00 f303 	mul.w	r3, r0, r3
    ce18:	42b3      	cmp	r3, r6
    ce1a:	d806      	bhi.n	ce2a <set_arm_clock+0x122>
		if (div_arm < 8) {
    ce1c:	2a07      	cmp	r2, #7
    ce1e:	d8f3      	bhi.n	ce08 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    ce20:	3201      	adds	r2, #1
    ce22:	e7f5      	b.n	ce10 <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    ce24:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    ce26:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    ce28:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ce2a:	4851      	ldr	r0, [pc, #324]	; (cf70 <set_arm_clock+0x268>)
    ce2c:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    ce2e:	4b51      	ldr	r3, [pc, #324]	; (cf74 <set_arm_clock+0x26c>)
    ce30:	4298      	cmp	r0, r3
    ce32:	f200 8083 	bhi.w	cf3c <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ce36:	4b50      	ldr	r3, [pc, #320]	; (cf78 <set_arm_clock+0x270>)
    ce38:	fba3 0300 	umull	r0, r3, r3, r0
    ce3c:	0d1b      	lsrs	r3, r3, #20
    ce3e:	2b36      	cmp	r3, #54	; 0x36
    ce40:	bf38      	it	cc
    ce42:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    ce44:	484d      	ldr	r0, [pc, #308]	; (cf7c <set_arm_clock+0x274>)
    ce46:	fb03 f000 	mul.w	r0, r3, r0
    ce4a:	fbb0 f0f2 	udiv	r0, r0, r2
    ce4e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ce52:	4e44      	ldr	r6, [pc, #272]	; (cf64 <set_arm_clock+0x25c>)
    ce54:	6836      	ldr	r6, [r6, #0]
    ce56:	4f4a      	ldr	r7, [pc, #296]	; (cf80 <set_arm_clock+0x278>)
    ce58:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ce5a:	4e4a      	ldr	r6, [pc, #296]	; (cf84 <set_arm_clock+0x27c>)
    ce5c:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ce5e:	42b7      	cmp	r7, r6
    ce60:	d009      	beq.n	ce76 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ce62:	4e40      	ldr	r6, [pc, #256]	; (cf64 <set_arm_clock+0x25c>)
    ce64:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    ce68:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ce6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ce6e:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ce70:	6833      	ldr	r3, [r6, #0]
    ce72:	2b00      	cmp	r3, #0
    ce74:	dafc      	bge.n	ce70 <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ce76:	4b33      	ldr	r3, [pc, #204]	; (cf44 <set_arm_clock+0x23c>)
    ce78:	691b      	ldr	r3, [r3, #16]
    ce7a:	3a01      	subs	r2, #1
    ce7c:	f003 0307 	and.w	r3, r3, #7
    ce80:	4293      	cmp	r3, r2
    ce82:	d008      	beq.n	ce96 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    ce84:	f002 0207 	and.w	r2, r2, #7
    ce88:	4b2e      	ldr	r3, [pc, #184]	; (cf44 <set_arm_clock+0x23c>)
    ce8a:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ce8c:	461a      	mov	r2, r3
    ce8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ce90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ce94:	d1fb      	bne.n	ce8e <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ce96:	3901      	subs	r1, #1
    ce98:	028b      	lsls	r3, r1, #10
    ce9a:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    ce9e:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    cea2:	d00b      	beq.n	cebc <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    cea4:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cea8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    ceac:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    ceae:	4b25      	ldr	r3, [pc, #148]	; (cf44 <set_arm_clock+0x23c>)
    ceb0:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    ceb2:	461a      	mov	r2, r3
    ceb4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ceb6:	f013 0f02 	tst.w	r3, #2
    ceba:	d1fb      	bne.n	ceb4 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cebc:	4932      	ldr	r1, [pc, #200]	; (cf88 <set_arm_clock+0x280>)
    cebe:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    cec0:	4a32      	ldr	r2, [pc, #200]	; (cf8c <set_arm_clock+0x284>)
    cec2:	4291      	cmp	r1, r2
    cec4:	d83c      	bhi.n	cf40 <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cec6:	09c9      	lsrs	r1, r1, #7
    cec8:	4b31      	ldr	r3, [pc, #196]	; (cf90 <set_arm_clock+0x288>)
    ceca:	fba3 3101 	umull	r3, r1, r3, r1
    cece:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ced0:	1e4b      	subs	r3, r1, #1
    ced2:	021a      	lsls	r2, r3, #8
    ced4:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    ced8:	f413 7f40 	tst.w	r3, #768	; 0x300
    cedc:	d006      	beq.n	ceec <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    cede:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    cee2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    cee6:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    cee8:	4b16      	ldr	r3, [pc, #88]	; (cf44 <set_arm_clock+0x23c>)
    ceea:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ceec:	4a15      	ldr	r2, [pc, #84]	; (cf44 <set_arm_clock+0x23c>)
    ceee:	6953      	ldr	r3, [r2, #20]
    cef0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    cef4:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cef6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cef8:	f013 0f20 	tst.w	r3, #32
    cefc:	d1fb      	bne.n	cef6 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    cefe:	4b25      	ldr	r3, [pc, #148]	; (cf94 <set_arm_clock+0x28c>)
    cf00:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    cf02:	fbb0 f1f1 	udiv	r1, r0, r1
    cf06:	4b24      	ldr	r3, [pc, #144]	; (cf98 <set_arm_clock+0x290>)
    cf08:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cf0a:	4b24      	ldr	r3, [pc, #144]	; (cf9c <set_arm_clock+0x294>)
    cf0c:	fba3 2300 	umull	r2, r3, r3, r0
    cf10:	0c9b      	lsrs	r3, r3, #18
    cf12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cf16:	fbb2 f3f3 	udiv	r3, r2, r3
    cf1a:	4a21      	ldr	r2, [pc, #132]	; (cfa0 <set_arm_clock+0x298>)
    cf1c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cf1e:	f004 031f 	and.w	r3, r4, #31
    cf22:	459c      	cmp	ip, r3
    cf24:	d208      	bcs.n	cf38 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cf26:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cf2a:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cf2e:	4a0c      	ldr	r2, [pc, #48]	; (cf60 <set_arm_clock+0x258>)
    cf30:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cf32:	6813      	ldr	r3, [r2, #0]
    cf34:	2b00      	cmp	r3, #0
    cf36:	dafc      	bge.n	cf32 <set_arm_clock+0x22a>
	}

	return frequency;
}
    cf38:	bcf0      	pop	{r4, r5, r6, r7}
    cf3a:	4770      	bx	lr
	if (mult > 108) mult = 108;
    cf3c:	236c      	movs	r3, #108	; 0x6c
    cf3e:	e781      	b.n	ce44 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    cf40:	2104      	movs	r1, #4
    cf42:	e7c5      	b.n	ced0 <set_arm_clock+0x1c8>
    cf44:	400fc000 	.word	0x400fc000
    cf48:	1f78a400 	.word	0x1f78a400
    cf4c:	23c34600 	.word	0x23c34600
    cf50:	dc3cba00 	.word	0xdc3cba00
    cf54:	004cb223 	.word	0x004cb223
    cf58:	016e3600 	.word	0x016e3600
    cf5c:	51eb851f 	.word	0x51eb851f
    cf60:	40080000 	.word	0x40080000
    cf64:	400d8000 	.word	0x400d8000
    cf68:	80003040 	.word	0x80003040
    cf6c:	269fb1ff 	.word	0x269fb1ff
    cf70:	005b8d80 	.word	0x005b8d80
    cf74:	4df67eff 	.word	0x4df67eff
    cf78:	165e9f81 	.word	0x165e9f81
    cf7c:	00b71b00 	.word	0x00b71b00
    cf80:	8001307f 	.word	0x8001307f
    cf84:	80002000 	.word	0x80002000
    cf88:	08f0d17f 	.word	0x08f0d17f
    cf8c:	2cb4177f 	.word	0x2cb4177f
    cf90:	00e5109f 	.word	0x00e5109f
    cf94:	20003130 	.word	0x20003130
    cf98:	2000312c 	.word	0x2000312c
    cf9c:	431bde83 	.word	0x431bde83
    cfa0:	20005274 	.word	0x20005274

0000cfa4 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    cfa4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cfa6:	4b0f      	ldr	r3, [pc, #60]	; (cfe4 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    cfa8:	4d0f      	ldr	r5, [pc, #60]	; (cfe8 <micros+0x44>)
		scc = systick_cycle_count;
    cfaa:	4c10      	ldr	r4, [pc, #64]	; (cfec <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfac:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cfb0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    cfb4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    cfb6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cfb8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    cfbc:	2a00      	cmp	r2, #0
    cfbe:	d1f7      	bne.n	cfb0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cfc0:	4b0b      	ldr	r3, [pc, #44]	; (cff0 <micros+0x4c>)
    cfc2:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cfc4:	4a0b      	ldr	r2, [pc, #44]	; (cff4 <micros+0x50>)
    cfc6:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    cfc8:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cfca:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    cfce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cfd2:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    cfd6:	429a      	cmp	r2, r3
    cfd8:	bf94      	ite	ls
    cfda:	1880      	addls	r0, r0, r2
    cfdc:	18c0      	addhi	r0, r0, r3
    cfde:	bc30      	pop	{r4, r5}
    cfe0:	4770      	bx	lr
    cfe2:	bf00      	nop
    cfe4:	200052ac 	.word	0x200052ac
    cfe8:	200052a8 	.word	0x200052a8
    cfec:	200052a4 	.word	0x200052a4
    cff0:	e0001000 	.word	0xe0001000
    cff4:	20005274 	.word	0x20005274

0000cff8 <delay>:
	if (msec == 0) return;
    cff8:	b900      	cbnz	r0, cffc <delay+0x4>
    cffa:	4770      	bx	lr
{
    cffc:	b538      	push	{r3, r4, r5, lr}
    cffe:	4605      	mov	r5, r0
	start = micros();
    d000:	f7ff ffd0 	bl	cfa4 <micros>
    d004:	4604      	mov	r4, r0
    d006:	e001      	b.n	d00c <delay+0x14>
		yield();
    d008:	f001 feea 	bl	ede0 <yield>
		while ((micros() - start) >= 1000) {
    d00c:	f7ff ffca 	bl	cfa4 <micros>
    d010:	1b00      	subs	r0, r0, r4
    d012:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d016:	d3f7      	bcc.n	d008 <delay+0x10>
			if (--msec == 0) return;
    d018:	3d01      	subs	r5, #1
    d01a:	d002      	beq.n	d022 <delay+0x2a>
			start += 1000;
    d01c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    d020:	e7f4      	b.n	d00c <delay+0x14>
}
    d022:	bd38      	pop	{r3, r4, r5, pc}

0000d024 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d024:	2836      	cmp	r0, #54	; 0x36
    d026:	d81b      	bhi.n	d060 <digitalWrite+0x3c>
{
    d028:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d02a:	4b0e      	ldr	r3, [pc, #56]	; (d064 <digitalWrite+0x40>)
    d02c:	0102      	lsls	r2, r0, #4
    d02e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d032:	589b      	ldr	r3, [r3, r2]
    d034:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    d036:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    d038:	4214      	tst	r4, r2
    d03a:	d008      	beq.n	d04e <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    d03c:	b121      	cbz	r1, d048 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    d03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d042:	f85d 4b04 	ldr.w	r4, [sp], #4
    d046:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    d048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    d04c:	e7f9      	b.n	d042 <digitalWrite+0x1e>
		if (val) {
    d04e:	b119      	cbz	r1, d058 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d050:	6883      	ldr	r3, [r0, #8]
    d052:	4a05      	ldr	r2, [pc, #20]	; (d068 <digitalWrite+0x44>)
    d054:	601a      	str	r2, [r3, #0]
    d056:	e7f4      	b.n	d042 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d058:	6883      	ldr	r3, [r0, #8]
    d05a:	4a04      	ldr	r2, [pc, #16]	; (d06c <digitalWrite+0x48>)
    d05c:	601a      	str	r2, [r3, #0]
    d05e:	e7f0      	b.n	d042 <digitalWrite+0x1e>
    d060:	4770      	bx	lr
    d062:	bf00      	nop
    d064:	200026d0 	.word	0x200026d0
    d068:	0001f038 	.word	0x0001f038
    d06c:	00013038 	.word	0x00013038

0000d070 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    d070:	2836      	cmp	r0, #54	; 0x36
    d072:	d80b      	bhi.n	d08c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    d074:	4b06      	ldr	r3, [pc, #24]	; (d090 <digitalRead+0x20>)
    d076:	0102      	lsls	r2, r0, #4
    d078:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    d07c:	589b      	ldr	r3, [r3, r2]
    d07e:	689a      	ldr	r2, [r3, #8]
    d080:	68c3      	ldr	r3, [r0, #12]
    d082:	421a      	tst	r2, r3
    d084:	bf14      	ite	ne
    d086:	2001      	movne	r0, #1
    d088:	2000      	moveq	r0, #0
    d08a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    d08c:	2000      	movs	r0, #0
}
    d08e:	4770      	bx	lr
    d090:	200026d0 	.word	0x200026d0

0000d094 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d094:	2836      	cmp	r0, #54	; 0x36
    d096:	d832      	bhi.n	d0fe <pinMode+0x6a>
{
    d098:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d09a:	4b19      	ldr	r3, [pc, #100]	; (d100 <pinMode+0x6c>)
    d09c:	0102      	lsls	r2, r0, #4
    d09e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d0a2:	2901      	cmp	r1, #1
    d0a4:	d00c      	beq.n	d0c0 <pinMode+0x2c>
    d0a6:	2904      	cmp	r1, #4
    d0a8:	d00a      	beq.n	d0c0 <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d0aa:	589a      	ldr	r2, [r3, r2]
    d0ac:	6853      	ldr	r3, [r2, #4]
    d0ae:	68c4      	ldr	r4, [r0, #12]
    d0b0:	ea23 0304 	bic.w	r3, r3, r4
    d0b4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    d0b6:	b9a9      	cbnz	r1, d0e4 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d0b8:	6883      	ldr	r3, [r0, #8]
    d0ba:	2238      	movs	r2, #56	; 0x38
    d0bc:	601a      	str	r2, [r3, #0]
    d0be:	e00b      	b.n	d0d8 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d0c0:	589a      	ldr	r2, [r3, r2]
    d0c2:	6853      	ldr	r3, [r2, #4]
    d0c4:	68c4      	ldr	r4, [r0, #12]
    d0c6:	4323      	orrs	r3, r4
    d0c8:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    d0ca:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d0cc:	6883      	ldr	r3, [r0, #8]
    d0ce:	bf0c      	ite	eq
    d0d0:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d0d2:	f640 0238 	movwne	r2, #2104	; 0x838
    d0d6:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d0d8:	6843      	ldr	r3, [r0, #4]
    d0da:	2215      	movs	r2, #21
    d0dc:	601a      	str	r2, [r3, #0]
}
    d0de:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0e2:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    d0e4:	2902      	cmp	r1, #2
    d0e6:	d006      	beq.n	d0f6 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    d0e8:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d0ea:	6883      	ldr	r3, [r0, #8]
    d0ec:	bf0c      	ite	eq
    d0ee:	4a05      	ldreq	r2, [pc, #20]	; (d104 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d0f0:	4a05      	ldrne	r2, [pc, #20]	; (d108 <pinMode+0x74>)
    d0f2:	601a      	str	r2, [r3, #0]
    d0f4:	e7f0      	b.n	d0d8 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d0f6:	6883      	ldr	r3, [r0, #8]
    d0f8:	4a04      	ldr	r2, [pc, #16]	; (d10c <pinMode+0x78>)
    d0fa:	601a      	str	r2, [r3, #0]
    d0fc:	e7ec      	b.n	d0d8 <pinMode+0x44>
    d0fe:	4770      	bx	lr
    d100:	200026d0 	.word	0x200026d0
    d104:	00013038 	.word	0x00013038
    d108:	00010038 	.word	0x00010038
    d10c:	0001f038 	.word	0x0001f038

0000d110 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d110:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d112:	f7f6 f907 	bl	3324 <setup>
	while (1) {
		loop();
    d116:	f7f5 ff23 	bl	2f60 <loop>
		yield();
    d11a:	f001 fe61 	bl	ede0 <yield>
	while (1) {
    d11e:	e7fa      	b.n	d116 <main+0x6>

0000d120 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d120:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d122:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d126:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d12a:	d16d      	bne.n	d208 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d12c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d12e:	d341      	bcc.n	d1b4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d130:	f851 3b04 	ldr.w	r3, [r1], #4
    d134:	f840 3b04 	str.w	r3, [r0], #4
    d138:	f851 3b04 	ldr.w	r3, [r1], #4
    d13c:	f840 3b04 	str.w	r3, [r0], #4
    d140:	f851 3b04 	ldr.w	r3, [r1], #4
    d144:	f840 3b04 	str.w	r3, [r0], #4
    d148:	f851 3b04 	ldr.w	r3, [r1], #4
    d14c:	f840 3b04 	str.w	r3, [r0], #4
    d150:	f851 3b04 	ldr.w	r3, [r1], #4
    d154:	f840 3b04 	str.w	r3, [r0], #4
    d158:	f851 3b04 	ldr.w	r3, [r1], #4
    d15c:	f840 3b04 	str.w	r3, [r0], #4
    d160:	f851 3b04 	ldr.w	r3, [r1], #4
    d164:	f840 3b04 	str.w	r3, [r0], #4
    d168:	f851 3b04 	ldr.w	r3, [r1], #4
    d16c:	f840 3b04 	str.w	r3, [r0], #4
    d170:	f851 3b04 	ldr.w	r3, [r1], #4
    d174:	f840 3b04 	str.w	r3, [r0], #4
    d178:	f851 3b04 	ldr.w	r3, [r1], #4
    d17c:	f840 3b04 	str.w	r3, [r0], #4
    d180:	f851 3b04 	ldr.w	r3, [r1], #4
    d184:	f840 3b04 	str.w	r3, [r0], #4
    d188:	f851 3b04 	ldr.w	r3, [r1], #4
    d18c:	f840 3b04 	str.w	r3, [r0], #4
    d190:	f851 3b04 	ldr.w	r3, [r1], #4
    d194:	f840 3b04 	str.w	r3, [r0], #4
    d198:	f851 3b04 	ldr.w	r3, [r1], #4
    d19c:	f840 3b04 	str.w	r3, [r0], #4
    d1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    d1a4:	f840 3b04 	str.w	r3, [r0], #4
    d1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    d1ac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d1b0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d1b2:	d2bd      	bcs.n	d130 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d1b4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d1b6:	d311      	bcc.n	d1dc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    d1bc:	f840 3b04 	str.w	r3, [r0], #4
    d1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d1c4:	f840 3b04 	str.w	r3, [r0], #4
    d1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    d1cc:	f840 3b04 	str.w	r3, [r0], #4
    d1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    d1d4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d1d8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d1da:	d2ed      	bcs.n	d1b8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d1dc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d1de:	d305      	bcc.n	d1ec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d1e0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d1e4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d1e8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d1ea:	d2f9      	bcs.n	d1e0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d1ec:	3204      	adds	r2, #4
	beq	.Ldone
    d1ee:	d008      	beq.n	d202 <memcpy+0xe2>

	lsls	r2, r2, #31
    d1f0:	07d2      	lsls	r2, r2, #31
	itt ne
    d1f2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d1f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d1f8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d1fc:	d301      	bcc.n	d202 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d1fe:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d200:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d202:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d204:	4770      	bx	lr
    d206:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d208:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d20a:	d313      	bcc.n	d234 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d20c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d20e:	d08d      	beq.n	d12c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d210:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d214:	d08a      	beq.n	d12c <memcpy+0xc>

	rsb	r3, #4
    d216:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d21a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d21c:	07db      	lsls	r3, r3, #31
	itt ne
    d21e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d220:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d224:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d228:	d380      	bcc.n	d12c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d22a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d22e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d232:	e77b      	b.n	d12c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d234:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d236:	d3d9      	bcc.n	d1ec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d238:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d23a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d23e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d242:	d2f9      	bcs.n	d238 <memcpy+0x118>

	ldrb	r3, [r1]
    d244:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d246:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d248:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d24a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d24c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d24e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d250:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d252:	4770      	bx	lr

0000d254 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d254:	b508      	push	{r3, lr}
	return malloc(size);
    d256:	f003 fca1 	bl	10b9c <malloc>
}
    d25a:	bd08      	pop	{r3, pc}

0000d25c <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d25c:	b508      	push	{r3, lr}
	free(ptr);
    d25e:	f003 fca5 	bl	10bac <free>
}
    d262:	bd08      	pop	{r3, pc}

0000d264 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d264:	b530      	push	{r4, r5, lr}
    d266:	4684      	mov	ip, r0
    d268:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d26a:	3901      	subs	r1, #1
{
    d26c:	460d      	mov	r5, r1
	int i=0, j;
    d26e:	f04f 0e00 	mov.w	lr, #0
    d272:	e002      	b.n	d27a <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d274:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d278:	469c      	mov	ip, r3
		digit = val % radix;
    d27a:	fbbc f3f2 	udiv	r3, ip, r2
    d27e:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d282:	2b09      	cmp	r3, #9
    d284:	bf94      	ite	ls
    d286:	3330      	addls	r3, #48	; 0x30
    d288:	3337      	addhi	r3, #55	; 0x37
    d28a:	b2db      	uxtb	r3, r3
    d28c:	4674      	mov	r4, lr
    d28e:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d292:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d296:	4562      	cmp	r2, ip
    d298:	d9ec      	bls.n	d274 <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d29a:	1c63      	adds	r3, r4, #1
    d29c:	eb00 0c03 	add.w	ip, r0, r3
    d2a0:	2200      	movs	r2, #0
    d2a2:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d2a4:	4596      	cmp	lr, r2
    d2a6:	dd0e      	ble.n	d2c6 <ultoa+0x62>
		t = buf[j];
    d2a8:	460a      	mov	r2, r1
    d2aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d2ae:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d2b2:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d2b4:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d2b8:	3202      	adds	r2, #2
    d2ba:	1a12      	subs	r2, r2, r0
    d2bc:	1a43      	subs	r3, r0, r1
    d2be:	3b01      	subs	r3, #1
    d2c0:	4423      	add	r3, r4
    d2c2:	429a      	cmp	r2, r3
    d2c4:	dbf0      	blt.n	d2a8 <ultoa+0x44>
	}
	return buf;
}
    d2c6:	bd30      	pop	{r4, r5, pc}

0000d2c8 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2cc:	ed2d 8b02 	vpush	{d8}
    d2d0:	b084      	sub	sp, #16
    d2d2:	eeb0 8a40 	vmov.f32	s16, s0
    d2d6:	4605      	mov	r5, r0
    d2d8:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d2da:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d2de:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d2e2:	eeb4 0a40 	vcmp.f32	s0, s0
    d2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2ea:	d62c      	bvs.n	d346 <dtostrf+0x7e>
    d2ec:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d2ee:	eef0 7ac0 	vabs.f32	s15, s0
    d2f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	; d5b4 <dtostrf+0x2ec>
    d2f6:	eef4 7a47 	vcmp.f32	s15, s14
    d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2fe:	dd52      	ble.n	d3a6 <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d300:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d308:	bf4c      	ite	mi
    d30a:	2304      	movmi	r3, #4
    d30c:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d30e:	4293      	cmp	r3, r2
    d310:	f280 817c 	bge.w	d60c <dtostrf+0x344>
    d314:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d316:	2800      	cmp	r0, #0
    d318:	f280 817b 	bge.w	d612 <dtostrf+0x34a>
			while (awidth) {
    d31c:	2a00      	cmp	r2, #0
    d31e:	f000 813b 	beq.w	d598 <dtostrf+0x2d0>
    d322:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d324:	2220      	movs	r2, #32
    d326:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d32a:	42a3      	cmp	r3, r4
    d32c:	d1fb      	bne.n	d326 <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d32e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d336:	f140 8127 	bpl.w	d588 <dtostrf+0x2c0>
    d33a:	2200      	movs	r2, #0
    d33c:	461c      	mov	r4, r3
    d33e:	232d      	movs	r3, #45	; 0x2d
    d340:	f804 3b01 	strb.w	r3, [r4], #1
    d344:	e16b      	b.n	d61e <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d34e:	bf4c      	ite	mi
    d350:	2304      	movmi	r3, #4
    d352:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d354:	4293      	cmp	r3, r2
    d356:	f280 8133 	bge.w	d5c0 <dtostrf+0x2f8>
    d35a:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d35c:	2800      	cmp	r0, #0
    d35e:	f280 8132 	bge.w	d5c6 <dtostrf+0x2fe>
			while (awidth) {
    d362:	2a00      	cmp	r2, #0
    d364:	f000 810c 	beq.w	d580 <dtostrf+0x2b8>
    d368:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d36a:	2220      	movs	r2, #32
    d36c:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d370:	429c      	cmp	r4, r3
    d372:	d1fb      	bne.n	d36c <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d374:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d378:	ee18 2a10 	vmov	r2, s16
    d37c:	2a00      	cmp	r2, #0
    d37e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d382:	fe67 7a87 	vselge.f32	s15, s15, s14
    d386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d38e:	f140 80f0 	bpl.w	d572 <dtostrf+0x2aa>
    d392:	2200      	movs	r2, #0
    d394:	461c      	mov	r4, r3
    d396:	232d      	movs	r3, #45	; 0x2d
    d398:	f804 3b01 	strb.w	r3, [r4], #1
    d39c:	e122      	b.n	d5e4 <dtostrf+0x31c>
    d39e:	4623      	mov	r3, r4
    d3a0:	e7f8      	b.n	d394 <dtostrf+0xcc>
    d3a2:	4623      	mov	r3, r4
    d3a4:	e7ca      	b.n	d33c <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d3a6:	468a      	mov	sl, r1
    d3a8:	aa02      	add	r2, sp, #8
    d3aa:	a903      	add	r1, sp, #12
    d3ac:	4640      	mov	r0, r8
    d3ae:	f003 ffd9 	bl	11364 <fcvtf>
    d3b2:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d3b4:	9b03      	ldr	r3, [sp, #12]
    d3b6:	ea58 0203 	orrs.w	r2, r8, r3
    d3ba:	d131      	bne.n	d420 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d3bc:	7802      	ldrb	r2, [r0, #0]
    d3be:	487e      	ldr	r0, [pc, #504]	; (d5b8 <dtostrf+0x2f0>)
    d3c0:	4f7e      	ldr	r7, [pc, #504]	; (d5bc <dtostrf+0x2f4>)
    d3c2:	2a34      	cmp	r2, #52	; 0x34
    d3c4:	bf98      	it	ls
    d3c6:	4607      	movls	r7, r0
		decpt++;
    d3c8:	2301      	movs	r3, #1
    d3ca:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    d3cc:	461e      	mov	r6, r3
    d3ce:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d3d0:	f1b8 0e00 	subs.w	lr, r8, #0
    d3d4:	bf18      	it	ne
    d3d6:	f04f 0e01 	movne.w	lr, #1
    d3da:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    d3de:	d036      	beq.n	d44e <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d3e0:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    d3e4:	4443      	add	r3, r8
    d3e6:	4283      	cmp	r3, r0
    d3e8:	d26d      	bcs.n	d4c6 <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d3ea:	f1b8 0f00 	cmp.w	r8, #0
    d3ee:	dd06      	ble.n	d3fe <dtostrf+0x136>
				val *= 10.0f;
    d3f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    d3f4:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    d3f8:	f1ba 0a01 	subs.w	sl, sl, #1
    d3fc:	d1fa      	bne.n	d3f4 <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d3fe:	aa02      	add	r2, sp, #8
    d400:	a901      	add	r1, sp, #4
    d402:	4650      	mov	r0, sl
    d404:	eeb0 0a48 	vmov.f32	s0, s16
    d408:	f003 ffac 	bl	11364 <fcvtf>
    d40c:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d40e:	9903      	ldr	r1, [sp, #12]
    d410:	9b01      	ldr	r3, [sp, #4]
    d412:	1a5a      	subs	r2, r3, r1
    d414:	f108 0301 	add.w	r3, r8, #1
    d418:	429a      	cmp	r2, r3
    d41a:	d051      	beq.n	d4c0 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    d41c:	46ce      	mov	lr, r9
    d41e:	e016      	b.n	d44e <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    d420:	425b      	negs	r3, r3
    d422:	4598      	cmp	r8, r3
    d424:	da03      	bge.n	d42e <dtostrf+0x166>
		decpt = -precision;
    d426:	f1c8 0300 	rsb	r3, r8, #0
    d42a:	9303      	str	r3, [sp, #12]
		s = "0";
    d42c:	4f62      	ldr	r7, [pc, #392]	; (d5b8 <dtostrf+0x2f0>)
	reqd = strlen(s);
    d42e:	4638      	mov	r0, r7
    d430:	f004 fd66 	bl	11f00 <strlen>
    d434:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    d436:	9b03      	ldr	r3, [sp, #12]
    d438:	4283      	cmp	r3, r0
    d43a:	bfb8      	it	lt
    d43c:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    d43e:	2b00      	cmp	r3, #0
    d440:	d1c6      	bne.n	d3d0 <dtostrf+0x108>
    d442:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    d444:	f1b8 0e00 	subs.w	lr, r8, #0
    d448:	bf18      	it	ne
    d44a:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d44e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d452:	f1b8 0f00 	cmp.w	r8, #0
    d456:	f000 80a3 	beq.w	d5a0 <dtostrf+0x2d8>
    d45a:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    d45c:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d45e:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d462:	f1b9 0f00 	cmp.w	r9, #0
    d466:	dd30      	ble.n	d4ca <dtostrf+0x202>
		e += pad;
    d468:	464b      	mov	r3, r9
    d46a:	444a      	add	r2, r9
	p = buf;
    d46c:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    d46e:	f04f 0c20 	mov.w	ip, #32
    d472:	f800 cb01 	strb.w	ip, [r0], #1
    d476:	1a21      	subs	r1, r4, r0
    d478:	4419      	add	r1, r3
    d47a:	2900      	cmp	r1, #0
    d47c:	dcf9      	bgt.n	d472 <dtostrf+0x1aa>
    d47e:	f1b9 0f00 	cmp.w	r9, #0
    d482:	bfd8      	it	le
    d484:	2301      	movle	r3, #1
    d486:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    d488:	f1b8 0f00 	cmp.w	r8, #0
    d48c:	d002      	beq.n	d494 <dtostrf+0x1cc>
    d48e:	212d      	movs	r1, #45	; 0x2d
    d490:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    d494:	9803      	ldr	r0, [sp, #12]
    d496:	b910      	cbnz	r0, d49e <dtostrf+0x1d6>
    d498:	f1be 0f00 	cmp.w	lr, #0
    d49c:	d117      	bne.n	d4ce <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d49e:	2800      	cmp	r0, #0
    d4a0:	da02      	bge.n	d4a8 <dtostrf+0x1e0>
    d4a2:	f1be 0f00 	cmp.w	lr, #0
    d4a6:	d11a      	bne.n	d4de <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d4a8:	4293      	cmp	r3, r2
    d4aa:	d24d      	bcs.n	d548 <dtostrf+0x280>
		*p++ = *s++;
    d4ac:	4638      	mov	r0, r7
    d4ae:	469c      	mov	ip, r3
    d4b0:	f810 1b01 	ldrb.w	r1, [r0], #1
    d4b4:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d4b8:	4594      	cmp	ip, r2
    d4ba:	d03f      	beq.n	d53c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d4bc:	272e      	movs	r7, #46	; 0x2e
    d4be:	e034      	b.n	d52a <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d4c0:	3101      	adds	r1, #1
    d4c2:	9103      	str	r1, [sp, #12]
    d4c4:	e7aa      	b.n	d41c <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    d4c6:	46ce      	mov	lr, r9
    d4c8:	e7c1      	b.n	d44e <dtostrf+0x186>
	p = buf;
    d4ca:	4623      	mov	r3, r4
    d4cc:	e7df      	b.n	d48e <dtostrf+0x1c6>
		*p++ = '0';
    d4ce:	4619      	mov	r1, r3
    d4d0:	2030      	movs	r0, #48	; 0x30
    d4d2:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    d4d6:	202e      	movs	r0, #46	; 0x2e
    d4d8:	7058      	strb	r0, [r3, #1]
    d4da:	460b      	mov	r3, r1
    d4dc:	e7e4      	b.n	d4a8 <dtostrf+0x1e0>
		*p++ = '0';
    d4de:	469e      	mov	lr, r3
    d4e0:	2130      	movs	r1, #48	; 0x30
    d4e2:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    d4e6:	212e      	movs	r1, #46	; 0x2e
    d4e8:	7059      	strb	r1, [r3, #1]
    d4ea:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    d4ec:	4601      	mov	r1, r0
			*p++ = '0';
    d4ee:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d4f2:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    d4f6:	3101      	adds	r1, #1
    d4f8:	d4fb      	bmi.n	d4f2 <dtostrf+0x22a>
			*p++ = '0';
    d4fa:	4243      	negs	r3, r0
    d4fc:	2800      	cmp	r0, #0
    d4fe:	bfa8      	it	ge
    d500:	2301      	movge	r3, #1
    d502:	4473      	add	r3, lr
    d504:	9103      	str	r1, [sp, #12]
    d506:	ea6f 0000 	mvn.w	r0, r0
    d50a:	bfa8      	it	ge
    d50c:	2000      	movge	r0, #0
    d50e:	2130      	movs	r1, #48	; 0x30
    d510:	f80e 1000 	strb.w	r1, [lr, r0]
    d514:	e7c8      	b.n	d4a8 <dtostrf+0x1e0>
    d516:	4663      	mov	r3, ip
	while (p < e) {
    d518:	4293      	cmp	r3, r2
    d51a:	d20e      	bcs.n	d53a <dtostrf+0x272>
		*p++ = *s++;
    d51c:	469c      	mov	ip, r3
    d51e:	f810 1b01 	ldrb.w	r1, [r0], #1
    d522:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d526:	4594      	cmp	ip, r2
    d528:	d008      	beq.n	d53c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d52a:	9903      	ldr	r1, [sp, #12]
    d52c:	3901      	subs	r1, #1
    d52e:	9103      	str	r1, [sp, #12]
    d530:	2900      	cmp	r1, #0
    d532:	d1f0      	bne.n	d516 <dtostrf+0x24e>
    d534:	705f      	strb	r7, [r3, #1]
    d536:	3302      	adds	r3, #2
    d538:	e7ee      	b.n	d518 <dtostrf+0x250>
    d53a:	461a      	mov	r2, r3
	}
	if (width < 0) {
    d53c:	2d00      	cmp	r5, #0
    d53e:	db05      	blt.n	d54c <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d540:	2300      	movs	r3, #0
    d542:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d544:	4620      	mov	r0, r4
    d546:	e07e      	b.n	d646 <dtostrf+0x37e>
	while (p < e) {
    d548:	461a      	mov	r2, r3
    d54a:	e7f7      	b.n	d53c <dtostrf+0x274>
		pad = (reqd + width) * -1;
    d54c:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    d54e:	43f0      	mvns	r0, r6
    d550:	2e00      	cmp	r6, #0
    d552:	daf5      	bge.n	d540 <dtostrf+0x278>
    d554:	4611      	mov	r1, r2
    d556:	2520      	movs	r5, #32
    d558:	f801 5b01 	strb.w	r5, [r1], #1
    d55c:	f1c1 0301 	rsb	r3, r1, #1
    d560:	4403      	add	r3, r0
    d562:	4413      	add	r3, r2
    d564:	2b00      	cmp	r3, #0
    d566:	dcf7      	bgt.n	d558 <dtostrf+0x290>
    d568:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d56c:	3001      	adds	r0, #1
    d56e:	4402      	add	r2, r0
    d570:	e7e6      	b.n	d540 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d572:	224e      	movs	r2, #78	; 0x4e
    d574:	701a      	strb	r2, [r3, #0]
    d576:	2141      	movs	r1, #65	; 0x41
    d578:	7059      	strb	r1, [r3, #1]
    d57a:	1cd8      	adds	r0, r3, #3
    d57c:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d57e:	e042      	b.n	d606 <dtostrf+0x33e>
			while (awidth) {
    d580:	4623      	mov	r3, r4
    d582:	e6f7      	b.n	d374 <dtostrf+0xac>
		if (width<0) {
    d584:	4623      	mov	r3, r4
    d586:	e6f5      	b.n	d374 <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d588:	2249      	movs	r2, #73	; 0x49
    d58a:	701a      	strb	r2, [r3, #0]
    d58c:	224e      	movs	r2, #78	; 0x4e
    d58e:	705a      	strb	r2, [r3, #1]
    d590:	1cd8      	adds	r0, r3, #3
    d592:	2246      	movs	r2, #70	; 0x46
    d594:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d596:	e054      	b.n	d642 <dtostrf+0x37a>
			while (awidth) {
    d598:	4623      	mov	r3, r4
    d59a:	e6c8      	b.n	d32e <dtostrf+0x66>
		if (width<0) {
    d59c:	4623      	mov	r3, r4
    d59e:	e6c6      	b.n	d32e <dtostrf+0x66>
	e = p + reqd;
    d5a0:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d5a2:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d5a6:	f1b9 0f00 	cmp.w	r9, #0
    d5aa:	f73f af5d 	bgt.w	d468 <dtostrf+0x1a0>
	p = buf;
    d5ae:	4623      	mov	r3, r4
    d5b0:	e770      	b.n	d494 <dtostrf+0x1cc>
    d5b2:	bf00      	nop
    d5b4:	7f7fffff 	.word	0x7f7fffff
    d5b8:	20002a40 	.word	0x20002a40
    d5bc:	20002a44 	.word	0x20002a44
		if (width<0) {
    d5c0:	2800      	cmp	r0, #0
    d5c2:	dbdf      	blt.n	d584 <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d5c4:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d5c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d5ca:	ee18 3a10 	vmov	r3, s16
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d5d4:	fe67 7a87 	vselge.f32	s15, s15, s14
    d5d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d5e0:	f53f aedd 	bmi.w	d39e <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d5e4:	234e      	movs	r3, #78	; 0x4e
    d5e6:	7023      	strb	r3, [r4, #0]
    d5e8:	2141      	movs	r1, #65	; 0x41
    d5ea:	7061      	strb	r1, [r4, #1]
    d5ec:	1ce0      	adds	r0, r4, #3
    d5ee:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d5f0:	b14a      	cbz	r2, d606 <dtostrf+0x33e>
    d5f2:	4615      	mov	r5, r2
    d5f4:	3203      	adds	r2, #3
    d5f6:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d5f8:	4602      	mov	r2, r0
			*buf++ = ' ';
    d5fa:	2120      	movs	r1, #32
    d5fc:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    d600:	4293      	cmp	r3, r2
    d602:	d1fb      	bne.n	d5fc <dtostrf+0x334>
			*buf++ = ' ';
    d604:	4428      	add	r0, r5
		*buf = 0;
    d606:	2300      	movs	r3, #0
    d608:	7003      	strb	r3, [r0, #0]
		return buf;
    d60a:	e01c      	b.n	d646 <dtostrf+0x37e>
		if (width<0) {
    d60c:	2800      	cmp	r0, #0
    d60e:	dbc5      	blt.n	d59c <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d610:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    d612:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d61a:	f53f aec2 	bmi.w	d3a2 <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d61e:	2349      	movs	r3, #73	; 0x49
    d620:	7023      	strb	r3, [r4, #0]
    d622:	234e      	movs	r3, #78	; 0x4e
    d624:	7063      	strb	r3, [r4, #1]
    d626:	1ce0      	adds	r0, r4, #3
    d628:	2346      	movs	r3, #70	; 0x46
    d62a:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d62c:	b14a      	cbz	r2, d642 <dtostrf+0x37a>
    d62e:	4615      	mov	r5, r2
    d630:	3203      	adds	r2, #3
    d632:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d634:	4603      	mov	r3, r0
			*buf++ = ' ';
    d636:	2120      	movs	r1, #32
    d638:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    d63c:	429a      	cmp	r2, r3
    d63e:	d1fb      	bne.n	d638 <dtostrf+0x370>
			*buf++ = ' ';
    d640:	4428      	add	r0, r5
		*buf = 0;
    d642:	2300      	movs	r3, #0
    d644:	7003      	strb	r3, [r0, #0]
}
    d646:	b004      	add	sp, #16
    d648:	ecbd 8b02 	vpop	{d8}
    d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d650 <flexpwmWrite>:
{
    d650:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    d652:	f04f 0c01 	mov.w	ip, #1
    d656:	fa0c fc01 	lsl.w	ip, ip, r1
    d65a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    d65e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    d662:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    d666:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    d66a:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    d66e:	fb0e 3303 	mla	r3, lr, r3, r3
    d672:	4c27      	ldr	r4, [pc, #156]	; (d710 <flexpwmWrite+0xc0>)
    d674:	7824      	ldrb	r4, [r4, #0]
    d676:	40e3      	lsrs	r3, r4
    d678:	4573      	cmp	r3, lr
    d67a:	bf28      	it	cs
    d67c:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d67e:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    d682:	b2a4      	uxth	r4, r4
    d684:	012e      	lsls	r6, r5, #4
    d686:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    d68a:	4334      	orrs	r4, r6
    d68c:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    d690:	2a01      	cmp	r2, #1
    d692:	d01f      	beq.n	d6d4 <flexpwmWrite+0x84>
    d694:	2a02      	cmp	r2, #2
    d696:	d02d      	beq.n	d6f4 <flexpwmWrite+0xa4>
    d698:	b14a      	cbz	r2, d6ae <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d69a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d69e:	b29b      	uxth	r3, r3
    d6a0:	f00c 0c0f 	and.w	ip, ip, #15
    d6a4:	ea43 0c0c 	orr.w	ip, r3, ip
    d6a8:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    d6ac:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    d6ae:	ebae 0e03 	sub.w	lr, lr, r3
    d6b2:	fa1f fe8e 	uxth.w	lr, lr
    d6b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d6ba:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d6be:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    d6c2:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d6c6:	b29b      	uxth	r3, r3
    d6c8:	f00c 020f 	and.w	r2, ip, #15
    d6cc:	4313      	orrs	r3, r2
    d6ce:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d6d2:	e7e2      	b.n	d69a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    d6d4:	b29b      	uxth	r3, r3
    d6d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d6da:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d6de:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    d6e0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d6e4:	b29b      	uxth	r3, r3
    d6e6:	022d      	lsls	r5, r5, #8
    d6e8:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    d6ec:	432b      	orrs	r3, r5
    d6ee:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d6f2:	e7d2      	b.n	d69a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    d6f4:	b29b      	uxth	r3, r3
    d6f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d6fa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d6fe:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    d700:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d704:	b29b      	uxth	r3, r3
    d706:	431e      	orrs	r6, r3
    d708:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    d70c:	e7c5      	b.n	d69a <flexpwmWrite+0x4a>
    d70e:	bf00      	nop
    d710:	200038bd 	.word	0x200038bd

0000d714 <flexpwmFrequency>:
{
    d714:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    d716:	f04f 0c01 	mov.w	ip, #1
    d71a:	fa0c fc01 	lsl.w	ip, ip, r1
    d71e:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    d722:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d726:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d72a:	89dc      	ldrh	r4, [r3, #14]
    d72c:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d72e:	4b32      	ldr	r3, [pc, #200]	; (d7f8 <flexpwmFrequency+0xe4>)
    d730:	ed93 7a00 	vldr	s14, [r3]
    d734:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d738:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d73c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d740:	ee77 7a87 	vadd.f32	s15, s15, s14
    d744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d748:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    d74c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    d750:	d350      	bcc.n	d7f4 <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    d752:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    d754:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    d758:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    d75a:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    d75c:	4572      	cmp	r2, lr
    d75e:	d901      	bls.n	d764 <flexpwmFrequency+0x50>
    d760:	2b06      	cmp	r3, #6
    d762:	d9f9      	bls.n	d758 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    d764:	2a02      	cmp	r2, #2
    d766:	bf38      	it	cc
    d768:	2202      	movcc	r2, #2
    d76a:	f64f 7eff 	movw	lr, #65535	; 0xffff
    d76e:	4572      	cmp	r2, lr
    d770:	bf28      	it	cs
    d772:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d774:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    d778:	fa1f fe8e 	uxth.w	lr, lr
    d77c:	012d      	lsls	r5, r5, #4
    d77e:	b2ed      	uxtb	r5, r5
    d780:	ea4e 0e05 	orr.w	lr, lr, r5
    d784:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    d788:	011b      	lsls	r3, r3, #4
    d78a:	b2db      	uxtb	r3, r3
    d78c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d790:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    d794:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    d798:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    d79c:	1e53      	subs	r3, r2, #1
    d79e:	b29b      	uxth	r3, r3
    d7a0:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    d7a4:	f8be 300a 	ldrh.w	r3, [lr, #10]
    d7a8:	b29b      	uxth	r3, r3
    d7aa:	fb02 f303 	mul.w	r3, r2, r3
    d7ae:	fbb3 f3f4 	udiv	r3, r3, r4
    d7b2:	b29b      	uxth	r3, r3
    d7b4:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    d7b8:	f8be 3016 	ldrh.w	r3, [lr, #22]
    d7bc:	b29b      	uxth	r3, r3
    d7be:	fb02 f303 	mul.w	r3, r2, r3
    d7c2:	fbb3 f3f4 	udiv	r3, r3, r4
    d7c6:	b29b      	uxth	r3, r3
    d7c8:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    d7cc:	f8be 301e 	ldrh.w	r3, [lr, #30]
    d7d0:	b29b      	uxth	r3, r3
    d7d2:	fb02 f303 	mul.w	r3, r2, r3
    d7d6:	fbb3 f3f4 	udiv	r3, r3, r4
    d7da:	b29b      	uxth	r3, r3
    d7dc:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d7e0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d7e4:	b29b      	uxth	r3, r3
    d7e6:	f00c 0c0f 	and.w	ip, ip, #15
    d7ea:	ea43 030c 	orr.w	r3, r3, ip
    d7ee:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d7f2:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    d7f4:	2300      	movs	r3, #0
    d7f6:	e7b5      	b.n	d764 <flexpwmFrequency+0x50>
    d7f8:	2000312c 	.word	0x2000312c

0000d7fc <quadtimerWrite>:
{
    d7fc:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    d7fe:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    d802:	f8be c006 	ldrh.w	ip, [lr, #6]
    d806:	fa1f fc8c 	uxth.w	ip, ip
    d80a:	f8be 3010 	ldrh.w	r3, [lr, #16]
    d80e:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    d812:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    d816:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    d81a:	fb0c f202 	mul.w	r2, ip, r2
    d81e:	4c08      	ldr	r4, [pc, #32]	; (d840 <quadtimerWrite+0x44>)
    d820:	7824      	ldrb	r4, [r4, #0]
    d822:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    d824:	4594      	cmp	ip, r2
    d826:	bf98      	it	ls
    d828:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    d82a:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    d82c:	f1c3 0301 	rsb	r3, r3, #1
    d830:	b29b      	uxth	r3, r3
    d832:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    d836:	b292      	uxth	r2, r2
    d838:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    d83c:	8202      	strh	r2, [r0, #16]
}
    d83e:	bd10      	pop	{r4, pc}
    d840:	200038bd 	.word	0x200038bd

0000d844 <quadtimerFrequency>:
{
    d844:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d846:	4b23      	ldr	r3, [pc, #140]	; (d8d4 <quadtimerFrequency+0x90>)
    d848:	ed93 7a00 	vldr	s14, [r3]
    d84c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d850:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d854:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d858:	ee77 7a87 	vadd.f32	s15, s15, s14
    d85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d860:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    d864:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    d868:	4293      	cmp	r3, r2
    d86a:	d930      	bls.n	d8ce <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    d86c:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    d86e:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    d872:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    d874:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    d876:	4563      	cmp	r3, ip
    d878:	d901      	bls.n	d87e <quadtimerFrequency+0x3a>
    d87a:	2a06      	cmp	r2, #6
    d87c:	d9f9      	bls.n	d872 <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    d87e:	2b02      	cmp	r3, #2
    d880:	bf38      	it	cc
    d882:	2302      	movcc	r3, #2
    d884:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    d888:	4563      	cmp	r3, ip
    d88a:	bf28      	it	cs
    d88c:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    d88e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d892:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    d896:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d89a:	88c8      	ldrh	r0, [r1, #6]
    d89c:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d89e:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d8a2:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d8a6:	4470      	add	r0, lr
    d8a8:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    d8ac:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    d8ae:	f1c3 0301 	rsb	r3, r3, #1
    d8b2:	b29b      	uxth	r3, r3
    d8b4:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    d8b6:	b280      	uxth	r0, r0
    d8b8:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d8ba:	3208      	adds	r2, #8
    d8bc:	0252      	lsls	r2, r2, #9
    d8be:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    d8c2:	f242 0326 	movw	r3, #8230	; 0x2026
    d8c6:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d8c8:	818b      	strh	r3, [r1, #12]
}
    d8ca:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    d8ce:	2200      	movs	r2, #0
    d8d0:	e7d5      	b.n	d87e <quadtimerFrequency+0x3a>
    d8d2:	bf00      	nop
    d8d4:	2000312c 	.word	0x2000312c

0000d8d8 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d8d8:	2836      	cmp	r0, #54	; 0x36
    d8da:	d83f      	bhi.n	d95c <analogWrite+0x84>
{
    d8dc:	b538      	push	{r3, r4, r5, lr}
    d8de:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    d8e0:	4b1f      	ldr	r3, [pc, #124]	; (d960 <analogWrite+0x88>)
    d8e2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    d8e6:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d8ea:	2b01      	cmp	r3, #1
    d8ec:	d014      	beq.n	d918 <analogWrite+0x40>
	} else if (info->type == 2) {
    d8ee:	2b02      	cmp	r3, #2
    d8f0:	d12b      	bne.n	d94a <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    d8f2:	f895 c001 	ldrb.w	ip, [r5, #1]
    d8f6:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d8fa:	2b01      	cmp	r3, #1
    d8fc:	d02a      	beq.n	d954 <analogWrite+0x7c>
    d8fe:	2b02      	cmp	r3, #2
    d900:	d02a      	beq.n	d958 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d902:	4818      	ldr	r0, [pc, #96]	; (d964 <analogWrite+0x8c>)
    d904:	4a18      	ldr	r2, [pc, #96]	; (d968 <analogWrite+0x90>)
    d906:	2b00      	cmp	r3, #0
    d908:	bf08      	it	eq
    d90a:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    d90c:	b28a      	uxth	r2, r1
    d90e:	f00c 0103 	and.w	r1, ip, #3
    d912:	f7ff ff73 	bl	d7fc <quadtimerWrite>
    d916:	e012      	b.n	d93e <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    d918:	f895 c001 	ldrb.w	ip, [r5, #1]
    d91c:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d920:	2b01      	cmp	r3, #1
    d922:	d013      	beq.n	d94c <analogWrite+0x74>
    d924:	2b02      	cmp	r3, #2
    d926:	d013      	beq.n	d950 <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d928:	4810      	ldr	r0, [pc, #64]	; (d96c <analogWrite+0x94>)
    d92a:	4a11      	ldr	r2, [pc, #68]	; (d970 <analogWrite+0x98>)
    d92c:	2b00      	cmp	r3, #0
    d92e:	bf08      	it	eq
    d930:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    d932:	b28b      	uxth	r3, r1
    d934:	78aa      	ldrb	r2, [r5, #2]
    d936:	f00c 0103 	and.w	r1, ip, #3
    d93a:	f7ff fe89 	bl	d650 <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    d93e:	4b0d      	ldr	r3, [pc, #52]	; (d974 <analogWrite+0x9c>)
    d940:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    d944:	685b      	ldr	r3, [r3, #4]
    d946:	78ea      	ldrb	r2, [r5, #3]
    d948:	601a      	str	r2, [r3, #0]
}
    d94a:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    d94c:	480a      	ldr	r0, [pc, #40]	; (d978 <analogWrite+0xa0>)
    d94e:	e7f0      	b.n	d932 <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d950:	480a      	ldr	r0, [pc, #40]	; (d97c <analogWrite+0xa4>)
    d952:	e7ee      	b.n	d932 <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    d954:	480a      	ldr	r0, [pc, #40]	; (d980 <analogWrite+0xa8>)
    d956:	e7d9      	b.n	d90c <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d958:	480a      	ldr	r0, [pc, #40]	; (d984 <analogWrite+0xac>)
    d95a:	e7d7      	b.n	d90c <analogWrite+0x34>
    d95c:	4770      	bx	lr
    d95e:	bf00      	nop
    d960:	20002b2c 	.word	0x20002b2c
    d964:	401e8000 	.word	0x401e8000
    d968:	401dc000 	.word	0x401dc000
    d96c:	403e8000 	.word	0x403e8000
    d970:	403dc000 	.word	0x403dc000
    d974:	200026d0 	.word	0x200026d0
    d978:	403e0000 	.word	0x403e0000
    d97c:	403e4000 	.word	0x403e4000
    d980:	401e0000 	.word	0x401e0000
    d984:	401e4000 	.word	0x401e4000

0000d988 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d988:	2836      	cmp	r0, #54	; 0x36
    d98a:	d835      	bhi.n	d9f8 <analogWriteFrequency+0x70>
{
    d98c:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    d98e:	4b1b      	ldr	r3, [pc, #108]	; (d9fc <analogWriteFrequency+0x74>)
    d990:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    d994:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d998:	2b01      	cmp	r3, #1
    d99a:	d002      	beq.n	d9a2 <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    d99c:	2b02      	cmp	r3, #2
    d99e:	d016      	beq.n	d9ce <analogWriteFrequency+0x46>
}
    d9a0:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    d9a2:	7851      	ldrb	r1, [r2, #1]
    d9a4:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d9a8:	2b01      	cmp	r3, #1
    d9aa:	d00c      	beq.n	d9c6 <analogWriteFrequency+0x3e>
    d9ac:	2b02      	cmp	r3, #2
    d9ae:	d00c      	beq.n	d9ca <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d9b0:	4813      	ldr	r0, [pc, #76]	; (da00 <analogWriteFrequency+0x78>)
    d9b2:	4c14      	ldr	r4, [pc, #80]	; (da04 <analogWriteFrequency+0x7c>)
    d9b4:	2b00      	cmp	r3, #0
    d9b6:	bf08      	it	eq
    d9b8:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    d9ba:	7892      	ldrb	r2, [r2, #2]
    d9bc:	f001 0103 	and.w	r1, r1, #3
    d9c0:	f7ff fea8 	bl	d714 <flexpwmFrequency>
    d9c4:	e7ec      	b.n	d9a0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d9c6:	4810      	ldr	r0, [pc, #64]	; (da08 <analogWriteFrequency+0x80>)
    d9c8:	e7f7      	b.n	d9ba <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d9ca:	4810      	ldr	r0, [pc, #64]	; (da0c <analogWriteFrequency+0x84>)
    d9cc:	e7f5      	b.n	d9ba <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    d9ce:	7851      	ldrb	r1, [r2, #1]
    d9d0:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d9d4:	2b01      	cmp	r3, #1
    d9d6:	d00b      	beq.n	d9f0 <analogWriteFrequency+0x68>
    d9d8:	2b02      	cmp	r3, #2
    d9da:	d00b      	beq.n	d9f4 <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d9dc:	480c      	ldr	r0, [pc, #48]	; (da10 <analogWriteFrequency+0x88>)
    d9de:	4a0d      	ldr	r2, [pc, #52]	; (da14 <analogWriteFrequency+0x8c>)
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	bf08      	it	eq
    d9e4:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    d9e6:	f001 0103 	and.w	r1, r1, #3
    d9ea:	f7ff ff2b 	bl	d844 <quadtimerFrequency>
    d9ee:	e7d7      	b.n	d9a0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d9f0:	4809      	ldr	r0, [pc, #36]	; (da18 <analogWriteFrequency+0x90>)
    d9f2:	e7f8      	b.n	d9e6 <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d9f4:	4809      	ldr	r0, [pc, #36]	; (da1c <analogWriteFrequency+0x94>)
    d9f6:	e7f6      	b.n	d9e6 <analogWriteFrequency+0x5e>
    d9f8:	4770      	bx	lr
    d9fa:	bf00      	nop
    d9fc:	20002b2c 	.word	0x20002b2c
    da00:	403e8000 	.word	0x403e8000
    da04:	403dc000 	.word	0x403dc000
    da08:	403e0000 	.word	0x403e0000
    da0c:	403e4000 	.word	0x403e4000
    da10:	401e8000 	.word	0x401e8000
    da14:	401dc000 	.word	0x401dc000
    da18:	401e0000 	.word	0x401e0000
    da1c:	401e4000 	.word	0x401e4000

0000da20 <flexpwm_init>:
{
    da20:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    da22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    da26:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    da2a:	230f      	movs	r3, #15
    da2c:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    da30:	2100      	movs	r1, #0
    da32:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    da36:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    da3a:	b29b      	uxth	r3, r3
    da3c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    da40:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    da44:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    da48:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    da4c:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    da4e:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    da52:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    da56:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    da5a:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    da5c:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    da60:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    da62:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    da64:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    da66:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    da68:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    da6c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    da6e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    da70:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    da72:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    da74:	3101      	adds	r1, #1
    da76:	2904      	cmp	r1, #4
    da78:	d1eb      	bne.n	da52 <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    da7a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    da7e:	b29b      	uxth	r3, r3
    da80:	f043 030f 	orr.w	r3, r3, #15
    da84:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    da88:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    da8c:	b29b      	uxth	r3, r3
    da8e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    da92:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    da96:	bd10      	pop	{r4, pc}

0000da98 <quadtimer_init>:
{
    da98:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    da9a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    da9c:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    da9e:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    daa0:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    daa4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    daa8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    daac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    dab0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    dab4:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    dab6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    dab8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    daba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    dabc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    dabe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    dac2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    dac4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    dac8:	3201      	adds	r2, #1
    daca:	2a04      	cmp	r2, #4
    dacc:	d1ee      	bne.n	daac <quadtimer_init+0x14>
}
    dace:	bd70      	pop	{r4, r5, r6, pc}

0000dad0 <pwm_init>:
{
    dad0:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    dad2:	4b10      	ldr	r3, [pc, #64]	; (db14 <pwm_init+0x44>)
    dad4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    dad6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    dada:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dadc:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    dae0:	4a0d      	ldr	r2, [pc, #52]	; (db18 <pwm_init+0x48>)
    dae2:	430a      	orrs	r2, r1
    dae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    dae8:	480c      	ldr	r0, [pc, #48]	; (db1c <pwm_init+0x4c>)
    daea:	f7ff ff99 	bl	da20 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    daee:	480c      	ldr	r0, [pc, #48]	; (db20 <pwm_init+0x50>)
    daf0:	f7ff ff96 	bl	da20 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    daf4:	480b      	ldr	r0, [pc, #44]	; (db24 <pwm_init+0x54>)
    daf6:	f7ff ff93 	bl	da20 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    dafa:	480b      	ldr	r0, [pc, #44]	; (db28 <pwm_init+0x58>)
    dafc:	f7ff ff90 	bl	da20 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    db00:	480a      	ldr	r0, [pc, #40]	; (db2c <pwm_init+0x5c>)
    db02:	f7ff ffc9 	bl	da98 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    db06:	480a      	ldr	r0, [pc, #40]	; (db30 <pwm_init+0x60>)
    db08:	f7ff ffc6 	bl	da98 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    db0c:	4809      	ldr	r0, [pc, #36]	; (db34 <pwm_init+0x64>)
    db0e:	f7ff ffc3 	bl	da98 <quadtimer_init>
}
    db12:	bd08      	pop	{r3, pc}
    db14:	400fc000 	.word	0x400fc000
    db18:	fc030000 	.word	0xfc030000
    db1c:	403dc000 	.word	0x403dc000
    db20:	403e0000 	.word	0x403e0000
    db24:	403e4000 	.word	0x403e4000
    db28:	403e8000 	.word	0x403e8000
    db2c:	401dc000 	.word	0x401dc000
    db30:	401e0000 	.word	0x401e0000
    db34:	401e4000 	.word	0x401e4000

0000db38 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    db38:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    db3a:	4a05      	ldr	r2, [pc, #20]	; (db50 <analogWriteRes+0x18>)
    db3c:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    db3e:	2b10      	cmp	r3, #16
    db40:	bf28      	it	cs
    db42:	2310      	movcs	r3, #16
    db44:	2b01      	cmp	r3, #1
    db46:	bf38      	it	cc
    db48:	2301      	movcc	r3, #1
    db4a:	7013      	strb	r3, [r2, #0]
	return prior;
}
    db4c:	4770      	bx	lr
    db4e:	bf00      	nop
    db50:	200038bd 	.word	0x200038bd

0000db54 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    db54:	4b07      	ldr	r3, [pc, #28]	; (db74 <rtc_get+0x20>)
    db56:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    db58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    db5a:	4a06      	ldr	r2, [pc, #24]	; (db74 <rtc_get+0x20>)
    db5c:	4684      	mov	ip, r0
    db5e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    db60:	4619      	mov	r1, r3
    db62:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    db64:	4299      	cmp	r1, r3
    db66:	d1f9      	bne.n	db5c <rtc_get+0x8>
    db68:	4584      	cmp	ip, r0
    db6a:	d1f7      	bne.n	db5c <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    db6c:	0bdb      	lsrs	r3, r3, #15
}
    db6e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    db72:	4770      	bx	lr
    db74:	400d4000 	.word	0x400d4000

0000db78 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    db78:	4770      	bx	lr
	...

0000db7c <unused_interrupt_vector>:
	__disable_irq();
    db7c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    db7e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    db82:	4c52      	ldr	r4, [pc, #328]	; (dccc <unused_interrupt_vector+0x150>)
    db84:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    db88:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    db8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    db90:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    db94:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    db98:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    db9c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    dba0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    dba4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    dba8:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    dbac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    dbb0:	6993      	ldr	r3, [r2, #24]
    dbb2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    dbb6:	69d3      	ldr	r3, [r2, #28]
    dbb8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    dbbc:	f000 f8d2 	bl	dd64 <tempmonGetTemp>
    dbc0:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    dbc4:	f7ff ffc6 	bl	db54 <rtc_get>
    dbc8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    dbcc:	230b      	movs	r3, #11
    dbce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    dbd2:	483f      	ldr	r0, [pc, #252]	; (dcd0 <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    dbd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dbd8:	493e      	ldr	r1, [pc, #248]	; (dcd4 <unused_interrupt_vector+0x158>)
	while (p < end) {
    dbda:	4d3f      	ldr	r5, [pc, #252]	; (dcd8 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    dbdc:	6803      	ldr	r3, [r0, #0]
    dbde:	3004      	adds	r0, #4
    dbe0:	405a      	eors	r2, r3
    dbe2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dbe4:	f002 0301 	and.w	r3, r2, #1
    dbe8:	fb01 f303 	mul.w	r3, r1, r3
    dbec:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    dbf0:	3c01      	subs	r4, #1
    dbf2:	d1f7      	bne.n	dbe4 <unused_interrupt_vector+0x68>
	while (p < end) {
    dbf4:	42a8      	cmp	r0, r5
    dbf6:	d1f1      	bne.n	dbdc <unused_interrupt_vector+0x60>
	info->crc = crc;
    dbf8:	4b34      	ldr	r3, [pc, #208]	; (dccc <unused_interrupt_vector+0x150>)
    dbfa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    dbfe:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    dc02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dc06:	4a32      	ldr	r2, [pc, #200]	; (dcd0 <unused_interrupt_vector+0x154>)
    dc08:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    dc0c:	3220      	adds	r2, #32
    dc0e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    dc12:	f3bf 8f4f 	dsb	sy
	asm("isb");
    dc16:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    dc1a:	4a30      	ldr	r2, [pc, #192]	; (dcdc <unused_interrupt_vector+0x160>)
    dc1c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    dc1e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    dc22:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    dc24:	4b2e      	ldr	r3, [pc, #184]	; (dce0 <unused_interrupt_vector+0x164>)
    dc26:	2102      	movs	r1, #2
    dc28:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    dc2a:	69d3      	ldr	r3, [r2, #28]
    dc2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    dc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc34:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dc36:	4b2b      	ldr	r3, [pc, #172]	; (dce4 <unused_interrupt_vector+0x168>)
    dc38:	681a      	ldr	r2, [r3, #0]
    dc3a:	4b2b      	ldr	r3, [pc, #172]	; (dce8 <unused_interrupt_vector+0x16c>)
    dc3c:	429a      	cmp	r2, r3
    dc3e:	d81b      	bhi.n	dc78 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    dc40:	4b27      	ldr	r3, [pc, #156]	; (dce0 <unused_interrupt_vector+0x164>)
    dc42:	2200      	movs	r2, #0
    dc44:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    dc46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    dc4a:	4a28      	ldr	r2, [pc, #160]	; (dcec <unused_interrupt_vector+0x170>)
    dc4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    dc50:	2201      	movs	r2, #1
    dc52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    dc56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dc5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    dc62:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    dc66:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    dc6a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    dc6e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    dc72:	4d1b      	ldr	r5, [pc, #108]	; (dce0 <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    dc74:	2601      	movs	r6, #1
    dc76:	e005      	b.n	dc84 <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dc78:	4618      	mov	r0, r3
    dc7a:	f7ff f845 	bl	cd08 <set_arm_clock>
    dc7e:	e7df      	b.n	dc40 <unused_interrupt_vector+0xc4>
		usb_isr();
    dc80:	f000 f9e8 	bl	e054 <usb_isr>
		if (PIT_TFLG0) {
    dc84:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    dc88:	2b00      	cmp	r3, #0
    dc8a:	d0f9      	beq.n	dc80 <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    dc8c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    dc90:	3401      	adds	r4, #1
    dc92:	2c4f      	cmp	r4, #79	; 0x4f
    dc94:	d9f4      	bls.n	dc80 <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    dc96:	4b16      	ldr	r3, [pc, #88]	; (dcf0 <unused_interrupt_vector+0x174>)
    dc98:	2202      	movs	r2, #2
    dc9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    dc9e:	4b15      	ldr	r3, [pc, #84]	; (dcf4 <unused_interrupt_vector+0x178>)
    dca0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dca4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dca6:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    dcaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    dcae:	b93b      	cbnz	r3, dcc0 <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    dcb0:	4811      	ldr	r0, [pc, #68]	; (dcf8 <unused_interrupt_vector+0x17c>)
    dcb2:	4912      	ldr	r1, [pc, #72]	; (dcfc <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dcb4:	4a0a      	ldr	r2, [pc, #40]	; (dce0 <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    dcb6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dcb8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d0fa      	beq.n	dcb6 <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    dcc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dcc4:	4a0e      	ldr	r2, [pc, #56]	; (dd00 <unused_interrupt_vector+0x184>)
    dcc6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    dcca:	e7fe      	b.n	dcca <unused_interrupt_vector+0x14e>
    dccc:	2027ff00 	.word	0x2027ff00
    dcd0:	2027ff80 	.word	0x2027ff80
    dcd4:	edb88320 	.word	0xedb88320
    dcd8:	2027ffa8 	.word	0x2027ffa8
    dcdc:	400fc000 	.word	0x400fc000
    dce0:	40084000 	.word	0x40084000
    dce4:	20003130 	.word	0x20003130
    dce8:	0bcd3d80 	.word	0x0bcd3d80
    dcec:	00249f00 	.word	0x00249f00
    dcf0:	402e0000 	.word	0x402e0000
    dcf4:	400d9000 	.word	0x400d9000
    dcf8:	400f8000 	.word	0x400f8000
    dcfc:	0bad00f1 	.word	0x0bad00f1
    dd00:	05fa0004 	.word	0x05fa0004

0000dd04 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    dd04:	b508      	push	{r3, lr}
    dd06:	4603      	mov	r3, r0
        char *prev = __brkval;
    dd08:	4a08      	ldr	r2, [pc, #32]	; (dd2c <_sbrk+0x28>)
    dd0a:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    dd0c:	b133      	cbz	r3, dd1c <_sbrk+0x18>
    dd0e:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    dd10:	4402      	add	r2, r0
    dd12:	4b07      	ldr	r3, [pc, #28]	; (dd30 <_sbrk+0x2c>)
    dd14:	429a      	cmp	r2, r3
    dd16:	d802      	bhi.n	dd1e <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    dd18:	4b04      	ldr	r3, [pc, #16]	; (dd2c <_sbrk+0x28>)
    dd1a:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    dd1c:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    dd1e:	f002 ff37 	bl	10b90 <__errno>
    dd22:	230c      	movs	r3, #12
    dd24:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    dd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd2a:	e7f7      	b.n	dd1c <_sbrk+0x18>
    dd2c:	200031e8 	.word	0x200031e8
    dd30:	20280000 	.word	0x20280000

0000dd34 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    dd34:	2000      	movs	r0, #0
    dd36:	4770      	bx	lr

0000dd38 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    dd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd3c:	4770      	bx	lr

0000dd3e <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    dd3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    dd42:	604b      	str	r3, [r1, #4]
	return 0;
}
    dd44:	2000      	movs	r0, #0
    dd46:	4770      	bx	lr

0000dd48 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    dd48:	2001      	movs	r0, #1
    dd4a:	4770      	bx	lr

0000dd4c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    dd4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd50:	4770      	bx	lr

0000dd52 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    dd52:	bf30      	wfi
    dd54:	e7fd      	b.n	dd52 <__cxa_pure_virtual>

0000dd56 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    dd56:	bf30      	wfi
    dd58:	e7fd      	b.n	dd56 <abort>

0000dd5a <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    dd5a:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    dd5c:	f7ff ff0e 	bl	db7c <unused_interrupt_vector>
}
    dd60:	bd08      	pop	{r3, pc}
	...

0000dd64 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    dd64:	4a13      	ldr	r2, [pc, #76]	; (ddb4 <tempmonGetTemp+0x50>)
    dd66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    dd6a:	f013 0f04 	tst.w	r3, #4
    dd6e:	d0fa      	beq.n	dd66 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    dd70:	4b10      	ldr	r3, [pc, #64]	; (ddb4 <tempmonGetTemp+0x50>)
    dd72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    dd76:	4a10      	ldr	r2, [pc, #64]	; (ddb8 <tempmonGetTemp+0x54>)
    dd78:	ed92 7a00 	vldr	s14, [r2]
    dd7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    dd80:	f3c3 230b 	ubfx	r3, r3, #8, #12
    dd84:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    dd88:	eef8 7a67 	vcvt.f32.u32	s15, s15
    dd8c:	4b0b      	ldr	r3, [pc, #44]	; (ddbc <tempmonGetTemp+0x58>)
    dd8e:	edd3 6a00 	vldr	s13, [r3]
    dd92:	eef8 6a66 	vcvt.f32.u32	s13, s13
    dd96:	ee77 7ae6 	vsub.f32	s15, s15, s13
    dd9a:	4b09      	ldr	r3, [pc, #36]	; (ddc0 <tempmonGetTemp+0x5c>)
    dd9c:	edd3 6a00 	vldr	s13, [r3]
    dda0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dda4:	4b07      	ldr	r3, [pc, #28]	; (ddc4 <tempmonGetTemp+0x60>)
    dda6:	edd3 6a00 	vldr	s13, [r3]
    ddaa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    ddae:	ee37 0a40 	vsub.f32	s0, s14, s0
    ddb2:	4770      	bx	lr
    ddb4:	400d8100 	.word	0x400d8100
    ddb8:	2000510c 	.word	0x2000510c
    ddbc:	20005108 	.word	0x20005108
    ddc0:	20005110 	.word	0x20005110
    ddc4:	20005114 	.word	0x20005114

0000ddc8 <endpoint0_transmit>:
	if (len > 0) {
    ddc8:	468c      	mov	ip, r1
    ddca:	b319      	cbz	r1, de14 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    ddcc:	4b23      	ldr	r3, [pc, #140]	; (de5c <endpoint0_transmit+0x94>)
    ddce:	2101      	movs	r1, #1
    ddd0:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ddd2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    ddd6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    ddda:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dddc:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ddde:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dde2:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dde4:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dde8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ddea:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    ddee:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ddf0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ddf4:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ddf6:	491a      	ldr	r1, [pc, #104]	; (de60 <endpoint0_transmit+0x98>)
    ddf8:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    ddfa:	2300      	movs	r3, #0
    ddfc:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ddfe:	4919      	ldr	r1, [pc, #100]	; (de64 <endpoint0_transmit+0x9c>)
    de00:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    de04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    de08:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    de0c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    de10:	2b00      	cmp	r3, #0
    de12:	d1fb      	bne.n	de0c <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    de14:	4b14      	ldr	r3, [pc, #80]	; (de68 <endpoint0_transmit+0xa0>)
    de16:	2101      	movs	r1, #1
    de18:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    de1a:	2a00      	cmp	r2, #0
    de1c:	f248 0180 	movw	r1, #32896	; 0x8080
    de20:	bf08      	it	eq
    de22:	2180      	moveq	r1, #128	; 0x80
    de24:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    de26:	2000      	movs	r0, #0
    de28:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    de2a:	490d      	ldr	r1, [pc, #52]	; (de60 <endpoint0_transmit+0x98>)
    de2c:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    de2e:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    de30:	4b0c      	ldr	r3, [pc, #48]	; (de64 <endpoint0_transmit+0x9c>)
    de32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    de36:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    de3a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    de3e:	f041 0101 	orr.w	r1, r1, #1
    de42:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    de46:	1a12      	subs	r2, r2, r0
    de48:	bf18      	it	ne
    de4a:	2201      	movne	r2, #1
    de4c:	4b07      	ldr	r3, [pc, #28]	; (de6c <endpoint0_transmit+0xa4>)
    de4e:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    de50:	4a04      	ldr	r2, [pc, #16]	; (de64 <endpoint0_transmit+0x9c>)
    de52:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    de56:	2b00      	cmp	r3, #0
    de58:	d1fb      	bne.n	de52 <endpoint0_transmit+0x8a>
}
    de5a:	4770      	bx	lr
    de5c:	20003ee0 	.word	0x20003ee0
    de60:	20000000 	.word	0x20000000
    de64:	402e0000 	.word	0x402e0000
    de68:	20003ec0 	.word	0x20003ec0
    de6c:	20004f84 	.word	0x20004f84

0000de70 <endpoint0_receive>:
	if (len > 0) {
    de70:	468c      	mov	ip, r1
    de72:	b319      	cbz	r1, debc <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    de74:	4b24      	ldr	r3, [pc, #144]	; (df08 <endpoint0_receive+0x98>)
    de76:	2101      	movs	r1, #1
    de78:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    de7a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    de7e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    de82:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    de84:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    de86:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    de8a:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    de8c:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    de90:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    de92:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    de96:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    de98:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    de9c:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    de9e:	491b      	ldr	r1, [pc, #108]	; (df0c <endpoint0_receive+0x9c>)
    dea0:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    dea2:	2300      	movs	r3, #0
    dea4:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    dea6:	491a      	ldr	r1, [pc, #104]	; (df10 <endpoint0_receive+0xa0>)
    dea8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    deac:	f043 0301 	orr.w	r3, r3, #1
    deb0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    deb4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    deb8:	2b00      	cmp	r3, #0
    deba:	d1fb      	bne.n	deb4 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    debc:	4b15      	ldr	r3, [pc, #84]	; (df14 <endpoint0_receive+0xa4>)
    debe:	2101      	movs	r1, #1
    dec0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dec2:	2a00      	cmp	r2, #0
    dec4:	f248 0180 	movw	r1, #32896	; 0x8080
    dec8:	bf08      	it	eq
    deca:	2180      	moveq	r1, #128	; 0x80
    decc:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    dece:	2000      	movs	r0, #0
    ded0:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ded2:	490e      	ldr	r1, [pc, #56]	; (df0c <endpoint0_receive+0x9c>)
    ded4:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    ded6:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ded8:	4b0d      	ldr	r3, [pc, #52]	; (df10 <endpoint0_receive+0xa0>)
    deda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    dede:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    dee2:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    dee6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    deea:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    deee:	1a12      	subs	r2, r2, r0
    def0:	bf18      	it	ne
    def2:	2201      	movne	r2, #1
    def4:	0412      	lsls	r2, r2, #16
    def6:	4b08      	ldr	r3, [pc, #32]	; (df18 <endpoint0_receive+0xa8>)
    def8:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    defa:	4a05      	ldr	r2, [pc, #20]	; (df10 <endpoint0_receive+0xa0>)
    defc:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    df00:	2b00      	cmp	r3, #0
    df02:	d1fb      	bne.n	defc <endpoint0_receive+0x8c>
}
    df04:	4770      	bx	lr
    df06:	bf00      	nop
    df08:	20003ee0 	.word	0x20003ee0
    df0c:	20000000 	.word	0x20000000
    df10:	402e0000 	.word	0x402e0000
    df14:	20003ec0 	.word	0x20003ec0
    df18:	20004f84 	.word	0x20004f84

0000df1c <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    df1c:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    df1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    df20:	b11b      	cbz	r3, df2a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    df22:	6853      	ldr	r3, [r2, #4]
    df24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    df28:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    df2a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    df2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    df2e:	b33b      	cbz	r3, df80 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    df30:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    df32:	4b1a      	ldr	r3, [pc, #104]	; (df9c <schedule_transfer+0x80>)
    df34:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    df38:	420b      	tst	r3, r1
    df3a:	d12b      	bne.n	df94 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    df3c:	4b18      	ldr	r3, [pc, #96]	; (dfa0 <schedule_transfer+0x84>)
    df3e:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    df40:	4b16      	ldr	r3, [pc, #88]	; (df9c <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    df42:	4e17      	ldr	r6, [pc, #92]	; (dfa0 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    df44:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    df48:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    df4c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    df50:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    df54:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    df58:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    df5c:	d104      	bne.n	df68 <schedule_transfer+0x4c>
    df5e:	6874      	ldr	r4, [r6, #4]
    df60:	1be4      	subs	r4, r4, r7
    df62:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    df66:	d3ed      	bcc.n	df44 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    df68:	4229      	tst	r1, r5
    df6a:	d113      	bne.n	df94 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    df6c:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    df6e:	2300      	movs	r3, #0
    df70:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    df72:	4c0a      	ldr	r4, [pc, #40]	; (df9c <schedule_transfer+0x80>)
    df74:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    df78:	430b      	orrs	r3, r1
    df7a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    df7e:	e009      	b.n	df94 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    df80:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    df82:	2300      	movs	r3, #0
    df84:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    df86:	4c05      	ldr	r4, [pc, #20]	; (df9c <schedule_transfer+0x80>)
    df88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    df8c:	430b      	orrs	r3, r1
    df8e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    df92:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    df94:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    df96:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    df98:	bcf0      	pop	{r4, r5, r6, r7}
    df9a:	4770      	bx	lr
    df9c:	402e0000 	.word	0x402e0000
    dfa0:	e0001000 	.word	0xe0001000

0000dfa4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    dfa4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    dfa6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    dfa8:	b1b5      	cbz	r5, dfd8 <run_callbacks+0x34>
    dfaa:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    dfac:	462b      	mov	r3, r5
	uint32_t count = 0;
    dfae:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    dfb0:	685a      	ldr	r2, [r3, #4]
    dfb2:	f012 0f80 	tst.w	r2, #128	; 0x80
    dfb6:	d107      	bne.n	dfc8 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    dfb8:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    dfba:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    dfbc:	2b01      	cmp	r3, #1
    dfbe:	d1f7      	bne.n	dfb0 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    dfc0:	2300      	movs	r3, #0
    dfc2:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    dfc4:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    dfc6:	e000      	b.n	dfca <run_callbacks+0x26>
			ep->first_transfer = t;
    dfc8:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    dfca:	b12c      	cbz	r4, dfd8 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    dfcc:	4628      	mov	r0, r5
    dfce:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    dfd0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    dfd2:	4798      	blx	r3
	while (count) {
    dfd4:	3c01      	subs	r4, #1
    dfd6:	d1f9      	bne.n	dfcc <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    dfd8:	bd70      	pop	{r4, r5, r6, pc}

0000dfda <usb_endpoint_config>:
{
    dfda:	b570      	push	{r4, r5, r6, lr}
    dfdc:	4604      	mov	r4, r0
    dfde:	460e      	mov	r6, r1
    dfe0:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    dfe2:	223c      	movs	r2, #60	; 0x3c
    dfe4:	2100      	movs	r1, #0
    dfe6:	3004      	adds	r0, #4
    dfe8:	f003 f964 	bl	112b4 <memset>
	qh->config = config;
    dfec:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    dfee:	2301      	movs	r3, #1
    dff0:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    dff2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    dff4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000dff8 <usb_start_sof_interrupts>:
	__disable_irq();
    dff8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    dffa:	4a0a      	ldr	r2, [pc, #40]	; (e024 <usb_start_sof_interrupts+0x2c>)
    dffc:	2301      	movs	r3, #1
    dffe:	4083      	lsls	r3, r0
    e000:	7810      	ldrb	r0, [r2, #0]
    e002:	4318      	orrs	r0, r3
    e004:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    e006:	4b08      	ldr	r3, [pc, #32]	; (e028 <usb_start_sof_interrupts+0x30>)
    e008:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e00c:	f013 0f80 	tst.w	r3, #128	; 0x80
    e010:	d106      	bne.n	e020 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e012:	4a05      	ldr	r2, [pc, #20]	; (e028 <usb_start_sof_interrupts+0x30>)
    e014:	2180      	movs	r1, #128	; 0x80
    e016:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e01a:	430b      	orrs	r3, r1
    e01c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    e020:	b662      	cpsie	i
}
    e022:	4770      	bx	lr
    e024:	200052f3 	.word	0x200052f3
    e028:	402e0000 	.word	0x402e0000

0000e02c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e02c:	2301      	movs	r3, #1
    e02e:	4083      	lsls	r3, r0
    e030:	4a06      	ldr	r2, [pc, #24]	; (e04c <usb_stop_sof_interrupts+0x20>)
    e032:	7810      	ldrb	r0, [r2, #0]
    e034:	ea20 0003 	bic.w	r0, r0, r3
    e038:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    e03a:	b930      	cbnz	r0, e04a <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e03c:	4a04      	ldr	r2, [pc, #16]	; (e050 <usb_stop_sof_interrupts+0x24>)
    e03e:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e046:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e04a:	4770      	bx	lr
    e04c:	200052f3 	.word	0x200052f3
    e050:	402e0000 	.word	0x402e0000

0000e054 <usb_isr>:
{
    e054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e058:	4bb5      	ldr	r3, [pc, #724]	; (e330 <usb_isr+0x2dc>)
    e05a:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    e05e:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e062:	f017 0f01 	tst.w	r7, #1
    e066:	f000 81c9 	beq.w	e3fc <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e06a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    e06e:	2b00      	cmp	r3, #0
    e070:	f000 8192 	beq.w	e398 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e074:	4cae      	ldr	r4, [pc, #696]	; (e330 <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    e076:	4eaf      	ldr	r6, [pc, #700]	; (e334 <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e078:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e07c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e36c <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e080:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e370 <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e084:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e374 <usb_isr+0x320>
    e088:	e01b      	b.n	e0c2 <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    e08a:	2b80      	cmp	r3, #128	; 0x80
    e08c:	d110      	bne.n	e0b0 <usb_isr+0x5c>
		reply_buffer[0] = 0;
    e08e:	48aa      	ldr	r0, [pc, #680]	; (e338 <usb_isr+0x2e4>)
    e090:	2200      	movs	r2, #0
    e092:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    e094:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    e096:	2102      	movs	r1, #2
    e098:	f7ff fe96 	bl	ddc8 <endpoint0_transmit>
		return;
    e09c:	e00c      	b.n	e0b8 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e09e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    e0a2:	f000 8089 	beq.w	e1b8 <usb_isr+0x164>
    e0a6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    e0aa:	b29b      	uxth	r3, r3
    e0ac:	2b01      	cmp	r3, #1
    e0ae:	d967      	bls.n	e180 <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e0b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e0b4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e0b8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e0bc:	2b00      	cmp	r3, #0
    e0be:	f000 816b 	beq.w	e398 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e0c2:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    e0c6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    e0c8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e0ca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e0ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e0d2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e0d6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e0da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    e0de:	d0f4      	beq.n	e0ca <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e0e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e0e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e0e8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e0ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e0f0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e0f4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e0f8:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    e0fc:	d1fa      	bne.n	e0f4 <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    e0fe:	4b8f      	ldr	r3, [pc, #572]	; (e33c <usb_isr+0x2e8>)
    e100:	2100      	movs	r1, #0
    e102:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    e104:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    e106:	b2ab      	uxth	r3, r5
    e108:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    e10c:	d07e      	beq.n	e20c <usb_isr+0x1b8>
    e10e:	d820      	bhi.n	e152 <usb_isr+0xfe>
    e110:	f240 3102 	movw	r1, #770	; 0x302
    e114:	428b      	cmp	r3, r1
    e116:	f000 80a1 	beq.w	e25c <usb_isr+0x208>
    e11a:	d8c0      	bhi.n	e09e <usb_isr+0x4a>
    e11c:	2b82      	cmp	r3, #130	; 0x82
    e11e:	d07e      	beq.n	e21e <usb_isr+0x1ca>
    e120:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    e124:	d1b1      	bne.n	e08a <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    e126:	b293      	uxth	r3, r2
    e128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e12c:	2a07      	cmp	r2, #7
    e12e:	d8bf      	bhi.n	e0b0 <usb_isr+0x5c>
		if (dir) {
    e130:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e134:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e138:	bf14      	ite	ne
    e13a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e13e:	f023 0301 	biceq.w	r3, r3, #1
    e142:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e146:	2200      	movs	r2, #0
    e148:	4611      	mov	r1, r2
    e14a:	4610      	mov	r0, r2
    e14c:	f7ff fe90 	bl	de70 <endpoint0_receive>
		return;
    e150:	e7b2      	b.n	e0b8 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e152:	f242 2121 	movw	r1, #8737	; 0x2221
    e156:	428b      	cmp	r3, r1
    e158:	f000 810e 	beq.w	e378 <usb_isr+0x324>
    e15c:	d919      	bls.n	e192 <usb_isr+0x13e>
    e15e:	f242 3121 	movw	r1, #8993	; 0x2321
    e162:	428b      	cmp	r3, r1
    e164:	f000 8112 	beq.w	e38c <usb_isr+0x338>
    e168:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    e16c:	428b      	cmp	r3, r1
    e16e:	d19f      	bne.n	e0b0 <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    e170:	b293      	uxth	r3, r2
    e172:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    e176:	d19b      	bne.n	e0b0 <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    e178:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    e17c:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e180:	4b6f      	ldr	r3, [pc, #444]	; (e340 <usb_isr+0x2ec>)
    e182:	6859      	ldr	r1, [r3, #4]
    e184:	2900      	cmp	r1, #0
    e186:	d093      	beq.n	e0b0 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e188:	fa1f fe80 	uxth.w	lr, r0
    e18c:	f3c5 450f 	ubfx	r5, r5, #16, #16
    e190:	e0a7      	b.n	e2e2 <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    e192:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e196:	d01b      	beq.n	e1d0 <usb_isr+0x17c>
    e198:	f242 0121 	movw	r1, #8225	; 0x2021
    e19c:	428b      	cmp	r3, r1
    e19e:	d187      	bne.n	e0b0 <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    e1a0:	0c13      	lsrs	r3, r2, #16
    e1a2:	2b07      	cmp	r3, #7
    e1a4:	d184      	bne.n	e0b0 <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    e1a6:	4b67      	ldr	r3, [pc, #412]	; (e344 <usb_isr+0x2f0>)
    e1a8:	601d      	str	r5, [r3, #0]
    e1aa:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    e1ac:	2201      	movs	r2, #1
    e1ae:	2107      	movs	r1, #7
    e1b0:	4865      	ldr	r0, [pc, #404]	; (e348 <usb_isr+0x2f4>)
    e1b2:	f7ff fe5d 	bl	de70 <endpoint0_receive>
		return;
    e1b6:	e77f      	b.n	e0b8 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    e1b8:	2200      	movs	r2, #0
    e1ba:	4611      	mov	r1, r2
    e1bc:	4610      	mov	r0, r2
    e1be:	f7ff fe57 	bl	de70 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e1c2:	0c2b      	lsrs	r3, r5, #16
    e1c4:	065b      	lsls	r3, r3, #25
    e1c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e1ca:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e1ce:	e773      	b.n	e0b8 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    e1d0:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e1d4:	4b5d      	ldr	r3, [pc, #372]	; (e34c <usb_isr+0x2f8>)
    e1d6:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e1d8:	4b5d      	ldr	r3, [pc, #372]	; (e350 <usb_isr+0x2fc>)
    e1da:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e1de:	4b5d      	ldr	r3, [pc, #372]	; (e354 <usb_isr+0x300>)
    e1e0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e1e4:	4b5c      	ldr	r3, [pc, #368]	; (e358 <usb_isr+0x304>)
    e1e6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    e1ea:	f000 fb45 	bl	e878 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e1ee:	2280      	movs	r2, #128	; 0x80
    e1f0:	2100      	movs	r1, #0
    e1f2:	4658      	mov	r0, fp
    e1f4:	f003 f85e 	bl	112b4 <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e1f8:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e1fc:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e200:	2200      	movs	r2, #0
    e202:	4611      	mov	r1, r2
    e204:	4610      	mov	r0, r2
    e206:	f7ff fe33 	bl	de70 <endpoint0_receive>
		return;
    e20a:	e755      	b.n	e0b8 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e20c:	4b4f      	ldr	r3, [pc, #316]	; (e34c <usb_isr+0x2f8>)
    e20e:	781b      	ldrb	r3, [r3, #0]
    e210:	4849      	ldr	r0, [pc, #292]	; (e338 <usb_isr+0x2e4>)
    e212:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e214:	2200      	movs	r2, #0
    e216:	2101      	movs	r1, #1
    e218:	f7ff fdd6 	bl	ddc8 <endpoint0_transmit>
		return;
    e21c:	e74c      	b.n	e0b8 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e21e:	b293      	uxth	r3, r2
    e220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e224:	2a07      	cmp	r2, #7
    e226:	f63f af43 	bhi.w	e0b0 <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e22a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e22e:	4a42      	ldr	r2, [pc, #264]	; (e338 <usb_isr+0x2e4>)
    e230:	2100      	movs	r1, #0
    e232:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e234:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e236:	f013 0f80 	tst.w	r3, #128	; 0x80
    e23a:	d00b      	beq.n	e254 <usb_isr+0x200>
    e23c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e240:	d002      	beq.n	e248 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e242:	4b3d      	ldr	r3, [pc, #244]	; (e338 <usb_isr+0x2e4>)
    e244:	2201      	movs	r2, #1
    e246:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e248:	2200      	movs	r2, #0
    e24a:	2102      	movs	r1, #2
    e24c:	483a      	ldr	r0, [pc, #232]	; (e338 <usb_isr+0x2e4>)
    e24e:	f7ff fdbb 	bl	ddc8 <endpoint0_transmit>
		return;
    e252:	e731      	b.n	e0b8 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e254:	f010 0f01 	tst.w	r0, #1
    e258:	d0f6      	beq.n	e248 <usb_isr+0x1f4>
    e25a:	e7f2      	b.n	e242 <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e25c:	b293      	uxth	r3, r2
    e25e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e262:	2a07      	cmp	r2, #7
    e264:	f63f af24 	bhi.w	e0b0 <usb_isr+0x5c>
		if (dir) {
    e268:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e26c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e270:	bf14      	ite	ne
    e272:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e276:	f043 0301 	orreq.w	r3, r3, #1
    e27a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e27e:	2200      	movs	r2, #0
    e280:	4611      	mov	r1, r2
    e282:	4610      	mov	r0, r2
    e284:	f7ff fdf4 	bl	de70 <endpoint0_receive>
		return;
    e288:	e716      	b.n	e0b8 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e28a:	4b34      	ldr	r3, [pc, #208]	; (e35c <usb_isr+0x308>)
    e28c:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e28e:	462a      	mov	r2, r5
    e290:	4933      	ldr	r1, [pc, #204]	; (e360 <usb_isr+0x30c>)
    e292:	4b34      	ldr	r3, [pc, #208]	; (e364 <usb_isr+0x310>)
    e294:	2800      	cmp	r0, #0
    e296:	bf18      	it	ne
    e298:	4619      	movne	r1, r3
    e29a:	4833      	ldr	r0, [pc, #204]	; (e368 <usb_isr+0x314>)
    e29c:	f7fe ff40 	bl	d120 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e2a0:	4a31      	ldr	r2, [pc, #196]	; (e368 <usb_isr+0x314>)
    e2a2:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e2a6:	442a      	add	r2, r5
	asm("dsb");
    e2a8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e2ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e2b0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e2b4:	3320      	adds	r3, #32
	} while (location < end_addr);
    e2b6:	429a      	cmp	r2, r3
    e2b8:	d8fa      	bhi.n	e2b0 <usb_isr+0x25c>
	asm("dsb");
    e2ba:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e2be:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e2c2:	2200      	movs	r2, #0
    e2c4:	4629      	mov	r1, r5
    e2c6:	4828      	ldr	r0, [pc, #160]	; (e368 <usb_isr+0x314>)
    e2c8:	f7ff fd7e 	bl	ddc8 <endpoint0_transmit>
				return;
    e2cc:	e6f4      	b.n	e0b8 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e2ce:	462a      	mov	r2, r5
    e2d0:	4825      	ldr	r0, [pc, #148]	; (e368 <usb_isr+0x314>)
    e2d2:	f7fe ff25 	bl	d120 <memcpy>
    e2d6:	e7e3      	b.n	e2a0 <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e2d8:	330c      	adds	r3, #12
    e2da:	6859      	ldr	r1, [r3, #4]
    e2dc:	2900      	cmp	r1, #0
    e2de:	f43f aee7 	beq.w	e0b0 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e2e2:	4628      	mov	r0, r5
    e2e4:	f8b3 c000 	ldrh.w	ip, [r3]
    e2e8:	45ac      	cmp	ip, r5
    e2ea:	d1f5      	bne.n	e2d8 <usb_isr+0x284>
    e2ec:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e2f0:	45f4      	cmp	ip, lr
    e2f2:	d1f1      	bne.n	e2d8 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e2f4:	0a2d      	lsrs	r5, r5, #8
    e2f6:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e2f8:	bf0c      	ite	eq
    e2fa:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e2fc:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e2fe:	0c15      	lsrs	r5, r2, #16
    e300:	429d      	cmp	r5, r3
    e302:	bf28      	it	cs
    e304:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e306:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e30a:	d0be      	beq.n	e28a <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e30c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e310:	d1dd      	bne.n	e2ce <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e312:	4b12      	ldr	r3, [pc, #72]	; (e35c <usb_isr+0x308>)
    e314:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e316:	462a      	mov	r2, r5
    e318:	4912      	ldr	r1, [pc, #72]	; (e364 <usb_isr+0x310>)
    e31a:	4b11      	ldr	r3, [pc, #68]	; (e360 <usb_isr+0x30c>)
    e31c:	2800      	cmp	r0, #0
    e31e:	bf18      	it	ne
    e320:	4619      	movne	r1, r3
    e322:	4811      	ldr	r0, [pc, #68]	; (e368 <usb_isr+0x314>)
    e324:	f7fe fefc 	bl	d120 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e328:	2307      	movs	r3, #7
    e32a:	4a0f      	ldr	r2, [pc, #60]	; (e368 <usb_isr+0x314>)
    e32c:	7053      	strb	r3, [r2, #1]
    e32e:	e7b7      	b.n	e2a0 <usb_isr+0x24c>
    e330:	402e0000 	.word	0x402e0000
    e334:	20000000 	.word	0x20000000
    e338:	20005088 	.word	0x20005088
    e33c:	20004f84 	.word	0x20004f84
    e340:	20002f54 	.word	0x20002f54
    e344:	20004080 	.word	0x20004080
    e348:	20004f7c 	.word	0x20004f7c
    e34c:	200052f8 	.word	0x200052f8
    e350:	00cc0002 	.word	0x00cc0002
    e354:	000200c8 	.word	0x000200c8
    e358:	00c80002 	.word	0x00c80002
    e35c:	200052f9 	.word	0x200052f9
    e360:	600020d0 	.word	0x600020d0
    e364:	60002134 	.word	0x60002134
    e368:	20200000 	.word	0x20200000
    e36c:	b8c6cf5d 	.word	0xb8c6cf5d
    e370:	74d59319 	.word	0x74d59319
    e374:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e378:	b292      	uxth	r2, r2
    e37a:	b93a      	cbnz	r2, e38c <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e37c:	4b57      	ldr	r3, [pc, #348]	; (e4dc <usb_isr+0x488>)
    e37e:	681a      	ldr	r2, [r3, #0]
    e380:	4b57      	ldr	r3, [pc, #348]	; (e4e0 <usb_isr+0x48c>)
    e382:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e384:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e388:	4b56      	ldr	r3, [pc, #344]	; (e4e4 <usb_isr+0x490>)
    e38a:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e38c:	2200      	movs	r2, #0
    e38e:	4611      	mov	r1, r2
    e390:	4610      	mov	r0, r2
    e392:	f7ff fd6d 	bl	de70 <endpoint0_receive>
		return;
    e396:	e68f      	b.n	e0b8 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e398:	4b53      	ldr	r3, [pc, #332]	; (e4e8 <usb_isr+0x494>)
    e39a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e39e:	b36c      	cbz	r4, e3fc <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e3a0:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e3a4:	4b51      	ldr	r3, [pc, #324]	; (e4ec <usb_isr+0x498>)
    e3a6:	681b      	ldr	r3, [r3, #0]
    e3a8:	421c      	tst	r4, r3
    e3aa:	d172      	bne.n	e492 <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e3ac:	4b50      	ldr	r3, [pc, #320]	; (e4f0 <usb_isr+0x49c>)
    e3ae:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e3b0:	401c      	ands	r4, r3
    e3b2:	d023      	beq.n	e3fc <usb_isr+0x3a8>
				while (tx) {
    e3b4:	0c26      	lsrs	r6, r4, #16
    e3b6:	d010      	beq.n	e3da <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e3b8:	f8df 9154 	ldr.w	r9, [pc, #340]	; e510 <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e3bc:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e3c0:	fa96 f5a6 	rbit	r5, r6
    e3c4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e3c8:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    e3cc:	3040      	adds	r0, #64	; 0x40
    e3ce:	f7ff fde9 	bl	dfa4 <run_callbacks>
					tx &= ~(1<<p);
    e3d2:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    e3d6:	43ae      	bics	r6, r5
    e3d8:	d1f2      	bne.n	e3c0 <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    e3da:	b2a4      	uxth	r4, r4
				while(rx) {
    e3dc:	b174      	cbz	r4, e3fc <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    e3de:	f8df 8130 	ldr.w	r8, [pc, #304]	; e510 <usb_isr+0x4bc>
					rx &= ~(1<<p);
    e3e2:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    e3e4:	fa94 f5a4 	rbit	r5, r4
    e3e8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    e3ec:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    e3f0:	f7ff fdd8 	bl	dfa4 <run_callbacks>
					rx &= ~(1<<p);
    e3f4:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    e3f8:	43ac      	bics	r4, r5
    e3fa:	d1f3      	bne.n	e3e4 <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    e3fc:	f017 0f40 	tst.w	r7, #64	; 0x40
    e400:	d019      	beq.n	e436 <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e402:	4b39      	ldr	r3, [pc, #228]	; (e4e8 <usb_isr+0x494>)
    e404:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e408:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e40c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e410:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e414:	461a      	mov	r2, r3
    e416:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e41a:	2b00      	cmp	r3, #0
    e41c:	d1fb      	bne.n	e416 <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e41e:	4b32      	ldr	r3, [pc, #200]	; (e4e8 <usb_isr+0x494>)
    e420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e424:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e428:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e42c:	f000 fa22 	bl	e874 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e430:	4b2f      	ldr	r3, [pc, #188]	; (e4f0 <usb_isr+0x49c>)
    e432:	2200      	movs	r2, #0
    e434:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e436:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    e43a:	d003      	beq.n	e444 <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e43c:	4b2d      	ldr	r3, [pc, #180]	; (e4f4 <usb_isr+0x4a0>)
    e43e:	681b      	ldr	r3, [r3, #0]
    e440:	b103      	cbz	r3, e444 <usb_isr+0x3f0>
    e442:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e444:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    e448:	d003      	beq.n	e452 <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e44a:	4b2b      	ldr	r3, [pc, #172]	; (e4f8 <usb_isr+0x4a4>)
    e44c:	681b      	ldr	r3, [r3, #0]
    e44e:	b103      	cbz	r3, e452 <usb_isr+0x3fe>
    e450:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e452:	f017 0f04 	tst.w	r7, #4
    e456:	d009      	beq.n	e46c <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e458:	4b23      	ldr	r3, [pc, #140]	; (e4e8 <usb_isr+0x494>)
    e45a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e45e:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    e462:	4b26      	ldr	r3, [pc, #152]	; (e4fc <usb_isr+0x4a8>)
    e464:	bf14      	ite	ne
    e466:	2201      	movne	r2, #1
			usb_high_speed = 0;
    e468:	2200      	moveq	r2, #0
    e46a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e46c:	4b1e      	ldr	r3, [pc, #120]	; (e4e8 <usb_isr+0x494>)
    e46e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e472:	f013 0f80 	tst.w	r3, #128	; 0x80
    e476:	d00a      	beq.n	e48e <usb_isr+0x43a>
    e478:	f017 0f80 	tst.w	r7, #128	; 0x80
    e47c:	d007      	beq.n	e48e <usb_isr+0x43a>
		if (usb_reboot_timer) {
    e47e:	4b20      	ldr	r3, [pc, #128]	; (e500 <usb_isr+0x4ac>)
    e480:	781b      	ldrb	r3, [r3, #0]
    e482:	b123      	cbz	r3, e48e <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    e484:	3b01      	subs	r3, #1
    e486:	b2db      	uxtb	r3, r3
    e488:	4a1d      	ldr	r2, [pc, #116]	; (e500 <usb_isr+0x4ac>)
    e48a:	7013      	strb	r3, [r2, #0]
    e48c:	b30b      	cbz	r3, e4d2 <usb_isr+0x47e>
}
    e48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    e492:	4b16      	ldr	r3, [pc, #88]	; (e4ec <usb_isr+0x498>)
    e494:	2200      	movs	r2, #0
    e496:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e498:	4b1a      	ldr	r3, [pc, #104]	; (e504 <usb_isr+0x4b0>)
    e49a:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e49c:	8819      	ldrh	r1, [r3, #0]
    e49e:	f242 0321 	movw	r3, #8225	; 0x2021
    e4a2:	4299      	cmp	r1, r3
    e4a4:	d182      	bne.n	e3ac <usb_isr+0x358>
    e4a6:	b292      	uxth	r2, r2
    e4a8:	2a00      	cmp	r2, #0
    e4aa:	f47f af7f 	bne.w	e3ac <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e4ae:	4b16      	ldr	r3, [pc, #88]	; (e508 <usb_isr+0x4b4>)
    e4b0:	4a16      	ldr	r2, [pc, #88]	; (e50c <usb_isr+0x4b8>)
    e4b2:	e892 0003 	ldmia.w	r2, {r0, r1}
    e4b6:	6018      	str	r0, [r3, #0]
    e4b8:	8099      	strh	r1, [r3, #4]
    e4ba:	0c09      	lsrs	r1, r1, #16
    e4bc:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e4be:	2886      	cmp	r0, #134	; 0x86
    e4c0:	f47f af74 	bne.w	e3ac <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    e4c4:	2003      	movs	r0, #3
    e4c6:	f7ff fd97 	bl	dff8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e4ca:	4b0d      	ldr	r3, [pc, #52]	; (e500 <usb_isr+0x4ac>)
    e4cc:	2250      	movs	r2, #80	; 0x50
    e4ce:	701a      	strb	r2, [r3, #0]
    e4d0:	e76c      	b.n	e3ac <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e4d2:	2003      	movs	r0, #3
    e4d4:	f7ff fdaa 	bl	e02c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e4d8:	f006 fef6 	bl	152c8 <___reboot_Teensyduino__veneer>
    e4dc:	200052a8 	.word	0x200052a8
    e4e0:	200052bc 	.word	0x200052bc
    e4e4:	200052f7 	.word	0x200052f7
    e4e8:	402e0000 	.word	0x402e0000
    e4ec:	20004f84 	.word	0x20004f84
    e4f0:	20004f88 	.word	0x20004f88
    e4f4:	200052c0 	.word	0x200052c0
    e4f8:	200052c4 	.word	0x200052c4
    e4fc:	200052f9 	.word	0x200052f9
    e500:	200052fa 	.word	0x200052fa
    e504:	20004080 	.word	0x20004080
    e508:	200052b4 	.word	0x200052b4
    e50c:	20004f7c 	.word	0x20004f7c
    e510:	20000000 	.word	0x20000000

0000e514 <usb_config_rx>:
{
    e514:	b538      	push	{r3, r4, r5, lr}
    e516:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e518:	1e83      	subs	r3, r0, #2
    e51a:	2b02      	cmp	r3, #2
    e51c:	d900      	bls.n	e520 <usb_config_rx+0xc>
}
    e51e:	bd38      	pop	{r3, r4, r5, pc}
    e520:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e522:	fab2 fc82 	clz	ip, r2
    e526:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e52a:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e52c:	462a      	mov	r2, r5
    e52e:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e532:	4807      	ldr	r0, [pc, #28]	; (e550 <usb_config_rx+0x3c>)
    e534:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e538:	f7ff fd4f 	bl	dfda <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    e53c:	2d00      	cmp	r5, #0
    e53e:	d0ee      	beq.n	e51e <usb_config_rx+0xa>
    e540:	4a04      	ldr	r2, [pc, #16]	; (e554 <usb_config_rx+0x40>)
    e542:	2301      	movs	r3, #1
    e544:	40a3      	lsls	r3, r4
    e546:	6811      	ldr	r1, [r2, #0]
    e548:	430b      	orrs	r3, r1
    e54a:	6013      	str	r3, [r2, #0]
    e54c:	e7e7      	b.n	e51e <usb_config_rx+0xa>
    e54e:	bf00      	nop
    e550:	20000000 	.word	0x20000000
    e554:	20004f88 	.word	0x20004f88

0000e558 <usb_config_tx>:
{
    e558:	b538      	push	{r3, r4, r5, lr}
    e55a:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e55c:	3802      	subs	r0, #2
    e55e:	2802      	cmp	r0, #2
    e560:	d900      	bls.n	e564 <usb_config_tx+0xc>
}
    e562:	bd38      	pop	{r3, r4, r5, pc}
    e564:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e566:	fab2 fc82 	clz	ip, r2
    e56a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e56e:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e570:	4809      	ldr	r0, [pc, #36]	; (e598 <usb_config_tx+0x40>)
    e572:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e576:	461a      	mov	r2, r3
    e578:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e57c:	3040      	adds	r0, #64	; 0x40
    e57e:	f7ff fd2c 	bl	dfda <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e582:	2d00      	cmp	r5, #0
    e584:	d0ed      	beq.n	e562 <usb_config_tx+0xa>
    e586:	4a05      	ldr	r2, [pc, #20]	; (e59c <usb_config_tx+0x44>)
    e588:	3410      	adds	r4, #16
    e58a:	2301      	movs	r3, #1
    e58c:	40a3      	lsls	r3, r4
    e58e:	6811      	ldr	r1, [r2, #0]
    e590:	430b      	orrs	r3, r1
    e592:	6013      	str	r3, [r2, #0]
    e594:	e7e5      	b.n	e562 <usb_config_tx+0xa>
    e596:	bf00      	nop
    e598:	20000000 	.word	0x20000000
    e59c:	20004f88 	.word	0x20004f88

0000e5a0 <usb_prepare_transfer>:
{
    e5a0:	b410      	push	{r4}
	transfer->next = 1;
    e5a2:	2401      	movs	r4, #1
    e5a4:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    e5a6:	0412      	lsls	r2, r2, #16
    e5a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e5ac:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    e5ae:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    e5b0:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    e5b4:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e5b6:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    e5ba:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e5bc:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    e5c0:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e5c2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    e5c6:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    e5c8:	61c3      	str	r3, [r0, #28]
}
    e5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5ce:	4770      	bx	lr

0000e5d0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e5d0:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e5d2:	1e83      	subs	r3, r0, #2
    e5d4:	2b02      	cmp	r3, #2
    e5d6:	d900      	bls.n	e5da <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e5d8:	bd08      	pop	{r3, pc}
    e5da:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    e5dc:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e5e0:	4b04      	ldr	r3, [pc, #16]	; (e5f4 <usb_transmit+0x24>)
    e5e2:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e5e6:	2301      	movs	r3, #1
    e5e8:	fa03 f101 	lsl.w	r1, r3, r1
    e5ec:	3040      	adds	r0, #64	; 0x40
    e5ee:	f7ff fc95 	bl	df1c <schedule_transfer>
    e5f2:	e7f1      	b.n	e5d8 <usb_transmit+0x8>
    e5f4:	20000000 	.word	0x20000000

0000e5f8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e5f8:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e5fa:	1e83      	subs	r3, r0, #2
    e5fc:	2b02      	cmp	r3, #2
    e5fe:	d900      	bls.n	e602 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e600:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    e602:	460a      	mov	r2, r1
    e604:	2101      	movs	r1, #1
    e606:	4081      	lsls	r1, r0
    e608:	4b02      	ldr	r3, [pc, #8]	; (e614 <usb_receive+0x1c>)
    e60a:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e60e:	f7ff fc85 	bl	df1c <schedule_transfer>
    e612:	e7f5      	b.n	e600 <usb_receive+0x8>
    e614:	20000000 	.word	0x20000000

0000e618 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e618:	6840      	ldr	r0, [r0, #4]
#endif
}
    e61a:	4770      	bx	lr

0000e61c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e61c:	b500      	push	{lr}
    e61e:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e620:	4b10      	ldr	r3, [pc, #64]	; (e664 <usb_init_serialnumber+0x48>)
    e622:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    e626:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e62a:	4b0f      	ldr	r3, [pc, #60]	; (e668 <usb_init_serialnumber+0x4c>)
    e62c:	4298      	cmp	r0, r3
    e62e:	d202      	bcs.n	e636 <usb_init_serialnumber+0x1a>
    e630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e634:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e636:	220a      	movs	r2, #10
    e638:	a901      	add	r1, sp, #4
    e63a:	f7fe fe13 	bl	d264 <ultoa>
	for (i=0; i<10; i++) {
    e63e:	a901      	add	r1, sp, #4
    e640:	480a      	ldr	r0, [pc, #40]	; (e66c <usb_init_serialnumber+0x50>)
    e642:	2300      	movs	r3, #0
		char c = buf[i];
    e644:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    e648:	b122      	cbz	r2, e654 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    e64a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e64e:	3301      	adds	r3, #1
    e650:	2b0a      	cmp	r3, #10
    e652:	d1f7      	bne.n	e644 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e654:	3301      	adds	r3, #1
    e656:	005b      	lsls	r3, r3, #1
    e658:	4a04      	ldr	r2, [pc, #16]	; (e66c <usb_init_serialnumber+0x50>)
    e65a:	7013      	strb	r3, [r2, #0]
}
    e65c:	b005      	add	sp, #20
    e65e:	f85d fb04 	ldr.w	pc, [sp], #4
    e662:	bf00      	nop
    e664:	401f4400 	.word	0x401f4400
    e668:	00989680 	.word	0x00989680
    e66c:	200038a4 	.word	0x200038a4

0000e670 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e670:	b508      	push	{r3, lr}
    e672:	f000 fa15 	bl	eaa0 <usb_serial_flush_input>
    e676:	bd08      	pop	{r3, pc}

0000e678 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e678:	b508      	push	{r3, lr}
    e67a:	f000 f9e1 	bl	ea40 <usb_serial_peekchar>
    e67e:	bd08      	pop	{r3, pc}

0000e680 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e680:	b508      	push	{r3, lr}
    e682:	f000 fa3f 	bl	eb04 <usb_serial_getchar>
    e686:	bd08      	pop	{r3, pc}

0000e688 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e688:	b508      	push	{r3, lr}
    e68a:	f000 f9fd 	bl	ea88 <usb_serial_available>
    e68e:	bd08      	pop	{r3, pc}

0000e690 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e690:	b508      	push	{r3, lr}
    e692:	f000 fb55 	bl	ed40 <usb_serial_flush_output>
    e696:	bd08      	pop	{r3, pc}

0000e698 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e698:	b508      	push	{r3, lr}
    e69a:	f000 fb2b 	bl	ecf4 <usb_serial_write_buffer_free>
    e69e:	bd08      	pop	{r3, pc}

0000e6a0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e6a0:	b508      	push	{r3, lr}
    e6a2:	4608      	mov	r0, r1
    e6a4:	4611      	mov	r1, r2
    e6a6:	f000 fa3d 	bl	eb24 <usb_serial_write>
    e6aa:	bd08      	pop	{r3, pc}

0000e6ac <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e6ac:	b508      	push	{r3, lr}
    e6ae:	4608      	mov	r0, r1
    e6b0:	f000 fb14 	bl	ecdc <usb_serial_putchar>
    e6b4:	bd08      	pop	{r3, pc}
	...

0000e6b8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e6b8:	4b20      	ldr	r3, [pc, #128]	; (e73c <usb_serial_flush_callback+0x84>)
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d13b      	bne.n	e738 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    e6c0:	4b1f      	ldr	r3, [pc, #124]	; (e740 <usb_serial_flush_callback+0x88>)
    e6c2:	781b      	ldrb	r3, [r3, #0]
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	d037      	beq.n	e738 <usb_serial_flush_callback+0x80>
{
    e6c8:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    e6ca:	4b1e      	ldr	r3, [pc, #120]	; (e744 <usb_serial_flush_callback+0x8c>)
    e6cc:	881d      	ldrh	r5, [r3, #0]
    e6ce:	b905      	cbnz	r5, e6d2 <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    e6d0:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e6d2:	4a1d      	ldr	r2, [pc, #116]	; (e748 <usb_serial_flush_callback+0x90>)
    e6d4:	7811      	ldrb	r1, [r2, #0]
    e6d6:	4e1d      	ldr	r6, [pc, #116]	; (e74c <usb_serial_flush_callback+0x94>)
    e6d8:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e6dc:	4c1c      	ldr	r4, [pc, #112]	; (e750 <usb_serial_flush_callback+0x98>)
    e6de:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    e6e2:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e6e6:	2300      	movs	r3, #0
    e6e8:	462a      	mov	r2, r5
    e6ea:	4621      	mov	r1, r4
    e6ec:	4630      	mov	r0, r6
    e6ee:	f7ff ff57 	bl	e5a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e6f2:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    e6f4:	1962      	adds	r2, r4, r5
	asm("dsb");
    e6f6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e6fa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e6fe:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    e702:	3320      	adds	r3, #32
	} while (location < end_addr);
    e704:	429a      	cmp	r2, r3
    e706:	d8fa      	bhi.n	e6fe <usb_serial_flush_callback+0x46>
	asm("dsb");
    e708:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e70c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e710:	4631      	mov	r1, r6
    e712:	2004      	movs	r0, #4
    e714:	f7ff ff5c 	bl	e5d0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e718:	4b0b      	ldr	r3, [pc, #44]	; (e748 <usb_serial_flush_callback+0x90>)
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	3301      	adds	r3, #1
    e71e:	b2db      	uxtb	r3, r3
    e720:	2b03      	cmp	r3, #3
    e722:	d805      	bhi.n	e730 <usb_serial_flush_callback+0x78>
    e724:	4a08      	ldr	r2, [pc, #32]	; (e748 <usb_serial_flush_callback+0x90>)
    e726:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    e728:	4b06      	ldr	r3, [pc, #24]	; (e744 <usb_serial_flush_callback+0x8c>)
    e72a:	2200      	movs	r2, #0
    e72c:	801a      	strh	r2, [r3, #0]
    e72e:	e7cf      	b.n	e6d0 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e730:	4b05      	ldr	r3, [pc, #20]	; (e748 <usb_serial_flush_callback+0x90>)
    e732:	2200      	movs	r2, #0
    e734:	701a      	strb	r2, [r3, #0]
    e736:	e7f7      	b.n	e728 <usb_serial_flush_callback+0x70>
    e738:	4770      	bx	lr
    e73a:	bf00      	nop
    e73c:	200052f6 	.word	0x200052f6
    e740:	200052f8 	.word	0x200052f8
    e744:	200052da 	.word	0x200052da
    e748:	200052f5 	.word	0x200052f5
    e74c:	20004000 	.word	0x20004000
    e750:	20201080 	.word	0x20201080

0000e754 <rx_queue_transfer>:
{
    e754:	b570      	push	{r4, r5, r6, lr}
    e756:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e758:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e75c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e760:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e764:	4c13      	ldr	r4, [pc, #76]	; (e7b4 <rx_queue_transfer+0x60>)
    e766:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e76a:	4d13      	ldr	r5, [pc, #76]	; (e7b8 <rx_queue_transfer+0x64>)
    e76c:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    e770:	4e12      	ldr	r6, [pc, #72]	; (e7bc <rx_queue_transfer+0x68>)
    e772:	8832      	ldrh	r2, [r6, #0]
    e774:	4621      	mov	r1, r4
    e776:	4628      	mov	r0, r5
    e778:	f7ff ff12 	bl	e5a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e77c:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    e77e:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e780:	4422      	add	r2, r4
	asm("dsb");
    e782:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e786:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e78a:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    e78e:	3320      	adds	r3, #32
	} while (location < end_addr);
    e790:	429a      	cmp	r2, r3
    e792:	d8fa      	bhi.n	e78a <rx_queue_transfer+0x36>
	asm("dsb");
    e794:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e798:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    e79c:	4629      	mov	r1, r5
    e79e:	2003      	movs	r0, #3
    e7a0:	f7ff ff2a 	bl	e5f8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e7a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e7a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e7ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e7b0:	bd70      	pop	{r4, r5, r6, pc}
    e7b2:	bf00      	nop
    e7b4:	20200080 	.word	0x20200080
    e7b8:	20003f00 	.word	0x20003f00
    e7bc:	200052d8 	.word	0x200052d8

0000e7c0 <rx_event>:
{
    e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e7c2:	6843      	ldr	r3, [r0, #4]
    e7c4:	4a23      	ldr	r2, [pc, #140]	; (e854 <rx_event+0x94>)
    e7c6:	8814      	ldrh	r4, [r2, #0]
    e7c8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    e7cc:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    e7ce:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    e7d0:	2c00      	cmp	r4, #0
    e7d2:	dd3a      	ble.n	e84a <rx_event+0x8a>
		uint32_t head = rx_head;
    e7d4:	4b20      	ldr	r3, [pc, #128]	; (e858 <rx_event+0x98>)
    e7d6:	781b      	ldrb	r3, [r3, #0]
    e7d8:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    e7da:	4a20      	ldr	r2, [pc, #128]	; (e85c <rx_event+0x9c>)
    e7dc:	7812      	ldrb	r2, [r2, #0]
    e7de:	b2d2      	uxtb	r2, r2
    e7e0:	4293      	cmp	r3, r2
    e7e2:	d008      	beq.n	e7f6 <rx_event+0x36>
			uint32_t ii = rx_list[head];
    e7e4:	4a1e      	ldr	r2, [pc, #120]	; (e860 <rx_event+0xa0>)
    e7e6:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    e7e8:	4a1e      	ldr	r2, [pc, #120]	; (e864 <rx_event+0xa4>)
    e7ea:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e7ee:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    e7f2:	4294      	cmp	r4, r2
    e7f4:	d914      	bls.n	e820 <rx_event+0x60>
		rx_count[i] = len;
    e7f6:	4a1b      	ldr	r2, [pc, #108]	; (e864 <rx_event+0xa4>)
    e7f8:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    e7fc:	4a1a      	ldr	r2, [pc, #104]	; (e868 <rx_event+0xa8>)
    e7fe:	2100      	movs	r1, #0
    e800:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    e804:	3301      	adds	r3, #1
    e806:	2b09      	cmp	r3, #9
    e808:	bf28      	it	cs
    e80a:	460b      	movcs	r3, r1
		rx_list[head] = i;
    e80c:	4a14      	ldr	r2, [pc, #80]	; (e860 <rx_event+0xa0>)
    e80e:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    e810:	b2db      	uxtb	r3, r3
    e812:	4a11      	ldr	r2, [pc, #68]	; (e858 <rx_event+0x98>)
    e814:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    e816:	4b15      	ldr	r3, [pc, #84]	; (e86c <rx_event+0xac>)
    e818:	681a      	ldr	r2, [r3, #0]
    e81a:	4414      	add	r4, r2
    e81c:	601c      	str	r4, [r3, #0]
}
    e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e820:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    e824:	4b12      	ldr	r3, [pc, #72]	; (e870 <rx_event+0xb0>)
    e826:	4622      	mov	r2, r4
    e828:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    e82c:	4418      	add	r0, r3
    e82e:	f7fe fc77 	bl	d120 <memcpy>
				rx_count[ii] = count + len;
    e832:	4426      	add	r6, r4
    e834:	4b0b      	ldr	r3, [pc, #44]	; (e864 <rx_event+0xa4>)
    e836:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    e83a:	4a0c      	ldr	r2, [pc, #48]	; (e86c <rx_event+0xac>)
    e83c:	6813      	ldr	r3, [r2, #0]
    e83e:	4423      	add	r3, r4
    e840:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    e842:	4628      	mov	r0, r5
    e844:	f7ff ff86 	bl	e754 <rx_queue_transfer>
				return;
    e848:	e7e9      	b.n	e81e <rx_event+0x5e>
		rx_queue_transfer(i);
    e84a:	4628      	mov	r0, r5
    e84c:	f7ff ff82 	bl	e754 <rx_queue_transfer>
    e850:	e7e5      	b.n	e81e <rx_event+0x5e>
    e852:	bf00      	nop
    e854:	200052d8 	.word	0x200052d8
    e858:	200052ef 	.word	0x200052ef
    e85c:	200052f0 	.word	0x200052f0
    e860:	200050c4 	.word	0x200050c4
    e864:	200050a4 	.word	0x200050a4
    e868:	200050b4 	.word	0x200050b4
    e86c:	200050a0 	.word	0x200050a0
    e870:	20200080 	.word	0x20200080

0000e874 <usb_serial_reset>:
}
    e874:	4770      	bx	lr
	...

0000e878 <usb_serial_configure>:
{
    e878:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e87a:	4b2a      	ldr	r3, [pc, #168]	; (e924 <usb_serial_configure+0xac>)
    e87c:	781b      	ldrb	r3, [r3, #0]
    e87e:	f013 0fff 	tst.w	r3, #255	; 0xff
    e882:	bf0c      	ite	eq
    e884:	2340      	moveq	r3, #64	; 0x40
    e886:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    e88a:	4d27      	ldr	r5, [pc, #156]	; (e928 <usb_serial_configure+0xb0>)
    e88c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    e88e:	4e27      	ldr	r6, [pc, #156]	; (e92c <usb_serial_configure+0xb4>)
    e890:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e892:	2280      	movs	r2, #128	; 0x80
    e894:	2100      	movs	r1, #0
    e896:	4826      	ldr	r0, [pc, #152]	; (e930 <usb_serial_configure+0xb8>)
    e898:	f002 fd0c 	bl	112b4 <memset>
	tx_head = 0;
    e89c:	2400      	movs	r4, #0
    e89e:	4b25      	ldr	r3, [pc, #148]	; (e934 <usb_serial_configure+0xbc>)
    e8a0:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    e8a2:	4b25      	ldr	r3, [pc, #148]	; (e938 <usb_serial_configure+0xc0>)
    e8a4:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e8a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    e8aa:	4621      	mov	r1, r4
    e8ac:	4823      	ldr	r0, [pc, #140]	; (e93c <usb_serial_configure+0xc4>)
    e8ae:	f002 fd01 	bl	112b4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    e8b2:	4b23      	ldr	r3, [pc, #140]	; (e940 <usb_serial_configure+0xc8>)
    e8b4:	601c      	str	r4, [r3, #0]
    e8b6:	605c      	str	r4, [r3, #4]
    e8b8:	609c      	str	r4, [r3, #8]
    e8ba:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    e8bc:	4b21      	ldr	r3, [pc, #132]	; (e944 <usb_serial_configure+0xcc>)
    e8be:	601c      	str	r4, [r3, #0]
    e8c0:	605c      	str	r4, [r3, #4]
    e8c2:	609c      	str	r4, [r3, #8]
    e8c4:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    e8c6:	4b20      	ldr	r3, [pc, #128]	; (e948 <usb_serial_configure+0xd0>)
    e8c8:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    e8ca:	4b20      	ldr	r3, [pc, #128]	; (e94c <usb_serial_configure+0xd4>)
    e8cc:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    e8ce:	4b20      	ldr	r3, [pc, #128]	; (e950 <usb_serial_configure+0xd8>)
    e8d0:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e8d2:	4623      	mov	r3, r4
    e8d4:	4622      	mov	r2, r4
    e8d6:	2110      	movs	r1, #16
    e8d8:	2002      	movs	r0, #2
    e8da:	f7ff fe3d 	bl	e558 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e8de:	4b1d      	ldr	r3, [pc, #116]	; (e954 <usb_serial_configure+0xdc>)
    e8e0:	4622      	mov	r2, r4
    e8e2:	8831      	ldrh	r1, [r6, #0]
    e8e4:	2003      	movs	r0, #3
    e8e6:	f7ff fe15 	bl	e514 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    e8ea:	4623      	mov	r3, r4
    e8ec:	2201      	movs	r2, #1
    e8ee:	8829      	ldrh	r1, [r5, #0]
    e8f0:	2004      	movs	r0, #4
    e8f2:	f7ff fe31 	bl	e558 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e8f6:	4620      	mov	r0, r4
    e8f8:	f7ff ff2c 	bl	e754 <rx_queue_transfer>
    e8fc:	3401      	adds	r4, #1
    e8fe:	2c08      	cmp	r4, #8
    e900:	d1f9      	bne.n	e8f6 <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    e902:	4b15      	ldr	r3, [pc, #84]	; (e958 <usb_serial_configure+0xe0>)
    e904:	4a15      	ldr	r2, [pc, #84]	; (e95c <usb_serial_configure+0xe4>)
    e906:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    e908:	4b15      	ldr	r3, [pc, #84]	; (e960 <usb_serial_configure+0xe8>)
    e90a:	2200      	movs	r2, #0
    e90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e910:	224a      	movs	r2, #74	; 0x4a
    e912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e916:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    e91a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e91e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    e922:	bd70      	pop	{r4, r5, r6, pc}
    e924:	200052f9 	.word	0x200052f9
    e928:	200052dc 	.word	0x200052dc
    e92c:	200052d8 	.word	0x200052d8
    e930:	20004000 	.word	0x20004000
    e934:	200052f5 	.word	0x200052f5
    e938:	200052da 	.word	0x200052da
    e93c:	20003f00 	.word	0x20003f00
    e940:	200050a4 	.word	0x200050a4
    e944:	200050b4 	.word	0x200050b4
    e948:	200052ef 	.word	0x200052ef
    e94c:	200052f0 	.word	0x200052f0
    e950:	200050a0 	.word	0x200050a0
    e954:	0000e7c1 	.word	0x0000e7c1
    e958:	200052c0 	.word	0x200052c0
    e95c:	0000e6b9 	.word	0x0000e6b9
    e960:	402e0000 	.word	0x402e0000

0000e964 <usb_serial_read>:
{
    e964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e96c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e970:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    e974:	4b2b      	ldr	r3, [pc, #172]	; (ea24 <usb_serial_read+0xc0>)
    e976:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    e978:	468a      	mov	sl, r1
    e97a:	2900      	cmp	r1, #0
    e97c:	d045      	beq.n	ea0a <usb_serial_read+0xa6>
    e97e:	4681      	mov	r9, r0
    e980:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    e982:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    e984:	f8df b0b4 	ldr.w	fp, [pc, #180]	; ea3c <usb_serial_read+0xd8>
    e988:	e015      	b.n	e9b6 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e98a:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e98e:	462a      	mov	r2, r5
    e990:	4b25      	ldr	r3, [pc, #148]	; (ea28 <usb_serial_read+0xc4>)
    e992:	4419      	add	r1, r3
    e994:	4648      	mov	r0, r9
    e996:	f7fe fbc3 	bl	d120 <memcpy>
			p += avail;
    e99a:	44a9      	add	r9, r5
			rx_available -= avail;
    e99c:	4a23      	ldr	r2, [pc, #140]	; (ea2c <usb_serial_read+0xc8>)
    e99e:	6813      	ldr	r3, [r2, #0]
    e9a0:	1b5b      	subs	r3, r3, r5
    e9a2:	6013      	str	r3, [r2, #0]
			count += avail;
    e9a4:	442f      	add	r7, r5
			rx_tail = tail;
    e9a6:	b2e3      	uxtb	r3, r4
    e9a8:	4a1e      	ldr	r2, [pc, #120]	; (ea24 <usb_serial_read+0xc0>)
    e9aa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    e9ac:	4630      	mov	r0, r6
    e9ae:	f7ff fed1 	bl	e754 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    e9b2:	45ba      	cmp	sl, r7
    e9b4:	d934      	bls.n	ea20 <usb_serial_read+0xbc>
    e9b6:	f89b 3000 	ldrb.w	r3, [fp]
    e9ba:	b2db      	uxtb	r3, r3
    e9bc:	42a3      	cmp	r3, r4
    e9be:	d02d      	beq.n	ea1c <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    e9c0:	3401      	adds	r4, #1
    e9c2:	2c09      	cmp	r4, #9
    e9c4:	bf28      	it	cs
    e9c6:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e9c8:	4b19      	ldr	r3, [pc, #100]	; (ea30 <usb_serial_read+0xcc>)
    e9ca:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    e9cc:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    e9d0:	4b18      	ldr	r3, [pc, #96]	; (ea34 <usb_serial_read+0xd0>)
    e9d2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    e9d6:	4b18      	ldr	r3, [pc, #96]	; (ea38 <usb_serial_read+0xd4>)
    e9d8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    e9dc:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    e9de:	45a8      	cmp	r8, r5
    e9e0:	d2d3      	bcs.n	e98a <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e9e2:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e9e6:	4642      	mov	r2, r8
    e9e8:	4b0f      	ldr	r3, [pc, #60]	; (ea28 <usb_serial_read+0xc4>)
    e9ea:	4419      	add	r1, r3
    e9ec:	4648      	mov	r0, r9
    e9ee:	f7fe fb97 	bl	d120 <memcpy>
			rx_available -= len;
    e9f2:	4a0e      	ldr	r2, [pc, #56]	; (ea2c <usb_serial_read+0xc8>)
    e9f4:	6813      	ldr	r3, [r2, #0]
    e9f6:	eba3 030a 	sub.w	r3, r3, sl
    e9fa:	443b      	add	r3, r7
    e9fc:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    e9fe:	4b0d      	ldr	r3, [pc, #52]	; (ea34 <usb_serial_read+0xd0>)
    ea00:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    ea04:	4490      	add	r8, r2
    ea06:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ea0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ea0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ea12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ea16:	4650      	mov	r0, sl
    ea18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea1c:	46ba      	mov	sl, r7
    ea1e:	e7f4      	b.n	ea0a <usb_serial_read+0xa6>
			count += avail;
    ea20:	46ba      	mov	sl, r7
    ea22:	e7f2      	b.n	ea0a <usb_serial_read+0xa6>
    ea24:	200052f0 	.word	0x200052f0
    ea28:	20200080 	.word	0x20200080
    ea2c:	200050a0 	.word	0x200050a0
    ea30:	200050c4 	.word	0x200050c4
    ea34:	200050b4 	.word	0x200050b4
    ea38:	200050a4 	.word	0x200050a4
    ea3c:	200052ef 	.word	0x200052ef

0000ea40 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    ea40:	4b0c      	ldr	r3, [pc, #48]	; (ea74 <usb_serial_peekchar+0x34>)
    ea42:	781b      	ldrb	r3, [r3, #0]
    ea44:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    ea46:	4a0c      	ldr	r2, [pc, #48]	; (ea78 <usb_serial_peekchar+0x38>)
    ea48:	7812      	ldrb	r2, [r2, #0]
    ea4a:	b2d2      	uxtb	r2, r2
    ea4c:	4293      	cmp	r3, r2
    ea4e:	d00d      	beq.n	ea6c <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    ea50:	3301      	adds	r3, #1
    ea52:	2b09      	cmp	r3, #9
    ea54:	bf28      	it	cs
    ea56:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ea58:	4a08      	ldr	r2, [pc, #32]	; (ea7c <usb_serial_peekchar+0x3c>)
    ea5a:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ea5c:	4b08      	ldr	r3, [pc, #32]	; (ea80 <usb_serial_peekchar+0x40>)
    ea5e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    ea62:	4b08      	ldr	r3, [pc, #32]	; (ea84 <usb_serial_peekchar+0x44>)
    ea64:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    ea68:	5c58      	ldrb	r0, [r3, r1]
    ea6a:	4770      	bx	lr
	if (tail == rx_head) return -1;
    ea6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ea70:	4770      	bx	lr
    ea72:	bf00      	nop
    ea74:	200052f0 	.word	0x200052f0
    ea78:	200052ef 	.word	0x200052ef
    ea7c:	200050c4 	.word	0x200050c4
    ea80:	200050b4 	.word	0x200050b4
    ea84:	20200080 	.word	0x20200080

0000ea88 <usb_serial_available>:
{
    ea88:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    ea8a:	4b04      	ldr	r3, [pc, #16]	; (ea9c <usb_serial_available+0x14>)
    ea8c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ea8e:	b10c      	cbz	r4, ea94 <usb_serial_available+0xc>
}
    ea90:	4620      	mov	r0, r4
    ea92:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ea94:	f000 f9a4 	bl	ede0 <yield>
    ea98:	e7fa      	b.n	ea90 <usb_serial_available+0x8>
    ea9a:	bf00      	nop
    ea9c:	200050a0 	.word	0x200050a0

0000eaa0 <usb_serial_flush_input>:
{
    eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    eaa2:	4b12      	ldr	r3, [pc, #72]	; (eaec <usb_serial_flush_input+0x4c>)
    eaa4:	781c      	ldrb	r4, [r3, #0]
    eaa6:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    eaa8:	4b11      	ldr	r3, [pc, #68]	; (eaf0 <usb_serial_flush_input+0x50>)
    eaaa:	781b      	ldrb	r3, [r3, #0]
    eaac:	b2db      	uxtb	r3, r3
    eaae:	429c      	cmp	r4, r3
    eab0:	d01a      	beq.n	eae8 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    eab2:	4f10      	ldr	r7, [pc, #64]	; (eaf4 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    eab4:	4d10      	ldr	r5, [pc, #64]	; (eaf8 <usb_serial_flush_input+0x58>)
    eab6:	4e11      	ldr	r6, [pc, #68]	; (eafc <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    eab8:	3401      	adds	r4, #1
    eaba:	2c09      	cmp	r4, #9
    eabc:	bf28      	it	cs
    eabe:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    eac0:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    eac2:	682b      	ldr	r3, [r5, #0]
    eac4:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    eac8:	490d      	ldr	r1, [pc, #52]	; (eb00 <usb_serial_flush_input+0x60>)
    eaca:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    eace:	1a52      	subs	r2, r2, r1
    ead0:	1a9b      	subs	r3, r3, r2
    ead2:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    ead4:	f7ff fe3e 	bl	e754 <rx_queue_transfer>
		rx_tail = tail;
    ead8:	b2e2      	uxtb	r2, r4
    eada:	4b04      	ldr	r3, [pc, #16]	; (eaec <usb_serial_flush_input+0x4c>)
    eadc:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    eade:	4b04      	ldr	r3, [pc, #16]	; (eaf0 <usb_serial_flush_input+0x50>)
    eae0:	781b      	ldrb	r3, [r3, #0]
    eae2:	b2db      	uxtb	r3, r3
    eae4:	42a3      	cmp	r3, r4
    eae6:	d1e7      	bne.n	eab8 <usb_serial_flush_input+0x18>
}
    eae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaea:	bf00      	nop
    eaec:	200052f0 	.word	0x200052f0
    eaf0:	200052ef 	.word	0x200052ef
    eaf4:	200050c4 	.word	0x200050c4
    eaf8:	200050a0 	.word	0x200050a0
    eafc:	200050a4 	.word	0x200050a4
    eb00:	200050b4 	.word	0x200050b4

0000eb04 <usb_serial_getchar>:
{
    eb04:	b500      	push	{lr}
    eb06:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    eb08:	2101      	movs	r1, #1
    eb0a:	f10d 0007 	add.w	r0, sp, #7
    eb0e:	f7ff ff29 	bl	e964 <usb_serial_read>
    eb12:	b120      	cbz	r0, eb1e <usb_serial_getchar+0x1a>
    eb14:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    eb18:	b003      	add	sp, #12
    eb1a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    eb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb22:	e7f9      	b.n	eb18 <usb_serial_getchar+0x14>

0000eb24 <usb_serial_write>:
{
    eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb28:	b085      	sub	sp, #20
    eb2a:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    eb2c:	4b62      	ldr	r3, [pc, #392]	; (ecb8 <usb_serial_write+0x194>)
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	2b00      	cmp	r3, #0
    eb32:	f000 80bd 	beq.w	ecb0 <usb_serial_write+0x18c>
    eb36:	468b      	mov	fp, r1
	while (size > 0) {
    eb38:	2900      	cmp	r1, #0
    eb3a:	d047      	beq.n	ebcc <usb_serial_write+0xa8>
	uint32_t sent=0;
    eb3c:	2300      	movs	r3, #0
    eb3e:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    eb40:	4c5e      	ldr	r4, [pc, #376]	; (ecbc <usb_serial_write+0x198>)
    eb42:	2601      	movs	r6, #1
    eb44:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    eb48:	f8df 818c 	ldr.w	r8, [pc, #396]	; ecd8 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    eb4c:	f8df a184 	ldr.w	sl, [pc, #388]	; ecd4 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    eb50:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eb54:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    eb56:	4b5a      	ldr	r3, [pc, #360]	; (ecc0 <usb_serial_write+0x19c>)
    eb58:	f893 9000 	ldrb.w	r9, [r3]
    eb5c:	4b59      	ldr	r3, [pc, #356]	; (ecc4 <usb_serial_write+0x1a0>)
    eb5e:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    eb62:	4b59      	ldr	r3, [pc, #356]	; (ecc8 <usb_serial_write+0x1a4>)
    eb64:	881b      	ldrh	r3, [r3, #0]
    eb66:	b94b      	cbnz	r3, eb7c <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    eb68:	2700      	movs	r7, #0
		int waiting=0;
    eb6a:	463d      	mov	r5, r7
    eb6c:	e043      	b.n	ebf6 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    eb6e:	4b56      	ldr	r3, [pc, #344]	; (ecc8 <usb_serial_write+0x1a4>)
    eb70:	f44f 6200 	mov.w	r2, #2048	; 0x800
    eb74:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    eb76:	2300      	movs	r3, #0
    eb78:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    eb7c:	4b50      	ldr	r3, [pc, #320]	; (ecc0 <usb_serial_write+0x19c>)
    eb7e:	781b      	ldrb	r3, [r3, #0]
    eb80:	02df      	lsls	r7, r3, #11
    eb82:	4a51      	ldr	r2, [pc, #324]	; (ecc8 <usb_serial_write+0x1a4>)
    eb84:	8815      	ldrh	r5, [r2, #0]
    eb86:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    eb8a:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    eb8e:	4b4f      	ldr	r3, [pc, #316]	; (eccc <usb_serial_write+0x1a8>)
    eb90:	4418      	add	r0, r3
		if (size >= tx_available) {
    eb92:	455d      	cmp	r5, fp
    eb94:	d947      	bls.n	ec26 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    eb96:	465a      	mov	r2, fp
    eb98:	9903      	ldr	r1, [sp, #12]
    eb9a:	f7fe fac1 	bl	d120 <memcpy>
			tx_available -= size;
    eb9e:	eba5 050b 	sub.w	r5, r5, fp
    eba2:	4b49      	ldr	r3, [pc, #292]	; (ecc8 <usb_serial_write+0x1a4>)
    eba4:	801d      	strh	r5, [r3, #0]
			sent += size;
    eba6:	9b01      	ldr	r3, [sp, #4]
    eba8:	445b      	add	r3, fp
    ebaa:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ebac:	4b48      	ldr	r3, [pc, #288]	; (ecd0 <usb_serial_write+0x1ac>)
    ebae:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ebb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    ebb6:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    ebba:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    ebbe:	2300      	movs	r3, #0
    ebc0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    ebc2:	f1bb 0f00 	cmp.w	fp, #0
    ebc6:	d1c3      	bne.n	eb50 <usb_serial_write+0x2c>
    ebc8:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    ebcc:	4658      	mov	r0, fp
    ebce:	e070      	b.n	ecb2 <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    ebd0:	f89a 3000 	ldrb.w	r3, [sl]
    ebd4:	b9f3      	cbnz	r3, ec14 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ebd6:	f8d8 3000 	ldr.w	r3, [r8]
    ebda:	1bdb      	subs	r3, r3, r7
    ebdc:	2b78      	cmp	r3, #120	; 0x78
    ebde:	d81b      	bhi.n	ec18 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    ebe0:	4b35      	ldr	r3, [pc, #212]	; (ecb8 <usb_serial_write+0x194>)
    ebe2:	781b      	ldrb	r3, [r3, #0]
    ebe4:	b1eb      	cbz	r3, ec22 <usb_serial_write+0xfe>
			yield();
    ebe6:	f000 f8fb 	bl	ede0 <yield>
			tx_noautoflush = 1;
    ebea:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    ebec:	4635      	mov	r5, r6
    ebee:	4b36      	ldr	r3, [pc, #216]	; (ecc8 <usb_serial_write+0x1a4>)
    ebf0:	881b      	ldrh	r3, [r3, #0]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	d1c2      	bne.n	eb7c <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    ebf6:	4648      	mov	r0, r9
    ebf8:	f7ff fd0e 	bl	e618 <usb_transfer_status>
			if (!(status & 0x80)) {
    ebfc:	f010 0f80 	tst.w	r0, #128	; 0x80
    ec00:	d0b5      	beq.n	eb6e <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    ec02:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    ec06:	2300      	movs	r3, #0
    ec08:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    ec0a:	2d00      	cmp	r5, #0
    ec0c:	d1e0      	bne.n	ebd0 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    ec0e:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    ec12:	e7dd      	b.n	ebd0 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    ec14:	9801      	ldr	r0, [sp, #4]
    ec16:	e04c      	b.n	ecb2 <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    ec18:	4b2e      	ldr	r3, [pc, #184]	; (ecd4 <usb_serial_write+0x1b0>)
    ec1a:	2201      	movs	r2, #1
    ec1c:	701a      	strb	r2, [r3, #0]
				return sent;
    ec1e:	9801      	ldr	r0, [sp, #4]
    ec20:	e047      	b.n	ecb2 <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    ec22:	9801      	ldr	r0, [sp, #4]
    ec24:	e045      	b.n	ecb2 <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    ec26:	462a      	mov	r2, r5
    ec28:	9903      	ldr	r1, [sp, #12]
    ec2a:	f7fe fa79 	bl	d120 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ec2e:	4d27      	ldr	r5, [pc, #156]	; (eccc <usb_serial_write+0x1a8>)
    ec30:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ec32:	2300      	movs	r3, #0
    ec34:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ec38:	4629      	mov	r1, r5
    ec3a:	4648      	mov	r0, r9
    ec3c:	f7ff fcb0 	bl	e5a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ec40:	462b      	mov	r3, r5
	asm("dsb");
    ec42:	f3bf 8f4f 	dsb	sy
    ec46:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    ec4a:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    ec4e:	428a      	cmp	r2, r1
    ec50:	bf8c      	ite	hi
    ec52:	2201      	movhi	r2, #1
    ec54:	2240      	movls	r2, #64	; 0x40
    ec56:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    ec5a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ec5e:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    ec62:	3320      	adds	r3, #32
	} while (location < end_addr);
    ec64:	429d      	cmp	r5, r3
    ec66:	d1fa      	bne.n	ec5e <usb_serial_write+0x13a>
	asm("dsb");
    ec68:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ec6c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    ec70:	4649      	mov	r1, r9
    ec72:	2004      	movs	r0, #4
    ec74:	f7ff fcac 	bl	e5d0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    ec78:	4b11      	ldr	r3, [pc, #68]	; (ecc0 <usb_serial_write+0x19c>)
    ec7a:	781b      	ldrb	r3, [r3, #0]
    ec7c:	3301      	adds	r3, #1
    ec7e:	b2db      	uxtb	r3, r3
    ec80:	2b03      	cmp	r3, #3
    ec82:	d811      	bhi.n	eca8 <usb_serial_write+0x184>
    ec84:	4a0e      	ldr	r2, [pc, #56]	; (ecc0 <usb_serial_write+0x19c>)
    ec86:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    ec88:	4a0f      	ldr	r2, [pc, #60]	; (ecc8 <usb_serial_write+0x1a4>)
    ec8a:	8813      	ldrh	r3, [r2, #0]
    ec8c:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    ec90:	9901      	ldr	r1, [sp, #4]
    ec92:	4419      	add	r1, r3
    ec94:	9101      	str	r1, [sp, #4]
			data += tx_available;
    ec96:	9903      	ldr	r1, [sp, #12]
    ec98:	4419      	add	r1, r3
    ec9a:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    ec9c:	2300      	movs	r3, #0
    ec9e:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    eca0:	4a0b      	ldr	r2, [pc, #44]	; (ecd0 <usb_serial_write+0x1ac>)
    eca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    eca6:	e788      	b.n	ebba <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eca8:	4b05      	ldr	r3, [pc, #20]	; (ecc0 <usb_serial_write+0x19c>)
    ecaa:	2200      	movs	r2, #0
    ecac:	701a      	strb	r2, [r3, #0]
    ecae:	e7eb      	b.n	ec88 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    ecb0:	2000      	movs	r0, #0
}
    ecb2:	b005      	add	sp, #20
    ecb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecb8:	200052f8 	.word	0x200052f8
    ecbc:	200052f6 	.word	0x200052f6
    ecc0:	200052f5 	.word	0x200052f5
    ecc4:	20004000 	.word	0x20004000
    ecc8:	200052da 	.word	0x200052da
    eccc:	20201080 	.word	0x20201080
    ecd0:	402e0000 	.word	0x402e0000
    ecd4:	200052f4 	.word	0x200052f4
    ecd8:	200052a8 	.word	0x200052a8

0000ecdc <usb_serial_putchar>:
{
    ecdc:	b500      	push	{lr}
    ecde:	b083      	sub	sp, #12
    ece0:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    ece4:	2101      	movs	r1, #1
    ece6:	f10d 0007 	add.w	r0, sp, #7
    ecea:	f7ff ff1b 	bl	eb24 <usb_serial_write>
}
    ecee:	b003      	add	sp, #12
    ecf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ecf4 <usb_serial_write_buffer_free>:
{
    ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    ecf6:	4b0f      	ldr	r3, [pc, #60]	; (ed34 <usb_serial_write_buffer_free+0x40>)
    ecf8:	2201      	movs	r2, #1
    ecfa:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    ecfc:	4d0e      	ldr	r5, [pc, #56]	; (ed38 <usb_serial_write_buffer_free+0x44>)
    ecfe:	2400      	movs	r4, #0
	uint32_t sum = 0;
    ed00:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    ed02:	4e0e      	ldr	r6, [pc, #56]	; (ed3c <usb_serial_write_buffer_free+0x48>)
    ed04:	e003      	b.n	ed0e <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    ed06:	3401      	adds	r4, #1
    ed08:	3520      	adds	r5, #32
    ed0a:	2c04      	cmp	r4, #4
    ed0c:	d00b      	beq.n	ed26 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    ed0e:	7833      	ldrb	r3, [r6, #0]
    ed10:	42a3      	cmp	r3, r4
    ed12:	d0f8      	beq.n	ed06 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ed14:	4628      	mov	r0, r5
    ed16:	f7ff fc7f 	bl	e618 <usb_transfer_status>
    ed1a:	f010 0f80 	tst.w	r0, #128	; 0x80
    ed1e:	bf08      	it	eq
    ed20:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    ed24:	e7ef      	b.n	ed06 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    ed26:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ed2a:	4b02      	ldr	r3, [pc, #8]	; (ed34 <usb_serial_write_buffer_free+0x40>)
    ed2c:	2200      	movs	r2, #0
    ed2e:	701a      	strb	r2, [r3, #0]
}
    ed30:	4638      	mov	r0, r7
    ed32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed34:	200052f6 	.word	0x200052f6
    ed38:	20004000 	.word	0x20004000
    ed3c:	200052f5 	.word	0x200052f5

0000ed40 <usb_serial_flush_output>:
	if (!usb_configuration) return;
    ed40:	4b21      	ldr	r3, [pc, #132]	; (edc8 <usb_serial_flush_output+0x88>)
    ed42:	781b      	ldrb	r3, [r3, #0]
    ed44:	2b00      	cmp	r3, #0
    ed46:	d03e      	beq.n	edc6 <usb_serial_flush_output+0x86>
{
    ed48:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    ed4a:	4b20      	ldr	r3, [pc, #128]	; (edcc <usb_serial_flush_output+0x8c>)
    ed4c:	881d      	ldrh	r5, [r3, #0]
    ed4e:	b905      	cbnz	r5, ed52 <usb_serial_flush_output+0x12>
}
    ed50:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    ed52:	4a1f      	ldr	r2, [pc, #124]	; (edd0 <usb_serial_flush_output+0x90>)
    ed54:	2101      	movs	r1, #1
    ed56:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    ed58:	4a1e      	ldr	r2, [pc, #120]	; (edd4 <usb_serial_flush_output+0x94>)
    ed5a:	7811      	ldrb	r1, [r2, #0]
    ed5c:	4e1e      	ldr	r6, [pc, #120]	; (edd8 <usb_serial_flush_output+0x98>)
    ed5e:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ed62:	4c1e      	ldr	r4, [pc, #120]	; (eddc <usb_serial_flush_output+0x9c>)
    ed64:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    ed68:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ed6c:	2300      	movs	r3, #0
    ed6e:	462a      	mov	r2, r5
    ed70:	4621      	mov	r1, r4
    ed72:	4630      	mov	r0, r6
    ed74:	f7ff fc14 	bl	e5a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ed78:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ed7a:	1962      	adds	r2, r4, r5
	asm("dsb");
    ed7c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ed80:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ed84:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    ed88:	3320      	adds	r3, #32
	} while (location < end_addr);
    ed8a:	429a      	cmp	r2, r3
    ed8c:	d8fa      	bhi.n	ed84 <usb_serial_flush_output+0x44>
	asm("dsb");
    ed8e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ed92:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ed96:	4631      	mov	r1, r6
    ed98:	2004      	movs	r0, #4
    ed9a:	f7ff fc19 	bl	e5d0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ed9e:	4b0d      	ldr	r3, [pc, #52]	; (edd4 <usb_serial_flush_output+0x94>)
    eda0:	781b      	ldrb	r3, [r3, #0]
    eda2:	3301      	adds	r3, #1
    eda4:	b2db      	uxtb	r3, r3
    eda6:	2b03      	cmp	r3, #3
    eda8:	d809      	bhi.n	edbe <usb_serial_flush_output+0x7e>
    edaa:	4a0a      	ldr	r2, [pc, #40]	; (edd4 <usb_serial_flush_output+0x94>)
    edac:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    edae:	2300      	movs	r3, #0
    edb0:	4a06      	ldr	r2, [pc, #24]	; (edcc <usb_serial_flush_output+0x8c>)
    edb2:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    edb4:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    edb8:	4a05      	ldr	r2, [pc, #20]	; (edd0 <usb_serial_flush_output+0x90>)
    edba:	7013      	strb	r3, [r2, #0]
    edbc:	e7c8      	b.n	ed50 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    edbe:	4b05      	ldr	r3, [pc, #20]	; (edd4 <usb_serial_flush_output+0x94>)
    edc0:	2200      	movs	r2, #0
    edc2:	701a      	strb	r2, [r3, #0]
    edc4:	e7f3      	b.n	edae <usb_serial_flush_output+0x6e>
    edc6:	4770      	bx	lr
    edc8:	200052f8 	.word	0x200052f8
    edcc:	200052da 	.word	0x200052da
    edd0:	200052f6 	.word	0x200052f6
    edd4:	200052f5 	.word	0x200052f5
    edd8:	20004000 	.word	0x20004000
    eddc:	20201080 	.word	0x20201080

0000ede0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    ede2:	4b39      	ldr	r3, [pc, #228]	; (eec8 <yield+0xe8>)
    ede4:	781b      	ldrb	r3, [r3, #0]
    ede6:	b1ab      	cbz	r3, ee14 <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    ede8:	4a38      	ldr	r2, [pc, #224]	; (eecc <yield+0xec>)
    edea:	7812      	ldrb	r2, [r2, #0]
    edec:	b992      	cbnz	r2, ee14 <yield+0x34>
	running = 1;
    edee:	4a37      	ldr	r2, [pc, #220]	; (eecc <yield+0xec>)
    edf0:	2101      	movs	r1, #1
    edf2:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    edf4:	f013 0f01 	tst.w	r3, #1
    edf8:	d10d      	bne.n	ee16 <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    edfa:	4b33      	ldr	r3, [pc, #204]	; (eec8 <yield+0xe8>)
    edfc:	781b      	ldrb	r3, [r3, #0]
    edfe:	f013 0f02 	tst.w	r3, #2
    ee02:	d118      	bne.n	ee36 <yield+0x56>

	running = 0;
    ee04:	4b31      	ldr	r3, [pc, #196]	; (eecc <yield+0xec>)
    ee06:	2200      	movs	r2, #0
    ee08:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    ee0a:	4b2f      	ldr	r3, [pc, #188]	; (eec8 <yield+0xe8>)
    ee0c:	781b      	ldrb	r3, [r3, #0]
    ee0e:	f013 0f04 	tst.w	r3, #4
    ee12:	d12a      	bne.n	ee6a <yield+0x8a>
	
};
    ee14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    ee16:	f7ff fe37 	bl	ea88 <usb_serial_available>
		if (Serial.available()) serialEvent();
    ee1a:	b948      	cbnz	r0, ee30 <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    ee1c:	4b2c      	ldr	r3, [pc, #176]	; (eed0 <yield+0xf0>)
    ee1e:	781b      	ldrb	r3, [r3, #0]
    ee20:	2b00      	cmp	r3, #0
    ee22:	d0ea      	beq.n	edfa <yield+0x1a>
    ee24:	4a28      	ldr	r2, [pc, #160]	; (eec8 <yield+0xe8>)
    ee26:	7813      	ldrb	r3, [r2, #0]
    ee28:	f023 0301 	bic.w	r3, r3, #1
    ee2c:	7013      	strb	r3, [r2, #0]
    ee2e:	e7e4      	b.n	edfa <yield+0x1a>
		if (Serial.available()) serialEvent();
    ee30:	f000 f85a 	bl	eee8 <serialEvent()>
    ee34:	e7f2      	b.n	ee1c <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ee36:	4b27      	ldr	r3, [pc, #156]	; (eed4 <yield+0xf4>)
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d0e2      	beq.n	ee04 <yield+0x24>
    ee3e:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    ee40:	4f25      	ldr	r7, [pc, #148]	; (eed8 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ee42:	4e24      	ldr	r6, [pc, #144]	; (eed4 <yield+0xf4>)
    ee44:	e004      	b.n	ee50 <yield+0x70>
    ee46:	3401      	adds	r4, #1
    ee48:	7832      	ldrb	r2, [r6, #0]
    ee4a:	b2e3      	uxtb	r3, r4
    ee4c:	429a      	cmp	r2, r3
    ee4e:	d9d9      	bls.n	ee04 <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    ee50:	b2e3      	uxtb	r3, r4
    ee52:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    ee56:	682b      	ldr	r3, [r5, #0]
    ee58:	691b      	ldr	r3, [r3, #16]
    ee5a:	4628      	mov	r0, r5
    ee5c:	4798      	blx	r3
    ee5e:	2800      	cmp	r0, #0
    ee60:	d0f1      	beq.n	ee46 <yield+0x66>
    ee62:	696b      	ldr	r3, [r5, #20]
    ee64:	689b      	ldr	r3, [r3, #8]
    ee66:	4798      	blx	r3
    ee68:	e7ed      	b.n	ee46 <yield+0x66>
		if (!firstYield) return;  
    ee6a:	4b1c      	ldr	r3, [pc, #112]	; (eedc <yield+0xfc>)
    ee6c:	681b      	ldr	r3, [r3, #0]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d0d0      	beq.n	ee14 <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ee72:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    ee76:	2b00      	cmp	r3, #0
    ee78:	d1cc      	bne.n	ee14 <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ee7a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ee7e:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ee80:	4b16      	ldr	r3, [pc, #88]	; (eedc <yield+0xfc>)
    ee82:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ee84:	b1a0      	cbz	r0, eeb0 <yield+0xd0>
		if (runningFromYield) {
    ee86:	4b16      	ldr	r3, [pc, #88]	; (eee0 <yield+0x100>)
    ee88:	781b      	ldrb	r3, [r3, #0]
    ee8a:	b9ab      	cbnz	r3, eeb8 <yield+0xd8>
		runningFromYield = true;
    ee8c:	4b14      	ldr	r3, [pc, #80]	; (eee0 <yield+0x100>)
    ee8e:	2101      	movs	r1, #1
    ee90:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    ee92:	6943      	ldr	r3, [r0, #20]
    ee94:	4911      	ldr	r1, [pc, #68]	; (eedc <yield+0xfc>)
    ee96:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    ee98:	b193      	cbz	r3, eec0 <yield+0xe0>
			firstYield->_prev = nullptr;
    ee9a:	2100      	movs	r1, #0
    ee9c:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    ee9e:	b902      	cbnz	r2, eea2 <yield+0xc2>
    eea0:	b662      	cpsie	i
		first->_triggered = false;
    eea2:	2400      	movs	r4, #0
    eea4:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    eea6:	6883      	ldr	r3, [r0, #8]
    eea8:	4798      	blx	r3
		runningFromYield = false;
    eeaa:	4b0d      	ldr	r3, [pc, #52]	; (eee0 <yield+0x100>)
    eeac:	701c      	strb	r4, [r3, #0]
    eeae:	e7b1      	b.n	ee14 <yield+0x34>
		if (doit) __enable_irq();
    eeb0:	2a00      	cmp	r2, #0
    eeb2:	d1af      	bne.n	ee14 <yield+0x34>
    eeb4:	b662      	cpsie	i
    eeb6:	e7ad      	b.n	ee14 <yield+0x34>
    eeb8:	2a00      	cmp	r2, #0
    eeba:	d1ab      	bne.n	ee14 <yield+0x34>
    eebc:	b662      	cpsie	i
    eebe:	e7a9      	b.n	ee14 <yield+0x34>
			lastYield = nullptr;
    eec0:	4b08      	ldr	r3, [pc, #32]	; (eee4 <yield+0x104>)
    eec2:	2100      	movs	r1, #0
    eec4:	6019      	str	r1, [r3, #0]
    eec6:	e7ea      	b.n	ee9e <yield+0xbe>
    eec8:	200038bf 	.word	0x200038bf
    eecc:	200052e6 	.word	0x200052e6
    eed0:	6000209a 	.word	0x6000209a
    eed4:	200052e5 	.word	0x200052e5
    eed8:	20004b80 	.word	0x20004b80
    eedc:	20004b70 	.word	0x20004b70
    eee0:	200052e4 	.word	0x200052e4
    eee4:	20004b7c 	.word	0x20004b7c

0000eee8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    eee8:	4770      	bx	lr
	...

0000eeec <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    eeec:	6803      	ldr	r3, [r0, #0]
    eeee:	b16b      	cbz	r3, ef0c <smalloc_verify_pool+0x20>
    eef0:	6842      	ldr	r2, [r0, #4]
    eef2:	b16a      	cbz	r2, ef10 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    eef4:	4b07      	ldr	r3, [pc, #28]	; (ef14 <smalloc_verify_pool+0x28>)
    eef6:	fba3 1302 	umull	r1, r3, r3, r2
    eefa:	08db      	lsrs	r3, r3, #3
    eefc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ef00:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    ef04:	bf0c      	ite	eq
    ef06:	2001      	moveq	r0, #1
    ef08:	2000      	movne	r0, #0
    ef0a:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    ef0c:	2000      	movs	r0, #0
    ef0e:	4770      	bx	lr
    ef10:	2000      	movs	r0, #0
	return 1;
}
    ef12:	4770      	bx	lr
    ef14:	aaaaaaab 	.word	0xaaaaaaab

0000ef18 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    ef18:	b538      	push	{r3, r4, r5, lr}
    ef1a:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    ef1c:	f7ff ffe6 	bl	eeec <smalloc_verify_pool>
    ef20:	b9b8      	cbnz	r0, ef52 <sm_align_pool+0x3a>
    ef22:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    ef24:	6862      	ldr	r2, [r4, #4]
    ef26:	4b0c      	ldr	r3, [pc, #48]	; (ef58 <sm_align_pool+0x40>)
    ef28:	fba3 1302 	umull	r1, r3, r3, r2
    ef2c:	08db      	lsrs	r3, r3, #3
    ef2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    ef32:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ef36:	d001      	beq.n	ef3c <sm_align_pool+0x24>
    ef38:	1ad2      	subs	r2, r2, r3
    ef3a:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ef3c:	6863      	ldr	r3, [r4, #4]
    ef3e:	2bf0      	cmp	r3, #240	; 0xf0
    ef40:	d902      	bls.n	ef48 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    ef42:	2501      	movs	r5, #1
}
    ef44:	4628      	mov	r0, r5
    ef46:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    ef48:	f001 fe22 	bl	10b90 <__errno>
    ef4c:	231c      	movs	r3, #28
    ef4e:	6003      	str	r3, [r0, #0]
		return 0;
    ef50:	e7f8      	b.n	ef44 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    ef52:	2501      	movs	r5, #1
    ef54:	e7f6      	b.n	ef44 <sm_align_pool+0x2c>
    ef56:	bf00      	nop
    ef58:	aaaaaaab 	.word	0xaaaaaaab

0000ef5c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ef5c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ef5e:	b190      	cbz	r0, ef86 <sm_set_pool+0x2a>
    ef60:	461d      	mov	r5, r3
    ef62:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    ef64:	b101      	cbz	r1, ef68 <sm_set_pool+0xc>
    ef66:	b9fa      	cbnz	r2, efa8 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    ef68:	4620      	mov	r0, r4
    ef6a:	f7ff ffbf 	bl	eeec <smalloc_verify_pool>
    ef6e:	4606      	mov	r6, r0
    ef70:	b1a8      	cbz	r0, ef9e <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ef72:	68a3      	ldr	r3, [r4, #8]
    ef74:	b96b      	cbnz	r3, ef92 <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ef76:	2300      	movs	r3, #0
    ef78:	6023      	str	r3, [r4, #0]
    ef7a:	6063      	str	r3, [r4, #4]
    ef7c:	60a3      	str	r3, [r4, #8]
    ef7e:	60e3      	str	r3, [r4, #12]
			return 1;
    ef80:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ef82:	4630      	mov	r0, r6
    ef84:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    ef86:	f001 fe03 	bl	10b90 <__errno>
    ef8a:	2316      	movs	r3, #22
    ef8c:	6003      	str	r3, [r0, #0]
		return 0;
    ef8e:	2600      	movs	r6, #0
    ef90:	e7f7      	b.n	ef82 <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ef92:	6862      	ldr	r2, [r4, #4]
    ef94:	2100      	movs	r1, #0
    ef96:	6820      	ldr	r0, [r4, #0]
    ef98:	f002 f98c 	bl	112b4 <memset>
    ef9c:	e7eb      	b.n	ef76 <sm_set_pool+0x1a>
		errno = EINVAL;
    ef9e:	f001 fdf7 	bl	10b90 <__errno>
    efa2:	2316      	movs	r3, #22
    efa4:	6003      	str	r3, [r0, #0]
		return 0;
    efa6:	e7ec      	b.n	ef82 <sm_set_pool+0x26>
	spool->pool = new_pool;
    efa8:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    efaa:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    efac:	9b04      	ldr	r3, [sp, #16]
    efae:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    efb0:	f7ff ffb2 	bl	ef18 <sm_align_pool>
    efb4:	4606      	mov	r6, r0
    efb6:	2800      	cmp	r0, #0
    efb8:	d0e3      	beq.n	ef82 <sm_set_pool+0x26>
	if (do_zero) {
    efba:	b90d      	cbnz	r5, efc0 <sm_set_pool+0x64>
	return 1;
    efbc:	2601      	movs	r6, #1
    efbe:	e7e0      	b.n	ef82 <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    efc0:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    efc2:	6862      	ldr	r2, [r4, #4]
    efc4:	2100      	movs	r1, #0
    efc6:	6820      	ldr	r0, [r4, #0]
    efc8:	f002 f974 	bl	112b4 <memset>
	return 1;
    efcc:	2601      	movs	r6, #1
    efce:	e7d8      	b.n	ef82 <sm_set_pool+0x26>

0000efd0 <sqrtf>:
    efd0:	b508      	push	{r3, lr}
    efd2:	ed2d 8b02 	vpush	{d8}
    efd6:	eeb0 8a40 	vmov.f32	s16, s0
    efda:	f000 fb11 	bl	f600 <__ieee754_sqrtf>
    efde:	eeb4 8a48 	vcmp.f32	s16, s16
    efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    efe6:	d606      	bvs.n	eff6 <sqrtf+0x26>
    efe8:	eddf 8a09 	vldr	s17, [pc, #36]	; f010 <sqrtf+0x40>
    efec:	eeb4 8ae8 	vcmpe.f32	s16, s17
    eff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eff4:	d402      	bmi.n	effc <sqrtf+0x2c>
    eff6:	ecbd 8b02 	vpop	{d8}
    effa:	bd08      	pop	{r3, pc}
    effc:	f001 fdc8 	bl	10b90 <__errno>
    f000:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    f004:	ecbd 8b02 	vpop	{d8}
    f008:	2321      	movs	r3, #33	; 0x21
    f00a:	6003      	str	r3, [r0, #0]
    f00c:	bd08      	pop	{r3, pc}
    f00e:	bf00      	nop
	...

0000f018 <pow>:
    f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f01c:	ec5b ab10 	vmov	sl, fp, d0
    f020:	ed2d 8b0a 	vpush	{d8-d12}
    f024:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    f028:	ee11 ea90 	vmov	lr, s3
    f02c:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    f030:	f240 70fd 	movw	r0, #2045	; 0x7fd
    f034:	4286      	cmp	r6, r0
    f036:	ee10 1a10 	vmov	r1, s0
    f03a:	ee11 3a10 	vmov	r3, s2
    f03e:	b089      	sub	sp, #36	; 0x24
    f040:	465a      	mov	r2, fp
    f042:	4665      	mov	r5, ip
    f044:	ea4f 541e 	mov.w	r4, lr, lsr #20
    f048:	f200 80c6 	bhi.w	f1d8 <pow+0x1c0>
    f04c:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f050:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    f054:	2e7f      	cmp	r6, #127	; 0x7f
    f056:	bf98      	it	ls
    f058:	2000      	movls	r0, #0
    f05a:	f200 80bd 	bhi.w	f1d8 <pow+0x1c0>
    f05e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    f062:	4ce1      	ldr	r4, [pc, #900]	; (f3e8 <pow+0x3d0>)
    f064:	4be1      	ldr	r3, [pc, #900]	; (f3ec <pow+0x3d4>)
    f066:	4414      	add	r4, r2
    f068:	f3c4 3546 	ubfx	r5, r4, #13, #7
    f06c:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    f070:	ed93 6b00 	vldr	d6, [r3]
    f074:	ed93 7b02 	vldr	d7, [r3, #8]
    f078:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    f07c:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    f080:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    f084:	0d26      	lsrs	r6, r4, #20
    f086:	1524      	asrs	r4, r4, #20
    f088:	ee05 4a90 	vmov	s11, r4
    f08c:	0536      	lsls	r6, r6, #20
    f08e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    f092:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    f096:	1b95      	subs	r5, r2, r6
    f098:	eea5 2b06 	vfma.f64	d2, d5, d6
    f09c:	eea5 9b07 	vfma.f64	d9, d5, d7
    f0a0:	ed93 ab04 	vldr	d10, [r3, #16]
    f0a4:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    f0a8:	ed93 bb08 	vldr	d11, [r3, #32]
    f0ac:	ed93 7b06 	vldr	d7, [r3, #24]
    f0b0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    f0b4:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f0b8:	1e0c      	subs	r4, r1, #0
    f0ba:	ec45 4b1c 	vmov	d12, r4, r5
    f0be:	eeac 0b08 	vfma.f64	d0, d12, d8
    f0c2:	eea0 3b05 	vfma.f64	d3, d0, d5
    f0c6:	eea0 6b04 	vfma.f64	d6, d0, d4
    f0ca:	ee20 5b0a 	vmul.f64	d5, d0, d10
    f0ce:	ee30 4b02 	vadd.f64	d4, d0, d2
    f0d2:	ee20 8b05 	vmul.f64	d8, d0, d5
    f0d6:	eea0 7b0b 	vfma.f64	d7, d0, d11
    f0da:	eea8 6b03 	vfma.f64	d6, d8, d3
    f0de:	ee32 2b44 	vsub.f64	d2, d2, d4
    f0e2:	eea8 7b06 	vfma.f64	d7, d8, d6
    f0e6:	ee32 2b00 	vadd.f64	d2, d2, d0
    f0ea:	eeb0 3b48 	vmov.f64	d3, d8
    f0ee:	ee39 2b02 	vadd.f64	d2, d9, d2
    f0f2:	ee95 3b00 	vfnms.f64	d3, d5, d0
    f0f6:	ee34 5b08 	vadd.f64	d5, d4, d8
    f0fa:	ee20 0b08 	vmul.f64	d0, d0, d8
    f0fe:	ee34 4b45 	vsub.f64	d4, d4, d5
    f102:	ee32 6b03 	vadd.f64	d6, d2, d3
    f106:	ee34 4b08 	vadd.f64	d4, d4, d8
    f10a:	ee36 6b04 	vadd.f64	d6, d6, d4
    f10e:	eea0 6b07 	vfma.f64	d6, d0, d7
    f112:	ee35 4b06 	vadd.f64	d4, d5, d6
    f116:	ee21 8b04 	vmul.f64	d8, d1, d4
    f11a:	ee18 2a90 	vmov	r2, s17
    f11e:	eeb0 7b48 	vmov.f64	d7, d8
    f122:	f3c2 550a 	ubfx	r5, r2, #20, #11
    f126:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    f12a:	18eb      	adds	r3, r5, r3
    f12c:	2b3e      	cmp	r3, #62	; 0x3e
    f12e:	ee91 7b04 	vfnms.f64	d7, d1, d4
    f132:	ee35 5b44 	vsub.f64	d5, d5, d4
    f136:	ee35 5b06 	vadd.f64	d5, d5, d6
    f13a:	eea1 7b05 	vfma.f64	d7, d1, d5
    f13e:	f200 8093 	bhi.w	f268 <pow+0x250>
    f142:	4bab      	ldr	r3, [pc, #684]	; (f3f0 <pow+0x3d8>)
    f144:	ed93 4b02 	vldr	d4, [r3, #8]
    f148:	ed93 5b00 	vldr	d5, [r3]
    f14c:	eeb0 1b44 	vmov.f64	d1, d4
    f150:	ed93 2b04 	vldr	d2, [r3, #16]
    f154:	eea8 1b05 	vfma.f64	d1, d8, d5
    f158:	ed93 6b06 	vldr	d6, [r3, #24]
    f15c:	ee11 1a10 	vmov	r1, s2
    f160:	ee31 1b44 	vsub.f64	d1, d1, d4
    f164:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f168:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    f16c:	eea1 8b02 	vfma.f64	d8, d1, d2
    f170:	eea1 8b06 	vfma.f64	d8, d1, d6
    f174:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    f178:	ee37 7b08 	vadd.f64	d7, d7, d8
    f17c:	ee27 2b07 	vmul.f64	d2, d7, d7
    f180:	1892      	adds	r2, r2, r2
    f182:	f102 040f 	add.w	r4, r2, #15
    f186:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f18a:	eea7 6b04 	vfma.f64	d6, d7, d4
    f18e:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    f192:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f196:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    f19a:	ed93 5b08 	vldr	d5, [r3, #32]
    f19e:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    f1a2:	6857      	ldr	r7, [r2, #4]
    f1a4:	eea7 5b03 	vfma.f64	d5, d7, d3
    f1a8:	1840      	adds	r0, r0, r1
    f1aa:	2400      	movs	r4, #0
    f1ac:	ee22 3b02 	vmul.f64	d3, d2, d2
    f1b0:	ee37 7b04 	vadd.f64	d7, d7, d4
    f1b4:	19a2      	adds	r2, r4, r6
    f1b6:	eea2 7b05 	vfma.f64	d7, d2, d5
    f1ba:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    f1be:	eea3 7b06 	vfma.f64	d7, d3, d6
    f1c2:	2d00      	cmp	r5, #0
    f1c4:	d05f      	beq.n	f286 <pow+0x26e>
    f1c6:	ec43 2b10 	vmov	d0, r2, r3
    f1ca:	eea7 0b00 	vfma.f64	d0, d7, d0
    f1ce:	b009      	add	sp, #36	; 0x24
    f1d0:	ecbd 8b0a 	vpop	{d8-d12}
    f1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1d8:	18d8      	adds	r0, r3, r3
    f1da:	eb4e 090e 	adc.w	r9, lr, lr
    f1de:	1e46      	subs	r6, r0, #1
    f1e0:	4637      	mov	r7, r6
    f1e2:	f06f 0801 	mvn.w	r8, #1
    f1e6:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    f1ea:	45b8      	cmp	r8, r7
    f1ec:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f1f0:	eb77 0606 	sbcs.w	r6, r7, r6
    f1f4:	f0c0 8120 	bcc.w	f438 <pow+0x420>
    f1f8:	1848      	adds	r0, r1, r1
    f1fa:	eb42 0902 	adc.w	r9, r2, r2
    f1fe:	1e46      	subs	r6, r0, #1
    f200:	4637      	mov	r7, r6
    f202:	f169 0600 	sbc.w	r6, r9, #0
    f206:	45b8      	cmp	r8, r7
    f208:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f20c:	eb77 0606 	sbcs.w	r6, r7, r6
    f210:	f0c0 8139 	bcc.w	f486 <pow+0x46e>
    f214:	2a00      	cmp	r2, #0
    f216:	db6a      	blt.n	f2ee <pow+0x2d6>
    f218:	2000      	movs	r0, #0
    f21a:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f21e:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f222:	2b7f      	cmp	r3, #127	; 0x7f
    f224:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f228:	d94f      	bls.n	f2ca <pow+0x2b2>
    f22a:	4b72      	ldr	r3, [pc, #456]	; (f3f4 <pow+0x3dc>)
    f22c:	2000      	movs	r0, #0
    f22e:	429a      	cmp	r2, r3
    f230:	bf08      	it	eq
    f232:	4281      	cmpeq	r1, r0
    f234:	f000 80fd 	beq.w	f432 <pow+0x41a>
    f238:	f240 35bd 	movw	r5, #957	; 0x3bd
    f23c:	42ae      	cmp	r6, r5
    f23e:	f240 8091 	bls.w	f364 <pow+0x34c>
    f242:	2901      	cmp	r1, #1
    f244:	eb72 0303 	sbcs.w	r3, r2, r3
    f248:	bf34      	ite	cc
    f24a:	2301      	movcc	r3, #1
    f24c:	2300      	movcs	r3, #0
    f24e:	42bc      	cmp	r4, r7
    f250:	bf8c      	ite	hi
    f252:	2400      	movhi	r4, #0
    f254:	2401      	movls	r4, #1
    f256:	42a3      	cmp	r3, r4
    f258:	d10e      	bne.n	f278 <pow+0x260>
    f25a:	b009      	add	sp, #36	; 0x24
    f25c:	ecbd 8b0a 	vpop	{d8-d12}
    f260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f264:	f000 ba30 	b.w	f6c8 <__math_uflow>
    f268:	2b00      	cmp	r3, #0
    f26a:	f2c0 80ce 	blt.w	f40a <pow+0x3f2>
    f26e:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f272:	d975      	bls.n	f360 <pow+0x348>
    f274:	2a00      	cmp	r2, #0
    f276:	dbf0      	blt.n	f25a <pow+0x242>
    f278:	b009      	add	sp, #36	; 0x24
    f27a:	ecbd 8b0a 	vpop	{d8-d12}
    f27e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f282:	f000 ba29 	b.w	f6d8 <__math_oflow>
    f286:	42a1      	cmp	r1, r4
    f288:	f280 8113 	bge.w	f4b2 <pow+0x49a>
    f28c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f290:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f294:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f298:	4610      	mov	r0, r2
    f29a:	ec41 0b15 	vmov	d5, r0, r1
    f29e:	ee27 7b05 	vmul.f64	d7, d7, d5
    f2a2:	ee35 6b07 	vadd.f64	d6, d5, d7
    f2a6:	eeb0 4bc6 	vabs.f64	d4, d6
    f2aa:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2b2:	d461      	bmi.n	f378 <pow+0x360>
    f2b4:	ed9f 0b48 	vldr	d0, [pc, #288]	; f3d8 <pow+0x3c0>
    f2b8:	ee26 0b00 	vmul.f64	d0, d6, d0
    f2bc:	b009      	add	sp, #36	; 0x24
    f2be:	ecbd 8b0a 	vpop	{d8-d12}
    f2c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2c6:	f000 ba37 	b.w	f738 <__math_check_uflow>
    f2ca:	2d00      	cmp	r5, #0
    f2cc:	f47f aec7 	bne.w	f05e <pow+0x46>
    f2d0:	ed9f 7b43 	vldr	d7, [pc, #268]	; f3e0 <pow+0x3c8>
    f2d4:	ec4b ab16 	vmov	d6, sl, fp
    f2d8:	ee26 7b07 	vmul.f64	d7, d6, d7
    f2dc:	ec53 2b17 	vmov	r2, r3, d7
    f2e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f2e4:	ee17 1a10 	vmov	r1, s14
    f2e8:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f2ec:	e6b7      	b.n	f05e <pow+0x46>
    f2ee:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f2f2:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f2f6:	4286      	cmp	r6, r0
    f2f8:	dd7e      	ble.n	f3f8 <pow+0x3e0>
    f2fa:	f240 4033 	movw	r0, #1075	; 0x433
    f2fe:	4286      	cmp	r6, r0
    f300:	f300 80fa 	bgt.w	f4f8 <pow+0x4e0>
    f304:	1b80      	subs	r0, r0, r6
    f306:	f1a0 0520 	sub.w	r5, r0, #32
    f30a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f30e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f312:	4087      	lsls	r7, r0
    f314:	fa09 f905 	lsl.w	r9, r9, r5
    f318:	f1c0 0820 	rsb	r8, r0, #32
    f31c:	9501      	str	r5, [sp, #4]
    f31e:	ea47 0509 	orr.w	r5, r7, r9
    f322:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f326:	fa27 f908 	lsr.w	r9, r7, r8
    f32a:	ea45 0509 	orr.w	r5, r5, r9
    f32e:	4087      	lsls	r7, r0
    f330:	ea23 0707 	bic.w	r7, r3, r7
    f334:	ea2e 0505 	bic.w	r5, lr, r5
    f338:	433d      	orrs	r5, r7
    f33a:	d15d      	bne.n	f3f8 <pow+0x3e0>
    f33c:	9d01      	ldr	r5, [sp, #4]
    f33e:	40c3      	lsrs	r3, r0
    f340:	fa0e f808 	lsl.w	r8, lr, r8
    f344:	ea43 0308 	orr.w	r3, r3, r8
    f348:	fa2e fe05 	lsr.w	lr, lr, r5
    f34c:	ea43 030e 	orr.w	r3, r3, lr
    f350:	f003 0301 	and.w	r3, r3, #1
    f354:	0498      	lsls	r0, r3, #18
    f356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f35a:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f35e:	e75e      	b.n	f21e <pow+0x206>
    f360:	2500      	movs	r5, #0
    f362:	e6ee      	b.n	f142 <pow+0x12a>
    f364:	4288      	cmp	r0, r1
    f366:	4193      	sbcs	r3, r2
    f368:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f36c:	bf34      	ite	cc
    f36e:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f372:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f376:	e72a      	b.n	f1ce <pow+0x1b6>
    f378:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f380:	ee35 5b46 	vsub.f64	d5, d5, d6
    f384:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f388:	ee35 5b07 	vadd.f64	d5, d5, d7
    f38c:	bf58      	it	pl
    f38e:	eeb0 4b43 	vmovpl.f64	d4, d3
    f392:	ee36 3b04 	vadd.f64	d3, d6, d4
    f396:	ee34 7b43 	vsub.f64	d7, d4, d3
    f39a:	ee37 7b06 	vadd.f64	d7, d7, d6
    f39e:	ee37 7b05 	vadd.f64	d7, d7, d5
    f3a2:	ee37 7b03 	vadd.f64	d7, d7, d3
    f3a6:	ee37 6b44 	vsub.f64	d6, d7, d4
    f3aa:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3b2:	d104      	bne.n	f3be <pow+0x3a6>
    f3b4:	462a      	mov	r2, r5
    f3b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f3ba:	ec43 2b16 	vmov	d6, r2, r3
    f3be:	ed9f 5b06 	vldr	d5, [pc, #24]	; f3d8 <pow+0x3c0>
    f3c2:	ed8d 5b04 	vstr	d5, [sp, #16]
    f3c6:	ed9d 7b04 	vldr	d7, [sp, #16]
    f3ca:	ee27 7b05 	vmul.f64	d7, d7, d5
    f3ce:	ed8d 7b06 	vstr	d7, [sp, #24]
    f3d2:	e76f      	b.n	f2b4 <pow+0x29c>
    f3d4:	f3af 8000 	nop.w
    f3d8:	00000000 	.word	0x00000000
    f3dc:	00100000 	.word	0x00100000
    f3e0:	00000000 	.word	0x00000000
    f3e4:	43300000 	.word	0x43300000
    f3e8:	c0196aab 	.word	0xc0196aab
    f3ec:	20000c20 	.word	0x20000c20
    f3f0:	200002c0 	.word	0x200002c0
    f3f4:	3ff00000 	.word	0x3ff00000
    f3f8:	ec4b ab10 	vmov	d0, sl, fp
    f3fc:	b009      	add	sp, #36	; 0x24
    f3fe:	ecbd 8b0a 	vpop	{d8-d12}
    f402:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f406:	f000 b987 	b.w	f718 <__math_invalid>
    f40a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f40e:	ee38 0b00 	vadd.f64	d0, d8, d0
    f412:	2800      	cmp	r0, #0
    f414:	f43f aedb 	beq.w	f1ce <pow+0x1b6>
    f418:	eeb1 0b40 	vneg.f64	d0, d0
    f41c:	e6d7      	b.n	f1ce <pow+0x1b6>
    f41e:	1849      	adds	r1, r1, r1
    f420:	4b59      	ldr	r3, [pc, #356]	; (f588 <pow+0x570>)
    f422:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    f426:	f04f 0000 	mov.w	r0, #0
    f42a:	4152      	adcs	r2, r2
    f42c:	4288      	cmp	r0, r1
    f42e:	4193      	sbcs	r3, r2
    f430:	d35d      	bcc.n	f4ee <pow+0x4d6>
    f432:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f436:	e6ca      	b.n	f1ce <pow+0x1b6>
    f438:	ea50 0409 	orrs.w	r4, r0, r9
    f43c:	d0ef      	beq.n	f41e <pow+0x406>
    f43e:	4c53      	ldr	r4, [pc, #332]	; (f58c <pow+0x574>)
    f440:	2500      	movs	r5, #0
    f442:	42a2      	cmp	r2, r4
    f444:	bf08      	it	eq
    f446:	42a9      	cmpeq	r1, r5
    f448:	d047      	beq.n	f4da <pow+0x4c2>
    f44a:	1849      	adds	r1, r1, r1
    f44c:	4b50      	ldr	r3, [pc, #320]	; (f590 <pow+0x578>)
    f44e:	4152      	adcs	r2, r2
    f450:	428d      	cmp	r5, r1
    f452:	eb73 0402 	sbcs.w	r4, r3, r2
    f456:	d34a      	bcc.n	f4ee <pow+0x4d6>
    f458:	4599      	cmp	r9, r3
    f45a:	bf08      	it	eq
    f45c:	42a8      	cmpeq	r0, r5
    f45e:	d146      	bne.n	f4ee <pow+0x4d6>
    f460:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    f464:	429a      	cmp	r2, r3
    f466:	bf08      	it	eq
    f468:	42a9      	cmpeq	r1, r5
    f46a:	d0e2      	beq.n	f432 <pow+0x41a>
    f46c:	429a      	cmp	r2, r3
    f46e:	ea6f 0e0e 	mvn.w	lr, lr
    f472:	bf34      	ite	cc
    f474:	2200      	movcc	r2, #0
    f476:	2201      	movcs	r2, #1
    f478:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    f47c:	4572      	cmp	r2, lr
    f47e:	d077      	beq.n	f570 <pow+0x558>
    f480:	ed9f 0b3d 	vldr	d0, [pc, #244]	; f578 <pow+0x560>
    f484:	e6a3      	b.n	f1ce <pow+0x1b6>
    f486:	ec4b ab17 	vmov	d7, sl, fp
    f48a:	2a00      	cmp	r2, #0
    f48c:	ee27 0b07 	vmul.f64	d0, d7, d7
    f490:	db34      	blt.n	f4fc <pow+0x4e4>
    f492:	2200      	movs	r2, #0
    f494:	ea50 0909 	orrs.w	r9, r0, r9
    f498:	d15d      	bne.n	f556 <pow+0x53e>
    f49a:	f1be 0f00 	cmp.w	lr, #0
    f49e:	f6bf ae96 	bge.w	f1ce <pow+0x1b6>
    f4a2:	4610      	mov	r0, r2
    f4a4:	b009      	add	sp, #36	; 0x24
    f4a6:	ecbd 8b0a 	vpop	{d8-d12}
    f4aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4ae:	f000 b91b 	b.w	f6e8 <__math_divzero>
    f4b2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    f4b6:	ed9f 6b32 	vldr	d6, [pc, #200]	; f580 <pow+0x568>
    f4ba:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    f4be:	4610      	mov	r0, r2
    f4c0:	ec41 0b10 	vmov	d0, r0, r1
    f4c4:	eea7 0b00 	vfma.f64	d0, d7, d0
    f4c8:	ee20 0b06 	vmul.f64	d0, d0, d6
    f4cc:	b009      	add	sp, #36	; 0x24
    f4ce:	ecbd 8b0a 	vpop	{d8-d12}
    f4d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4d6:	f000 b93b 	b.w	f750 <__math_check_oflow>
    f4da:	18db      	adds	r3, r3, r3
    f4dc:	4a2a      	ldr	r2, [pc, #168]	; (f588 <pow+0x570>)
    f4de:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    f4e2:	eb4e 0e0e 	adc.w	lr, lr, lr
    f4e6:	429d      	cmp	r5, r3
    f4e8:	eb72 020e 	sbcs.w	r2, r2, lr
    f4ec:	d2a1      	bcs.n	f432 <pow+0x41a>
    f4ee:	ec4b ab17 	vmov	d7, sl, fp
    f4f2:	ee37 0b01 	vadd.f64	d0, d7, d1
    f4f6:	e66a      	b.n	f1ce <pow+0x1b6>
    f4f8:	2000      	movs	r0, #0
    f4fa:	e72c      	b.n	f356 <pow+0x33e>
    f4fc:	f3c4 020a 	ubfx	r2, r4, #0, #11
    f500:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    f504:	2934      	cmp	r1, #52	; 0x34
    f506:	d8c4      	bhi.n	f492 <pow+0x47a>
    f508:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    f50c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f510:	f1a2 051d 	sub.w	r5, r2, #29
    f514:	3203      	adds	r2, #3
    f516:	fa01 f705 	lsl.w	r7, r1, r5
    f51a:	fa01 f402 	lsl.w	r4, r1, r2
    f51e:	f1c2 0620 	rsb	r6, r2, #32
    f522:	433c      	orrs	r4, r7
    f524:	fa21 f706 	lsr.w	r7, r1, r6
    f528:	433c      	orrs	r4, r7
    f52a:	4091      	lsls	r1, r2
    f52c:	ea23 0101 	bic.w	r1, r3, r1
    f530:	ea2e 0404 	bic.w	r4, lr, r4
    f534:	4321      	orrs	r1, r4
    f536:	d1ac      	bne.n	f492 <pow+0x47a>
    f538:	fa23 f202 	lsr.w	r2, r3, r2
    f53c:	fa0e f606 	lsl.w	r6, lr, r6
    f540:	4332      	orrs	r2, r6
    f542:	fa2e f505 	lsr.w	r5, lr, r5
    f546:	432a      	orrs	r2, r5
    f548:	f012 0201 	ands.w	r2, r2, #1
    f54c:	d0a2      	beq.n	f494 <pow+0x47c>
    f54e:	eeb1 0b40 	vneg.f64	d0, d0
    f552:	2201      	movs	r2, #1
    f554:	e79e      	b.n	f494 <pow+0x47c>
    f556:	f1be 0f00 	cmp.w	lr, #0
    f55a:	f6bf ae38 	bge.w	f1ce <pow+0x1b6>
    f55e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f562:	ee86 7b00 	vdiv.f64	d7, d6, d0
    f566:	ed8d 7b02 	vstr	d7, [sp, #8]
    f56a:	ed9d 0b02 	vldr	d0, [sp, #8]
    f56e:	e62e      	b.n	f1ce <pow+0x1b6>
    f570:	ee21 0b01 	vmul.f64	d0, d1, d1
    f574:	e62b      	b.n	f1ce <pow+0x1b6>
    f576:	bf00      	nop
	...
    f584:	7f000000 	.word	0x7f000000
    f588:	fff00000 	.word	0xfff00000
    f58c:	3ff00000 	.word	0x3ff00000
    f590:	ffe00000 	.word	0xffe00000

0000f594 <asinf>:
    f594:	b508      	push	{r3, lr}
    f596:	ed2d 8b02 	vpush	{d8}
    f59a:	eeb0 8a40 	vmov.f32	s16, s0
    f59e:	f000 f9e3 	bl	f968 <__ieee754_asinf>
    f5a2:	eeb4 8a48 	vcmp.f32	s16, s16
    f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5aa:	eef0 8a40 	vmov.f32	s17, s0
    f5ae:	d60a      	bvs.n	f5c6 <asinf+0x32>
    f5b0:	eeb0 0a48 	vmov.f32	s0, s16
    f5b4:	f000 f81c 	bl	f5f0 <fabsf>
    f5b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f5bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5c4:	dc04      	bgt.n	f5d0 <asinf+0x3c>
    f5c6:	eeb0 0a68 	vmov.f32	s0, s17
    f5ca:	ecbd 8b02 	vpop	{d8}
    f5ce:	bd08      	pop	{r3, pc}
    f5d0:	f001 fade 	bl	10b90 <__errno>
    f5d4:	ecbd 8b02 	vpop	{d8}
    f5d8:	4603      	mov	r3, r0
    f5da:	2221      	movs	r2, #33	; 0x21
    f5dc:	601a      	str	r2, [r3, #0]
    f5de:	4802      	ldr	r0, [pc, #8]	; (f5e8 <asinf+0x54>)
    f5e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f5e4:	f000 b8c8 	b.w	f778 <nanf>
    f5e8:	20001f98 	.word	0x20001f98

0000f5ec <atan2f>:
    f5ec:	f000 bac2 	b.w	fb74 <__ieee754_atan2f>

0000f5f0 <fabsf>:
    f5f0:	ee10 3a10 	vmov	r3, s0
    f5f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f5f8:	ee00 3a10 	vmov	s0, r3
    f5fc:	4770      	bx	lr
    f5fe:	bf00      	nop

0000f600 <__ieee754_sqrtf>:
    f600:	eeb1 0ac0 	vsqrt.f32	s0, s0
    f604:	4770      	bx	lr
    f606:	bf00      	nop

0000f608 <sin>:
    f608:	eeb0 7b40 	vmov.f64	d7, d0
    f60c:	ee17 3a90 	vmov	r3, s15
    f610:	4a1b      	ldr	r2, [pc, #108]	; (f680 <sin+0x78>)
    f612:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f616:	4293      	cmp	r3, r2
    f618:	dd1c      	ble.n	f654 <sin+0x4c>
    f61a:	4a1a      	ldr	r2, [pc, #104]	; (f684 <sin+0x7c>)
    f61c:	4293      	cmp	r3, r2
    f61e:	dd02      	ble.n	f626 <sin+0x1e>
    f620:	ee30 0b40 	vsub.f64	d0, d0, d0
    f624:	4770      	bx	lr
    f626:	b500      	push	{lr}
    f628:	b085      	sub	sp, #20
    f62a:	4668      	mov	r0, sp
    f62c:	f000 fc20 	bl	fe70 <__ieee754_rem_pio2>
    f630:	f000 0003 	and.w	r0, r0, #3
    f634:	2801      	cmp	r0, #1
    f636:	ed9d 1b02 	vldr	d1, [sp, #8]
    f63a:	ed9d 0b00 	vldr	d0, [sp]
    f63e:	d00e      	beq.n	f65e <sin+0x56>
    f640:	2802      	cmp	r0, #2
    f642:	d013      	beq.n	f66c <sin+0x64>
    f644:	b170      	cbz	r0, f664 <sin+0x5c>
    f646:	f000 f89f 	bl	f788 <__kernel_cos>
    f64a:	eeb1 0b40 	vneg.f64	d0, d0
    f64e:	b005      	add	sp, #20
    f650:	f85d fb04 	ldr.w	pc, [sp], #4
    f654:	ed9f 1b08 	vldr	d1, [pc, #32]	; f678 <sin+0x70>
    f658:	2000      	movs	r0, #0
    f65a:	f000 b92d 	b.w	f8b8 <__kernel_sin>
    f65e:	f000 f893 	bl	f788 <__kernel_cos>
    f662:	e7f4      	b.n	f64e <sin+0x46>
    f664:	2001      	movs	r0, #1
    f666:	f000 f927 	bl	f8b8 <__kernel_sin>
    f66a:	e7f0      	b.n	f64e <sin+0x46>
    f66c:	2001      	movs	r0, #1
    f66e:	f000 f923 	bl	f8b8 <__kernel_sin>
    f672:	eeb1 0b40 	vneg.f64	d0, d0
    f676:	e7ea      	b.n	f64e <sin+0x46>
	...
    f680:	3fe921fb 	.word	0x3fe921fb
    f684:	7fefffff 	.word	0x7fefffff

0000f688 <with_errno>:
    f688:	b510      	push	{r4, lr}
    f68a:	b082      	sub	sp, #8
    f68c:	ed8d 0b00 	vstr	d0, [sp]
    f690:	4604      	mov	r4, r0
    f692:	f001 fa7d 	bl	10b90 <__errno>
    f696:	ed9d 0b00 	vldr	d0, [sp]
    f69a:	6004      	str	r4, [r0, #0]
    f69c:	b002      	add	sp, #8
    f69e:	bd10      	pop	{r4, pc}

0000f6a0 <xflow>:
    f6a0:	b082      	sub	sp, #8
    f6a2:	b158      	cbz	r0, f6bc <xflow+0x1c>
    f6a4:	eeb1 7b40 	vneg.f64	d7, d0
    f6a8:	ed8d 7b00 	vstr	d7, [sp]
    f6ac:	ed9d 7b00 	vldr	d7, [sp]
    f6b0:	2022      	movs	r0, #34	; 0x22
    f6b2:	ee20 0b07 	vmul.f64	d0, d0, d7
    f6b6:	b002      	add	sp, #8
    f6b8:	f7ff bfe6 	b.w	f688 <with_errno>
    f6bc:	eeb0 7b40 	vmov.f64	d7, d0
    f6c0:	e7f2      	b.n	f6a8 <xflow+0x8>
    f6c2:	bf00      	nop
    f6c4:	0000      	movs	r0, r0
	...

0000f6c8 <__math_uflow>:
    f6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; f6d0 <__math_uflow+0x8>
    f6cc:	f7ff bfe8 	b.w	f6a0 <xflow>
    f6d0:	00000000 	.word	0x00000000
    f6d4:	10000000 	.word	0x10000000

0000f6d8 <__math_oflow>:
    f6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; f6e0 <__math_oflow+0x8>
    f6dc:	f7ff bfe0 	b.w	f6a0 <xflow>
    f6e0:	00000000 	.word	0x00000000
    f6e4:	70000000 	.word	0x70000000

0000f6e8 <__math_divzero>:
    f6e8:	b082      	sub	sp, #8
    f6ea:	2800      	cmp	r0, #0
    f6ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f6f0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    f6f4:	fe06 7b07 	vseleq.f64	d7, d6, d7
    f6f8:	ed8d 7b00 	vstr	d7, [sp]
    f6fc:	ed9d 0b00 	vldr	d0, [sp]
    f700:	ed9f 7b03 	vldr	d7, [pc, #12]	; f710 <__math_divzero+0x28>
    f704:	2022      	movs	r0, #34	; 0x22
    f706:	ee80 0b07 	vdiv.f64	d0, d0, d7
    f70a:	b002      	add	sp, #8
    f70c:	f7ff bfbc 	b.w	f688 <with_errno>
	...

0000f718 <__math_invalid>:
    f718:	eeb4 0b40 	vcmp.f64	d0, d0
    f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f720:	ee30 7b40 	vsub.f64	d7, d0, d0
    f724:	ee87 6b07 	vdiv.f64	d6, d7, d7
    f728:	eeb0 0b46 	vmov.f64	d0, d6
    f72c:	d602      	bvs.n	f734 <__math_invalid+0x1c>
    f72e:	2021      	movs	r0, #33	; 0x21
    f730:	f7ff bfaa 	b.w	f688 <with_errno>
    f734:	4770      	bx	lr
    f736:	bf00      	nop

0000f738 <__math_check_uflow>:
    f738:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f740:	d000      	beq.n	f744 <__math_check_uflow+0xc>
    f742:	4770      	bx	lr
    f744:	2022      	movs	r0, #34	; 0x22
    f746:	f7ff bf9f 	b.w	f688 <with_errno>
    f74a:	bf00      	nop
    f74c:	0000      	movs	r0, r0
	...

0000f750 <__math_check_oflow>:
    f750:	ed9f 6b07 	vldr	d6, [pc, #28]	; f770 <__math_check_oflow+0x20>
    f754:	eeb0 7bc0 	vabs.f64	d7, d0
    f758:	eeb4 7b46 	vcmp.f64	d7, d6
    f75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f760:	dc00      	bgt.n	f764 <__math_check_oflow+0x14>
    f762:	4770      	bx	lr
    f764:	2022      	movs	r0, #34	; 0x22
    f766:	f7ff bf8f 	b.w	f688 <with_errno>
    f76a:	bf00      	nop
    f76c:	f3af 8000 	nop.w
    f770:	ffffffff 	.word	0xffffffff
    f774:	7fefffff 	.word	0x7fefffff

0000f778 <nanf>:
    f778:	ed9f 0a01 	vldr	s0, [pc, #4]	; f780 <nanf+0x8>
    f77c:	4770      	bx	lr
    f77e:	bf00      	nop
    f780:	7fc00000 	.word	0x7fc00000
    f784:	00000000 	.word	0x00000000

0000f788 <__kernel_cos>:
    f788:	ee10 3a90 	vmov	r3, s1
    f78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f790:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f794:	ed2d 8b02 	vpush	{d8}
    f798:	da2e      	bge.n	f7f8 <__kernel_cos+0x70>
    f79a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f79e:	ee17 3a90 	vmov	r3, s15
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d065      	beq.n	f872 <__kernel_cos+0xea>
    f7a6:	ee20 4b00 	vmul.f64	d4, d0, d0
    f7aa:	ed9f 8b35 	vldr	d8, [pc, #212]	; f880 <__kernel_cos+0xf8>
    f7ae:	ed9f 2b36 	vldr	d2, [pc, #216]	; f888 <__kernel_cos+0x100>
    f7b2:	ed9f 3b37 	vldr	d3, [pc, #220]	; f890 <__kernel_cos+0x108>
    f7b6:	eea4 2b08 	vfma.f64	d2, d4, d8
    f7ba:	ed9f 5b37 	vldr	d5, [pc, #220]	; f898 <__kernel_cos+0x110>
    f7be:	eea4 3b02 	vfma.f64	d3, d4, d2
    f7c2:	ed9f 6b37 	vldr	d6, [pc, #220]	; f8a0 <__kernel_cos+0x118>
    f7c6:	eea4 5b03 	vfma.f64	d5, d4, d3
    f7ca:	ed9f 7b37 	vldr	d7, [pc, #220]	; f8a8 <__kernel_cos+0x120>
    f7ce:	eea4 6b05 	vfma.f64	d6, d4, d5
    f7d2:	eea4 7b06 	vfma.f64	d7, d4, d6
    f7d6:	ee24 7b07 	vmul.f64	d7, d4, d7
    f7da:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f7de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f7e2:	eea4 1b07 	vfma.f64	d1, d4, d7
    f7e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f7ea:	ee94 1b06 	vfnms.f64	d1, d4, d6
    f7ee:	ecbd 8b02 	vpop	{d8}
    f7f2:	ee30 0b41 	vsub.f64	d0, d0, d1
    f7f6:	4770      	bx	lr
    f7f8:	ed9f 8b21 	vldr	d8, [pc, #132]	; f880 <__kernel_cos+0xf8>
    f7fc:	ee20 4b00 	vmul.f64	d4, d0, d0
    f800:	ed9f 2b21 	vldr	d2, [pc, #132]	; f888 <__kernel_cos+0x100>
    f804:	ed9f 3b22 	vldr	d3, [pc, #136]	; f890 <__kernel_cos+0x108>
    f808:	eea4 2b08 	vfma.f64	d2, d4, d8
    f80c:	ed9f 5b22 	vldr	d5, [pc, #136]	; f898 <__kernel_cos+0x110>
    f810:	eea2 3b04 	vfma.f64	d3, d2, d4
    f814:	ed9f 6b22 	vldr	d6, [pc, #136]	; f8a0 <__kernel_cos+0x118>
    f818:	eea3 5b04 	vfma.f64	d5, d3, d4
    f81c:	ed9f 7b22 	vldr	d7, [pc, #136]	; f8a8 <__kernel_cos+0x120>
    f820:	eea5 6b04 	vfma.f64	d6, d5, d4
    f824:	4a22      	ldr	r2, [pc, #136]	; (f8b0 <__kernel_cos+0x128>)
    f826:	eea6 7b04 	vfma.f64	d7, d6, d4
    f82a:	4293      	cmp	r3, r2
    f82c:	ee27 7b04 	vmul.f64	d7, d7, d4
    f830:	ddd3      	ble.n	f7da <__kernel_cos+0x52>
    f832:	4a20      	ldr	r2, [pc, #128]	; (f8b4 <__kernel_cos+0x12c>)
    f834:	4293      	cmp	r3, r2
    f836:	dc17      	bgt.n	f868 <__kernel_cos+0xe0>
    f838:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f83c:	2000      	movs	r0, #0
    f83e:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    f842:	ec41 0b15 	vmov	d5, r0, r1
    f846:	ee36 6b45 	vsub.f64	d6, d6, d5
    f84a:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f84e:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f852:	eea4 1b07 	vfma.f64	d1, d4, d7
    f856:	ee94 5b03 	vfnms.f64	d5, d4, d3
    f85a:	ecbd 8b02 	vpop	{d8}
    f85e:	ee35 0b41 	vsub.f64	d0, d5, d1
    f862:	ee36 0b40 	vsub.f64	d0, d6, d0
    f866:	4770      	bx	lr
    f868:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    f86c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    f870:	e7eb      	b.n	f84a <__kernel_cos+0xc2>
    f872:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f876:	ecbd 8b02 	vpop	{d8}
    f87a:	4770      	bx	lr
    f87c:	f3af 8000 	nop.w
    f880:	be8838d4 	.word	0xbe8838d4
    f884:	bda8fae9 	.word	0xbda8fae9
    f888:	bdb4b1c4 	.word	0xbdb4b1c4
    f88c:	3e21ee9e 	.word	0x3e21ee9e
    f890:	809c52ad 	.word	0x809c52ad
    f894:	be927e4f 	.word	0xbe927e4f
    f898:	19cb1590 	.word	0x19cb1590
    f89c:	3efa01a0 	.word	0x3efa01a0
    f8a0:	16c15177 	.word	0x16c15177
    f8a4:	bf56c16c 	.word	0xbf56c16c
    f8a8:	5555554c 	.word	0x5555554c
    f8ac:	3fa55555 	.word	0x3fa55555
    f8b0:	3fd33332 	.word	0x3fd33332
    f8b4:	3fe90000 	.word	0x3fe90000

0000f8b8 <__kernel_sin>:
    f8b8:	ee10 3a90 	vmov	r3, s1
    f8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f8c0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f8c4:	da04      	bge.n	f8d0 <__kernel_sin+0x18>
    f8c6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f8ca:	ee17 3a90 	vmov	r3, s15
    f8ce:	b35b      	cbz	r3, f928 <__kernel_sin+0x70>
    f8d0:	ee20 7b00 	vmul.f64	d7, d0, d0
    f8d4:	ed9f 2b16 	vldr	d2, [pc, #88]	; f930 <__kernel_sin+0x78>
    f8d8:	ed9f 3b17 	vldr	d3, [pc, #92]	; f938 <__kernel_sin+0x80>
    f8dc:	ed9f 4b18 	vldr	d4, [pc, #96]	; f940 <__kernel_sin+0x88>
    f8e0:	eea7 3b02 	vfma.f64	d3, d7, d2
    f8e4:	ed9f 5b18 	vldr	d5, [pc, #96]	; f948 <__kernel_sin+0x90>
    f8e8:	eea3 4b07 	vfma.f64	d4, d3, d7
    f8ec:	ed9f 6b18 	vldr	d6, [pc, #96]	; f950 <__kernel_sin+0x98>
    f8f0:	eea4 5b07 	vfma.f64	d5, d4, d7
    f8f4:	eea5 6b07 	vfma.f64	d6, d5, d7
    f8f8:	ee20 5b07 	vmul.f64	d5, d0, d7
    f8fc:	b930      	cbnz	r0, f90c <__kernel_sin+0x54>
    f8fe:	ed9f 4b16 	vldr	d4, [pc, #88]	; f958 <__kernel_sin+0xa0>
    f902:	eea7 4b06 	vfma.f64	d4, d7, d6
    f906:	eea4 0b05 	vfma.f64	d0, d4, d5
    f90a:	4770      	bx	lr
    f90c:	ed9f 4b14 	vldr	d4, [pc, #80]	; f960 <__kernel_sin+0xa8>
    f910:	ee26 6b45 	vnmul.f64	d6, d6, d5
    f914:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f918:	eea1 6b03 	vfma.f64	d6, d1, d3
    f91c:	ee96 1b07 	vfnms.f64	d1, d6, d7
    f920:	eea5 1b04 	vfma.f64	d1, d5, d4
    f924:	ee30 0b41 	vsub.f64	d0, d0, d1
    f928:	4770      	bx	lr
    f92a:	bf00      	nop
    f92c:	f3af 8000 	nop.w
    f930:	5acfd57c 	.word	0x5acfd57c
    f934:	3de5d93a 	.word	0x3de5d93a
    f938:	8a2b9ceb 	.word	0x8a2b9ceb
    f93c:	be5ae5e6 	.word	0xbe5ae5e6
    f940:	57b1fe7d 	.word	0x57b1fe7d
    f944:	3ec71de3 	.word	0x3ec71de3
    f948:	19c161d5 	.word	0x19c161d5
    f94c:	bf2a01a0 	.word	0xbf2a01a0
    f950:	1110f8a6 	.word	0x1110f8a6
    f954:	3f811111 	.word	0x3f811111
    f958:	55555549 	.word	0x55555549
    f95c:	bfc55555 	.word	0xbfc55555
    f960:	55555549 	.word	0x55555549
    f964:	3fc55555 	.word	0x3fc55555

0000f968 <__ieee754_asinf>:
    f968:	b538      	push	{r3, r4, r5, lr}
    f96a:	ee10 5a10 	vmov	r5, s0
    f96e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    f972:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    f976:	ed2d 8b04 	vpush	{d8-d9}
    f97a:	f000 8085 	beq.w	fa88 <__ieee754_asinf+0x120>
    f97e:	dc7a      	bgt.n	fa76 <__ieee754_asinf+0x10e>
    f980:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    f984:	da0f      	bge.n	f9a6 <__ieee754_asinf+0x3e>
    f986:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    f98a:	f280 809c 	bge.w	fac6 <__ieee754_asinf+0x15e>
    f98e:	eddf 7a69 	vldr	s15, [pc, #420]	; fb34 <__ieee754_asinf+0x1cc>
    f992:	ee70 7a27 	vadd.f32	s15, s0, s15
    f996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f99a:	eef4 7ac7 	vcmpe.f32	s15, s14
    f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9a2:	f300 808d 	bgt.w	fac0 <__ieee754_asinf+0x158>
    f9a6:	f7ff fe23 	bl	f5f0 <fabsf>
    f9aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f9ae:	ee37 0ac0 	vsub.f32	s0, s15, s0
    f9b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    f9b6:	ee20 8a07 	vmul.f32	s16, s0, s14
    f9ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; fb38 <__ieee754_asinf+0x1d0>
    f9be:	ed9f 7a5f 	vldr	s14, [pc, #380]	; fb3c <__ieee754_asinf+0x1d4>
    f9c2:	ed9f 6a5f 	vldr	s12, [pc, #380]	; fb40 <__ieee754_asinf+0x1d8>
    f9c6:	ed9f 5a5f 	vldr	s10, [pc, #380]	; fb44 <__ieee754_asinf+0x1dc>
    f9ca:	eddf 5a5f 	vldr	s11, [pc, #380]	; fb48 <__ieee754_asinf+0x1e0>
    f9ce:	eddf 8a5f 	vldr	s17, [pc, #380]	; fb4c <__ieee754_asinf+0x1e4>
    f9d2:	eee8 6a07 	vfma.f32	s13, s16, s14
    f9d6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; fb50 <__ieee754_asinf+0x1e8>
    f9da:	eea8 7a06 	vfma.f32	s14, s16, s12
    f9de:	ed9f 6a5d 	vldr	s12, [pc, #372]	; fb54 <__ieee754_asinf+0x1ec>
    f9e2:	eea6 5a88 	vfma.f32	s10, s13, s16
    f9e6:	eea7 6a08 	vfma.f32	s12, s14, s16
    f9ea:	ed9f 7a5b 	vldr	s14, [pc, #364]	; fb58 <__ieee754_asinf+0x1f0>
    f9ee:	eddf 6a5b 	vldr	s13, [pc, #364]	; fb5c <__ieee754_asinf+0x1f4>
    f9f2:	eee5 5a08 	vfma.f32	s11, s10, s16
    f9f6:	eea6 7a08 	vfma.f32	s14, s12, s16
    f9fa:	eee5 6a88 	vfma.f32	s13, s11, s16
    f9fe:	eee7 7a08 	vfma.f32	s15, s14, s16
    fa02:	eee6 8a88 	vfma.f32	s17, s13, s16
    fa06:	eeb0 0a48 	vmov.f32	s0, s16
    fa0a:	eeb0 9a67 	vmov.f32	s18, s15
    fa0e:	f7ff fdf7 	bl	f600 <__ieee754_sqrtf>
    fa12:	4b53      	ldr	r3, [pc, #332]	; (fb60 <__ieee754_asinf+0x1f8>)
    fa14:	429c      	cmp	r4, r3
    fa16:	ee68 8a88 	vmul.f32	s17, s17, s16
    fa1a:	dc42      	bgt.n	faa2 <__ieee754_asinf+0x13a>
    fa1c:	ee10 3a10 	vmov	r3, s0
    fa20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    fa24:	f023 030f 	bic.w	r3, r3, #15
    fa28:	ee06 3a90 	vmov	s13, r3
    fa2c:	eea6 8ae6 	vfms.f32	s16, s13, s13
    fa30:	ee30 7a26 	vadd.f32	s14, s0, s13
    fa34:	ee88 5a89 	vdiv.f32	s10, s17, s18
    fa38:	eec8 4a07 	vdiv.f32	s9, s16, s14
    fa3c:	eddf 7a49 	vldr	s15, [pc, #292]	; fb64 <__ieee754_asinf+0x1fc>
    fa40:	ed9f 7a49 	vldr	s14, [pc, #292]	; fb68 <__ieee754_asinf+0x200>
    fa44:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    fa48:	eee4 7ac6 	vfms.f32	s15, s9, s12
    fa4c:	ee30 0a00 	vadd.f32	s0, s0, s0
    fa50:	eef0 5a47 	vmov.f32	s11, s14
    fa54:	eee6 5ac6 	vfms.f32	s11, s13, s12
    fa58:	eed0 7a05 	vfnms.f32	s15, s0, s10
    fa5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    fa60:	ee37 7a67 	vsub.f32	s14, s14, s15
    fa64:	2d00      	cmp	r5, #0
    fa66:	dc0a      	bgt.n	fa7e <__ieee754_asinf+0x116>
    fa68:	ecbd 8b04 	vpop	{d8-d9}
    fa6c:	eeb1 7a47 	vneg.f32	s14, s14
    fa70:	eeb0 0a47 	vmov.f32	s0, s14
    fa74:	bd38      	pop	{r3, r4, r5, pc}
    fa76:	ee70 7a40 	vsub.f32	s15, s0, s0
    fa7a:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    fa7e:	ecbd 8b04 	vpop	{d8-d9}
    fa82:	eeb0 0a47 	vmov.f32	s0, s14
    fa86:	bd38      	pop	{r3, r4, r5, pc}
    fa88:	ed9f 7a36 	vldr	s14, [pc, #216]	; fb64 <__ieee754_asinf+0x1fc>
    fa8c:	eddf 7a37 	vldr	s15, [pc, #220]	; fb6c <__ieee754_asinf+0x204>
    fa90:	ee20 7a07 	vmul.f32	s14, s0, s14
    fa94:	ecbd 8b04 	vpop	{d8-d9}
    fa98:	eea0 7a27 	vfma.f32	s14, s0, s15
    fa9c:	eeb0 0a47 	vmov.f32	s0, s14
    faa0:	bd38      	pop	{r3, r4, r5, pc}
    faa2:	ee88 6a89 	vdiv.f32	s12, s17, s18
    faa6:	eddf 7a32 	vldr	s15, [pc, #200]	; fb70 <__ieee754_asinf+0x208>
    faaa:	ed9f 7a30 	vldr	s14, [pc, #192]	; fb6c <__ieee754_asinf+0x204>
    faae:	eea0 0a06 	vfma.f32	s0, s0, s12
    fab2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    fab6:	eee0 7a26 	vfma.f32	s15, s0, s13
    faba:	ee37 7a67 	vsub.f32	s14, s14, s15
    fabe:	e7d1      	b.n	fa64 <__ieee754_asinf+0xfc>
    fac0:	eeb0 7a40 	vmov.f32	s14, s0
    fac4:	e7db      	b.n	fa7e <__ieee754_asinf+0x116>
    fac6:	ee60 7a00 	vmul.f32	s15, s0, s0
    faca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; fb3c <__ieee754_asinf+0x1d4>
    face:	eddf 6a1a 	vldr	s13, [pc, #104]	; fb38 <__ieee754_asinf+0x1d0>
    fad2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; fb44 <__ieee754_asinf+0x1dc>
    fad6:	eddf 5a1a 	vldr	s11, [pc, #104]	; fb40 <__ieee754_asinf+0x1d8>
    fada:	ed9f 5a1b 	vldr	s10, [pc, #108]	; fb48 <__ieee754_asinf+0x1e0>
    fade:	eee7 6a87 	vfma.f32	s13, s15, s14
    fae2:	ecbd 8b04 	vpop	{d8-d9}
    fae6:	eea6 6aa7 	vfma.f32	s12, s13, s15
    faea:	ed9f 7a19 	vldr	s14, [pc, #100]	; fb50 <__ieee754_asinf+0x1e8>
    faee:	eddf 6a19 	vldr	s13, [pc, #100]	; fb54 <__ieee754_asinf+0x1ec>
    faf2:	eea7 7aa5 	vfma.f32	s14, s15, s11
    faf6:	eea6 5a27 	vfma.f32	s10, s12, s15
    fafa:	eee7 6a27 	vfma.f32	s13, s14, s15
    fafe:	eddf 5a17 	vldr	s11, [pc, #92]	; fb5c <__ieee754_asinf+0x1f4>
    fb02:	ed9f 6a15 	vldr	s12, [pc, #84]	; fb58 <__ieee754_asinf+0x1f0>
    fb06:	ed9f 7a11 	vldr	s14, [pc, #68]	; fb4c <__ieee754_asinf+0x1e4>
    fb0a:	eee5 5a27 	vfma.f32	s11, s10, s15
    fb0e:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fb12:	eea5 7aa7 	vfma.f32	s14, s11, s15
    fb16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fb1a:	eee6 6a27 	vfma.f32	s13, s12, s15
    fb1e:	ee67 7a27 	vmul.f32	s15, s14, s15
    fb22:	eeb0 7a40 	vmov.f32	s14, s0
    fb26:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    fb2a:	eea0 7a06 	vfma.f32	s14, s0, s12
    fb2e:	eeb0 0a47 	vmov.f32	s0, s14
    fb32:	bd38      	pop	{r3, r4, r5, pc}
    fb34:	7149f2ca 	.word	0x7149f2ca
    fb38:	3a4f7f04 	.word	0x3a4f7f04
    fb3c:	3811ef08 	.word	0x3811ef08
    fb40:	3d9dc62e 	.word	0x3d9dc62e
    fb44:	bd241146 	.word	0xbd241146
    fb48:	3e4e0aa8 	.word	0x3e4e0aa8
    fb4c:	3e2aaaab 	.word	0x3e2aaaab
    fb50:	bf303361 	.word	0xbf303361
    fb54:	4001572d 	.word	0x4001572d
    fb58:	c019d139 	.word	0xc019d139
    fb5c:	bea6b090 	.word	0xbea6b090
    fb60:	3f799999 	.word	0x3f799999
    fb64:	b33bbd2e 	.word	0xb33bbd2e
    fb68:	3f490fdb 	.word	0x3f490fdb
    fb6c:	3fc90fdb 	.word	0x3fc90fdb
    fb70:	333bbd2e 	.word	0x333bbd2e

0000fb74 <__ieee754_atan2f>:
    fb74:	b510      	push	{r4, lr}
    fb76:	b082      	sub	sp, #8
    fb78:	edcd 0a01 	vstr	s1, [sp, #4]
    fb7c:	9b01      	ldr	r3, [sp, #4]
    fb7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    fb82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fb86:	eef0 7a40 	vmov.f32	s15, s0
    fb8a:	dc30      	bgt.n	fbee <__ieee754_atan2f+0x7a>
    fb8c:	ee10 0a10 	vmov	r0, s0
    fb90:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    fb94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fb98:	dc29      	bgt.n	fbee <__ieee754_atan2f+0x7a>
    fb9a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
    fb9e:	d040      	beq.n	fc22 <__ieee754_atan2f+0xae>
    fba0:	179c      	asrs	r4, r3, #30
    fba2:	f004 0402 	and.w	r4, r4, #2
    fba6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    fbaa:	b331      	cbz	r1, fbfa <__ieee754_atan2f+0x86>
    fbac:	b372      	cbz	r2, fc0c <__ieee754_atan2f+0x98>
    fbae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fbb2:	d03e      	beq.n	fc32 <__ieee754_atan2f+0xbe>
    fbb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fbb8:	d028      	beq.n	fc0c <__ieee754_atan2f+0x98>
    fbba:	1a89      	subs	r1, r1, r2
    fbbc:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
    fbc0:	ea4f 52e1 	mov.w	r2, r1, asr #23
    fbc4:	da32      	bge.n	fc2c <__ieee754_atan2f+0xb8>
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	da40      	bge.n	fc4c <__ieee754_atan2f+0xd8>
    fbca:	323c      	adds	r2, #60	; 0x3c
    fbcc:	da3e      	bge.n	fc4c <__ieee754_atan2f+0xd8>
    fbce:	ed9f 0a33 	vldr	s0, [pc, #204]	; fc9c <__ieee754_atan2f+0x128>
    fbd2:	2c01      	cmp	r4, #1
    fbd4:	d04c      	beq.n	fc70 <__ieee754_atan2f+0xfc>
    fbd6:	2c02      	cmp	r4, #2
    fbd8:	d041      	beq.n	fc5e <__ieee754_atan2f+0xea>
    fbda:	b164      	cbz	r4, fbf6 <__ieee754_atan2f+0x82>
    fbdc:	ed9f 7a30 	vldr	s14, [pc, #192]	; fca0 <__ieee754_atan2f+0x12c>
    fbe0:	eddf 7a30 	vldr	s15, [pc, #192]	; fca4 <__ieee754_atan2f+0x130>
    fbe4:	ee30 0a07 	vadd.f32	s0, s0, s14
    fbe8:	ee30 0a67 	vsub.f32	s0, s0, s15
    fbec:	e003      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fbee:	ed9d 7a01 	vldr	s14, [sp, #4]
    fbf2:	ee37 0a27 	vadd.f32	s0, s14, s15
    fbf6:	b002      	add	sp, #8
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	2c02      	cmp	r4, #2
    fbfc:	d00e      	beq.n	fc1c <__ieee754_atan2f+0xa8>
    fbfe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; fca8 <__ieee754_atan2f+0x134>
    fc02:	2c03      	cmp	r4, #3
    fc04:	fe07 0a00 	vseleq.f32	s0, s14, s0
    fc08:	b002      	add	sp, #8
    fc0a:	bd10      	pop	{r4, pc}
    fc0c:	ed9f 0a27 	vldr	s0, [pc, #156]	; fcac <__ieee754_atan2f+0x138>
    fc10:	eddf 7a27 	vldr	s15, [pc, #156]	; fcb0 <__ieee754_atan2f+0x13c>
    fc14:	2800      	cmp	r0, #0
    fc16:	fe20 0a27 	vselge.f32	s0, s0, s15
    fc1a:	e7ec      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc1c:	ed9f 0a21 	vldr	s0, [pc, #132]	; fca4 <__ieee754_atan2f+0x130>
    fc20:	e7e9      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc22:	b002      	add	sp, #8
    fc24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc28:	f000 b84a 	b.w	fcc0 <atanf>
    fc2c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; fcac <__ieee754_atan2f+0x138>
    fc30:	e7cf      	b.n	fbd2 <__ieee754_atan2f+0x5e>
    fc32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fc36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    fc3a:	d020      	beq.n	fc7e <__ieee754_atan2f+0x10a>
    fc3c:	2c02      	cmp	r4, #2
    fc3e:	d826      	bhi.n	fc8e <__ieee754_atan2f+0x11a>
    fc40:	4b1c      	ldr	r3, [pc, #112]	; (fcb4 <__ieee754_atan2f+0x140>)
    fc42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fc46:	ed93 0a00 	vldr	s0, [r3]
    fc4a:	e7d4      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc4c:	ed9d 7a01 	vldr	s14, [sp, #4]
    fc50:	ee87 0a87 	vdiv.f32	s0, s15, s14
    fc54:	f7ff fccc 	bl	f5f0 <fabsf>
    fc58:	f000 f832 	bl	fcc0 <atanf>
    fc5c:	e7b9      	b.n	fbd2 <__ieee754_atan2f+0x5e>
    fc5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; fca0 <__ieee754_atan2f+0x12c>
    fc62:	eddf 7a10 	vldr	s15, [pc, #64]	; fca4 <__ieee754_atan2f+0x130>
    fc66:	ee30 0a07 	vadd.f32	s0, s0, s14
    fc6a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fc6e:	e7c2      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc70:	ee10 3a10 	vmov	r3, s0
    fc74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    fc78:	ee00 3a10 	vmov	s0, r3
    fc7c:	e7bb      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc7e:	2c02      	cmp	r4, #2
    fc80:	d808      	bhi.n	fc94 <__ieee754_atan2f+0x120>
    fc82:	4b0d      	ldr	r3, [pc, #52]	; (fcb8 <__ieee754_atan2f+0x144>)
    fc84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fc88:	ed93 0a00 	vldr	s0, [r3]
    fc8c:	e7b3      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc8e:	ed9f 0a03 	vldr	s0, [pc, #12]	; fc9c <__ieee754_atan2f+0x128>
    fc92:	e7b0      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc94:	ed9f 0a09 	vldr	s0, [pc, #36]	; fcbc <__ieee754_atan2f+0x148>
    fc98:	e7ad      	b.n	fbf6 <__ieee754_atan2f+0x82>
    fc9a:	bf00      	nop
    fc9c:	00000000 	.word	0x00000000
    fca0:	33bbbd2e 	.word	0x33bbbd2e
    fca4:	40490fdb 	.word	0x40490fdb
    fca8:	c0490fdb 	.word	0xc0490fdb
    fcac:	3fc90fdb 	.word	0x3fc90fdb
    fcb0:	bfc90fdb 	.word	0xbfc90fdb
    fcb4:	20001c74 	.word	0x20001c74
    fcb8:	20001c68 	.word	0x20001c68
    fcbc:	3f490fdb 	.word	0x3f490fdb

0000fcc0 <atanf>:
    fcc0:	b538      	push	{r3, r4, r5, lr}
    fcc2:	ee10 5a10 	vmov	r5, s0
    fcc6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fcca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
    fcce:	eef0 7a40 	vmov.f32	s15, s0
    fcd2:	db0a      	blt.n	fcea <atanf+0x2a>
    fcd4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    fcd8:	dc58      	bgt.n	fd8c <atanf+0xcc>
    fcda:	eddf 7a51 	vldr	s15, [pc, #324]	; fe20 <atanf+0x160>
    fcde:	ed9f 7a51 	vldr	s14, [pc, #324]	; fe24 <atanf+0x164>
    fce2:	2d00      	cmp	r5, #0
    fce4:	fe37 0a87 	vselgt.f32	s0, s15, s14
    fce8:	bd38      	pop	{r3, r4, r5, pc}
    fcea:	4b4f      	ldr	r3, [pc, #316]	; (fe28 <atanf+0x168>)
    fcec:	429c      	cmp	r4, r3
    fcee:	dc5c      	bgt.n	fdaa <atanf+0xea>
    fcf0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
    fcf4:	db4d      	blt.n	fd92 <atanf+0xd2>
    fcf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcfa:	ee27 6aa7 	vmul.f32	s12, s15, s15
    fcfe:	eddf 6a4b 	vldr	s13, [pc, #300]	; fe2c <atanf+0x16c>
    fd02:	eddf 5a4b 	vldr	s11, [pc, #300]	; fe30 <atanf+0x170>
    fd06:	eddf 4a4b 	vldr	s9, [pc, #300]	; fe34 <atanf+0x174>
    fd0a:	ed9f 5a4b 	vldr	s10, [pc, #300]	; fe38 <atanf+0x178>
    fd0e:	ed9f 4a4b 	vldr	s8, [pc, #300]	; fe3c <atanf+0x17c>
    fd12:	ee26 7a06 	vmul.f32	s14, s12, s12
    fd16:	1c5a      	adds	r2, r3, #1
    fd18:	eee7 5a26 	vfma.f32	s11, s14, s13
    fd1c:	eddf 6a48 	vldr	s13, [pc, #288]	; fe40 <atanf+0x180>
    fd20:	eea5 5a87 	vfma.f32	s10, s11, s14
    fd24:	eee7 6a24 	vfma.f32	s13, s14, s9
    fd28:	eddf 5a46 	vldr	s11, [pc, #280]	; fe44 <atanf+0x184>
    fd2c:	eddf 4a46 	vldr	s9, [pc, #280]	; fe48 <atanf+0x188>
    fd30:	eee6 5a87 	vfma.f32	s11, s13, s14
    fd34:	eea5 4a07 	vfma.f32	s8, s10, s14
    fd38:	ed9f 5a44 	vldr	s10, [pc, #272]	; fe4c <atanf+0x18c>
    fd3c:	eddf 6a44 	vldr	s13, [pc, #272]	; fe50 <atanf+0x190>
    fd40:	eea5 5a87 	vfma.f32	s10, s11, s14
    fd44:	eee4 4a07 	vfma.f32	s9, s8, s14
    fd48:	eddf 5a42 	vldr	s11, [pc, #264]	; fe54 <atanf+0x194>
    fd4c:	eee4 6a87 	vfma.f32	s13, s9, s14
    fd50:	eee5 5a07 	vfma.f32	s11, s10, s14
    fd54:	ee66 6a86 	vmul.f32	s13, s13, s12
    fd58:	ee65 5a87 	vmul.f32	s11, s11, s14
    fd5c:	d03a      	beq.n	fdd4 <atanf+0x114>
    fd5e:	4a3e      	ldr	r2, [pc, #248]	; (fe58 <atanf+0x198>)
    fd60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    fd64:	ee76 6aa5 	vadd.f32	s13, s13, s11
    fd68:	ed92 7a00 	vldr	s14, [r2]
    fd6c:	4a3b      	ldr	r2, [pc, #236]	; (fe5c <atanf+0x19c>)
    fd6e:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    fd72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    fd76:	2d00      	cmp	r5, #0
    fd78:	edd3 6a00 	vldr	s13, [r3]
    fd7c:	ee77 7a67 	vsub.f32	s15, s14, s15
    fd80:	ee36 0ae7 	vsub.f32	s0, s13, s15
    fd84:	dab0      	bge.n	fce8 <atanf+0x28>
    fd86:	eeb1 0a40 	vneg.f32	s0, s0
    fd8a:	bd38      	pop	{r3, r4, r5, pc}
    fd8c:	ee30 0a00 	vadd.f32	s0, s0, s0
    fd90:	bd38      	pop	{r3, r4, r5, pc}
    fd92:	ed9f 7a33 	vldr	s14, [pc, #204]	; fe60 <atanf+0x1a0>
    fd96:	ee30 7a07 	vadd.f32	s14, s0, s14
    fd9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fd9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fda6:	dda6      	ble.n	fcf6 <atanf+0x36>
    fda8:	bd38      	pop	{r3, r4, r5, pc}
    fdaa:	f7ff fc21 	bl	f5f0 <fabsf>
    fdae:	4b2d      	ldr	r3, [pc, #180]	; (fe64 <atanf+0x1a4>)
    fdb0:	429c      	cmp	r4, r3
    fdb2:	dc16      	bgt.n	fde2 <atanf+0x122>
    fdb4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
    fdb8:	429c      	cmp	r4, r3
    fdba:	dc27      	bgt.n	fe0c <atanf+0x14c>
    fdbc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    fdc0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    fdc4:	eea0 7a27 	vfma.f32	s14, s0, s15
    fdc8:	2300      	movs	r3, #0
    fdca:	ee30 0a27 	vadd.f32	s0, s0, s15
    fdce:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fdd2:	e792      	b.n	fcfa <atanf+0x3a>
    fdd4:	ee76 6aa5 	vadd.f32	s13, s13, s11
    fdd8:	eee6 7ae7 	vfms.f32	s15, s13, s15
    fddc:	eeb0 0a67 	vmov.f32	s0, s15
    fde0:	bd38      	pop	{r3, r4, r5, pc}
    fde2:	4b21      	ldr	r3, [pc, #132]	; (fe68 <atanf+0x1a8>)
    fde4:	429c      	cmp	r4, r3
    fde6:	dc0b      	bgt.n	fe00 <atanf+0x140>
    fde8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    fdec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fdf0:	eea0 7a27 	vfma.f32	s14, s0, s15
    fdf4:	2302      	movs	r3, #2
    fdf6:	ee30 0a67 	vsub.f32	s0, s0, s15
    fdfa:	eec0 7a07 	vdiv.f32	s15, s0, s14
    fdfe:	e77c      	b.n	fcfa <atanf+0x3a>
    fe00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    fe04:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fe08:	2303      	movs	r3, #3
    fe0a:	e776      	b.n	fcfa <atanf+0x3a>
    fe0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fe10:	ee30 7a67 	vsub.f32	s14, s0, s15
    fe14:	ee30 0a27 	vadd.f32	s0, s0, s15
    fe18:	2301      	movs	r3, #1
    fe1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fe1e:	e76c      	b.n	fcfa <atanf+0x3a>
    fe20:	3fc90fdb 	.word	0x3fc90fdb
    fe24:	bfc90fdb 	.word	0xbfc90fdb
    fe28:	3edfffff 	.word	0x3edfffff
    fe2c:	3c8569d7 	.word	0x3c8569d7
    fe30:	3d4bda59 	.word	0x3d4bda59
    fe34:	bd15a221 	.word	0xbd15a221
    fe38:	3d886b35 	.word	0x3d886b35
    fe3c:	3dba2e6e 	.word	0x3dba2e6e
    fe40:	bd6ef16b 	.word	0xbd6ef16b
    fe44:	bd9d8795 	.word	0xbd9d8795
    fe48:	3e124925 	.word	0x3e124925
    fe4c:	bde38e38 	.word	0xbde38e38
    fe50:	3eaaaaab 	.word	0x3eaaaaab
    fe54:	be4ccccd 	.word	0xbe4ccccd
    fe58:	200026b0 	.word	0x200026b0
    fe5c:	200026a0 	.word	0x200026a0
    fe60:	7149f2ca 	.word	0x7149f2ca
    fe64:	3f97ffff 	.word	0x3f97ffff
    fe68:	401bffff 	.word	0x401bffff
    fe6c:	00000000 	.word	0x00000000

0000fe70 <__ieee754_rem_pio2>:
    fe70:	b570      	push	{r4, r5, r6, lr}
    fe72:	ec53 2b10 	vmov	r2, r3, d0
    fe76:	499c      	ldr	r1, [pc, #624]	; (100e8 <__ieee754_rem_pio2+0x278>)
    fe78:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    fe7c:	428d      	cmp	r5, r1
    fe7e:	b088      	sub	sp, #32
    fe80:	4604      	mov	r4, r0
    fe82:	dd6a      	ble.n	ff5a <__ieee754_rem_pio2+0xea>
    fe84:	4999      	ldr	r1, [pc, #612]	; (100ec <__ieee754_rem_pio2+0x27c>)
    fe86:	428d      	cmp	r5, r1
    fe88:	461e      	mov	r6, r3
    fe8a:	dc1b      	bgt.n	fec4 <__ieee754_rem_pio2+0x54>
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	ed9f 7b86 	vldr	d7, [pc, #536]	; 100a8 <__ieee754_rem_pio2+0x238>
    fe92:	f340 80eb 	ble.w	1006c <__ieee754_rem_pio2+0x1fc>
    fe96:	ee30 7b47 	vsub.f64	d7, d0, d7
    fe9a:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
    fe9e:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
    fea2:	428d      	cmp	r5, r1
    fea4:	d06a      	beq.n	ff7c <__ieee754_rem_pio2+0x10c>
    fea6:	ed9f 6b82 	vldr	d6, [pc, #520]	; 100b0 <__ieee754_rem_pio2+0x240>
    feaa:	2001      	movs	r0, #1
    feac:	ee37 5b46 	vsub.f64	d5, d7, d6
    feb0:	ee37 7b45 	vsub.f64	d7, d7, d5
    feb4:	ed84 5b00 	vstr	d5, [r4]
    feb8:	ee37 7b46 	vsub.f64	d7, d7, d6
    febc:	ed84 7b02 	vstr	d7, [r4, #8]
    fec0:	b008      	add	sp, #32
    fec2:	bd70      	pop	{r4, r5, r6, pc}
    fec4:	498a      	ldr	r1, [pc, #552]	; (100f0 <__ieee754_rem_pio2+0x280>)
    fec6:	428d      	cmp	r5, r1
    fec8:	dd60      	ble.n	ff8c <__ieee754_rem_pio2+0x11c>
    feca:	498a      	ldr	r1, [pc, #552]	; (100f4 <__ieee754_rem_pio2+0x284>)
    fecc:	428d      	cmp	r5, r1
    fece:	dc4d      	bgt.n	ff6c <__ieee754_rem_pio2+0xfc>
    fed0:	152a      	asrs	r2, r5, #20
    fed2:	ee10 0a10 	vmov	r0, s0
    fed6:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
    feda:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
    fede:	ec41 0b17 	vmov	d7, r0, r1
    fee2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 100b8 <__ieee754_rem_pio2+0x248>
    fee6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    feea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    feee:	ee37 7b46 	vsub.f64	d7, d7, d6
    fef2:	ee27 7b05 	vmul.f64	d7, d7, d5
    fef6:	eefd 4bc7 	vcvt.s32.f64	s9, d7
    fefa:	ed8d 6b02 	vstr	d6, [sp, #8]
    fefe:	eeb8 6be4 	vcvt.f64.s32	d6, s9
    ff02:	ee37 7b46 	vsub.f64	d7, d7, d6
    ff06:	ee27 7b05 	vmul.f64	d7, d7, d5
    ff0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
    ff0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff12:	ed8d 6b04 	vstr	d6, [sp, #16]
    ff16:	ed8d 7b06 	vstr	d7, [sp, #24]
    ff1a:	f040 8096 	bne.w	1004a <__ieee754_rem_pio2+0x1da>
    ff1e:	ee14 3a90 	vmov	r3, s9
    ff22:	2b00      	cmp	r3, #0
    ff24:	bf0c      	ite	eq
    ff26:	2301      	moveq	r3, #1
    ff28:	2302      	movne	r3, #2
    ff2a:	4973      	ldr	r1, [pc, #460]	; (100f8 <__ieee754_rem_pio2+0x288>)
    ff2c:	9101      	str	r1, [sp, #4]
    ff2e:	2102      	movs	r1, #2
    ff30:	9100      	str	r1, [sp, #0]
    ff32:	a802      	add	r0, sp, #8
    ff34:	4621      	mov	r1, r4
    ff36:	f000 f8e7 	bl	10108 <__kernel_rem_pio2>
    ff3a:	2e00      	cmp	r6, #0
    ff3c:	dac0      	bge.n	fec0 <__ieee754_rem_pio2+0x50>
    ff3e:	ed94 6b00 	vldr	d6, [r4]
    ff42:	ed94 7b02 	vldr	d7, [r4, #8]
    ff46:	eeb1 6b46 	vneg.f64	d6, d6
    ff4a:	eeb1 7b47 	vneg.f64	d7, d7
    ff4e:	ed84 6b00 	vstr	d6, [r4]
    ff52:	ed84 7b02 	vstr	d7, [r4, #8]
    ff56:	4240      	negs	r0, r0
    ff58:	e7b2      	b.n	fec0 <__ieee754_rem_pio2+0x50>
    ff5a:	2000      	movs	r0, #0
    ff5c:	2100      	movs	r1, #0
    ff5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    ff62:	2000      	movs	r0, #0
    ff64:	ed84 0b00 	vstr	d0, [r4]
    ff68:	b008      	add	sp, #32
    ff6a:	bd70      	pop	{r4, r5, r6, pc}
    ff6c:	ee30 7b40 	vsub.f64	d7, d0, d0
    ff70:	2000      	movs	r0, #0
    ff72:	ed84 7b02 	vstr	d7, [r4, #8]
    ff76:	ed84 7b00 	vstr	d7, [r4]
    ff7a:	e7a1      	b.n	fec0 <__ieee754_rem_pio2+0x50>
    ff7c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 100c0 <__ieee754_rem_pio2+0x250>
    ff80:	ed9f 6b51 	vldr	d6, [pc, #324]	; 100c8 <__ieee754_rem_pio2+0x258>
    ff84:	ee37 7b45 	vsub.f64	d7, d7, d5
    ff88:	2001      	movs	r0, #1
    ff8a:	e78f      	b.n	feac <__ieee754_rem_pio2+0x3c>
    ff8c:	f000 fc04 	bl	10798 <fabs>
    ff90:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    ff94:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 100d0 <__ieee754_rem_pio2+0x260>
    ff98:	eea0 7b05 	vfma.f64	d7, d0, d5
    ff9c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    ffa0:	ed9f 3b41 	vldr	d3, [pc, #260]	; 100a8 <__ieee754_rem_pio2+0x238>
    ffa4:	ee17 0a90 	vmov	r0, s15
    ffa8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 100b0 <__ieee754_rem_pio2+0x240>
    ffac:	281f      	cmp	r0, #31
    ffae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    ffb2:	eeb1 4b45 	vneg.f64	d4, d5
    ffb6:	eea5 0b43 	vfms.f64	d0, d5, d3
    ffba:	ee25 7b06 	vmul.f64	d7, d5, d6
    ffbe:	dc1c      	bgt.n	fffa <__ieee754_rem_pio2+0x18a>
    ffc0:	4b4e      	ldr	r3, [pc, #312]	; (100fc <__ieee754_rem_pio2+0x28c>)
    ffc2:	1e42      	subs	r2, r0, #1
    ffc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ffc8:	42ab      	cmp	r3, r5
    ffca:	d016      	beq.n	fffa <__ieee754_rem_pio2+0x18a>
    ffcc:	ee30 6b47 	vsub.f64	d6, d0, d7
    ffd0:	ed84 6b00 	vstr	d6, [r4]
    ffd4:	ee30 0b46 	vsub.f64	d0, d0, d6
    ffd8:	ee30 0b47 	vsub.f64	d0, d0, d7
    ffdc:	2e00      	cmp	r6, #0
    ffde:	ed84 0b02 	vstr	d0, [r4, #8]
    ffe2:	f6bf af6d 	bge.w	fec0 <__ieee754_rem_pio2+0x50>
    ffe6:	eeb1 6b46 	vneg.f64	d6, d6
    ffea:	eeb1 0b40 	vneg.f64	d0, d0
    ffee:	ed84 6b00 	vstr	d6, [r4]
    fff2:	ed84 0b02 	vstr	d0, [r4, #8]
    fff6:	4240      	negs	r0, r0
    fff8:	e762      	b.n	fec0 <__ieee754_rem_pio2+0x50>
    fffa:	ee30 6b47 	vsub.f64	d6, d0, d7
    fffe:	ee16 3a90 	vmov	r3, s13
   10002:	f3c3 530a 	ubfx	r3, r3, #20, #11
   10006:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   1000a:	2b10      	cmp	r3, #16
   1000c:	ea4f 5225 	mov.w	r2, r5, asr #20
   10010:	ddde      	ble.n	ffd0 <__ieee754_rem_pio2+0x160>
   10012:	eeb0 3b40 	vmov.f64	d3, d0
   10016:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 100c0 <__ieee754_rem_pio2+0x250>
   1001a:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 100c8 <__ieee754_rem_pio2+0x258>
   1001e:	eea4 3b06 	vfma.f64	d3, d4, d6
   10022:	ee30 7b43 	vsub.f64	d7, d0, d3
   10026:	eea4 7b06 	vfma.f64	d7, d4, d6
   1002a:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1002e:	ee33 6b47 	vsub.f64	d6, d3, d7
   10032:	ee16 3a90 	vmov	r3, s13
   10036:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1003a:	1ad2      	subs	r2, r2, r3
   1003c:	2a31      	cmp	r2, #49	; 0x31
   1003e:	dc06      	bgt.n	1004e <__ieee754_rem_pio2+0x1de>
   10040:	eeb0 0b43 	vmov.f64	d0, d3
   10044:	ed84 6b00 	vstr	d6, [r4]
   10048:	e7c4      	b.n	ffd4 <__ieee754_rem_pio2+0x164>
   1004a:	2303      	movs	r3, #3
   1004c:	e76d      	b.n	ff2a <__ieee754_rem_pio2+0xba>
   1004e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 100d8 <__ieee754_rem_pio2+0x268>
   10052:	eeb0 0b43 	vmov.f64	d0, d3
   10056:	ed9f 2b22 	vldr	d2, [pc, #136]	; 100e0 <__ieee754_rem_pio2+0x270>
   1005a:	eea4 0b06 	vfma.f64	d0, d4, d6
   1005e:	ee33 7b40 	vsub.f64	d7, d3, d0
   10062:	eea4 7b06 	vfma.f64	d7, d4, d6
   10066:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1006a:	e7af      	b.n	ffcc <__ieee754_rem_pio2+0x15c>
   1006c:	4924      	ldr	r1, [pc, #144]	; (10100 <__ieee754_rem_pio2+0x290>)
   1006e:	ee30 7b07 	vadd.f64	d7, d0, d7
   10072:	428d      	cmp	r5, r1
   10074:	d00e      	beq.n	10094 <__ieee754_rem_pio2+0x224>
   10076:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 100b0 <__ieee754_rem_pio2+0x240>
   1007a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1007e:	ee37 5b06 	vadd.f64	d5, d7, d6
   10082:	ee37 7b45 	vsub.f64	d7, d7, d5
   10086:	ed84 5b00 	vstr	d5, [r4]
   1008a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1008e:	ed84 7b02 	vstr	d7, [r4, #8]
   10092:	e715      	b.n	fec0 <__ieee754_rem_pio2+0x50>
   10094:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 100c0 <__ieee754_rem_pio2+0x250>
   10098:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 100c8 <__ieee754_rem_pio2+0x258>
   1009c:	ee37 7b05 	vadd.f64	d7, d7, d5
   100a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   100a4:	e7eb      	b.n	1007e <__ieee754_rem_pio2+0x20e>
   100a6:	bf00      	nop
   100a8:	54400000 	.word	0x54400000
   100ac:	3ff921fb 	.word	0x3ff921fb
   100b0:	1a626331 	.word	0x1a626331
   100b4:	3dd0b461 	.word	0x3dd0b461
   100b8:	00000000 	.word	0x00000000
   100bc:	41700000 	.word	0x41700000
   100c0:	1a600000 	.word	0x1a600000
   100c4:	3dd0b461 	.word	0x3dd0b461
   100c8:	2e037073 	.word	0x2e037073
   100cc:	3ba3198a 	.word	0x3ba3198a
   100d0:	6dc9c883 	.word	0x6dc9c883
   100d4:	3fe45f30 	.word	0x3fe45f30
   100d8:	2e000000 	.word	0x2e000000
   100dc:	3ba3198a 	.word	0x3ba3198a
   100e0:	252049c1 	.word	0x252049c1
   100e4:	397b839a 	.word	0x397b839a
   100e8:	3fe921fb 	.word	0x3fe921fb
   100ec:	4002d97b 	.word	0x4002d97b
   100f0:	413921fb 	.word	0x413921fb
   100f4:	7fefffff 	.word	0x7fefffff
   100f8:	20002e4c 	.word	0x20002e4c
   100fc:	20002a74 	.word	0x20002a74
   10100:	3ff921fb 	.word	0x3ff921fb
   10104:	00000000 	.word	0x00000000

00010108 <__kernel_rem_pio2>:
   10108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1010c:	ed2d 8b08 	vpush	{d8-d11}
   10110:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   10114:	461c      	mov	r4, r3
   10116:	9304      	str	r3, [sp, #16]
   10118:	9107      	str	r1, [sp, #28]
   1011a:	4bab      	ldr	r3, [pc, #684]	; (103c8 <__kernel_rem_pio2+0x2c0>)
   1011c:	99a6      	ldr	r1, [sp, #664]	; 0x298
   1011e:	f112 0f14 	cmn.w	r2, #20
   10122:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   10126:	4682      	mov	sl, r0
   10128:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1012c:	f2c0 8299 	blt.w	10662 <__kernel_rem_pio2+0x55a>
   10130:	49a6      	ldr	r1, [pc, #664]	; (103cc <__kernel_rem_pio2+0x2c4>)
   10132:	1ed3      	subs	r3, r2, #3
   10134:	fb81 0103 	smull	r0, r1, r1, r3
   10138:	17db      	asrs	r3, r3, #31
   1013a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1013e:	9303      	str	r3, [sp, #12]
   10140:	3301      	adds	r3, #1
   10142:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   10146:	00db      	lsls	r3, r3, #3
   10148:	18d3      	adds	r3, r2, r3
   1014a:	9306      	str	r3, [sp, #24]
   1014c:	9b03      	ldr	r3, [sp, #12]
   1014e:	eb15 0108 	adds.w	r1, r5, r8
   10152:	eba3 0308 	sub.w	r3, r3, r8
   10156:	d41a      	bmi.n	1018e <__kernel_rem_pio2+0x86>
   10158:	3101      	adds	r1, #1
   1015a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 103b0 <__kernel_rem_pio2+0x2a8>
   1015e:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   10160:	4419      	add	r1, r3
   10162:	aa1c      	add	r2, sp, #112	; 0x70
   10164:	e00a      	b.n	1017c <__kernel_rem_pio2+0x74>
   10166:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1016a:	ee07 4a90 	vmov	s15, r4
   1016e:	3301      	adds	r3, #1
   10170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   10174:	428b      	cmp	r3, r1
   10176:	eca2 7b02 	vstmia	r2!, {d7}
   1017a:	d008      	beq.n	1018e <__kernel_rem_pio2+0x86>
   1017c:	2b00      	cmp	r3, #0
   1017e:	daf2      	bge.n	10166 <__kernel_rem_pio2+0x5e>
   10180:	eeb0 7b46 	vmov.f64	d7, d6
   10184:	3301      	adds	r3, #1
   10186:	428b      	cmp	r3, r1
   10188:	eca2 7b02 	vstmia	r2!, {d7}
   1018c:	d1f6      	bne.n	1017c <__kernel_rem_pio2+0x74>
   1018e:	2d00      	cmp	r5, #0
   10190:	f2c0 82c9 	blt.w	10726 <__kernel_rem_pio2+0x61e>
   10194:	9b04      	ldr	r3, [sp, #16]
   10196:	aa1c      	add	r2, sp, #112	; 0x70
   10198:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1019c:	ae6c      	add	r6, sp, #432	; 0x1b0
   1019e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   101a2:	4640      	mov	r0, r8
   101a4:	18ef      	adds	r7, r5, r3
   101a6:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   101aa:	f1b8 0f00 	cmp.w	r8, #0
   101ae:	ed9f 7b80 	vldr	d7, [pc, #512]	; 103b0 <__kernel_rem_pio2+0x2a8>
   101b2:	db09      	blt.n	101c8 <__kernel_rem_pio2+0xc0>
   101b4:	4622      	mov	r2, r4
   101b6:	4653      	mov	r3, sl
   101b8:	ecb3 5b02 	vldmia	r3!, {d5}
   101bc:	ed32 6b02 	vldmdb	r2!, {d6}
   101c0:	428b      	cmp	r3, r1
   101c2:	eea5 7b06 	vfma.f64	d7, d5, d6
   101c6:	d1f7      	bne.n	101b8 <__kernel_rem_pio2+0xb0>
   101c8:	3001      	adds	r0, #1
   101ca:	42b8      	cmp	r0, r7
   101cc:	eca6 7b02 	vstmia	r6!, {d7}
   101d0:	f104 0408 	add.w	r4, r4, #8
   101d4:	d1e9      	bne.n	101aa <__kernel_rem_pio2+0xa2>
   101d6:	af08      	add	r7, sp, #32
   101d8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   101dc:	ed9f 9b76 	vldr	d9, [pc, #472]	; 103b8 <__kernel_rem_pio2+0x2b0>
   101e0:	ed9f 8b77 	vldr	d8, [pc, #476]	; 103c0 <__kernel_rem_pio2+0x2b8>
   101e4:	3b04      	subs	r3, #4
   101e6:	f8dd b018 	ldr.w	fp, [sp, #24]
   101ea:	9305      	str	r3, [sp, #20]
   101ec:	eb0a 040c 	add.w	r4, sl, ip
   101f0:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   101f4:	ae6c      	add	r6, sp, #432	; 0x1b0
   101f6:	4629      	mov	r1, r5
   101f8:	9501      	str	r5, [sp, #4]
   101fa:	ab94      	add	r3, sp, #592	; 0x250
   101fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10200:	2900      	cmp	r1, #0
   10202:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   10206:	dd16      	ble.n	10236 <__kernel_rem_pio2+0x12e>
   10208:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   1020c:	463a      	mov	r2, r7
   1020e:	ee20 7b09 	vmul.f64	d7, d0, d9
   10212:	ed33 5b02 	vldmdb	r3!, {d5}
   10216:	eeb0 6b40 	vmov.f64	d6, d0
   1021a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1021e:	42b3      	cmp	r3, r6
   10220:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10224:	eea7 6b48 	vfms.f64	d6, d7, d8
   10228:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   1022c:	ee37 0b05 	vadd.f64	d0, d7, d5
   10230:	eca2 6a01 	vstmia	r2!, {s12}
   10234:	d1eb      	bne.n	1020e <__kernel_rem_pio2+0x106>
   10236:	4658      	mov	r0, fp
   10238:	9102      	str	r1, [sp, #8]
   1023a:	f000 fb41 	bl	108c0 <scalbn>
   1023e:	eeb0 ab40 	vmov.f64	d10, d0
   10242:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   10246:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1024a:	f000 fab1 	bl	107b0 <floor>
   1024e:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   10252:	eea0 ab47 	vfms.f64	d10, d0, d7
   10256:	eebd bbca 	vcvt.s32.f64	s22, d10
   1025a:	f1bb 0f00 	cmp.w	fp, #0
   1025e:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   10262:	9902      	ldr	r1, [sp, #8]
   10264:	ee3a ab47 	vsub.f64	d10, d10, d7
   10268:	dd74      	ble.n	10354 <__kernel_rem_pio2+0x24c>
   1026a:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1026e:	f1cb 0318 	rsb	r3, fp, #24
   10272:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   10276:	fa42 fc03 	asr.w	ip, r2, r3
   1027a:	fa0c f303 	lsl.w	r3, ip, r3
   1027e:	1ad2      	subs	r2, r2, r3
   10280:	f1cb 0017 	rsb	r0, fp, #23
   10284:	ee1b 3a10 	vmov	r3, s22
   10288:	fa42 f500 	asr.w	r5, r2, r0
   1028c:	4463      	add	r3, ip
   1028e:	2d00      	cmp	r5, #0
   10290:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   10294:	ee0b 3a10 	vmov	s22, r3
   10298:	dc64      	bgt.n	10364 <__kernel_rem_pio2+0x25c>
   1029a:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1029e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102a2:	f040 80c4 	bne.w	1042e <__kernel_rem_pio2+0x326>
   102a6:	9b01      	ldr	r3, [sp, #4]
   102a8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   102ac:	4573      	cmp	r3, lr
   102ae:	dc0d      	bgt.n	102cc <__kernel_rem_pio2+0x1c4>
   102b0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   102b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   102b8:	2000      	movs	r0, #0
   102ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   102be:	454b      	cmp	r3, r9
   102c0:	ea40 0002 	orr.w	r0, r0, r2
   102c4:	d1f9      	bne.n	102ba <__kernel_rem_pio2+0x1b2>
   102c6:	2800      	cmp	r0, #0
   102c8:	f040 80f2 	bne.w	104b0 <__kernel_rem_pio2+0x3a8>
   102cc:	9b01      	ldr	r3, [sp, #4]
   102ce:	3b01      	subs	r3, #1
   102d0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   102d4:	2b00      	cmp	r3, #0
   102d6:	f040 80e6 	bne.w	104a6 <__kernel_rem_pio2+0x39e>
   102da:	9b05      	ldr	r3, [sp, #20]
   102dc:	2501      	movs	r5, #1
   102de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   102e2:	3501      	adds	r5, #1
   102e4:	2a00      	cmp	r2, #0
   102e6:	d0fa      	beq.n	102de <__kernel_rem_pio2+0x1d6>
   102e8:	f101 0e01 	add.w	lr, r1, #1
   102ec:	440d      	add	r5, r1
   102ee:	4670      	mov	r0, lr
   102f0:	9b04      	ldr	r3, [sp, #16]
   102f2:	4419      	add	r1, r3
   102f4:	9b03      	ldr	r3, [sp, #12]
   102f6:	eb03 0c0e 	add.w	ip, r3, lr
   102fa:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   102fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   10300:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10304:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   10308:	ab1c      	add	r3, sp, #112	; 0x70
   1030a:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   1030e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10312:	ed9c 7a01 	vldr	s14, [ip, #4]
   10316:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1031a:	f1b8 0f00 	cmp.w	r8, #0
   1031e:	ed81 7b00 	vstr	d7, [r1]
   10322:	f10c 0c04 	add.w	ip, ip, #4
   10326:	460a      	mov	r2, r1
   10328:	ed9f 6b21 	vldr	d6, [pc, #132]	; 103b0 <__kernel_rem_pio2+0x2a8>
   1032c:	f101 0108 	add.w	r1, r1, #8
   10330:	db09      	blt.n	10346 <__kernel_rem_pio2+0x23e>
   10332:	4653      	mov	r3, sl
   10334:	e001      	b.n	1033a <__kernel_rem_pio2+0x232>
   10336:	ed32 7b02 	vldmdb	r2!, {d7}
   1033a:	ecb3 5b02 	vldmia	r3!, {d5}
   1033e:	42a3      	cmp	r3, r4
   10340:	eea5 6b07 	vfma.f64	d6, d5, d7
   10344:	d1f7      	bne.n	10336 <__kernel_rem_pio2+0x22e>
   10346:	3001      	adds	r0, #1
   10348:	42a8      	cmp	r0, r5
   1034a:	ecae 6b02 	vstmia	lr!, {d6}
   1034e:	dde0      	ble.n	10312 <__kernel_rem_pio2+0x20a>
   10350:	4629      	mov	r1, r5
   10352:	e752      	b.n	101fa <__kernel_rem_pio2+0xf2>
   10354:	f040 809d 	bne.w	10492 <__kernel_rem_pio2+0x38a>
   10358:	1e4b      	subs	r3, r1, #1
   1035a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   1035e:	15ed      	asrs	r5, r5, #23
   10360:	2d00      	cmp	r5, #0
   10362:	dd9a      	ble.n	1029a <__kernel_rem_pio2+0x192>
   10364:	ee1b 3a10 	vmov	r3, s22
   10368:	2900      	cmp	r1, #0
   1036a:	f103 0301 	add.w	r3, r3, #1
   1036e:	ee0b 3a10 	vmov	s22, r3
   10372:	f340 818c 	ble.w	1068e <__kernel_rem_pio2+0x586>
   10376:	683a      	ldr	r2, [r7, #0]
   10378:	2a00      	cmp	r2, #0
   1037a:	f040 8082 	bne.w	10482 <__kernel_rem_pio2+0x37a>
   1037e:	2901      	cmp	r1, #1
   10380:	d02d      	beq.n	103de <__kernel_rem_pio2+0x2d6>
   10382:	463b      	mov	r3, r7
   10384:	2001      	movs	r0, #1
   10386:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1038a:	2a00      	cmp	r2, #0
   1038c:	d07c      	beq.n	10488 <__kernel_rem_pio2+0x380>
   1038e:	1c43      	adds	r3, r0, #1
   10390:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   10394:	4299      	cmp	r1, r3
   10396:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   1039a:	dd1f      	ble.n	103dc <__kernel_rem_pio2+0x2d4>
   1039c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   103a0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   103a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   103a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   103ac:	e011      	b.n	103d2 <__kernel_rem_pio2+0x2ca>
   103ae:	bf00      	nop
	...
   103bc:	3e700000 	.word	0x3e700000
   103c0:	00000000 	.word	0x00000000
   103c4:	41700000 	.word	0x41700000
   103c8:	20002a48 	.word	0x20002a48
   103cc:	2aaaaaab 	.word	0x2aaaaaab
   103d0:	681a      	ldr	r2, [r3, #0]
   103d2:	1a82      	subs	r2, r0, r2
   103d4:	f843 2b04 	str.w	r2, [r3], #4
   103d8:	4563      	cmp	r3, ip
   103da:	d1f9      	bne.n	103d0 <__kernel_rem_pio2+0x2c8>
   103dc:	2201      	movs	r2, #1
   103de:	f1bb 0f00 	cmp.w	fp, #0
   103e2:	dd0d      	ble.n	10400 <__kernel_rem_pio2+0x2f8>
   103e4:	f1bb 0f01 	cmp.w	fp, #1
   103e8:	f000 8133 	beq.w	10652 <__kernel_rem_pio2+0x54a>
   103ec:	f1bb 0f02 	cmp.w	fp, #2
   103f0:	d106      	bne.n	10400 <__kernel_rem_pio2+0x2f8>
   103f2:	1e48      	subs	r0, r1, #1
   103f4:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   103f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
   103fc:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10400:	2d02      	cmp	r5, #2
   10402:	f47f af4a 	bne.w	1029a <__kernel_rem_pio2+0x192>
   10406:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1040a:	ee30 ab4a 	vsub.f64	d10, d0, d10
   1040e:	2a00      	cmp	r2, #0
   10410:	f43f af43 	beq.w	1029a <__kernel_rem_pio2+0x192>
   10414:	4658      	mov	r0, fp
   10416:	9102      	str	r1, [sp, #8]
   10418:	f000 fa52 	bl	108c0 <scalbn>
   1041c:	ee3a ab40 	vsub.f64	d10, d10, d0
   10420:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10428:	9902      	ldr	r1, [sp, #8]
   1042a:	f43f af3c 	beq.w	102a6 <__kernel_rem_pio2+0x19e>
   1042e:	9c06      	ldr	r4, [sp, #24]
   10430:	eeb0 0b4a 	vmov.f64	d0, d10
   10434:	4260      	negs	r0, r4
   10436:	46a8      	mov	r8, r5
   10438:	468b      	mov	fp, r1
   1043a:	9d01      	ldr	r5, [sp, #4]
   1043c:	f000 fa40 	bl	108c0 <scalbn>
   10440:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10748 <__kernel_rem_pio2+0x640>
   10444:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1044c:	f2c0 8147 	blt.w	106de <__kernel_rem_pio2+0x5d6>
   10450:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10750 <__kernel_rem_pio2+0x648>
   10454:	ee20 7b07 	vmul.f64	d7, d0, d7
   10458:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1045c:	f10b 0201 	add.w	r2, fp, #1
   10460:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10464:	eea5 0b46 	vfms.f64	d0, d5, d6
   10468:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1046c:	3418      	adds	r4, #24
   1046e:	ee10 3a10 	vmov	r3, s0
   10472:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10476:	ee17 3a10 	vmov	r3, s14
   1047a:	9406      	str	r4, [sp, #24]
   1047c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   10480:	e02a      	b.n	104d8 <__kernel_rem_pio2+0x3d0>
   10482:	2301      	movs	r3, #1
   10484:	2000      	movs	r0, #0
   10486:	e783      	b.n	10390 <__kernel_rem_pio2+0x288>
   10488:	3001      	adds	r0, #1
   1048a:	4288      	cmp	r0, r1
   1048c:	f47f af7b 	bne.w	10386 <__kernel_rem_pio2+0x27e>
   10490:	e7a5      	b.n	103de <__kernel_rem_pio2+0x2d6>
   10492:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   10496:	eeb4 abc7 	vcmpe.f64	d10, d7
   1049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1049e:	f280 80e5 	bge.w	1066c <__kernel_rem_pio2+0x564>
   104a2:	2500      	movs	r5, #0
   104a4:	e6f9      	b.n	1029a <__kernel_rem_pio2+0x192>
   104a6:	f101 0e01 	add.w	lr, r1, #1
   104aa:	4670      	mov	r0, lr
   104ac:	4675      	mov	r5, lr
   104ae:	e71f      	b.n	102f0 <__kernel_rem_pio2+0x1e8>
   104b0:	9b06      	ldr	r3, [sp, #24]
   104b2:	f1a3 0118 	sub.w	r1, r3, #24
   104b6:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   104ba:	9106      	str	r1, [sp, #24]
   104bc:	46a8      	mov	r8, r5
   104be:	4672      	mov	r2, lr
   104c0:	9d01      	ldr	r5, [sp, #4]
   104c2:	b94b      	cbnz	r3, 104d8 <__kernel_rem_pio2+0x3d0>
   104c4:	f1ac 0304 	sub.w	r3, ip, #4
   104c8:	443b      	add	r3, r7
   104ca:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   104ce:	3a01      	subs	r2, #1
   104d0:	3918      	subs	r1, #24
   104d2:	2800      	cmp	r0, #0
   104d4:	d0f9      	beq.n	104ca <__kernel_rem_pio2+0x3c2>
   104d6:	9106      	str	r1, [sp, #24]
   104d8:	9806      	ldr	r0, [sp, #24]
   104da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   104de:	9201      	str	r2, [sp, #4]
   104e0:	f000 f9ee 	bl	108c0 <scalbn>
   104e4:	9a01      	ldr	r2, [sp, #4]
   104e6:	2a00      	cmp	r2, #0
   104e8:	f2c0 8121 	blt.w	1072e <__kernel_rem_pio2+0x626>
   104ec:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10750 <__kernel_rem_pio2+0x648>
   104f0:	f102 0c01 	add.w	ip, r2, #1
   104f4:	a96c      	add	r1, sp, #432	; 0x1b0
   104f6:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   104fa:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   104fe:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   10502:	ed33 7a01 	vldmdb	r3!, {s14}
   10506:	42bb      	cmp	r3, r7
   10508:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1050c:	ee27 7b00 	vmul.f64	d7, d7, d0
   10510:	ee20 0b06 	vmul.f64	d0, d0, d6
   10514:	ed21 7b02 	vstmdb	r1!, {d7}
   10518:	d1f3      	bne.n	10502 <__kernel_rem_pio2+0x3fa>
   1051a:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10758 <__kernel_rem_pio2+0x650>
   1051e:	f1ae 0308 	sub.w	r3, lr, #8
   10522:	a96c      	add	r1, sp, #432	; 0x1b0
   10524:	18ce      	adds	r6, r1, r3
   10526:	2400      	movs	r4, #0
   10528:	af44      	add	r7, sp, #272	; 0x110
   1052a:	2d00      	cmp	r5, #0
   1052c:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10760 <__kernel_rem_pio2+0x658>
   10530:	db10      	blt.n	10554 <__kernel_rem_pio2+0x44c>
   10532:	eeb0 6b44 	vmov.f64	d6, d4
   10536:	488c      	ldr	r0, [pc, #560]	; (10768 <__kernel_rem_pio2+0x660>)
   10538:	4631      	mov	r1, r6
   1053a:	2300      	movs	r3, #0
   1053c:	e003      	b.n	10546 <__kernel_rem_pio2+0x43e>
   1053e:	429c      	cmp	r4, r3
   10540:	db08      	blt.n	10554 <__kernel_rem_pio2+0x44c>
   10542:	ecb0 6b02 	vldmia	r0!, {d6}
   10546:	ecb1 5b02 	vldmia	r1!, {d5}
   1054a:	3301      	adds	r3, #1
   1054c:	429d      	cmp	r5, r3
   1054e:	eea5 7b06 	vfma.f64	d7, d5, d6
   10552:	daf4      	bge.n	1053e <__kernel_rem_pio2+0x436>
   10554:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   10558:	4294      	cmp	r4, r2
   1055a:	ed83 7b00 	vstr	d7, [r3]
   1055e:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   10562:	f104 0301 	add.w	r3, r4, #1
   10566:	f1a6 0608 	sub.w	r6, r6, #8
   1056a:	d001      	beq.n	10570 <__kernel_rem_pio2+0x468>
   1056c:	461c      	mov	r4, r3
   1056e:	e7dc      	b.n	1052a <__kernel_rem_pio2+0x422>
   10570:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10572:	2b02      	cmp	r3, #2
   10574:	dc1d      	bgt.n	105b2 <__kernel_rem_pio2+0x4aa>
   10576:	2b00      	cmp	r3, #0
   10578:	f300 808b 	bgt.w	10692 <__kernel_rem_pio2+0x58a>
   1057c:	d10f      	bne.n	1059e <__kernel_rem_pio2+0x496>
   1057e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10760 <__kernel_rem_pio2+0x658>
   10582:	44be      	add	lr, r7
   10584:	ed3e 6b02 	vldmdb	lr!, {d6}
   10588:	4577      	cmp	r7, lr
   1058a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1058e:	d1f9      	bne.n	10584 <__kernel_rem_pio2+0x47c>
   10590:	4643      	mov	r3, r8
   10592:	b10b      	cbz	r3, 10598 <__kernel_rem_pio2+0x490>
   10594:	eeb1 7b47 	vneg.f64	d7, d7
   10598:	9b07      	ldr	r3, [sp, #28]
   1059a:	ed83 7b00 	vstr	d7, [r3]
   1059e:	ee1b 3a10 	vmov	r3, s22
   105a2:	f003 0007 	and.w	r0, r3, #7
   105a6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   105aa:	ecbd 8b08 	vpop	{d8-d11}
   105ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   105b4:	2b03      	cmp	r3, #3
   105b6:	d1f2      	bne.n	1059e <__kernel_rem_pio2+0x496>
   105b8:	2a00      	cmp	r2, #0
   105ba:	f000 80e3 	beq.w	10784 <__kernel_rem_pio2+0x67c>
   105be:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   105c2:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   105c6:	ed30 6b02 	vldmdb	r0!, {d6}
   105ca:	eeb0 5b47 	vmov.f64	d5, d7
   105ce:	4287      	cmp	r7, r0
   105d0:	ee37 7b06 	vadd.f64	d7, d7, d6
   105d4:	ee36 6b47 	vsub.f64	d6, d6, d7
   105d8:	ed80 7b00 	vstr	d7, [r0]
   105dc:	ee36 6b05 	vadd.f64	d6, d6, d5
   105e0:	ed80 6b02 	vstr	d6, [r0, #8]
   105e4:	d1ef      	bne.n	105c6 <__kernel_rem_pio2+0x4be>
   105e6:	2a01      	cmp	r2, #1
   105e8:	f340 80cc 	ble.w	10784 <__kernel_rem_pio2+0x67c>
   105ec:	4439      	add	r1, r7
   105ee:	ed91 6b00 	vldr	d6, [r1]
   105f2:	00da      	lsls	r2, r3, #3
   105f4:	a946      	add	r1, sp, #280	; 0x118
   105f6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   105fa:	ed33 7b02 	vldmdb	r3!, {d7}
   105fe:	eeb0 5b46 	vmov.f64	d5, d6
   10602:	4299      	cmp	r1, r3
   10604:	ee36 6b07 	vadd.f64	d6, d6, d7
   10608:	ee37 7b46 	vsub.f64	d7, d7, d6
   1060c:	ed83 6b00 	vstr	d6, [r3]
   10610:	ee37 7b05 	vadd.f64	d7, d7, d5
   10614:	ed83 7b02 	vstr	d7, [r3, #8]
   10618:	d1ef      	bne.n	105fa <__kernel_rem_pio2+0x4f2>
   1061a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10760 <__kernel_rem_pio2+0x658>
   1061e:	f102 0308 	add.w	r3, r2, #8
   10622:	443b      	add	r3, r7
   10624:	f107 0210 	add.w	r2, r7, #16
   10628:	ed33 6b02 	vldmdb	r3!, {d6}
   1062c:	429a      	cmp	r2, r3
   1062e:	ee37 7b06 	vadd.f64	d7, d7, d6
   10632:	d1f9      	bne.n	10628 <__kernel_rem_pio2+0x520>
   10634:	4643      	mov	r3, r8
   10636:	2b00      	cmp	r3, #0
   10638:	d159      	bne.n	106ee <__kernel_rem_pio2+0x5e6>
   1063a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1063e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10642:	9c07      	ldr	r4, [sp, #28]
   10644:	ed84 7b04 	vstr	d7, [r4, #16]
   10648:	e9c4 0100 	strd	r0, r1, [r4]
   1064c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   10650:	e7a5      	b.n	1059e <__kernel_rem_pio2+0x496>
   10652:	1e48      	subs	r0, r1, #1
   10654:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10658:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1065c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10660:	e6ce      	b.n	10400 <__kernel_rem_pio2+0x2f8>
   10662:	2100      	movs	r1, #0
   10664:	f06f 0317 	mvn.w	r3, #23
   10668:	9103      	str	r1, [sp, #12]
   1066a:	e56d      	b.n	10148 <__kernel_rem_pio2+0x40>
   1066c:	ee1b 3a10 	vmov	r3, s22
   10670:	2900      	cmp	r1, #0
   10672:	f103 0301 	add.w	r3, r3, #1
   10676:	ee0b 3a10 	vmov	s22, r3
   1067a:	bfc8      	it	gt
   1067c:	2502      	movgt	r5, #2
   1067e:	f73f ae7a 	bgt.w	10376 <__kernel_rem_pio2+0x26e>
   10682:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10686:	ee37 ab4a 	vsub.f64	d10, d7, d10
   1068a:	2502      	movs	r5, #2
   1068c:	e605      	b.n	1029a <__kernel_rem_pio2+0x192>
   1068e:	2200      	movs	r2, #0
   10690:	e6a5      	b.n	103de <__kernel_rem_pio2+0x2d6>
   10692:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10760 <__kernel_rem_pio2+0x658>
   10696:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   1069a:	ed3c 6b02 	vldmdb	ip!, {d6}
   1069e:	4567      	cmp	r7, ip
   106a0:	ee37 7b06 	vadd.f64	d7, d7, d6
   106a4:	d1f9      	bne.n	1069a <__kernel_rem_pio2+0x592>
   106a6:	4643      	mov	r3, r8
   106a8:	ed97 6b00 	vldr	d6, [r7]
   106ac:	bb8b      	cbnz	r3, 10712 <__kernel_rem_pio2+0x60a>
   106ae:	9b07      	ldr	r3, [sp, #28]
   106b0:	2a00      	cmp	r2, #0
   106b2:	ed83 7b00 	vstr	d7, [r3]
   106b6:	ee36 7b47 	vsub.f64	d7, d6, d7
   106ba:	dd0c      	ble.n	106d6 <__kernel_rem_pio2+0x5ce>
   106bc:	a946      	add	r1, sp, #280	; 0x118
   106be:	2301      	movs	r3, #1
   106c0:	ecb1 6b02 	vldmia	r1!, {d6}
   106c4:	3301      	adds	r3, #1
   106c6:	429a      	cmp	r2, r3
   106c8:	ee37 7b06 	vadd.f64	d7, d7, d6
   106cc:	daf8      	bge.n	106c0 <__kernel_rem_pio2+0x5b8>
   106ce:	4643      	mov	r3, r8
   106d0:	b10b      	cbz	r3, 106d6 <__kernel_rem_pio2+0x5ce>
   106d2:	eeb1 7b47 	vneg.f64	d7, d7
   106d6:	9b07      	ldr	r3, [sp, #28]
   106d8:	ed83 7b02 	vstr	d7, [r3, #8]
   106dc:	e75f      	b.n	1059e <__kernel_rem_pio2+0x496>
   106de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   106e2:	465a      	mov	r2, fp
   106e4:	ee10 3a10 	vmov	r3, s0
   106e8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   106ec:	e6f4      	b.n	104d8 <__kernel_rem_pio2+0x3d0>
   106ee:	ed97 5b00 	vldr	d5, [r7]
   106f2:	eeb1 7b47 	vneg.f64	d7, d7
   106f6:	ed97 6b02 	vldr	d6, [r7, #8]
   106fa:	eeb1 5b45 	vneg.f64	d5, d5
   106fe:	9b07      	ldr	r3, [sp, #28]
   10700:	eeb1 6b46 	vneg.f64	d6, d6
   10704:	ed83 5b00 	vstr	d5, [r3]
   10708:	ed83 6b02 	vstr	d6, [r3, #8]
   1070c:	ed83 7b04 	vstr	d7, [r3, #16]
   10710:	e745      	b.n	1059e <__kernel_rem_pio2+0x496>
   10712:	9b07      	ldr	r3, [sp, #28]
   10714:	eeb1 5b47 	vneg.f64	d5, d7
   10718:	2a00      	cmp	r2, #0
   1071a:	ed83 5b00 	vstr	d5, [r3]
   1071e:	ee36 7b47 	vsub.f64	d7, d6, d7
   10722:	dccb      	bgt.n	106bc <__kernel_rem_pio2+0x5b4>
   10724:	e7d5      	b.n	106d2 <__kernel_rem_pio2+0x5ca>
   10726:	9b04      	ldr	r3, [sp, #16]
   10728:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1072c:	e553      	b.n	101d6 <__kernel_rem_pio2+0xce>
   1072e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10730:	2b02      	cmp	r3, #2
   10732:	dc1b      	bgt.n	1076c <__kernel_rem_pio2+0x664>
   10734:	2b00      	cmp	r3, #0
   10736:	dc21      	bgt.n	1077c <__kernel_rem_pio2+0x674>
   10738:	f47f af31 	bne.w	1059e <__kernel_rem_pio2+0x496>
   1073c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10760 <__kernel_rem_pio2+0x658>
   10740:	e726      	b.n	10590 <__kernel_rem_pio2+0x488>
   10742:	bf00      	nop
   10744:	f3af 8000 	nop.w
   10748:	00000000 	.word	0x00000000
   1074c:	41700000 	.word	0x41700000
   10750:	00000000 	.word	0x00000000
   10754:	3e700000 	.word	0x3e700000
   10758:	40000000 	.word	0x40000000
   1075c:	3ff921fb 	.word	0x3ff921fb
	...
   10768:	20000288 	.word	0x20000288
   1076c:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1076e:	2b03      	cmp	r3, #3
   10770:	f47f af15 	bne.w	1059e <__kernel_rem_pio2+0x496>
   10774:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10790 <__kernel_rem_pio2+0x688>
   10778:	af44      	add	r7, sp, #272	; 0x110
   1077a:	e75b      	b.n	10634 <__kernel_rem_pio2+0x52c>
   1077c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10790 <__kernel_rem_pio2+0x688>
   10780:	af44      	add	r7, sp, #272	; 0x110
   10782:	e790      	b.n	106a6 <__kernel_rem_pio2+0x59e>
   10784:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10790 <__kernel_rem_pio2+0x688>
   10788:	e754      	b.n	10634 <__kernel_rem_pio2+0x52c>
   1078a:	bf00      	nop
   1078c:	f3af 8000 	nop.w
	...

00010798 <fabs>:
   10798:	ec51 0b10 	vmov	r0, r1, d0
   1079c:	ee10 2a10 	vmov	r2, s0
   107a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   107a4:	ec43 2b10 	vmov	d0, r2, r3
   107a8:	4770      	bx	lr
   107aa:	bf00      	nop
   107ac:	0000      	movs	r0, r0
	...

000107b0 <floor>:
   107b0:	b510      	push	{r4, lr}
   107b2:	b082      	sub	sp, #8
   107b4:	ed8d 0b00 	vstr	d0, [sp]
   107b8:	9901      	ldr	r1, [sp, #4]
   107ba:	9800      	ldr	r0, [sp, #0]
   107bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
   107c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   107c4:	2b13      	cmp	r3, #19
   107c6:	4684      	mov	ip, r0
   107c8:	dc31      	bgt.n	1082e <floor+0x7e>
   107ca:	2b00      	cmp	r3, #0
   107cc:	db21      	blt.n	10812 <floor+0x62>
   107ce:	4a3a      	ldr	r2, [pc, #232]	; (108b8 <floor+0x108>)
   107d0:	411a      	asrs	r2, r3
   107d2:	ea01 0402 	and.w	r4, r1, r2
   107d6:	4304      	orrs	r4, r0
   107d8:	468e      	mov	lr, r1
   107da:	d02d      	beq.n	10838 <floor+0x88>
   107dc:	ed9f 7b34 	vldr	d7, [pc, #208]	; 108b0 <floor+0x100>
   107e0:	ed9d 6b00 	vldr	d6, [sp]
   107e4:	ee36 7b07 	vadd.f64	d7, d6, d7
   107e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   107ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   107f0:	dd09      	ble.n	10806 <floor+0x56>
   107f2:	2900      	cmp	r1, #0
   107f4:	da04      	bge.n	10800 <floor+0x50>
   107f6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   107fa:	fa41 f303 	asr.w	r3, r1, r3
   107fe:	449e      	add	lr, r3
   10800:	ea2e 0102 	bic.w	r1, lr, r2
   10804:	2000      	movs	r0, #0
   10806:	460b      	mov	r3, r1
   10808:	4602      	mov	r2, r0
   1080a:	ec43 2b10 	vmov	d0, r2, r3
   1080e:	b002      	add	sp, #8
   10810:	bd10      	pop	{r4, pc}
   10812:	ed9f 7b27 	vldr	d7, [pc, #156]	; 108b0 <floor+0x100>
   10816:	ee30 7b07 	vadd.f64	d7, d0, d7
   1081a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10822:	ddf0      	ble.n	10806 <floor+0x56>
   10824:	2900      	cmp	r1, #0
   10826:	db28      	blt.n	1087a <floor+0xca>
   10828:	2000      	movs	r0, #0
   1082a:	4601      	mov	r1, r0
   1082c:	e7eb      	b.n	10806 <floor+0x56>
   1082e:	2b33      	cmp	r3, #51	; 0x33
   10830:	dd06      	ble.n	10840 <floor+0x90>
   10832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10836:	d01b      	beq.n	10870 <floor+0xc0>
   10838:	ed9d 0b00 	vldr	d0, [sp]
   1083c:	b002      	add	sp, #8
   1083e:	bd10      	pop	{r4, pc}
   10840:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10844:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10848:	fa2e f202 	lsr.w	r2, lr, r2
   1084c:	4210      	tst	r0, r2
   1084e:	d0f3      	beq.n	10838 <floor+0x88>
   10850:	ed9f 7b17 	vldr	d7, [pc, #92]	; 108b0 <floor+0x100>
   10854:	ed9d 6b00 	vldr	d6, [sp]
   10858:	ee36 7b07 	vadd.f64	d7, d6, d7
   1085c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10864:	ddcf      	ble.n	10806 <floor+0x56>
   10866:	2900      	cmp	r1, #0
   10868:	db13      	blt.n	10892 <floor+0xe2>
   1086a:	ea2c 0002 	bic.w	r0, ip, r2
   1086e:	e7ca      	b.n	10806 <floor+0x56>
   10870:	ed9d 7b00 	vldr	d7, [sp]
   10874:	ee37 0b07 	vadd.f64	d0, d7, d7
   10878:	e7e0      	b.n	1083c <floor+0x8c>
   1087a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1087e:	4301      	orrs	r1, r0
   10880:	4b0e      	ldr	r3, [pc, #56]	; (108bc <floor+0x10c>)
   10882:	2900      	cmp	r1, #0
   10884:	f04f 0000 	mov.w	r0, #0
   10888:	bf0c      	ite	eq
   1088a:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   1088e:	4619      	movne	r1, r3
   10890:	e7b9      	b.n	10806 <floor+0x56>
   10892:	2b14      	cmp	r3, #20
   10894:	d009      	beq.n	108aa <floor+0xfa>
   10896:	2401      	movs	r4, #1
   10898:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1089c:	fa04 f303 	lsl.w	r3, r4, r3
   108a0:	449c      	add	ip, r3
   108a2:	4560      	cmp	r0, ip
   108a4:	bf88      	it	hi
   108a6:	1909      	addhi	r1, r1, r4
   108a8:	e7df      	b.n	1086a <floor+0xba>
   108aa:	3101      	adds	r1, #1
   108ac:	e7dd      	b.n	1086a <floor+0xba>
   108ae:	bf00      	nop
   108b0:	8800759c 	.word	0x8800759c
   108b4:	7e37e43c 	.word	0x7e37e43c
   108b8:	000fffff 	.word	0x000fffff
   108bc:	bff00000 	.word	0xbff00000

000108c0 <scalbn>:
   108c0:	ec53 2b10 	vmov	r2, r3, d0
   108c4:	b410      	push	{r4}
   108c6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   108ca:	4619      	mov	r1, r3
   108cc:	bb74      	cbnz	r4, 1092c <scalbn+0x6c>
   108ce:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   108d2:	4311      	orrs	r1, r2
   108d4:	d027      	beq.n	10926 <scalbn+0x66>
   108d6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10998 <scalbn+0xd8>
   108da:	493b      	ldr	r1, [pc, #236]	; (109c8 <scalbn+0x108>)
   108dc:	ee20 7b07 	vmul.f64	d7, d0, d7
   108e0:	4288      	cmp	r0, r1
   108e2:	ec53 2b17 	vmov	r2, r3, d7
   108e6:	db43      	blt.n	10970 <scalbn+0xb0>
   108e8:	f3c3 540a 	ubfx	r4, r3, #20, #11
   108ec:	4619      	mov	r1, r3
   108ee:	3c36      	subs	r4, #54	; 0x36
   108f0:	f24c 3c50 	movw	ip, #50000	; 0xc350
   108f4:	4560      	cmp	r0, ip
   108f6:	dc22      	bgt.n	1093e <scalbn+0x7e>
   108f8:	4420      	add	r0, r4
   108fa:	f240 74fe 	movw	r4, #2046	; 0x7fe
   108fe:	42a0      	cmp	r0, r4
   10900:	dc1d      	bgt.n	1093e <scalbn+0x7e>
   10902:	2800      	cmp	r0, #0
   10904:	dc29      	bgt.n	1095a <scalbn+0x9a>
   10906:	f110 0f35 	cmn.w	r0, #53	; 0x35
   1090a:	db38      	blt.n	1097e <scalbn+0xbe>
   1090c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10910:	3036      	adds	r0, #54	; 0x36
   10912:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10916:	ed9f 7b22 	vldr	d7, [pc, #136]	; 109a0 <scalbn+0xe0>
   1091a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   1091e:	ec43 2b10 	vmov	d0, r2, r3
   10922:	ee20 0b07 	vmul.f64	d0, d0, d7
   10926:	f85d 4b04 	ldr.w	r4, [sp], #4
   1092a:	4770      	bx	lr
   1092c:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10930:	4564      	cmp	r4, ip
   10932:	d1dd      	bne.n	108f0 <scalbn+0x30>
   10934:	ee30 0b00 	vadd.f64	d0, d0, d0
   10938:	f85d 4b04 	ldr.w	r4, [sp], #4
   1093c:	4770      	bx	lr
   1093e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 109a8 <scalbn+0xe8>
   10942:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 109b0 <scalbn+0xf0>
   10946:	eeb0 0b47 	vmov.f64	d0, d7
   1094a:	2b00      	cmp	r3, #0
   1094c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10950:	fe27 7b05 	vselge.f64	d7, d7, d5
   10954:	ee27 0b00 	vmul.f64	d0, d7, d0
   10958:	4770      	bx	lr
   1095a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1095e:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10962:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10966:	ec43 2b10 	vmov	d0, r2, r3
   1096a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1096e:	4770      	bx	lr
   10970:	ed9f 0b11 	vldr	d0, [pc, #68]	; 109b8 <scalbn+0xf8>
   10974:	f85d 4b04 	ldr.w	r4, [sp], #4
   10978:	ee27 0b00 	vmul.f64	d0, d7, d0
   1097c:	4770      	bx	lr
   1097e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 109b8 <scalbn+0xf8>
   10982:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 109c0 <scalbn+0x100>
   10986:	eeb0 0b47 	vmov.f64	d0, d7
   1098a:	2b00      	cmp	r3, #0
   1098c:	fe27 7b05 	vselge.f64	d7, d7, d5
   10990:	ee27 0b00 	vmul.f64	d0, d7, d0
   10994:	e7c7      	b.n	10926 <scalbn+0x66>
   10996:	bf00      	nop
   10998:	00000000 	.word	0x00000000
   1099c:	43500000 	.word	0x43500000
   109a0:	00000000 	.word	0x00000000
   109a4:	3c900000 	.word	0x3c900000
   109a8:	8800759c 	.word	0x8800759c
   109ac:	7e37e43c 	.word	0x7e37e43c
   109b0:	8800759c 	.word	0x8800759c
   109b4:	fe37e43c 	.word	0xfe37e43c
   109b8:	c2f8f359 	.word	0xc2f8f359
   109bc:	01a56e1f 	.word	0x01a56e1f
   109c0:	c2f8f359 	.word	0xc2f8f359
   109c4:	81a56e1f 	.word	0x81a56e1f
   109c8:	ffff3cb0 	.word	0xffff3cb0

000109cc <__aeabi_atexit>:
   109cc:	4603      	mov	r3, r0
   109ce:	4608      	mov	r0, r1
   109d0:	4619      	mov	r1, r3
   109d2:	f000 bcc1 	b.w	11358 <__cxa_atexit>
   109d6:	bf00      	nop

000109d8 <__utoa>:
   109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109da:	4f25      	ldr	r7, [pc, #148]	; (10a70 <__utoa+0x98>)
   109dc:	f1a2 0e02 	sub.w	lr, r2, #2
   109e0:	4616      	mov	r6, r2
   109e2:	4605      	mov	r5, r0
   109e4:	460c      	mov	r4, r1
   109e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   109e8:	b08b      	sub	sp, #44	; 0x2c
   109ea:	46ec      	mov	ip, sp
   109ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   109f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   109f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   109f6:	e897 0003 	ldmia.w	r7, {r0, r1}
   109fa:	f84c 0b04 	str.w	r0, [ip], #4
   109fe:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   10a02:	f88c 1000 	strb.w	r1, [ip]
   10a06:	d82e      	bhi.n	10a66 <__utoa+0x8e>
   10a08:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   10a0c:	4670      	mov	r0, lr
   10a0e:	f04f 0c00 	mov.w	ip, #0
   10a12:	fbb5 f2f6 	udiv	r2, r5, r6
   10a16:	fb06 5312 	mls	r3, r6, r2, r5
   10a1a:	3328      	adds	r3, #40	; 0x28
   10a1c:	446b      	add	r3, sp
   10a1e:	4661      	mov	r1, ip
   10a20:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   10a24:	f800 cf01 	strb.w	ip, [r0, #1]!
   10a28:	462b      	mov	r3, r5
   10a2a:	429e      	cmp	r6, r3
   10a2c:	f101 0c01 	add.w	ip, r1, #1
   10a30:	4615      	mov	r5, r2
   10a32:	d9ee      	bls.n	10a12 <__utoa+0x3a>
   10a34:	2300      	movs	r3, #0
   10a36:	f804 300c 	strb.w	r3, [r4, ip]
   10a3a:	b189      	cbz	r1, 10a60 <__utoa+0x88>
   10a3c:	44a4      	add	ip, r4
   10a3e:	4672      	mov	r2, lr
   10a40:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10a44:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   10a48:	f88e 5000 	strb.w	r5, [lr]
   10a4c:	eba4 030e 	sub.w	r3, r4, lr
   10a50:	3202      	adds	r2, #2
   10a52:	3b01      	subs	r3, #1
   10a54:	1b12      	subs	r2, r2, r4
   10a56:	440b      	add	r3, r1
   10a58:	429a      	cmp	r2, r3
   10a5a:	f88c 0000 	strb.w	r0, [ip]
   10a5e:	dbee      	blt.n	10a3e <__utoa+0x66>
   10a60:	4620      	mov	r0, r4
   10a62:	b00b      	add	sp, #44	; 0x2c
   10a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a66:	2300      	movs	r3, #0
   10a68:	4618      	mov	r0, r3
   10a6a:	7023      	strb	r3, [r4, #0]
   10a6c:	b00b      	add	sp, #44	; 0x2c
   10a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a70:	200024d8 	.word	0x200024d8

00010a74 <strncmp>:
   10a74:	2a00      	cmp	r2, #0
   10a76:	d03e      	beq.n	10af6 <strncmp+0x82>
   10a78:	ea40 0301 	orr.w	r3, r0, r1
   10a7c:	079b      	lsls	r3, r3, #30
   10a7e:	b530      	push	{r4, r5, lr}
   10a80:	4684      	mov	ip, r0
   10a82:	d12f      	bne.n	10ae4 <strncmp+0x70>
   10a84:	2a03      	cmp	r2, #3
   10a86:	d92d      	bls.n	10ae4 <strncmp+0x70>
   10a88:	460b      	mov	r3, r1
   10a8a:	e008      	b.n	10a9e <strncmp+0x2a>
   10a8c:	3a04      	subs	r2, #4
   10a8e:	4684      	mov	ip, r0
   10a90:	4619      	mov	r1, r3
   10a92:	d025      	beq.n	10ae0 <strncmp+0x6c>
   10a94:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   10a98:	d122      	bne.n	10ae0 <strncmp+0x6c>
   10a9a:	2a03      	cmp	r2, #3
   10a9c:	d922      	bls.n	10ae4 <strncmp+0x70>
   10a9e:	6804      	ldr	r4, [r0, #0]
   10aa0:	4619      	mov	r1, r3
   10aa2:	f853 5b04 	ldr.w	r5, [r3], #4
   10aa6:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   10aaa:	42ac      	cmp	r4, r5
   10aac:	4684      	mov	ip, r0
   10aae:	ea2e 0e04 	bic.w	lr, lr, r4
   10ab2:	f100 0004 	add.w	r0, r0, #4
   10ab6:	d0e9      	beq.n	10a8c <strncmp+0x18>
   10ab8:	f89c 0000 	ldrb.w	r0, [ip]
   10abc:	780c      	ldrb	r4, [r1, #0]
   10abe:	42a0      	cmp	r0, r4
   10ac0:	d11b      	bne.n	10afa <strncmp+0x86>
   10ac2:	46e6      	mov	lr, ip
   10ac4:	b168      	cbz	r0, 10ae2 <strncmp+0x6e>
   10ac6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10aca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   10ace:	eba2 030e 	sub.w	r3, r2, lr
   10ad2:	42a0      	cmp	r0, r4
   10ad4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10ad8:	d10f      	bne.n	10afa <strncmp+0x86>
   10ada:	eb1c 0303 	adds.w	r3, ip, r3
   10ade:	d1f1      	bne.n	10ac4 <strncmp+0x50>
   10ae0:	2000      	movs	r0, #0
   10ae2:	bd30      	pop	{r4, r5, pc}
   10ae4:	f89c 0000 	ldrb.w	r0, [ip]
   10ae8:	780c      	ldrb	r4, [r1, #0]
   10aea:	4284      	cmp	r4, r0
   10aec:	d105      	bne.n	10afa <strncmp+0x86>
   10aee:	2a01      	cmp	r2, #1
   10af0:	d0f6      	beq.n	10ae0 <strncmp+0x6c>
   10af2:	46e6      	mov	lr, ip
   10af4:	e7e6      	b.n	10ac4 <strncmp+0x50>
   10af6:	4610      	mov	r0, r2
   10af8:	4770      	bx	lr
   10afa:	1b00      	subs	r0, r0, r4
   10afc:	bd30      	pop	{r4, r5, pc}
   10afe:	bf00      	nop

00010b00 <strncpy>:
   10b00:	ea40 0301 	orr.w	r3, r0, r1
   10b04:	079b      	lsls	r3, r3, #30
   10b06:	b530      	push	{r4, r5, lr}
   10b08:	d101      	bne.n	10b0e <strncpy+0xe>
   10b0a:	2a03      	cmp	r2, #3
   10b0c:	d80f      	bhi.n	10b2e <strncpy+0x2e>
   10b0e:	4684      	mov	ip, r0
   10b10:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   10b14:	e007      	b.n	10b26 <strncpy+0x26>
   10b16:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   10b1a:	f803 1b01 	strb.w	r1, [r3], #1
   10b1e:	1e54      	subs	r4, r2, #1
   10b20:	b1c1      	cbz	r1, 10b54 <strncpy+0x54>
   10b22:	469c      	mov	ip, r3
   10b24:	4622      	mov	r2, r4
   10b26:	4663      	mov	r3, ip
   10b28:	2a00      	cmp	r2, #0
   10b2a:	d1f4      	bne.n	10b16 <strncpy+0x16>
   10b2c:	bd30      	pop	{r4, r5, pc}
   10b2e:	460b      	mov	r3, r1
   10b30:	4684      	mov	ip, r0
   10b32:	4619      	mov	r1, r3
   10b34:	f853 5b04 	ldr.w	r5, [r3], #4
   10b38:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10b3c:	ea24 0405 	bic.w	r4, r4, r5
   10b40:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10b44:	d1e4      	bne.n	10b10 <strncpy+0x10>
   10b46:	3a04      	subs	r2, #4
   10b48:	2a03      	cmp	r2, #3
   10b4a:	f84c 5b04 	str.w	r5, [ip], #4
   10b4e:	4619      	mov	r1, r3
   10b50:	d8ef      	bhi.n	10b32 <strncpy+0x32>
   10b52:	e7dd      	b.n	10b10 <strncpy+0x10>
   10b54:	4494      	add	ip, r2
   10b56:	2c00      	cmp	r4, #0
   10b58:	d0e8      	beq.n	10b2c <strncpy+0x2c>
   10b5a:	f803 1b01 	strb.w	r1, [r3], #1
   10b5e:	4563      	cmp	r3, ip
   10b60:	d1fb      	bne.n	10b5a <strncpy+0x5a>
   10b62:	bd30      	pop	{r4, r5, pc}

00010b64 <itoa>:
   10b64:	1e93      	subs	r3, r2, #2
   10b66:	2b22      	cmp	r3, #34	; 0x22
   10b68:	b510      	push	{r4, lr}
   10b6a:	460c      	mov	r4, r1
   10b6c:	d80c      	bhi.n	10b88 <itoa+0x24>
   10b6e:	2a0a      	cmp	r2, #10
   10b70:	d003      	beq.n	10b7a <itoa+0x16>
   10b72:	f7ff ff31 	bl	109d8 <__utoa>
   10b76:	4620      	mov	r0, r4
   10b78:	bd10      	pop	{r4, pc}
   10b7a:	2800      	cmp	r0, #0
   10b7c:	daf9      	bge.n	10b72 <itoa+0xe>
   10b7e:	232d      	movs	r3, #45	; 0x2d
   10b80:	f801 3b01 	strb.w	r3, [r1], #1
   10b84:	4240      	negs	r0, r0
   10b86:	e7f4      	b.n	10b72 <itoa+0xe>
   10b88:	2300      	movs	r3, #0
   10b8a:	700b      	strb	r3, [r1, #0]
   10b8c:	4618      	mov	r0, r3
   10b8e:	bd10      	pop	{r4, pc}

00010b90 <__errno>:
   10b90:	4b01      	ldr	r3, [pc, #4]	; (10b98 <__errno+0x8>)
   10b92:	6818      	ldr	r0, [r3, #0]
   10b94:	4770      	bx	lr
   10b96:	bf00      	nop
   10b98:	20003778 	.word	0x20003778

00010b9c <malloc>:
   10b9c:	4b02      	ldr	r3, [pc, #8]	; (10ba8 <malloc+0xc>)
   10b9e:	4601      	mov	r1, r0
   10ba0:	6818      	ldr	r0, [r3, #0]
   10ba2:	f000 b80b 	b.w	10bbc <_malloc_r>
   10ba6:	bf00      	nop
   10ba8:	20003778 	.word	0x20003778

00010bac <free>:
   10bac:	4b02      	ldr	r3, [pc, #8]	; (10bb8 <free+0xc>)
   10bae:	4601      	mov	r1, r0
   10bb0:	6818      	ldr	r0, [r3, #0]
   10bb2:	f001 bc4f 	b.w	12454 <_free_r>
   10bb6:	bf00      	nop
   10bb8:	20003778 	.word	0x20003778

00010bbc <_malloc_r>:
   10bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bc0:	f101 060b 	add.w	r6, r1, #11
   10bc4:	2e16      	cmp	r6, #22
   10bc6:	b083      	sub	sp, #12
   10bc8:	4604      	mov	r4, r0
   10bca:	d824      	bhi.n	10c16 <_malloc_r+0x5a>
   10bcc:	2910      	cmp	r1, #16
   10bce:	f200 80ba 	bhi.w	10d46 <_malloc_r+0x18a>
   10bd2:	f000 fc5d 	bl	11490 <__malloc_lock>
   10bd6:	2610      	movs	r6, #16
   10bd8:	2218      	movs	r2, #24
   10bda:	2002      	movs	r0, #2
   10bdc:	4fb5      	ldr	r7, [pc, #724]	; (10eb4 <_malloc_r+0x2f8>)
   10bde:	443a      	add	r2, r7
   10be0:	f1a2 0108 	sub.w	r1, r2, #8
   10be4:	6853      	ldr	r3, [r2, #4]
   10be6:	428b      	cmp	r3, r1
   10be8:	f000 80ba 	beq.w	10d60 <_malloc_r+0x1a4>
   10bec:	685a      	ldr	r2, [r3, #4]
   10bee:	68d9      	ldr	r1, [r3, #12]
   10bf0:	f022 0203 	bic.w	r2, r2, #3
   10bf4:	441a      	add	r2, r3
   10bf6:	689d      	ldr	r5, [r3, #8]
   10bf8:	60e9      	str	r1, [r5, #12]
   10bfa:	608d      	str	r5, [r1, #8]
   10bfc:	6851      	ldr	r1, [r2, #4]
   10bfe:	f041 0101 	orr.w	r1, r1, #1
   10c02:	4620      	mov	r0, r4
   10c04:	6051      	str	r1, [r2, #4]
   10c06:	f103 0508 	add.w	r5, r3, #8
   10c0a:	f000 fc47 	bl	1149c <__malloc_unlock>
   10c0e:	4628      	mov	r0, r5
   10c10:	b003      	add	sp, #12
   10c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c16:	f036 0607 	bics.w	r6, r6, #7
   10c1a:	f100 8094 	bmi.w	10d46 <_malloc_r+0x18a>
   10c1e:	42b1      	cmp	r1, r6
   10c20:	f200 8091 	bhi.w	10d46 <_malloc_r+0x18a>
   10c24:	f000 fc34 	bl	11490 <__malloc_lock>
   10c28:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   10c2c:	f0c0 819a 	bcc.w	10f64 <_malloc_r+0x3a8>
   10c30:	0a73      	lsrs	r3, r6, #9
   10c32:	f000 808f 	beq.w	10d54 <_malloc_r+0x198>
   10c36:	2b04      	cmp	r3, #4
   10c38:	f200 816f 	bhi.w	10f1a <_malloc_r+0x35e>
   10c3c:	09b3      	lsrs	r3, r6, #6
   10c3e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   10c42:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   10c46:	00c3      	lsls	r3, r0, #3
   10c48:	4f9a      	ldr	r7, [pc, #616]	; (10eb4 <_malloc_r+0x2f8>)
   10c4a:	443b      	add	r3, r7
   10c4c:	f1a3 0508 	sub.w	r5, r3, #8
   10c50:	685b      	ldr	r3, [r3, #4]
   10c52:	429d      	cmp	r5, r3
   10c54:	d106      	bne.n	10c64 <_malloc_r+0xa8>
   10c56:	e00c      	b.n	10c72 <_malloc_r+0xb6>
   10c58:	2900      	cmp	r1, #0
   10c5a:	f280 8127 	bge.w	10eac <_malloc_r+0x2f0>
   10c5e:	68db      	ldr	r3, [r3, #12]
   10c60:	429d      	cmp	r5, r3
   10c62:	d006      	beq.n	10c72 <_malloc_r+0xb6>
   10c64:	685a      	ldr	r2, [r3, #4]
   10c66:	f022 0203 	bic.w	r2, r2, #3
   10c6a:	1b91      	subs	r1, r2, r6
   10c6c:	290f      	cmp	r1, #15
   10c6e:	ddf3      	ble.n	10c58 <_malloc_r+0x9c>
   10c70:	4660      	mov	r0, ip
   10c72:	693d      	ldr	r5, [r7, #16]
   10c74:	f8df c250 	ldr.w	ip, [pc, #592]	; 10ec8 <_malloc_r+0x30c>
   10c78:	4565      	cmp	r5, ip
   10c7a:	d07c      	beq.n	10d76 <_malloc_r+0x1ba>
   10c7c:	686a      	ldr	r2, [r5, #4]
   10c7e:	f022 0203 	bic.w	r2, r2, #3
   10c82:	1b93      	subs	r3, r2, r6
   10c84:	2b0f      	cmp	r3, #15
   10c86:	f300 817b 	bgt.w	10f80 <_malloc_r+0x3c4>
   10c8a:	2b00      	cmp	r3, #0
   10c8c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10c90:	f280 816c 	bge.w	10f6c <_malloc_r+0x3b0>
   10c94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10c98:	f080 811a 	bcs.w	10ed0 <_malloc_r+0x314>
   10c9c:	08d3      	lsrs	r3, r2, #3
   10c9e:	6879      	ldr	r1, [r7, #4]
   10ca0:	3301      	adds	r3, #1
   10ca2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   10ca6:	2201      	movs	r2, #1
   10ca8:	fa02 f20e 	lsl.w	r2, r2, lr
   10cac:	430a      	orrs	r2, r1
   10cae:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   10cb2:	f8c5 e008 	str.w	lr, [r5, #8]
   10cb6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   10cba:	3908      	subs	r1, #8
   10cbc:	60e9      	str	r1, [r5, #12]
   10cbe:	607a      	str	r2, [r7, #4]
   10cc0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   10cc4:	f8ce 500c 	str.w	r5, [lr, #12]
   10cc8:	1083      	asrs	r3, r0, #2
   10cca:	2101      	movs	r1, #1
   10ccc:	4099      	lsls	r1, r3
   10cce:	4291      	cmp	r1, r2
   10cd0:	d857      	bhi.n	10d82 <_malloc_r+0x1c6>
   10cd2:	4211      	tst	r1, r2
   10cd4:	d106      	bne.n	10ce4 <_malloc_r+0x128>
   10cd6:	f020 0003 	bic.w	r0, r0, #3
   10cda:	0049      	lsls	r1, r1, #1
   10cdc:	4211      	tst	r1, r2
   10cde:	f100 0004 	add.w	r0, r0, #4
   10ce2:	d0fa      	beq.n	10cda <_malloc_r+0x11e>
   10ce4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10ce8:	464d      	mov	r5, r9
   10cea:	4686      	mov	lr, r0
   10cec:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10cf0:	4545      	cmp	r5, r8
   10cf2:	d108      	bne.n	10d06 <_malloc_r+0x14a>
   10cf4:	e11d      	b.n	10f32 <_malloc_r+0x376>
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	f280 8124 	bge.w	10f44 <_malloc_r+0x388>
   10cfc:	f8d8 800c 	ldr.w	r8, [r8, #12]
   10d00:	4545      	cmp	r5, r8
   10d02:	f000 8116 	beq.w	10f32 <_malloc_r+0x376>
   10d06:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10d0a:	f022 0203 	bic.w	r2, r2, #3
   10d0e:	1b93      	subs	r3, r2, r6
   10d10:	2b0f      	cmp	r3, #15
   10d12:	ddf0      	ble.n	10cf6 <_malloc_r+0x13a>
   10d14:	4620      	mov	r0, r4
   10d16:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   10d1a:	eb08 0106 	add.w	r1, r8, r6
   10d1e:	f046 0601 	orr.w	r6, r6, #1
   10d22:	f8c8 6004 	str.w	r6, [r8, #4]
   10d26:	60ec      	str	r4, [r5, #12]
   10d28:	60a5      	str	r5, [r4, #8]
   10d2a:	f043 0401 	orr.w	r4, r3, #1
   10d2e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10d32:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10d36:	604c      	str	r4, [r1, #4]
   10d38:	f848 3002 	str.w	r3, [r8, r2]
   10d3c:	f000 fbae 	bl	1149c <__malloc_unlock>
   10d40:	f108 0508 	add.w	r5, r8, #8
   10d44:	e002      	b.n	10d4c <_malloc_r+0x190>
   10d46:	230c      	movs	r3, #12
   10d48:	6023      	str	r3, [r4, #0]
   10d4a:	2500      	movs	r5, #0
   10d4c:	4628      	mov	r0, r5
   10d4e:	b003      	add	sp, #12
   10d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d54:	f44f 7300 	mov.w	r3, #512	; 0x200
   10d58:	2040      	movs	r0, #64	; 0x40
   10d5a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   10d5e:	e773      	b.n	10c48 <_malloc_r+0x8c>
   10d60:	68d3      	ldr	r3, [r2, #12]
   10d62:	429a      	cmp	r2, r3
   10d64:	bf08      	it	eq
   10d66:	3002      	addeq	r0, #2
   10d68:	f47f af40 	bne.w	10bec <_malloc_r+0x30>
   10d6c:	693d      	ldr	r5, [r7, #16]
   10d6e:	f8df c158 	ldr.w	ip, [pc, #344]	; 10ec8 <_malloc_r+0x30c>
   10d72:	4565      	cmp	r5, ip
   10d74:	d182      	bne.n	10c7c <_malloc_r+0xc0>
   10d76:	687a      	ldr	r2, [r7, #4]
   10d78:	1083      	asrs	r3, r0, #2
   10d7a:	2101      	movs	r1, #1
   10d7c:	4099      	lsls	r1, r3
   10d7e:	4291      	cmp	r1, r2
   10d80:	d9a7      	bls.n	10cd2 <_malloc_r+0x116>
   10d82:	68bd      	ldr	r5, [r7, #8]
   10d84:	686b      	ldr	r3, [r5, #4]
   10d86:	f023 0903 	bic.w	r9, r3, #3
   10d8a:	454e      	cmp	r6, r9
   10d8c:	d803      	bhi.n	10d96 <_malloc_r+0x1da>
   10d8e:	eba9 0306 	sub.w	r3, r9, r6
   10d92:	2b0f      	cmp	r3, #15
   10d94:	dc7a      	bgt.n	10e8c <_malloc_r+0x2d0>
   10d96:	f8df b134 	ldr.w	fp, [pc, #308]	; 10ecc <_malloc_r+0x310>
   10d9a:	4b47      	ldr	r3, [pc, #284]	; (10eb8 <_malloc_r+0x2fc>)
   10d9c:	f8db 2000 	ldr.w	r2, [fp]
   10da0:	681b      	ldr	r3, [r3, #0]
   10da2:	3201      	adds	r2, #1
   10da4:	4433      	add	r3, r6
   10da6:	eb05 0a09 	add.w	sl, r5, r9
   10daa:	f000 8133 	beq.w	11014 <_malloc_r+0x458>
   10dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10db2:	330f      	adds	r3, #15
   10db4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   10db8:	f028 080f 	bic.w	r8, r8, #15
   10dbc:	4641      	mov	r1, r8
   10dbe:	4620      	mov	r0, r4
   10dc0:	f001 fcb6 	bl	12730 <_sbrk_r>
   10dc4:	1c41      	adds	r1, r0, #1
   10dc6:	4602      	mov	r2, r0
   10dc8:	f000 80f3 	beq.w	10fb2 <_malloc_r+0x3f6>
   10dcc:	4582      	cmp	sl, r0
   10dce:	f200 80ee 	bhi.w	10fae <_malloc_r+0x3f2>
   10dd2:	4b3a      	ldr	r3, [pc, #232]	; (10ebc <_malloc_r+0x300>)
   10dd4:	6819      	ldr	r1, [r3, #0]
   10dd6:	4441      	add	r1, r8
   10dd8:	6019      	str	r1, [r3, #0]
   10dda:	4608      	mov	r0, r1
   10ddc:	f000 814e 	beq.w	1107c <_malloc_r+0x4c0>
   10de0:	f8db 1000 	ldr.w	r1, [fp]
   10de4:	9301      	str	r3, [sp, #4]
   10de6:	3101      	adds	r1, #1
   10de8:	bf1b      	ittet	ne
   10dea:	eba2 010a 	subne.w	r1, r2, sl
   10dee:	1809      	addne	r1, r1, r0
   10df0:	f8cb 2000 	streq.w	r2, [fp]
   10df4:	6019      	strne	r1, [r3, #0]
   10df6:	f012 0b07 	ands.w	fp, r2, #7
   10dfa:	f000 8117 	beq.w	1102c <_malloc_r+0x470>
   10dfe:	f1cb 0108 	rsb	r1, fp, #8
   10e02:	440a      	add	r2, r1
   10e04:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   10e08:	4490      	add	r8, r2
   10e0a:	3108      	adds	r1, #8
   10e0c:	eba1 0108 	sub.w	r1, r1, r8
   10e10:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10e14:	4651      	mov	r1, sl
   10e16:	4620      	mov	r0, r4
   10e18:	9200      	str	r2, [sp, #0]
   10e1a:	f001 fc89 	bl	12730 <_sbrk_r>
   10e1e:	1c42      	adds	r2, r0, #1
   10e20:	e9dd 2300 	ldrd	r2, r3, [sp]
   10e24:	f000 814f 	beq.w	110c6 <_malloc_r+0x50a>
   10e28:	1a80      	subs	r0, r0, r2
   10e2a:	eb00 080a 	add.w	r8, r0, sl
   10e2e:	6819      	ldr	r1, [r3, #0]
   10e30:	60ba      	str	r2, [r7, #8]
   10e32:	f048 0001 	orr.w	r0, r8, #1
   10e36:	4451      	add	r1, sl
   10e38:	42bd      	cmp	r5, r7
   10e3a:	6050      	str	r0, [r2, #4]
   10e3c:	6019      	str	r1, [r3, #0]
   10e3e:	f000 8129 	beq.w	11094 <_malloc_r+0x4d8>
   10e42:	f1b9 0f0f 	cmp.w	r9, #15
   10e46:	f240 8127 	bls.w	11098 <_malloc_r+0x4dc>
   10e4a:	6868      	ldr	r0, [r5, #4]
   10e4c:	f1a9 0c0c 	sub.w	ip, r9, #12
   10e50:	f02c 0c07 	bic.w	ip, ip, #7
   10e54:	f000 0001 	and.w	r0, r0, #1
   10e58:	ea40 000c 	orr.w	r0, r0, ip
   10e5c:	6068      	str	r0, [r5, #4]
   10e5e:	f04f 0e05 	mov.w	lr, #5
   10e62:	eb05 000c 	add.w	r0, r5, ip
   10e66:	f1bc 0f0f 	cmp.w	ip, #15
   10e6a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10e6e:	f200 8132 	bhi.w	110d6 <_malloc_r+0x51a>
   10e72:	6850      	ldr	r0, [r2, #4]
   10e74:	4615      	mov	r5, r2
   10e76:	4b12      	ldr	r3, [pc, #72]	; (10ec0 <_malloc_r+0x304>)
   10e78:	681a      	ldr	r2, [r3, #0]
   10e7a:	428a      	cmp	r2, r1
   10e7c:	bf38      	it	cc
   10e7e:	6019      	strcc	r1, [r3, #0]
   10e80:	4b10      	ldr	r3, [pc, #64]	; (10ec4 <_malloc_r+0x308>)
   10e82:	681a      	ldr	r2, [r3, #0]
   10e84:	428a      	cmp	r2, r1
   10e86:	bf38      	it	cc
   10e88:	6019      	strcc	r1, [r3, #0]
   10e8a:	e094      	b.n	10fb6 <_malloc_r+0x3fa>
   10e8c:	19aa      	adds	r2, r5, r6
   10e8e:	f043 0301 	orr.w	r3, r3, #1
   10e92:	f046 0601 	orr.w	r6, r6, #1
   10e96:	606e      	str	r6, [r5, #4]
   10e98:	4620      	mov	r0, r4
   10e9a:	60ba      	str	r2, [r7, #8]
   10e9c:	6053      	str	r3, [r2, #4]
   10e9e:	f000 fafd 	bl	1149c <__malloc_unlock>
   10ea2:	3508      	adds	r5, #8
   10ea4:	4628      	mov	r0, r5
   10ea6:	b003      	add	sp, #12
   10ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eac:	68d9      	ldr	r1, [r3, #12]
   10eae:	441a      	add	r2, r3
   10eb0:	e6a1      	b.n	10bf6 <_malloc_r+0x3a>
   10eb2:	bf00      	nop
   10eb4:	2000335c 	.word	0x2000335c
   10eb8:	20004d84 	.word	0x20004d84
   10ebc:	20004d54 	.word	0x20004d54
   10ec0:	20004d7c 	.word	0x20004d7c
   10ec4:	20004d80 	.word	0x20004d80
   10ec8:	20003364 	.word	0x20003364
   10ecc:	20003764 	.word	0x20003764
   10ed0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   10ed4:	ea4f 2352 	mov.w	r3, r2, lsr #9
   10ed8:	d363      	bcc.n	10fa2 <_malloc_r+0x3e6>
   10eda:	2b14      	cmp	r3, #20
   10edc:	f200 80b7 	bhi.w	1104e <_malloc_r+0x492>
   10ee0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10ee4:	00c9      	lsls	r1, r1, #3
   10ee6:	335b      	adds	r3, #91	; 0x5b
   10ee8:	eb07 0e01 	add.w	lr, r7, r1
   10eec:	5879      	ldr	r1, [r7, r1]
   10eee:	f1ae 0e08 	sub.w	lr, lr, #8
   10ef2:	458e      	cmp	lr, r1
   10ef4:	f000 8091 	beq.w	1101a <_malloc_r+0x45e>
   10ef8:	684b      	ldr	r3, [r1, #4]
   10efa:	f023 0303 	bic.w	r3, r3, #3
   10efe:	4293      	cmp	r3, r2
   10f00:	d902      	bls.n	10f08 <_malloc_r+0x34c>
   10f02:	6889      	ldr	r1, [r1, #8]
   10f04:	458e      	cmp	lr, r1
   10f06:	d1f7      	bne.n	10ef8 <_malloc_r+0x33c>
   10f08:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   10f0c:	687a      	ldr	r2, [r7, #4]
   10f0e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   10f12:	f8ce 5008 	str.w	r5, [lr, #8]
   10f16:	60cd      	str	r5, [r1, #12]
   10f18:	e6d6      	b.n	10cc8 <_malloc_r+0x10c>
   10f1a:	2b14      	cmp	r3, #20
   10f1c:	d959      	bls.n	10fd2 <_malloc_r+0x416>
   10f1e:	2b54      	cmp	r3, #84	; 0x54
   10f20:	f200 809d 	bhi.w	1105e <_malloc_r+0x4a2>
   10f24:	0b33      	lsrs	r3, r6, #12
   10f26:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   10f2a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   10f2e:	00c3      	lsls	r3, r0, #3
   10f30:	e68a      	b.n	10c48 <_malloc_r+0x8c>
   10f32:	f10e 0e01 	add.w	lr, lr, #1
   10f36:	f01e 0f03 	tst.w	lr, #3
   10f3a:	f105 0508 	add.w	r5, r5, #8
   10f3e:	f47f aed5 	bne.w	10cec <_malloc_r+0x130>
   10f42:	e051      	b.n	10fe8 <_malloc_r+0x42c>
   10f44:	4442      	add	r2, r8
   10f46:	4645      	mov	r5, r8
   10f48:	6853      	ldr	r3, [r2, #4]
   10f4a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10f4e:	f043 0301 	orr.w	r3, r3, #1
   10f52:	6053      	str	r3, [r2, #4]
   10f54:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10f58:	4620      	mov	r0, r4
   10f5a:	60d9      	str	r1, [r3, #12]
   10f5c:	608b      	str	r3, [r1, #8]
   10f5e:	f000 fa9d 	bl	1149c <__malloc_unlock>
   10f62:	e6f3      	b.n	10d4c <_malloc_r+0x190>
   10f64:	08f0      	lsrs	r0, r6, #3
   10f66:	f106 0208 	add.w	r2, r6, #8
   10f6a:	e637      	b.n	10bdc <_malloc_r+0x20>
   10f6c:	442a      	add	r2, r5
   10f6e:	4620      	mov	r0, r4
   10f70:	6853      	ldr	r3, [r2, #4]
   10f72:	f043 0301 	orr.w	r3, r3, #1
   10f76:	6053      	str	r3, [r2, #4]
   10f78:	3508      	adds	r5, #8
   10f7a:	f000 fa8f 	bl	1149c <__malloc_unlock>
   10f7e:	e6e5      	b.n	10d4c <_malloc_r+0x190>
   10f80:	19a9      	adds	r1, r5, r6
   10f82:	4620      	mov	r0, r4
   10f84:	f046 0601 	orr.w	r6, r6, #1
   10f88:	f043 0401 	orr.w	r4, r3, #1
   10f8c:	606e      	str	r6, [r5, #4]
   10f8e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10f92:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10f96:	604c      	str	r4, [r1, #4]
   10f98:	50ab      	str	r3, [r5, r2]
   10f9a:	f000 fa7f 	bl	1149c <__malloc_unlock>
   10f9e:	3508      	adds	r5, #8
   10fa0:	e6d4      	b.n	10d4c <_malloc_r+0x190>
   10fa2:	0993      	lsrs	r3, r2, #6
   10fa4:	f103 0139 	add.w	r1, r3, #57	; 0x39
   10fa8:	00c9      	lsls	r1, r1, #3
   10faa:	3338      	adds	r3, #56	; 0x38
   10fac:	e79c      	b.n	10ee8 <_malloc_r+0x32c>
   10fae:	42bd      	cmp	r5, r7
   10fb0:	d05f      	beq.n	11072 <_malloc_r+0x4b6>
   10fb2:	68bd      	ldr	r5, [r7, #8]
   10fb4:	6868      	ldr	r0, [r5, #4]
   10fb6:	f020 0803 	bic.w	r8, r0, #3
   10fba:	4546      	cmp	r6, r8
   10fbc:	eba8 0306 	sub.w	r3, r8, r6
   10fc0:	d802      	bhi.n	10fc8 <_malloc_r+0x40c>
   10fc2:	2b0f      	cmp	r3, #15
   10fc4:	f73f af62 	bgt.w	10e8c <_malloc_r+0x2d0>
   10fc8:	4620      	mov	r0, r4
   10fca:	f000 fa67 	bl	1149c <__malloc_unlock>
   10fce:	2500      	movs	r5, #0
   10fd0:	e6bc      	b.n	10d4c <_malloc_r+0x190>
   10fd2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   10fd6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   10fda:	00c3      	lsls	r3, r0, #3
   10fdc:	e634      	b.n	10c48 <_malloc_r+0x8c>
   10fde:	f859 3908 	ldr.w	r3, [r9], #-8
   10fe2:	454b      	cmp	r3, r9
   10fe4:	f040 8096 	bne.w	11114 <_malloc_r+0x558>
   10fe8:	f010 0f03 	tst.w	r0, #3
   10fec:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   10ff0:	d1f5      	bne.n	10fde <_malloc_r+0x422>
   10ff2:	687b      	ldr	r3, [r7, #4]
   10ff4:	ea23 0301 	bic.w	r3, r3, r1
   10ff8:	607b      	str	r3, [r7, #4]
   10ffa:	0049      	lsls	r1, r1, #1
   10ffc:	4299      	cmp	r1, r3
   10ffe:	f63f aec0 	bhi.w	10d82 <_malloc_r+0x1c6>
   11002:	b919      	cbnz	r1, 1100c <_malloc_r+0x450>
   11004:	e6bd      	b.n	10d82 <_malloc_r+0x1c6>
   11006:	0049      	lsls	r1, r1, #1
   11008:	f10e 0e04 	add.w	lr, lr, #4
   1100c:	4219      	tst	r1, r3
   1100e:	d0fa      	beq.n	11006 <_malloc_r+0x44a>
   11010:	4670      	mov	r0, lr
   11012:	e667      	b.n	10ce4 <_malloc_r+0x128>
   11014:	f103 0810 	add.w	r8, r3, #16
   11018:	e6d0      	b.n	10dbc <_malloc_r+0x200>
   1101a:	109a      	asrs	r2, r3, #2
   1101c:	f04f 0801 	mov.w	r8, #1
   11020:	687b      	ldr	r3, [r7, #4]
   11022:	fa08 f202 	lsl.w	r2, r8, r2
   11026:	431a      	orrs	r2, r3
   11028:	607a      	str	r2, [r7, #4]
   1102a:	e770      	b.n	10f0e <_malloc_r+0x352>
   1102c:	eb02 0108 	add.w	r1, r2, r8
   11030:	4249      	negs	r1, r1
   11032:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   11036:	4651      	mov	r1, sl
   11038:	4620      	mov	r0, r4
   1103a:	9200      	str	r2, [sp, #0]
   1103c:	f001 fb78 	bl	12730 <_sbrk_r>
   11040:	1c43      	adds	r3, r0, #1
   11042:	e9dd 2300 	ldrd	r2, r3, [sp]
   11046:	f47f aeef 	bne.w	10e28 <_malloc_r+0x26c>
   1104a:	46da      	mov	sl, fp
   1104c:	e6ef      	b.n	10e2e <_malloc_r+0x272>
   1104e:	2b54      	cmp	r3, #84	; 0x54
   11050:	d825      	bhi.n	1109e <_malloc_r+0x4e2>
   11052:	0b13      	lsrs	r3, r2, #12
   11054:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   11058:	00c9      	lsls	r1, r1, #3
   1105a:	336e      	adds	r3, #110	; 0x6e
   1105c:	e744      	b.n	10ee8 <_malloc_r+0x32c>
   1105e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   11062:	d825      	bhi.n	110b0 <_malloc_r+0x4f4>
   11064:	0bf3      	lsrs	r3, r6, #15
   11066:	f103 0078 	add.w	r0, r3, #120	; 0x78
   1106a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   1106e:	00c3      	lsls	r3, r0, #3
   11070:	e5ea      	b.n	10c48 <_malloc_r+0x8c>
   11072:	4b29      	ldr	r3, [pc, #164]	; (11118 <_malloc_r+0x55c>)
   11074:	6818      	ldr	r0, [r3, #0]
   11076:	4440      	add	r0, r8
   11078:	6018      	str	r0, [r3, #0]
   1107a:	e6b1      	b.n	10de0 <_malloc_r+0x224>
   1107c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   11080:	f1bc 0f00 	cmp.w	ip, #0
   11084:	f47f aeac 	bne.w	10de0 <_malloc_r+0x224>
   11088:	68bd      	ldr	r5, [r7, #8]
   1108a:	44c8      	add	r8, r9
   1108c:	f048 0001 	orr.w	r0, r8, #1
   11090:	6068      	str	r0, [r5, #4]
   11092:	e6f0      	b.n	10e76 <_malloc_r+0x2ba>
   11094:	4615      	mov	r5, r2
   11096:	e6ee      	b.n	10e76 <_malloc_r+0x2ba>
   11098:	2301      	movs	r3, #1
   1109a:	6053      	str	r3, [r2, #4]
   1109c:	e794      	b.n	10fc8 <_malloc_r+0x40c>
   1109e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   110a2:	d823      	bhi.n	110ec <_malloc_r+0x530>
   110a4:	0bd3      	lsrs	r3, r2, #15
   110a6:	f103 0178 	add.w	r1, r3, #120	; 0x78
   110aa:	00c9      	lsls	r1, r1, #3
   110ac:	3377      	adds	r3, #119	; 0x77
   110ae:	e71b      	b.n	10ee8 <_malloc_r+0x32c>
   110b0:	f240 5254 	movw	r2, #1364	; 0x554
   110b4:	4293      	cmp	r3, r2
   110b6:	d823      	bhi.n	11100 <_malloc_r+0x544>
   110b8:	0cb3      	lsrs	r3, r6, #18
   110ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   110be:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   110c2:	00c3      	lsls	r3, r0, #3
   110c4:	e5c0      	b.n	10c48 <_malloc_r+0x8c>
   110c6:	f1ab 0b08 	sub.w	fp, fp, #8
   110ca:	44d8      	add	r8, fp
   110cc:	eba8 0802 	sub.w	r8, r8, r2
   110d0:	f04f 0a00 	mov.w	sl, #0
   110d4:	e6ab      	b.n	10e2e <_malloc_r+0x272>
   110d6:	f105 0108 	add.w	r1, r5, #8
   110da:	4620      	mov	r0, r4
   110dc:	9300      	str	r3, [sp, #0]
   110de:	f001 f9b9 	bl	12454 <_free_r>
   110e2:	68bd      	ldr	r5, [r7, #8]
   110e4:	9b00      	ldr	r3, [sp, #0]
   110e6:	6868      	ldr	r0, [r5, #4]
   110e8:	6819      	ldr	r1, [r3, #0]
   110ea:	e6c4      	b.n	10e76 <_malloc_r+0x2ba>
   110ec:	f240 5154 	movw	r1, #1364	; 0x554
   110f0:	428b      	cmp	r3, r1
   110f2:	d80b      	bhi.n	1110c <_malloc_r+0x550>
   110f4:	0c93      	lsrs	r3, r2, #18
   110f6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   110fa:	00c9      	lsls	r1, r1, #3
   110fc:	337c      	adds	r3, #124	; 0x7c
   110fe:	e6f3      	b.n	10ee8 <_malloc_r+0x32c>
   11100:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   11104:	207f      	movs	r0, #127	; 0x7f
   11106:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   1110a:	e59d      	b.n	10c48 <_malloc_r+0x8c>
   1110c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   11110:	237e      	movs	r3, #126	; 0x7e
   11112:	e6e9      	b.n	10ee8 <_malloc_r+0x32c>
   11114:	687b      	ldr	r3, [r7, #4]
   11116:	e770      	b.n	10ffa <_malloc_r+0x43e>
   11118:	20004d54 	.word	0x20004d54

0001111c <memcmp>:
   1111c:	2a03      	cmp	r2, #3
   1111e:	b570      	push	{r4, r5, r6, lr}
   11120:	d914      	bls.n	1114c <memcmp+0x30>
   11122:	ea40 0301 	orr.w	r3, r0, r1
   11126:	079b      	lsls	r3, r3, #30
   11128:	d122      	bne.n	11170 <memcmp+0x54>
   1112a:	4604      	mov	r4, r0
   1112c:	460b      	mov	r3, r1
   1112e:	4619      	mov	r1, r3
   11130:	4620      	mov	r0, r4
   11132:	680e      	ldr	r6, [r1, #0]
   11134:	6805      	ldr	r5, [r0, #0]
   11136:	42b5      	cmp	r5, r6
   11138:	f104 0404 	add.w	r4, r4, #4
   1113c:	f103 0304 	add.w	r3, r3, #4
   11140:	d116      	bne.n	11170 <memcmp+0x54>
   11142:	3a04      	subs	r2, #4
   11144:	2a03      	cmp	r2, #3
   11146:	4620      	mov	r0, r4
   11148:	4619      	mov	r1, r3
   1114a:	d8f0      	bhi.n	1112e <memcmp+0x12>
   1114c:	1e54      	subs	r4, r2, #1
   1114e:	b19a      	cbz	r2, 11178 <memcmp+0x5c>
   11150:	1e42      	subs	r2, r0, #1
   11152:	3901      	subs	r1, #1
   11154:	e001      	b.n	1115a <memcmp+0x3e>
   11156:	18c3      	adds	r3, r0, r3
   11158:	d00c      	beq.n	11174 <memcmp+0x58>
   1115a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1115e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11162:	45e6      	cmp	lr, ip
   11164:	eba4 0302 	sub.w	r3, r4, r2
   11168:	d0f5      	beq.n	11156 <memcmp+0x3a>
   1116a:	ebae 000c 	sub.w	r0, lr, ip
   1116e:	bd70      	pop	{r4, r5, r6, pc}
   11170:	1e54      	subs	r4, r2, #1
   11172:	e7ed      	b.n	11150 <memcmp+0x34>
   11174:	4618      	mov	r0, r3
   11176:	bd70      	pop	{r4, r5, r6, pc}
   11178:	4610      	mov	r0, r2
   1117a:	bd70      	pop	{r4, r5, r6, pc}

0001117c <memmove>:
   1117c:	4288      	cmp	r0, r1
   1117e:	d90d      	bls.n	1119c <memmove+0x20>
   11180:	188b      	adds	r3, r1, r2
   11182:	4283      	cmp	r3, r0
   11184:	d90a      	bls.n	1119c <memmove+0x20>
   11186:	eb00 0c02 	add.w	ip, r0, r2
   1118a:	b1ba      	cbz	r2, 111bc <memmove+0x40>
   1118c:	4662      	mov	r2, ip
   1118e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   11192:	f802 cd01 	strb.w	ip, [r2, #-1]!
   11196:	4299      	cmp	r1, r3
   11198:	d1f9      	bne.n	1118e <memmove+0x12>
   1119a:	4770      	bx	lr
   1119c:	2a0f      	cmp	r2, #15
   1119e:	d80e      	bhi.n	111be <memmove+0x42>
   111a0:	4603      	mov	r3, r0
   111a2:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   111a6:	b14a      	cbz	r2, 111bc <memmove+0x40>
   111a8:	f10c 0c01 	add.w	ip, ip, #1
   111ac:	3b01      	subs	r3, #1
   111ae:	448c      	add	ip, r1
   111b0:	f811 2b01 	ldrb.w	r2, [r1], #1
   111b4:	f803 2f01 	strb.w	r2, [r3, #1]!
   111b8:	4561      	cmp	r1, ip
   111ba:	d1f9      	bne.n	111b0 <memmove+0x34>
   111bc:	4770      	bx	lr
   111be:	ea40 0301 	orr.w	r3, r0, r1
   111c2:	079b      	lsls	r3, r3, #30
   111c4:	d150      	bne.n	11268 <memmove+0xec>
   111c6:	f1a2 0310 	sub.w	r3, r2, #16
   111ca:	b570      	push	{r4, r5, r6, lr}
   111cc:	f101 0c20 	add.w	ip, r1, #32
   111d0:	f023 050f 	bic.w	r5, r3, #15
   111d4:	f101 0e10 	add.w	lr, r1, #16
   111d8:	f100 0410 	add.w	r4, r0, #16
   111dc:	44ac      	add	ip, r5
   111de:	091b      	lsrs	r3, r3, #4
   111e0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   111e4:	f844 5c10 	str.w	r5, [r4, #-16]
   111e8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   111ec:	f844 5c0c 	str.w	r5, [r4, #-12]
   111f0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   111f4:	f844 5c08 	str.w	r5, [r4, #-8]
   111f8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   111fc:	f844 5c04 	str.w	r5, [r4, #-4]
   11200:	f10e 0e10 	add.w	lr, lr, #16
   11204:	45e6      	cmp	lr, ip
   11206:	f104 0410 	add.w	r4, r4, #16
   1120a:	d1e9      	bne.n	111e0 <memmove+0x64>
   1120c:	3301      	adds	r3, #1
   1120e:	f012 0f0c 	tst.w	r2, #12
   11212:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   11216:	f002 040f 	and.w	r4, r2, #15
   1121a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1121e:	d027      	beq.n	11270 <memmove+0xf4>
   11220:	3c04      	subs	r4, #4
   11222:	f024 0603 	bic.w	r6, r4, #3
   11226:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1122a:	441e      	add	r6, r3
   1122c:	1f1c      	subs	r4, r3, #4
   1122e:	468e      	mov	lr, r1
   11230:	f85e 5b04 	ldr.w	r5, [lr], #4
   11234:	f844 5f04 	str.w	r5, [r4, #4]!
   11238:	42b4      	cmp	r4, r6
   1123a:	d1f9      	bne.n	11230 <memmove+0xb4>
   1123c:	f10c 0401 	add.w	r4, ip, #1
   11240:	f002 0203 	and.w	r2, r2, #3
   11244:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1124c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11250:	b14a      	cbz	r2, 11266 <memmove+0xea>
   11252:	f10c 0c01 	add.w	ip, ip, #1
   11256:	3b01      	subs	r3, #1
   11258:	448c      	add	ip, r1
   1125a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1125e:	f803 2f01 	strb.w	r2, [r3, #1]!
   11262:	4561      	cmp	r1, ip
   11264:	d1f9      	bne.n	1125a <memmove+0xde>
   11266:	bd70      	pop	{r4, r5, r6, pc}
   11268:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1126c:	4603      	mov	r3, r0
   1126e:	e79b      	b.n	111a8 <memmove+0x2c>
   11270:	4622      	mov	r2, r4
   11272:	e7eb      	b.n	1124c <memmove+0xd0>

00011274 <__assert_func>:
   11274:	b500      	push	{lr}
   11276:	4c0b      	ldr	r4, [pc, #44]	; (112a4 <__assert_func+0x30>)
   11278:	6825      	ldr	r5, [r4, #0]
   1127a:	4614      	mov	r4, r2
   1127c:	68ee      	ldr	r6, [r5, #12]
   1127e:	461a      	mov	r2, r3
   11280:	b085      	sub	sp, #20
   11282:	4603      	mov	r3, r0
   11284:	460d      	mov	r5, r1
   11286:	b14c      	cbz	r4, 1129c <__assert_func+0x28>
   11288:	4907      	ldr	r1, [pc, #28]	; (112a8 <__assert_func+0x34>)
   1128a:	9500      	str	r5, [sp, #0]
   1128c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11290:	4630      	mov	r0, r6
   11292:	4906      	ldr	r1, [pc, #24]	; (112ac <__assert_func+0x38>)
   11294:	f001 f9e4 	bl	12660 <fiprintf>
   11298:	f7fc fd5d 	bl	dd56 <abort>
   1129c:	4904      	ldr	r1, [pc, #16]	; (112b0 <__assert_func+0x3c>)
   1129e:	460c      	mov	r4, r1
   112a0:	e7f3      	b.n	1128a <__assert_func+0x16>
   112a2:	bf00      	nop
   112a4:	20003778 	.word	0x20003778
   112a8:	20002428 	.word	0x20002428
   112ac:	20002438 	.word	0x20002438
   112b0:	20001f98 	.word	0x20001f98

000112b4 <memset>:
   112b4:	0783      	lsls	r3, r0, #30
   112b6:	b530      	push	{r4, r5, lr}
   112b8:	d048      	beq.n	1134c <memset+0x98>
   112ba:	1e54      	subs	r4, r2, #1
   112bc:	2a00      	cmp	r2, #0
   112be:	d03f      	beq.n	11340 <memset+0x8c>
   112c0:	b2ca      	uxtb	r2, r1
   112c2:	4603      	mov	r3, r0
   112c4:	e001      	b.n	112ca <memset+0x16>
   112c6:	3c01      	subs	r4, #1
   112c8:	d33a      	bcc.n	11340 <memset+0x8c>
   112ca:	f803 2b01 	strb.w	r2, [r3], #1
   112ce:	079d      	lsls	r5, r3, #30
   112d0:	d1f9      	bne.n	112c6 <memset+0x12>
   112d2:	2c03      	cmp	r4, #3
   112d4:	d92d      	bls.n	11332 <memset+0x7e>
   112d6:	b2cd      	uxtb	r5, r1
   112d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   112dc:	2c0f      	cmp	r4, #15
   112de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   112e2:	d936      	bls.n	11352 <memset+0x9e>
   112e4:	f1a4 0210 	sub.w	r2, r4, #16
   112e8:	f022 0c0f 	bic.w	ip, r2, #15
   112ec:	f103 0e20 	add.w	lr, r3, #32
   112f0:	44e6      	add	lr, ip
   112f2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   112f6:	f103 0210 	add.w	r2, r3, #16
   112fa:	e942 5504 	strd	r5, r5, [r2, #-16]
   112fe:	e942 5502 	strd	r5, r5, [r2, #-8]
   11302:	3210      	adds	r2, #16
   11304:	4572      	cmp	r2, lr
   11306:	d1f8      	bne.n	112fa <memset+0x46>
   11308:	f10c 0201 	add.w	r2, ip, #1
   1130c:	f014 0f0c 	tst.w	r4, #12
   11310:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   11314:	f004 0c0f 	and.w	ip, r4, #15
   11318:	d013      	beq.n	11342 <memset+0x8e>
   1131a:	f1ac 0304 	sub.w	r3, ip, #4
   1131e:	f023 0303 	bic.w	r3, r3, #3
   11322:	3304      	adds	r3, #4
   11324:	4413      	add	r3, r2
   11326:	f842 5b04 	str.w	r5, [r2], #4
   1132a:	4293      	cmp	r3, r2
   1132c:	d1fb      	bne.n	11326 <memset+0x72>
   1132e:	f00c 0403 	and.w	r4, ip, #3
   11332:	b12c      	cbz	r4, 11340 <memset+0x8c>
   11334:	b2c9      	uxtb	r1, r1
   11336:	441c      	add	r4, r3
   11338:	f803 1b01 	strb.w	r1, [r3], #1
   1133c:	429c      	cmp	r4, r3
   1133e:	d1fb      	bne.n	11338 <memset+0x84>
   11340:	bd30      	pop	{r4, r5, pc}
   11342:	4664      	mov	r4, ip
   11344:	4613      	mov	r3, r2
   11346:	2c00      	cmp	r4, #0
   11348:	d1f4      	bne.n	11334 <memset+0x80>
   1134a:	e7f9      	b.n	11340 <memset+0x8c>
   1134c:	4603      	mov	r3, r0
   1134e:	4614      	mov	r4, r2
   11350:	e7bf      	b.n	112d2 <memset+0x1e>
   11352:	461a      	mov	r2, r3
   11354:	46a4      	mov	ip, r4
   11356:	e7e0      	b.n	1131a <memset+0x66>

00011358 <__cxa_atexit>:
   11358:	4613      	mov	r3, r2
   1135a:	460a      	mov	r2, r1
   1135c:	4601      	mov	r1, r0
   1135e:	2002      	movs	r0, #2
   11360:	f002 ba74 	b.w	1384c <__register_exitproc>

00011364 <fcvtf>:
   11364:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   11368:	2300      	movs	r3, #0
   1136a:	f002 bac9 	b.w	13900 <fcvtbuf>
   1136e:	bf00      	nop

00011370 <__libc_init_array>:
   11370:	b570      	push	{r4, r5, r6, lr}
   11372:	4e0d      	ldr	r6, [pc, #52]	; (113a8 <__libc_init_array+0x38>)
   11374:	4d0d      	ldr	r5, [pc, #52]	; (113ac <__libc_init_array+0x3c>)
   11376:	1b76      	subs	r6, r6, r5
   11378:	10b6      	asrs	r6, r6, #2
   1137a:	d006      	beq.n	1138a <__libc_init_array+0x1a>
   1137c:	2400      	movs	r4, #0
   1137e:	f855 3b04 	ldr.w	r3, [r5], #4
   11382:	3401      	adds	r4, #1
   11384:	4798      	blx	r3
   11386:	42a6      	cmp	r6, r4
   11388:	d1f9      	bne.n	1137e <__libc_init_array+0xe>
   1138a:	4e09      	ldr	r6, [pc, #36]	; (113b0 <__libc_init_array+0x40>)
   1138c:	4d09      	ldr	r5, [pc, #36]	; (113b4 <__libc_init_array+0x44>)
   1138e:	1b76      	subs	r6, r6, r5
   11390:	f003 ff9e 	bl	152d0 <___init_veneer>
   11394:	10b6      	asrs	r6, r6, #2
   11396:	d006      	beq.n	113a6 <__libc_init_array+0x36>
   11398:	2400      	movs	r4, #0
   1139a:	f855 3b04 	ldr.w	r3, [r5], #4
   1139e:	3401      	adds	r4, #1
   113a0:	4798      	blx	r3
   113a2:	42a6      	cmp	r6, r4
   113a4:	d1f9      	bne.n	1139a <__libc_init_array+0x2a>
   113a6:	bd70      	pop	{r4, r5, r6, pc}
   113a8:	60001f90 	.word	0x60001f90
   113ac:	60001f90 	.word	0x60001f90
   113b0:	60001fa8 	.word	0x60001fa8
   113b4:	60001f90 	.word	0x60001f90

000113b8 <__retarget_lock_init_recursive>:
   113b8:	4770      	bx	lr
   113ba:	bf00      	nop

000113bc <__retarget_lock_close_recursive>:
   113bc:	4770      	bx	lr
   113be:	bf00      	nop

000113c0 <__retarget_lock_acquire_recursive>:
   113c0:	4770      	bx	lr
   113c2:	bf00      	nop

000113c4 <__retarget_lock_release_recursive>:
   113c4:	4770      	bx	lr
   113c6:	bf00      	nop

000113c8 <__locale_mb_cur_max>:
   113c8:	4b01      	ldr	r3, [pc, #4]	; (113d0 <__locale_mb_cur_max+0x8>)
   113ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   113ce:	4770      	bx	lr
   113d0:	200031f0 	.word	0x200031f0

000113d4 <strcpy>:
   113d4:	ea80 0201 	eor.w	r2, r0, r1
   113d8:	4684      	mov	ip, r0
   113da:	f012 0f03 	tst.w	r2, #3
   113de:	d14f      	bne.n	11480 <strcpy+0xac>
   113e0:	f011 0f03 	tst.w	r1, #3
   113e4:	d132      	bne.n	1144c <strcpy+0x78>
   113e6:	f84d 4d04 	str.w	r4, [sp, #-4]!
   113ea:	f011 0f04 	tst.w	r1, #4
   113ee:	f851 3b04 	ldr.w	r3, [r1], #4
   113f2:	d00b      	beq.n	1140c <strcpy+0x38>
   113f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   113f8:	439a      	bics	r2, r3
   113fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   113fe:	bf04      	itt	eq
   11400:	f84c 3b04 	streq.w	r3, [ip], #4
   11404:	f851 3b04 	ldreq.w	r3, [r1], #4
   11408:	d116      	bne.n	11438 <strcpy+0x64>
   1140a:	bf00      	nop
   1140c:	f851 4b04 	ldr.w	r4, [r1], #4
   11410:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11414:	439a      	bics	r2, r3
   11416:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1141a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1141e:	d10b      	bne.n	11438 <strcpy+0x64>
   11420:	f84c 3b04 	str.w	r3, [ip], #4
   11424:	43a2      	bics	r2, r4
   11426:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1142a:	bf04      	itt	eq
   1142c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11430:	f84c 4b04 	streq.w	r4, [ip], #4
   11434:	d0ea      	beq.n	1140c <strcpy+0x38>
   11436:	4623      	mov	r3, r4
   11438:	f80c 3b01 	strb.w	r3, [ip], #1
   1143c:	f013 0fff 	tst.w	r3, #255	; 0xff
   11440:	ea4f 2333 	mov.w	r3, r3, ror #8
   11444:	d1f8      	bne.n	11438 <strcpy+0x64>
   11446:	f85d 4b04 	ldr.w	r4, [sp], #4
   1144a:	4770      	bx	lr
   1144c:	f011 0f01 	tst.w	r1, #1
   11450:	d006      	beq.n	11460 <strcpy+0x8c>
   11452:	f811 2b01 	ldrb.w	r2, [r1], #1
   11456:	f80c 2b01 	strb.w	r2, [ip], #1
   1145a:	2a00      	cmp	r2, #0
   1145c:	bf08      	it	eq
   1145e:	4770      	bxeq	lr
   11460:	f011 0f02 	tst.w	r1, #2
   11464:	d0bf      	beq.n	113e6 <strcpy+0x12>
   11466:	f831 2b02 	ldrh.w	r2, [r1], #2
   1146a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1146e:	bf16      	itet	ne
   11470:	f82c 2b02 	strhne.w	r2, [ip], #2
   11474:	f88c 2000 	strbeq.w	r2, [ip]
   11478:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1147c:	d1b3      	bne.n	113e6 <strcpy+0x12>
   1147e:	4770      	bx	lr
   11480:	f811 2b01 	ldrb.w	r2, [r1], #1
   11484:	f80c 2b01 	strb.w	r2, [ip], #1
   11488:	2a00      	cmp	r2, #0
   1148a:	d1f9      	bne.n	11480 <strcpy+0xac>
   1148c:	4770      	bx	lr
   1148e:	bf00      	nop

00011490 <__malloc_lock>:
   11490:	4801      	ldr	r0, [pc, #4]	; (11498 <__malloc_lock+0x8>)
   11492:	f7ff bf95 	b.w	113c0 <__retarget_lock_acquire_recursive>
   11496:	bf00      	nop
   11498:	20004d4c 	.word	0x20004d4c

0001149c <__malloc_unlock>:
   1149c:	4801      	ldr	r0, [pc, #4]	; (114a4 <__malloc_unlock+0x8>)
   1149e:	f7ff bf91 	b.w	113c4 <__retarget_lock_release_recursive>
   114a2:	bf00      	nop
   114a4:	20004d4c 	.word	0x20004d4c

000114a8 <_Balloc>:
   114a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   114aa:	b570      	push	{r4, r5, r6, lr}
   114ac:	4605      	mov	r5, r0
   114ae:	460c      	mov	r4, r1
   114b0:	b14b      	cbz	r3, 114c6 <_Balloc+0x1e>
   114b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   114b6:	b180      	cbz	r0, 114da <_Balloc+0x32>
   114b8:	6802      	ldr	r2, [r0, #0]
   114ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   114be:	2300      	movs	r3, #0
   114c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   114c4:	bd70      	pop	{r4, r5, r6, pc}
   114c6:	2221      	movs	r2, #33	; 0x21
   114c8:	2104      	movs	r1, #4
   114ca:	f000 fba9 	bl	11c20 <_calloc_r>
   114ce:	4603      	mov	r3, r0
   114d0:	6468      	str	r0, [r5, #68]	; 0x44
   114d2:	2800      	cmp	r0, #0
   114d4:	d1ed      	bne.n	114b2 <_Balloc+0xa>
   114d6:	2000      	movs	r0, #0
   114d8:	bd70      	pop	{r4, r5, r6, pc}
   114da:	2101      	movs	r1, #1
   114dc:	fa01 f604 	lsl.w	r6, r1, r4
   114e0:	1d72      	adds	r2, r6, #5
   114e2:	0092      	lsls	r2, r2, #2
   114e4:	4628      	mov	r0, r5
   114e6:	f000 fb9b 	bl	11c20 <_calloc_r>
   114ea:	2800      	cmp	r0, #0
   114ec:	d0f3      	beq.n	114d6 <_Balloc+0x2e>
   114ee:	e9c0 4601 	strd	r4, r6, [r0, #4]
   114f2:	e7e4      	b.n	114be <_Balloc+0x16>

000114f4 <_Bfree>:
   114f4:	b131      	cbz	r1, 11504 <_Bfree+0x10>
   114f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   114f8:	684a      	ldr	r2, [r1, #4]
   114fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   114fe:	6008      	str	r0, [r1, #0]
   11500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11504:	4770      	bx	lr
   11506:	bf00      	nop

00011508 <__multadd>:
   11508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1150c:	690e      	ldr	r6, [r1, #16]
   1150e:	4680      	mov	r8, r0
   11510:	460f      	mov	r7, r1
   11512:	461d      	mov	r5, r3
   11514:	f101 0e14 	add.w	lr, r1, #20
   11518:	2000      	movs	r0, #0
   1151a:	f8de 1000 	ldr.w	r1, [lr]
   1151e:	b28c      	uxth	r4, r1
   11520:	fb02 5304 	mla	r3, r2, r4, r5
   11524:	0c09      	lsrs	r1, r1, #16
   11526:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1152a:	fb02 cc01 	mla	ip, r2, r1, ip
   1152e:	3001      	adds	r0, #1
   11530:	b29c      	uxth	r4, r3
   11532:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11536:	4286      	cmp	r6, r0
   11538:	f84e 4b04 	str.w	r4, [lr], #4
   1153c:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11540:	dceb      	bgt.n	1151a <__multadd+0x12>
   11542:	b13d      	cbz	r5, 11554 <__multadd+0x4c>
   11544:	68bb      	ldr	r3, [r7, #8]
   11546:	42b3      	cmp	r3, r6
   11548:	dd07      	ble.n	1155a <__multadd+0x52>
   1154a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1154e:	3601      	adds	r6, #1
   11550:	615d      	str	r5, [r3, #20]
   11552:	613e      	str	r6, [r7, #16]
   11554:	4638      	mov	r0, r7
   11556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1155a:	6879      	ldr	r1, [r7, #4]
   1155c:	4640      	mov	r0, r8
   1155e:	3101      	adds	r1, #1
   11560:	f7ff ffa2 	bl	114a8 <_Balloc>
   11564:	4604      	mov	r4, r0
   11566:	b1b0      	cbz	r0, 11596 <__multadd+0x8e>
   11568:	693a      	ldr	r2, [r7, #16]
   1156a:	3202      	adds	r2, #2
   1156c:	f107 010c 	add.w	r1, r7, #12
   11570:	0092      	lsls	r2, r2, #2
   11572:	300c      	adds	r0, #12
   11574:	f7fb fdd4 	bl	d120 <memcpy>
   11578:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1157c:	687a      	ldr	r2, [r7, #4]
   1157e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11582:	6039      	str	r1, [r7, #0]
   11584:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11588:	4627      	mov	r7, r4
   1158a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1158e:	3601      	adds	r6, #1
   11590:	615d      	str	r5, [r3, #20]
   11592:	613e      	str	r6, [r7, #16]
   11594:	e7de      	b.n	11554 <__multadd+0x4c>
   11596:	4b03      	ldr	r3, [pc, #12]	; (115a4 <__multadd+0x9c>)
   11598:	4803      	ldr	r0, [pc, #12]	; (115a8 <__multadd+0xa0>)
   1159a:	4622      	mov	r2, r4
   1159c:	21ba      	movs	r1, #186	; 0xba
   1159e:	f7ff fe69 	bl	11274 <__assert_func>
   115a2:	bf00      	nop
   115a4:	20002468 	.word	0x20002468
   115a8:	2000247c 	.word	0x2000247c

000115ac <__hi0bits>:
   115ac:	0c03      	lsrs	r3, r0, #16
   115ae:	041b      	lsls	r3, r3, #16
   115b0:	b9d3      	cbnz	r3, 115e8 <__hi0bits+0x3c>
   115b2:	0400      	lsls	r0, r0, #16
   115b4:	2310      	movs	r3, #16
   115b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   115ba:	bf04      	itt	eq
   115bc:	0200      	lsleq	r0, r0, #8
   115be:	3308      	addeq	r3, #8
   115c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   115c4:	bf04      	itt	eq
   115c6:	0100      	lsleq	r0, r0, #4
   115c8:	3304      	addeq	r3, #4
   115ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   115ce:	bf04      	itt	eq
   115d0:	0080      	lsleq	r0, r0, #2
   115d2:	3302      	addeq	r3, #2
   115d4:	2800      	cmp	r0, #0
   115d6:	db05      	blt.n	115e4 <__hi0bits+0x38>
   115d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   115dc:	f103 0301 	add.w	r3, r3, #1
   115e0:	bf08      	it	eq
   115e2:	2320      	moveq	r3, #32
   115e4:	4618      	mov	r0, r3
   115e6:	4770      	bx	lr
   115e8:	2300      	movs	r3, #0
   115ea:	e7e4      	b.n	115b6 <__hi0bits+0xa>

000115ec <__lo0bits>:
   115ec:	6803      	ldr	r3, [r0, #0]
   115ee:	f013 0207 	ands.w	r2, r3, #7
   115f2:	d008      	beq.n	11606 <__lo0bits+0x1a>
   115f4:	07d9      	lsls	r1, r3, #31
   115f6:	d41f      	bmi.n	11638 <__lo0bits+0x4c>
   115f8:	079a      	lsls	r2, r3, #30
   115fa:	d522      	bpl.n	11642 <__lo0bits+0x56>
   115fc:	085b      	lsrs	r3, r3, #1
   115fe:	6003      	str	r3, [r0, #0]
   11600:	2201      	movs	r2, #1
   11602:	4610      	mov	r0, r2
   11604:	4770      	bx	lr
   11606:	b299      	uxth	r1, r3
   11608:	b909      	cbnz	r1, 1160e <__lo0bits+0x22>
   1160a:	0c1b      	lsrs	r3, r3, #16
   1160c:	2210      	movs	r2, #16
   1160e:	b2d9      	uxtb	r1, r3
   11610:	b909      	cbnz	r1, 11616 <__lo0bits+0x2a>
   11612:	3208      	adds	r2, #8
   11614:	0a1b      	lsrs	r3, r3, #8
   11616:	0719      	lsls	r1, r3, #28
   11618:	bf04      	itt	eq
   1161a:	091b      	lsreq	r3, r3, #4
   1161c:	3204      	addeq	r2, #4
   1161e:	0799      	lsls	r1, r3, #30
   11620:	bf04      	itt	eq
   11622:	089b      	lsreq	r3, r3, #2
   11624:	3202      	addeq	r2, #2
   11626:	07d9      	lsls	r1, r3, #31
   11628:	d403      	bmi.n	11632 <__lo0bits+0x46>
   1162a:	085b      	lsrs	r3, r3, #1
   1162c:	f102 0201 	add.w	r2, r2, #1
   11630:	d005      	beq.n	1163e <__lo0bits+0x52>
   11632:	6003      	str	r3, [r0, #0]
   11634:	4610      	mov	r0, r2
   11636:	4770      	bx	lr
   11638:	2200      	movs	r2, #0
   1163a:	4610      	mov	r0, r2
   1163c:	4770      	bx	lr
   1163e:	2220      	movs	r2, #32
   11640:	e7df      	b.n	11602 <__lo0bits+0x16>
   11642:	089b      	lsrs	r3, r3, #2
   11644:	2202      	movs	r2, #2
   11646:	6003      	str	r3, [r0, #0]
   11648:	4610      	mov	r0, r2
   1164a:	4770      	bx	lr

0001164c <__i2b>:
   1164c:	b538      	push	{r3, r4, r5, lr}
   1164e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11650:	4604      	mov	r4, r0
   11652:	460d      	mov	r5, r1
   11654:	b14b      	cbz	r3, 1166a <__i2b+0x1e>
   11656:	6858      	ldr	r0, [r3, #4]
   11658:	b1b0      	cbz	r0, 11688 <__i2b+0x3c>
   1165a:	6802      	ldr	r2, [r0, #0]
   1165c:	605a      	str	r2, [r3, #4]
   1165e:	2200      	movs	r2, #0
   11660:	2301      	movs	r3, #1
   11662:	e9c0 3504 	strd	r3, r5, [r0, #16]
   11666:	60c2      	str	r2, [r0, #12]
   11668:	bd38      	pop	{r3, r4, r5, pc}
   1166a:	2221      	movs	r2, #33	; 0x21
   1166c:	2104      	movs	r1, #4
   1166e:	f000 fad7 	bl	11c20 <_calloc_r>
   11672:	4603      	mov	r3, r0
   11674:	6460      	str	r0, [r4, #68]	; 0x44
   11676:	2800      	cmp	r0, #0
   11678:	d1ed      	bne.n	11656 <__i2b+0xa>
   1167a:	4b09      	ldr	r3, [pc, #36]	; (116a0 <__i2b+0x54>)
   1167c:	4809      	ldr	r0, [pc, #36]	; (116a4 <__i2b+0x58>)
   1167e:	2200      	movs	r2, #0
   11680:	f240 1145 	movw	r1, #325	; 0x145
   11684:	f7ff fdf6 	bl	11274 <__assert_func>
   11688:	221c      	movs	r2, #28
   1168a:	2101      	movs	r1, #1
   1168c:	4620      	mov	r0, r4
   1168e:	f000 fac7 	bl	11c20 <_calloc_r>
   11692:	2800      	cmp	r0, #0
   11694:	d0f1      	beq.n	1167a <__i2b+0x2e>
   11696:	2201      	movs	r2, #1
   11698:	2302      	movs	r3, #2
   1169a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1169e:	e7de      	b.n	1165e <__i2b+0x12>
   116a0:	20002468 	.word	0x20002468
   116a4:	2000247c 	.word	0x2000247c

000116a8 <__multiply>:
   116a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116ac:	690e      	ldr	r6, [r1, #16]
   116ae:	6915      	ldr	r5, [r2, #16]
   116b0:	42ae      	cmp	r6, r5
   116b2:	b085      	sub	sp, #20
   116b4:	4688      	mov	r8, r1
   116b6:	4614      	mov	r4, r2
   116b8:	db05      	blt.n	116c6 <__multiply+0x1e>
   116ba:	462a      	mov	r2, r5
   116bc:	4623      	mov	r3, r4
   116be:	4635      	mov	r5, r6
   116c0:	460c      	mov	r4, r1
   116c2:	4616      	mov	r6, r2
   116c4:	4698      	mov	r8, r3
   116c6:	68a3      	ldr	r3, [r4, #8]
   116c8:	6861      	ldr	r1, [r4, #4]
   116ca:	19af      	adds	r7, r5, r6
   116cc:	42bb      	cmp	r3, r7
   116ce:	bfb8      	it	lt
   116d0:	3101      	addlt	r1, #1
   116d2:	f7ff fee9 	bl	114a8 <_Balloc>
   116d6:	9001      	str	r0, [sp, #4]
   116d8:	2800      	cmp	r0, #0
   116da:	f000 8087 	beq.w	117ec <__multiply+0x144>
   116de:	9b01      	ldr	r3, [sp, #4]
   116e0:	f103 0914 	add.w	r9, r3, #20
   116e4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   116e8:	45d1      	cmp	r9, sl
   116ea:	d205      	bcs.n	116f8 <__multiply+0x50>
   116ec:	464b      	mov	r3, r9
   116ee:	2200      	movs	r2, #0
   116f0:	f843 2b04 	str.w	r2, [r3], #4
   116f4:	459a      	cmp	sl, r3
   116f6:	d8fb      	bhi.n	116f0 <__multiply+0x48>
   116f8:	f108 0814 	add.w	r8, r8, #20
   116fc:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   11700:	f104 0314 	add.w	r3, r4, #20
   11704:	45d8      	cmp	r8, fp
   11706:	461a      	mov	r2, r3
   11708:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1170c:	d25f      	bcs.n	117ce <__multiply+0x126>
   1170e:	1b2b      	subs	r3, r5, r4
   11710:	3b15      	subs	r3, #21
   11712:	f023 0303 	bic.w	r3, r3, #3
   11716:	3304      	adds	r3, #4
   11718:	3415      	adds	r4, #21
   1171a:	42a5      	cmp	r5, r4
   1171c:	bf38      	it	cc
   1171e:	2304      	movcc	r3, #4
   11720:	e9cd a702 	strd	sl, r7, [sp, #8]
   11724:	46ac      	mov	ip, r5
   11726:	461f      	mov	r7, r3
   11728:	4692      	mov	sl, r2
   1172a:	e005      	b.n	11738 <__multiply+0x90>
   1172c:	0c09      	lsrs	r1, r1, #16
   1172e:	d129      	bne.n	11784 <__multiply+0xdc>
   11730:	45c3      	cmp	fp, r8
   11732:	f109 0904 	add.w	r9, r9, #4
   11736:	d948      	bls.n	117ca <__multiply+0x122>
   11738:	f858 1b04 	ldr.w	r1, [r8], #4
   1173c:	b28d      	uxth	r5, r1
   1173e:	2d00      	cmp	r5, #0
   11740:	d0f4      	beq.n	1172c <__multiply+0x84>
   11742:	4656      	mov	r6, sl
   11744:	464c      	mov	r4, r9
   11746:	2300      	movs	r3, #0
   11748:	f856 1b04 	ldr.w	r1, [r6], #4
   1174c:	6822      	ldr	r2, [r4, #0]
   1174e:	fa1f fe81 	uxth.w	lr, r1
   11752:	b290      	uxth	r0, r2
   11754:	0c09      	lsrs	r1, r1, #16
   11756:	fb05 000e 	mla	r0, r5, lr, r0
   1175a:	0c12      	lsrs	r2, r2, #16
   1175c:	4403      	add	r3, r0
   1175e:	fb05 2201 	mla	r2, r5, r1, r2
   11762:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11766:	b29b      	uxth	r3, r3
   11768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1176c:	45b4      	cmp	ip, r6
   1176e:	f844 3b04 	str.w	r3, [r4], #4
   11772:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11776:	d8e7      	bhi.n	11748 <__multiply+0xa0>
   11778:	f849 3007 	str.w	r3, [r9, r7]
   1177c:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11780:	0c09      	lsrs	r1, r1, #16
   11782:	d0d5      	beq.n	11730 <__multiply+0x88>
   11784:	f8d9 3000 	ldr.w	r3, [r9]
   11788:	4650      	mov	r0, sl
   1178a:	461a      	mov	r2, r3
   1178c:	464c      	mov	r4, r9
   1178e:	2600      	movs	r6, #0
   11790:	8805      	ldrh	r5, [r0, #0]
   11792:	0c12      	lsrs	r2, r2, #16
   11794:	fb01 2205 	mla	r2, r1, r5, r2
   11798:	4416      	add	r6, r2
   1179a:	b29b      	uxth	r3, r3
   1179c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   117a0:	f844 3b04 	str.w	r3, [r4], #4
   117a4:	f850 5b04 	ldr.w	r5, [r0], #4
   117a8:	6822      	ldr	r2, [r4, #0]
   117aa:	0c2d      	lsrs	r5, r5, #16
   117ac:	b293      	uxth	r3, r2
   117ae:	fb01 3305 	mla	r3, r1, r5, r3
   117b2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   117b6:	4584      	cmp	ip, r0
   117b8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   117bc:	d8e8      	bhi.n	11790 <__multiply+0xe8>
   117be:	45c3      	cmp	fp, r8
   117c0:	f849 3007 	str.w	r3, [r9, r7]
   117c4:	f109 0904 	add.w	r9, r9, #4
   117c8:	d8b6      	bhi.n	11738 <__multiply+0x90>
   117ca:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   117ce:	2f00      	cmp	r7, #0
   117d0:	dc02      	bgt.n	117d8 <__multiply+0x130>
   117d2:	e005      	b.n	117e0 <__multiply+0x138>
   117d4:	3f01      	subs	r7, #1
   117d6:	d003      	beq.n	117e0 <__multiply+0x138>
   117d8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   117dc:	2b00      	cmp	r3, #0
   117de:	d0f9      	beq.n	117d4 <__multiply+0x12c>
   117e0:	9b01      	ldr	r3, [sp, #4]
   117e2:	4618      	mov	r0, r3
   117e4:	611f      	str	r7, [r3, #16]
   117e6:	b005      	add	sp, #20
   117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ec:	4b03      	ldr	r3, [pc, #12]	; (117fc <__multiply+0x154>)
   117ee:	4804      	ldr	r0, [pc, #16]	; (11800 <__multiply+0x158>)
   117f0:	9a01      	ldr	r2, [sp, #4]
   117f2:	f44f 71b1 	mov.w	r1, #354	; 0x162
   117f6:	f7ff fd3d 	bl	11274 <__assert_func>
   117fa:	bf00      	nop
   117fc:	20002468 	.word	0x20002468
   11800:	2000247c 	.word	0x2000247c

00011804 <__pow5mult>:
   11804:	f012 0303 	ands.w	r3, r2, #3
   11808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1180c:	4614      	mov	r4, r2
   1180e:	4606      	mov	r6, r0
   11810:	d132      	bne.n	11878 <__pow5mult+0x74>
   11812:	460d      	mov	r5, r1
   11814:	10a4      	asrs	r4, r4, #2
   11816:	d020      	beq.n	1185a <__pow5mult+0x56>
   11818:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   1181c:	f1b8 0f00 	cmp.w	r8, #0
   11820:	d033      	beq.n	1188a <__pow5mult+0x86>
   11822:	07e3      	lsls	r3, r4, #31
   11824:	f04f 0700 	mov.w	r7, #0
   11828:	d407      	bmi.n	1183a <__pow5mult+0x36>
   1182a:	1064      	asrs	r4, r4, #1
   1182c:	d015      	beq.n	1185a <__pow5mult+0x56>
   1182e:	f8d8 0000 	ldr.w	r0, [r8]
   11832:	b1a8      	cbz	r0, 11860 <__pow5mult+0x5c>
   11834:	4680      	mov	r8, r0
   11836:	07e3      	lsls	r3, r4, #31
   11838:	d5f7      	bpl.n	1182a <__pow5mult+0x26>
   1183a:	4642      	mov	r2, r8
   1183c:	4629      	mov	r1, r5
   1183e:	4630      	mov	r0, r6
   11840:	f7ff ff32 	bl	116a8 <__multiply>
   11844:	b1b5      	cbz	r5, 11874 <__pow5mult+0x70>
   11846:	6869      	ldr	r1, [r5, #4]
   11848:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1184a:	1064      	asrs	r4, r4, #1
   1184c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11850:	602a      	str	r2, [r5, #0]
   11852:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11856:	4605      	mov	r5, r0
   11858:	d1e9      	bne.n	1182e <__pow5mult+0x2a>
   1185a:	4628      	mov	r0, r5
   1185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11860:	4642      	mov	r2, r8
   11862:	4641      	mov	r1, r8
   11864:	4630      	mov	r0, r6
   11866:	f7ff ff1f 	bl	116a8 <__multiply>
   1186a:	f8c8 0000 	str.w	r0, [r8]
   1186e:	6007      	str	r7, [r0, #0]
   11870:	4680      	mov	r8, r0
   11872:	e7e0      	b.n	11836 <__pow5mult+0x32>
   11874:	4605      	mov	r5, r0
   11876:	e7d8      	b.n	1182a <__pow5mult+0x26>
   11878:	3b01      	subs	r3, #1
   1187a:	4a0f      	ldr	r2, [pc, #60]	; (118b8 <__pow5mult+0xb4>)
   1187c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11880:	2300      	movs	r3, #0
   11882:	f7ff fe41 	bl	11508 <__multadd>
   11886:	4605      	mov	r5, r0
   11888:	e7c4      	b.n	11814 <__pow5mult+0x10>
   1188a:	2101      	movs	r1, #1
   1188c:	4630      	mov	r0, r6
   1188e:	f7ff fe0b 	bl	114a8 <_Balloc>
   11892:	4680      	mov	r8, r0
   11894:	b140      	cbz	r0, 118a8 <__pow5mult+0xa4>
   11896:	2301      	movs	r3, #1
   11898:	f240 2271 	movw	r2, #625	; 0x271
   1189c:	e9c0 3204 	strd	r3, r2, [r0, #16]
   118a0:	2300      	movs	r3, #0
   118a2:	6430      	str	r0, [r6, #64]	; 0x40
   118a4:	6003      	str	r3, [r0, #0]
   118a6:	e7bc      	b.n	11822 <__pow5mult+0x1e>
   118a8:	4b04      	ldr	r3, [pc, #16]	; (118bc <__pow5mult+0xb8>)
   118aa:	4805      	ldr	r0, [pc, #20]	; (118c0 <__pow5mult+0xbc>)
   118ac:	4642      	mov	r2, r8
   118ae:	f240 1145 	movw	r1, #325	; 0x145
   118b2:	f7ff fcdf 	bl	11274 <__assert_func>
   118b6:	bf00      	nop
   118b8:	20002af4 	.word	0x20002af4
   118bc:	20002468 	.word	0x20002468
   118c0:	2000247c 	.word	0x2000247c

000118c4 <__lshift>:
   118c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   118c8:	460d      	mov	r5, r1
   118ca:	4614      	mov	r4, r2
   118cc:	692f      	ldr	r7, [r5, #16]
   118ce:	68ab      	ldr	r3, [r5, #8]
   118d0:	6849      	ldr	r1, [r1, #4]
   118d2:	eb07 1762 	add.w	r7, r7, r2, asr #5
   118d6:	1c7e      	adds	r6, r7, #1
   118d8:	429e      	cmp	r6, r3
   118da:	4680      	mov	r8, r0
   118dc:	ea4f 1962 	mov.w	r9, r2, asr #5
   118e0:	dd04      	ble.n	118ec <__lshift+0x28>
   118e2:	005b      	lsls	r3, r3, #1
   118e4:	429e      	cmp	r6, r3
   118e6:	f101 0101 	add.w	r1, r1, #1
   118ea:	dcfa      	bgt.n	118e2 <__lshift+0x1e>
   118ec:	4640      	mov	r0, r8
   118ee:	f7ff fddb 	bl	114a8 <_Balloc>
   118f2:	4684      	mov	ip, r0
   118f4:	2800      	cmp	r0, #0
   118f6:	d052      	beq.n	1199e <__lshift+0xda>
   118f8:	f1b9 0f00 	cmp.w	r9, #0
   118fc:	f100 0214 	add.w	r2, r0, #20
   11900:	dd0e      	ble.n	11920 <__lshift+0x5c>
   11902:	f109 0105 	add.w	r1, r9, #5
   11906:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1190a:	4613      	mov	r3, r2
   1190c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11910:	2000      	movs	r0, #0
   11912:	f843 0b04 	str.w	r0, [r3], #4
   11916:	428b      	cmp	r3, r1
   11918:	d1fb      	bne.n	11912 <__lshift+0x4e>
   1191a:	f1ae 0314 	sub.w	r3, lr, #20
   1191e:	441a      	add	r2, r3
   11920:	6929      	ldr	r1, [r5, #16]
   11922:	f105 0314 	add.w	r3, r5, #20
   11926:	f014 0e1f 	ands.w	lr, r4, #31
   1192a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1192e:	d02e      	beq.n	1198e <__lshift+0xca>
   11930:	f1ce 0920 	rsb	r9, lr, #32
   11934:	4610      	mov	r0, r2
   11936:	f04f 0a00 	mov.w	sl, #0
   1193a:	681c      	ldr	r4, [r3, #0]
   1193c:	fa04 f40e 	lsl.w	r4, r4, lr
   11940:	ea44 040a 	orr.w	r4, r4, sl
   11944:	f840 4b04 	str.w	r4, [r0], #4
   11948:	f853 4b04 	ldr.w	r4, [r3], #4
   1194c:	4299      	cmp	r1, r3
   1194e:	fa24 fa09 	lsr.w	sl, r4, r9
   11952:	d8f2      	bhi.n	1193a <__lshift+0x76>
   11954:	1b4b      	subs	r3, r1, r5
   11956:	3b15      	subs	r3, #21
   11958:	f023 0303 	bic.w	r3, r3, #3
   1195c:	3304      	adds	r3, #4
   1195e:	f105 0015 	add.w	r0, r5, #21
   11962:	4281      	cmp	r1, r0
   11964:	bf38      	it	cc
   11966:	2304      	movcc	r3, #4
   11968:	f1ba 0f00 	cmp.w	sl, #0
   1196c:	bf18      	it	ne
   1196e:	4637      	movne	r7, r6
   11970:	f842 a003 	str.w	sl, [r2, r3]
   11974:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11978:	686a      	ldr	r2, [r5, #4]
   1197a:	f8cc 7010 	str.w	r7, [ip, #16]
   1197e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11982:	6029      	str	r1, [r5, #0]
   11984:	4660      	mov	r0, ip
   11986:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1198e:	3a04      	subs	r2, #4
   11990:	f853 0b04 	ldr.w	r0, [r3], #4
   11994:	f842 0f04 	str.w	r0, [r2, #4]!
   11998:	4299      	cmp	r1, r3
   1199a:	d8f9      	bhi.n	11990 <__lshift+0xcc>
   1199c:	e7ea      	b.n	11974 <__lshift+0xb0>
   1199e:	4b03      	ldr	r3, [pc, #12]	; (119ac <__lshift+0xe8>)
   119a0:	4803      	ldr	r0, [pc, #12]	; (119b0 <__lshift+0xec>)
   119a2:	4662      	mov	r2, ip
   119a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   119a8:	f7ff fc64 	bl	11274 <__assert_func>
   119ac:	20002468 	.word	0x20002468
   119b0:	2000247c 	.word	0x2000247c

000119b4 <__mcmp>:
   119b4:	690b      	ldr	r3, [r1, #16]
   119b6:	4684      	mov	ip, r0
   119b8:	6900      	ldr	r0, [r0, #16]
   119ba:	1ac0      	subs	r0, r0, r3
   119bc:	d116      	bne.n	119ec <__mcmp+0x38>
   119be:	f10c 0c14 	add.w	ip, ip, #20
   119c2:	3114      	adds	r1, #20
   119c4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   119c8:	b410      	push	{r4}
   119ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   119ce:	e001      	b.n	119d4 <__mcmp+0x20>
   119d0:	4594      	cmp	ip, r2
   119d2:	d208      	bcs.n	119e6 <__mcmp+0x32>
   119d4:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   119d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   119dc:	428c      	cmp	r4, r1
   119de:	d0f7      	beq.n	119d0 <__mcmp+0x1c>
   119e0:	d205      	bcs.n	119ee <__mcmp+0x3a>
   119e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   119e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   119ea:	4770      	bx	lr
   119ec:	4770      	bx	lr
   119ee:	2001      	movs	r0, #1
   119f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   119f4:	4770      	bx	lr
   119f6:	bf00      	nop

000119f8 <__mdiff>:
   119f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119fc:	690f      	ldr	r7, [r1, #16]
   119fe:	6913      	ldr	r3, [r2, #16]
   11a00:	1aff      	subs	r7, r7, r3
   11a02:	2f00      	cmp	r7, #0
   11a04:	460e      	mov	r6, r1
   11a06:	4690      	mov	r8, r2
   11a08:	d17f      	bne.n	11b0a <__mdiff+0x112>
   11a0a:	f101 0514 	add.w	r5, r1, #20
   11a0e:	3214      	adds	r2, #20
   11a10:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11a14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11a18:	e001      	b.n	11a1e <__mdiff+0x26>
   11a1a:	429d      	cmp	r5, r3
   11a1c:	d278      	bcs.n	11b10 <__mdiff+0x118>
   11a1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11a22:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11a26:	42a1      	cmp	r1, r4
   11a28:	d0f7      	beq.n	11a1a <__mdiff+0x22>
   11a2a:	d369      	bcc.n	11b00 <__mdiff+0x108>
   11a2c:	6871      	ldr	r1, [r6, #4]
   11a2e:	f7ff fd3b 	bl	114a8 <_Balloc>
   11a32:	4681      	mov	r9, r0
   11a34:	2800      	cmp	r0, #0
   11a36:	d077      	beq.n	11b28 <__mdiff+0x130>
   11a38:	6935      	ldr	r5, [r6, #16]
   11a3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   11a3e:	60c7      	str	r7, [r0, #12]
   11a40:	f108 0e14 	add.w	lr, r8, #20
   11a44:	f106 0014 	add.w	r0, r6, #20
   11a48:	f109 0a14 	add.w	sl, r9, #20
   11a4c:	f106 0110 	add.w	r1, r6, #16
   11a50:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11a54:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11a58:	4656      	mov	r6, sl
   11a5a:	f04f 0c00 	mov.w	ip, #0
   11a5e:	f85e 4b04 	ldr.w	r4, [lr], #4
   11a62:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11a66:	b2a3      	uxth	r3, r4
   11a68:	fa1c fc8b 	uxtah	ip, ip, fp
   11a6c:	ebac 0303 	sub.w	r3, ip, r3
   11a70:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11a74:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11a78:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   11a7c:	b29b      	uxth	r3, r3
   11a7e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   11a82:	4572      	cmp	r2, lr
   11a84:	f846 3b04 	str.w	r3, [r6], #4
   11a88:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   11a8c:	d8e7      	bhi.n	11a5e <__mdiff+0x66>
   11a8e:	eba2 0108 	sub.w	r1, r2, r8
   11a92:	3915      	subs	r1, #21
   11a94:	f108 0815 	add.w	r8, r8, #21
   11a98:	4542      	cmp	r2, r8
   11a9a:	f021 0403 	bic.w	r4, r1, #3
   11a9e:	f104 0404 	add.w	r4, r4, #4
   11aa2:	bf38      	it	cc
   11aa4:	2404      	movcc	r4, #4
   11aa6:	4420      	add	r0, r4
   11aa8:	f021 0203 	bic.w	r2, r1, #3
   11aac:	bf38      	it	cc
   11aae:	2200      	movcc	r2, #0
   11ab0:	4287      	cmp	r7, r0
   11ab2:	4452      	add	r2, sl
   11ab4:	4454      	add	r4, sl
   11ab6:	d918      	bls.n	11aea <__mdiff+0xf2>
   11ab8:	4626      	mov	r6, r4
   11aba:	4601      	mov	r1, r0
   11abc:	f851 3b04 	ldr.w	r3, [r1], #4
   11ac0:	fa1c fc83 	uxtah	ip, ip, r3
   11ac4:	ea4f 422c 	mov.w	r2, ip, asr #16
   11ac8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11acc:	fa1f fc8c 	uxth.w	ip, ip
   11ad0:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   11ad4:	428f      	cmp	r7, r1
   11ad6:	f846 3b04 	str.w	r3, [r6], #4
   11ada:	ea4f 4c22 	mov.w	ip, r2, asr #16
   11ade:	d8ed      	bhi.n	11abc <__mdiff+0xc4>
   11ae0:	3f01      	subs	r7, #1
   11ae2:	1a3f      	subs	r7, r7, r0
   11ae4:	f027 0703 	bic.w	r7, r7, #3
   11ae8:	19e2      	adds	r2, r4, r7
   11aea:	b923      	cbnz	r3, 11af6 <__mdiff+0xfe>
   11aec:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   11af0:	3d01      	subs	r5, #1
   11af2:	2b00      	cmp	r3, #0
   11af4:	d0fa      	beq.n	11aec <__mdiff+0xf4>
   11af6:	f8c9 5010 	str.w	r5, [r9, #16]
   11afa:	4648      	mov	r0, r9
   11afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b00:	4633      	mov	r3, r6
   11b02:	2701      	movs	r7, #1
   11b04:	4646      	mov	r6, r8
   11b06:	4698      	mov	r8, r3
   11b08:	e790      	b.n	11a2c <__mdiff+0x34>
   11b0a:	dbf9      	blt.n	11b00 <__mdiff+0x108>
   11b0c:	2700      	movs	r7, #0
   11b0e:	e78d      	b.n	11a2c <__mdiff+0x34>
   11b10:	2100      	movs	r1, #0
   11b12:	f7ff fcc9 	bl	114a8 <_Balloc>
   11b16:	4681      	mov	r9, r0
   11b18:	b168      	cbz	r0, 11b36 <__mdiff+0x13e>
   11b1a:	2201      	movs	r2, #1
   11b1c:	2300      	movs	r3, #0
   11b1e:	e9c9 2304 	strd	r2, r3, [r9, #16]
   11b22:	4648      	mov	r0, r9
   11b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b28:	4b06      	ldr	r3, [pc, #24]	; (11b44 <__mdiff+0x14c>)
   11b2a:	4807      	ldr	r0, [pc, #28]	; (11b48 <__mdiff+0x150>)
   11b2c:	464a      	mov	r2, r9
   11b2e:	f240 2145 	movw	r1, #581	; 0x245
   11b32:	f7ff fb9f 	bl	11274 <__assert_func>
   11b36:	4b03      	ldr	r3, [pc, #12]	; (11b44 <__mdiff+0x14c>)
   11b38:	4803      	ldr	r0, [pc, #12]	; (11b48 <__mdiff+0x150>)
   11b3a:	464a      	mov	r2, r9
   11b3c:	f240 2137 	movw	r1, #567	; 0x237
   11b40:	f7ff fb98 	bl	11274 <__assert_func>
   11b44:	20002468 	.word	0x20002468
   11b48:	2000247c 	.word	0x2000247c

00011b4c <__d2b>:
   11b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11b50:	4688      	mov	r8, r1
   11b52:	b083      	sub	sp, #12
   11b54:	2101      	movs	r1, #1
   11b56:	ec57 6b10 	vmov	r6, r7, d0
   11b5a:	4615      	mov	r5, r2
   11b5c:	f7ff fca4 	bl	114a8 <_Balloc>
   11b60:	4604      	mov	r4, r0
   11b62:	2800      	cmp	r0, #0
   11b64:	d051      	beq.n	11c0a <__d2b+0xbe>
   11b66:	f3c7 590a 	ubfx	r9, r7, #20, #11
   11b6a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11b6e:	f1b9 0f00 	cmp.w	r9, #0
   11b72:	d001      	beq.n	11b78 <__d2b+0x2c>
   11b74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11b78:	2e00      	cmp	r6, #0
   11b7a:	9301      	str	r3, [sp, #4]
   11b7c:	d118      	bne.n	11bb0 <__d2b+0x64>
   11b7e:	a801      	add	r0, sp, #4
   11b80:	f7ff fd34 	bl	115ec <__lo0bits>
   11b84:	9a01      	ldr	r2, [sp, #4]
   11b86:	6162      	str	r2, [r4, #20]
   11b88:	2201      	movs	r2, #1
   11b8a:	f100 0320 	add.w	r3, r0, #32
   11b8e:	6122      	str	r2, [r4, #16]
   11b90:	f1b9 0f00 	cmp.w	r9, #0
   11b94:	d025      	beq.n	11be2 <__d2b+0x96>
   11b96:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   11b9a:	eb09 0203 	add.w	r2, r9, r3
   11b9e:	4620      	mov	r0, r4
   11ba0:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   11ba4:	f8c8 2000 	str.w	r2, [r8]
   11ba8:	602b      	str	r3, [r5, #0]
   11baa:	b003      	add	sp, #12
   11bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11bb0:	4668      	mov	r0, sp
   11bb2:	9600      	str	r6, [sp, #0]
   11bb4:	f7ff fd1a 	bl	115ec <__lo0bits>
   11bb8:	4603      	mov	r3, r0
   11bba:	b310      	cbz	r0, 11c02 <__d2b+0xb6>
   11bbc:	e9dd 0200 	ldrd	r0, r2, [sp]
   11bc0:	f1c3 0120 	rsb	r1, r3, #32
   11bc4:	fa02 f101 	lsl.w	r1, r2, r1
   11bc8:	4301      	orrs	r1, r0
   11bca:	40da      	lsrs	r2, r3
   11bcc:	6161      	str	r1, [r4, #20]
   11bce:	9201      	str	r2, [sp, #4]
   11bd0:	2a00      	cmp	r2, #0
   11bd2:	61a2      	str	r2, [r4, #24]
   11bd4:	bf14      	ite	ne
   11bd6:	2202      	movne	r2, #2
   11bd8:	2201      	moveq	r2, #1
   11bda:	6122      	str	r2, [r4, #16]
   11bdc:	f1b9 0f00 	cmp.w	r9, #0
   11be0:	d1d9      	bne.n	11b96 <__d2b+0x4a>
   11be2:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   11be6:	f8c8 3000 	str.w	r3, [r8]
   11bea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   11bee:	6918      	ldr	r0, [r3, #16]
   11bf0:	f7ff fcdc 	bl	115ac <__hi0bits>
   11bf4:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   11bf8:	4620      	mov	r0, r4
   11bfa:	602b      	str	r3, [r5, #0]
   11bfc:	b003      	add	sp, #12
   11bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11c02:	9a00      	ldr	r2, [sp, #0]
   11c04:	6162      	str	r2, [r4, #20]
   11c06:	9a01      	ldr	r2, [sp, #4]
   11c08:	e7e2      	b.n	11bd0 <__d2b+0x84>
   11c0a:	4b03      	ldr	r3, [pc, #12]	; (11c18 <__d2b+0xcc>)
   11c0c:	4803      	ldr	r0, [pc, #12]	; (11c1c <__d2b+0xd0>)
   11c0e:	4622      	mov	r2, r4
   11c10:	f240 310f 	movw	r1, #783	; 0x30f
   11c14:	f7ff fb2e 	bl	11274 <__assert_func>
   11c18:	20002468 	.word	0x20002468
   11c1c:	2000247c 	.word	0x2000247c

00011c20 <_calloc_r>:
   11c20:	b538      	push	{r3, r4, r5, lr}
   11c22:	fba1 1402 	umull	r1, r4, r1, r2
   11c26:	bb8c      	cbnz	r4, 11c8c <_calloc_r+0x6c>
   11c28:	f7fe ffc8 	bl	10bbc <_malloc_r>
   11c2c:	4605      	mov	r5, r0
   11c2e:	b1e0      	cbz	r0, 11c6a <_calloc_r+0x4a>
   11c30:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11c34:	f022 0203 	bic.w	r2, r2, #3
   11c38:	3a04      	subs	r2, #4
   11c3a:	2a24      	cmp	r2, #36	; 0x24
   11c3c:	d817      	bhi.n	11c6e <_calloc_r+0x4e>
   11c3e:	2a13      	cmp	r2, #19
   11c40:	d91a      	bls.n	11c78 <_calloc_r+0x58>
   11c42:	2a1b      	cmp	r2, #27
   11c44:	e9c0 4400 	strd	r4, r4, [r0]
   11c48:	d91d      	bls.n	11c86 <_calloc_r+0x66>
   11c4a:	2a24      	cmp	r2, #36	; 0x24
   11c4c:	bf14      	ite	ne
   11c4e:	f100 0210 	addne.w	r2, r0, #16
   11c52:	f100 0218 	addeq.w	r2, r0, #24
   11c56:	f04f 0300 	mov.w	r3, #0
   11c5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11c5e:	bf04      	itt	eq
   11c60:	6104      	streq	r4, [r0, #16]
   11c62:	6144      	streq	r4, [r0, #20]
   11c64:	e9c2 3300 	strd	r3, r3, [r2]
   11c68:	6093      	str	r3, [r2, #8]
   11c6a:	4628      	mov	r0, r5
   11c6c:	bd38      	pop	{r3, r4, r5, pc}
   11c6e:	4621      	mov	r1, r4
   11c70:	f7ff fb20 	bl	112b4 <memset>
   11c74:	4628      	mov	r0, r5
   11c76:	bd38      	pop	{r3, r4, r5, pc}
   11c78:	4602      	mov	r2, r0
   11c7a:	2300      	movs	r3, #0
   11c7c:	e9c2 3300 	strd	r3, r3, [r2]
   11c80:	6093      	str	r3, [r2, #8]
   11c82:	4628      	mov	r0, r5
   11c84:	bd38      	pop	{r3, r4, r5, pc}
   11c86:	f100 0208 	add.w	r2, r0, #8
   11c8a:	e7f6      	b.n	11c7a <_calloc_r+0x5a>
   11c8c:	f7fe ff80 	bl	10b90 <__errno>
   11c90:	230c      	movs	r3, #12
   11c92:	2500      	movs	r5, #0
   11c94:	6003      	str	r3, [r0, #0]
   11c96:	e7e8      	b.n	11c6a <_calloc_r+0x4a>

00011c98 <realloc>:
   11c98:	b410      	push	{r4}
   11c9a:	4c04      	ldr	r4, [pc, #16]	; (11cac <realloc+0x14>)
   11c9c:	4603      	mov	r3, r0
   11c9e:	460a      	mov	r2, r1
   11ca0:	6820      	ldr	r0, [r4, #0]
   11ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11ca6:	4619      	mov	r1, r3
   11ca8:	f000 b998 	b.w	11fdc <_realloc_r>
   11cac:	20003778 	.word	0x20003778

00011cb0 <stdio_exit_handler>:
   11cb0:	4a02      	ldr	r2, [pc, #8]	; (11cbc <stdio_exit_handler+0xc>)
   11cb2:	4903      	ldr	r1, [pc, #12]	; (11cc0 <stdio_exit_handler+0x10>)
   11cb4:	4803      	ldr	r0, [pc, #12]	; (11cc4 <stdio_exit_handler+0x14>)
   11cb6:	f000 bd4d 	b.w	12754 <_fwalk_sglue>
   11cba:	bf00      	nop
   11cbc:	2000376c 	.word	0x2000376c
   11cc0:	000139f9 	.word	0x000139f9
   11cc4:	20002ff0 	.word	0x20002ff0

00011cc8 <cleanup_stdio>:
   11cc8:	4b0c      	ldr	r3, [pc, #48]	; (11cfc <cleanup_stdio+0x34>)
   11cca:	6841      	ldr	r1, [r0, #4]
   11ccc:	4299      	cmp	r1, r3
   11cce:	b510      	push	{r4, lr}
   11cd0:	4604      	mov	r4, r0
   11cd2:	d001      	beq.n	11cd8 <cleanup_stdio+0x10>
   11cd4:	f001 fe90 	bl	139f8 <_fclose_r>
   11cd8:	68a1      	ldr	r1, [r4, #8]
   11cda:	4b09      	ldr	r3, [pc, #36]	; (11d00 <cleanup_stdio+0x38>)
   11cdc:	4299      	cmp	r1, r3
   11cde:	d002      	beq.n	11ce6 <cleanup_stdio+0x1e>
   11ce0:	4620      	mov	r0, r4
   11ce2:	f001 fe89 	bl	139f8 <_fclose_r>
   11ce6:	68e1      	ldr	r1, [r4, #12]
   11ce8:	4b06      	ldr	r3, [pc, #24]	; (11d04 <cleanup_stdio+0x3c>)
   11cea:	4299      	cmp	r1, r3
   11cec:	d004      	beq.n	11cf8 <cleanup_stdio+0x30>
   11cee:	4620      	mov	r0, r4
   11cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cf4:	f001 be80 	b.w	139f8 <_fclose_r>
   11cf8:	bd10      	pop	{r4, pc}
   11cfa:	bf00      	nop
   11cfc:	20004d88 	.word	0x20004d88
   11d00:	20004df0 	.word	0x20004df0
   11d04:	20004e58 	.word	0x20004e58

00011d08 <global_stdio_init.part.0>:
   11d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11d0c:	4c2a      	ldr	r4, [pc, #168]	; (11db8 <global_stdio_init.part.0+0xb0>)
   11d0e:	4b2b      	ldr	r3, [pc, #172]	; (11dbc <global_stdio_init.part.0+0xb4>)
   11d10:	482b      	ldr	r0, [pc, #172]	; (11dc0 <global_stdio_init.part.0+0xb8>)
   11d12:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11dd4 <global_stdio_init.part.0+0xcc>
   11d16:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11dd8 <global_stdio_init.part.0+0xd0>
   11d1a:	4f2a      	ldr	r7, [pc, #168]	; (11dc4 <global_stdio_init.part.0+0xbc>)
   11d1c:	6018      	str	r0, [r3, #0]
   11d1e:	2500      	movs	r5, #0
   11d20:	2304      	movs	r3, #4
   11d22:	2208      	movs	r2, #8
   11d24:	4629      	mov	r1, r5
   11d26:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11d2a:	4e27      	ldr	r6, [pc, #156]	; (11dc8 <global_stdio_init.part.0+0xc0>)
   11d2c:	6665      	str	r5, [r4, #100]	; 0x64
   11d2e:	e9c4 5302 	strd	r5, r3, [r4, #8]
   11d32:	e9c4 5500 	strd	r5, r5, [r4]
   11d36:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11d3a:	61a5      	str	r5, [r4, #24]
   11d3c:	f7ff faba 	bl	112b4 <memset>
   11d40:	4b22      	ldr	r3, [pc, #136]	; (11dcc <global_stdio_init.part.0+0xc4>)
   11d42:	6763      	str	r3, [r4, #116]	; 0x74
   11d44:	2208      	movs	r2, #8
   11d46:	4629      	mov	r1, r5
   11d48:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11d4c:	e9c4 4907 	strd	r4, r9, [r4, #28]
   11d50:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11d54:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11d58:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11d5c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   11d60:	6725      	str	r5, [r4, #112]	; 0x70
   11d62:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11d66:	62e6      	str	r6, [r4, #44]	; 0x2c
   11d68:	f7ff faa4 	bl	112b4 <memset>
   11d6c:	4b18      	ldr	r3, [pc, #96]	; (11dd0 <global_stdio_init.part.0+0xc8>)
   11d6e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   11d72:	4629      	mov	r1, r5
   11d74:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11d78:	2208      	movs	r2, #8
   11d7a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   11d7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   11d82:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   11d86:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   11d8a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   11d8e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   11d92:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11d96:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11d9a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   11d9e:	f7ff fa89 	bl	112b4 <memset>
   11da2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11da6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11daa:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   11dae:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   11db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11db6:	bf00      	nop
   11db8:	20004d88 	.word	0x20004d88
   11dbc:	20004ec0 	.word	0x20004ec0
   11dc0:	00011cb1 	.word	0x00011cb1
   11dc4:	000126ed 	.word	0x000126ed
   11dc8:	0001270d 	.word	0x0001270d
   11dcc:	00010009 	.word	0x00010009
   11dd0:	00020012 	.word	0x00020012
   11dd4:	00012689 	.word	0x00012689
   11dd8:	000126ad 	.word	0x000126ad

00011ddc <__sinit>:
   11ddc:	b510      	push	{r4, lr}
   11dde:	4604      	mov	r4, r0
   11de0:	480a      	ldr	r0, [pc, #40]	; (11e0c <__sinit+0x30>)
   11de2:	f7ff faed 	bl	113c0 <__retarget_lock_acquire_recursive>
   11de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11de8:	b923      	cbnz	r3, 11df4 <__sinit+0x18>
   11dea:	4b09      	ldr	r3, [pc, #36]	; (11e10 <__sinit+0x34>)
   11dec:	4a09      	ldr	r2, [pc, #36]	; (11e14 <__sinit+0x38>)
   11dee:	681b      	ldr	r3, [r3, #0]
   11df0:	6362      	str	r2, [r4, #52]	; 0x34
   11df2:	b123      	cbz	r3, 11dfe <__sinit+0x22>
   11df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11df8:	4804      	ldr	r0, [pc, #16]	; (11e0c <__sinit+0x30>)
   11dfa:	f7ff bae3 	b.w	113c4 <__retarget_lock_release_recursive>
   11dfe:	f7ff ff83 	bl	11d08 <global_stdio_init.part.0>
   11e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e06:	4801      	ldr	r0, [pc, #4]	; (11e0c <__sinit+0x30>)
   11e08:	f7ff badc 	b.w	113c4 <__retarget_lock_release_recursive>
   11e0c:	20004d50 	.word	0x20004d50
   11e10:	20004ec0 	.word	0x20004ec0
   11e14:	00011cc9 	.word	0x00011cc9

00011e18 <__sfp_lock_acquire>:
   11e18:	4801      	ldr	r0, [pc, #4]	; (11e20 <__sfp_lock_acquire+0x8>)
   11e1a:	f7ff bad1 	b.w	113c0 <__retarget_lock_acquire_recursive>
   11e1e:	bf00      	nop
   11e20:	20004d50 	.word	0x20004d50

00011e24 <__sfp_lock_release>:
   11e24:	4801      	ldr	r0, [pc, #4]	; (11e2c <__sfp_lock_release+0x8>)
   11e26:	f7ff bacd 	b.w	113c4 <__retarget_lock_release_recursive>
   11e2a:	bf00      	nop
   11e2c:	20004d50 	.word	0x20004d50

00011e30 <memchr>:
   11e30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11e34:	2a10      	cmp	r2, #16
   11e36:	db2b      	blt.n	11e90 <memchr+0x60>
   11e38:	f010 0f07 	tst.w	r0, #7
   11e3c:	d008      	beq.n	11e50 <memchr+0x20>
   11e3e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11e42:	3a01      	subs	r2, #1
   11e44:	428b      	cmp	r3, r1
   11e46:	d02d      	beq.n	11ea4 <memchr+0x74>
   11e48:	f010 0f07 	tst.w	r0, #7
   11e4c:	b342      	cbz	r2, 11ea0 <memchr+0x70>
   11e4e:	d1f6      	bne.n	11e3e <memchr+0xe>
   11e50:	b4f0      	push	{r4, r5, r6, r7}
   11e52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11e56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   11e5a:	f022 0407 	bic.w	r4, r2, #7
   11e5e:	f07f 0700 	mvns.w	r7, #0
   11e62:	2300      	movs	r3, #0
   11e64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11e68:	3c08      	subs	r4, #8
   11e6a:	ea85 0501 	eor.w	r5, r5, r1
   11e6e:	ea86 0601 	eor.w	r6, r6, r1
   11e72:	fa85 f547 	uadd8	r5, r5, r7
   11e76:	faa3 f587 	sel	r5, r3, r7
   11e7a:	fa86 f647 	uadd8	r6, r6, r7
   11e7e:	faa5 f687 	sel	r6, r5, r7
   11e82:	b98e      	cbnz	r6, 11ea8 <memchr+0x78>
   11e84:	d1ee      	bne.n	11e64 <memchr+0x34>
   11e86:	bcf0      	pop	{r4, r5, r6, r7}
   11e88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11e8c:	f002 0207 	and.w	r2, r2, #7
   11e90:	b132      	cbz	r2, 11ea0 <memchr+0x70>
   11e92:	f810 3b01 	ldrb.w	r3, [r0], #1
   11e96:	3a01      	subs	r2, #1
   11e98:	ea83 0301 	eor.w	r3, r3, r1
   11e9c:	b113      	cbz	r3, 11ea4 <memchr+0x74>
   11e9e:	d1f8      	bne.n	11e92 <memchr+0x62>
   11ea0:	2000      	movs	r0, #0
   11ea2:	4770      	bx	lr
   11ea4:	3801      	subs	r0, #1
   11ea6:	4770      	bx	lr
   11ea8:	2d00      	cmp	r5, #0
   11eaa:	bf06      	itte	eq
   11eac:	4635      	moveq	r5, r6
   11eae:	3803      	subeq	r0, #3
   11eb0:	3807      	subne	r0, #7
   11eb2:	f015 0f01 	tst.w	r5, #1
   11eb6:	d107      	bne.n	11ec8 <memchr+0x98>
   11eb8:	3001      	adds	r0, #1
   11eba:	f415 7f80 	tst.w	r5, #256	; 0x100
   11ebe:	bf02      	ittt	eq
   11ec0:	3001      	addeq	r0, #1
   11ec2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   11ec6:	3001      	addeq	r0, #1
   11ec8:	bcf0      	pop	{r4, r5, r6, r7}
   11eca:	3801      	subs	r0, #1
   11ecc:	4770      	bx	lr
   11ece:	bf00      	nop
	...

00011f00 <strlen>:
   11f00:	f890 f000 	pld	[r0]
   11f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11f08:	f020 0107 	bic.w	r1, r0, #7
   11f0c:	f06f 0c00 	mvn.w	ip, #0
   11f10:	f010 0407 	ands.w	r4, r0, #7
   11f14:	f891 f020 	pld	[r1, #32]
   11f18:	f040 8049 	bne.w	11fae <strlen+0xae>
   11f1c:	f04f 0400 	mov.w	r4, #0
   11f20:	f06f 0007 	mvn.w	r0, #7
   11f24:	e9d1 2300 	ldrd	r2, r3, [r1]
   11f28:	f891 f040 	pld	[r1, #64]	; 0x40
   11f2c:	f100 0008 	add.w	r0, r0, #8
   11f30:	fa82 f24c 	uadd8	r2, r2, ip
   11f34:	faa4 f28c 	sel	r2, r4, ip
   11f38:	fa83 f34c 	uadd8	r3, r3, ip
   11f3c:	faa2 f38c 	sel	r3, r2, ip
   11f40:	bb4b      	cbnz	r3, 11f96 <strlen+0x96>
   11f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11f46:	fa82 f24c 	uadd8	r2, r2, ip
   11f4a:	f100 0008 	add.w	r0, r0, #8
   11f4e:	faa4 f28c 	sel	r2, r4, ip
   11f52:	fa83 f34c 	uadd8	r3, r3, ip
   11f56:	faa2 f38c 	sel	r3, r2, ip
   11f5a:	b9e3      	cbnz	r3, 11f96 <strlen+0x96>
   11f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11f60:	fa82 f24c 	uadd8	r2, r2, ip
   11f64:	f100 0008 	add.w	r0, r0, #8
   11f68:	faa4 f28c 	sel	r2, r4, ip
   11f6c:	fa83 f34c 	uadd8	r3, r3, ip
   11f70:	faa2 f38c 	sel	r3, r2, ip
   11f74:	b97b      	cbnz	r3, 11f96 <strlen+0x96>
   11f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   11f7a:	f101 0120 	add.w	r1, r1, #32
   11f7e:	fa82 f24c 	uadd8	r2, r2, ip
   11f82:	f100 0008 	add.w	r0, r0, #8
   11f86:	faa4 f28c 	sel	r2, r4, ip
   11f8a:	fa83 f34c 	uadd8	r3, r3, ip
   11f8e:	faa2 f38c 	sel	r3, r2, ip
   11f92:	2b00      	cmp	r3, #0
   11f94:	d0c6      	beq.n	11f24 <strlen+0x24>
   11f96:	2a00      	cmp	r2, #0
   11f98:	bf04      	itt	eq
   11f9a:	3004      	addeq	r0, #4
   11f9c:	461a      	moveq	r2, r3
   11f9e:	ba12      	rev	r2, r2
   11fa0:	fab2 f282 	clz	r2, r2
   11fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   11fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   11fac:	4770      	bx	lr
   11fae:	e9d1 2300 	ldrd	r2, r3, [r1]
   11fb2:	f004 0503 	and.w	r5, r4, #3
   11fb6:	f1c4 0000 	rsb	r0, r4, #0
   11fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   11fbe:	f014 0f04 	tst.w	r4, #4
   11fc2:	f891 f040 	pld	[r1, #64]	; 0x40
   11fc6:	fa0c f505 	lsl.w	r5, ip, r5
   11fca:	ea62 0205 	orn	r2, r2, r5
   11fce:	bf1c      	itt	ne
   11fd0:	ea63 0305 	ornne	r3, r3, r5
   11fd4:	4662      	movne	r2, ip
   11fd6:	f04f 0400 	mov.w	r4, #0
   11fda:	e7a9      	b.n	11f30 <strlen+0x30>

00011fdc <_realloc_r>:
   11fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe0:	4617      	mov	r7, r2
   11fe2:	2900      	cmp	r1, #0
   11fe4:	f000 8098 	beq.w	12118 <_realloc_r+0x13c>
   11fe8:	460c      	mov	r4, r1
   11fea:	f107 050b 	add.w	r5, r7, #11
   11fee:	4680      	mov	r8, r0
   11ff0:	f7ff fa4e 	bl	11490 <__malloc_lock>
   11ff4:	2d16      	cmp	r5, #22
   11ff6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   11ffa:	d85b      	bhi.n	120b4 <_realloc_r+0xd8>
   11ffc:	2510      	movs	r5, #16
   11ffe:	462a      	mov	r2, r5
   12000:	42af      	cmp	r7, r5
   12002:	d85c      	bhi.n	120be <_realloc_r+0xe2>
   12004:	f021 0603 	bic.w	r6, r1, #3
   12008:	4296      	cmp	r6, r2
   1200a:	f1a4 0908 	sub.w	r9, r4, #8
   1200e:	da62      	bge.n	120d6 <_realloc_r+0xfa>
   12010:	4bbc      	ldr	r3, [pc, #752]	; (12304 <_realloc_r+0x328>)
   12012:	f8d3 c008 	ldr.w	ip, [r3, #8]
   12016:	eb09 0006 	add.w	r0, r9, r6
   1201a:	4584      	cmp	ip, r0
   1201c:	f000 8097 	beq.w	1214e <_realloc_r+0x172>
   12020:	f8d0 c004 	ldr.w	ip, [r0, #4]
   12024:	f02c 0301 	bic.w	r3, ip, #1
   12028:	4403      	add	r3, r0
   1202a:	685b      	ldr	r3, [r3, #4]
   1202c:	07db      	lsls	r3, r3, #31
   1202e:	d468      	bmi.n	12102 <_realloc_r+0x126>
   12030:	f02c 0c03 	bic.w	ip, ip, #3
   12034:	eb06 030c 	add.w	r3, r6, ip
   12038:	4293      	cmp	r3, r2
   1203a:	da47      	bge.n	120cc <_realloc_r+0xf0>
   1203c:	07cb      	lsls	r3, r1, #31
   1203e:	d410      	bmi.n	12062 <_realloc_r+0x86>
   12040:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12044:	eba9 0a03 	sub.w	sl, r9, r3
   12048:	f8da 3004 	ldr.w	r3, [sl, #4]
   1204c:	f023 0103 	bic.w	r1, r3, #3
   12050:	448c      	add	ip, r1
   12052:	44b4      	add	ip, r6
   12054:	4594      	cmp	ip, r2
   12056:	f280 8111 	bge.w	1227c <_realloc_r+0x2a0>
   1205a:	1873      	adds	r3, r6, r1
   1205c:	4293      	cmp	r3, r2
   1205e:	f280 80e8 	bge.w	12232 <_realloc_r+0x256>
   12062:	4639      	mov	r1, r7
   12064:	4640      	mov	r0, r8
   12066:	f7fe fda9 	bl	10bbc <_malloc_r>
   1206a:	4607      	mov	r7, r0
   1206c:	b1e0      	cbz	r0, 120a8 <_realloc_r+0xcc>
   1206e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12072:	f023 0301 	bic.w	r3, r3, #1
   12076:	444b      	add	r3, r9
   12078:	f1a0 0208 	sub.w	r2, r0, #8
   1207c:	4293      	cmp	r3, r2
   1207e:	f000 80d2 	beq.w	12226 <_realloc_r+0x24a>
   12082:	1f32      	subs	r2, r6, #4
   12084:	2a24      	cmp	r2, #36	; 0x24
   12086:	f200 80f5 	bhi.w	12274 <_realloc_r+0x298>
   1208a:	2a13      	cmp	r2, #19
   1208c:	f200 80ac 	bhi.w	121e8 <_realloc_r+0x20c>
   12090:	4603      	mov	r3, r0
   12092:	4622      	mov	r2, r4
   12094:	6811      	ldr	r1, [r2, #0]
   12096:	6019      	str	r1, [r3, #0]
   12098:	6851      	ldr	r1, [r2, #4]
   1209a:	6059      	str	r1, [r3, #4]
   1209c:	6892      	ldr	r2, [r2, #8]
   1209e:	609a      	str	r2, [r3, #8]
   120a0:	4621      	mov	r1, r4
   120a2:	4640      	mov	r0, r8
   120a4:	f000 f9d6 	bl	12454 <_free_r>
   120a8:	4640      	mov	r0, r8
   120aa:	f7ff f9f7 	bl	1149c <__malloc_unlock>
   120ae:	4638      	mov	r0, r7
   120b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120b4:	f025 0507 	bic.w	r5, r5, #7
   120b8:	2d00      	cmp	r5, #0
   120ba:	462a      	mov	r2, r5
   120bc:	daa0      	bge.n	12000 <_realloc_r+0x24>
   120be:	230c      	movs	r3, #12
   120c0:	f8c8 3000 	str.w	r3, [r8]
   120c4:	2700      	movs	r7, #0
   120c6:	4638      	mov	r0, r7
   120c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120cc:	461e      	mov	r6, r3
   120ce:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   120d2:	60d3      	str	r3, [r2, #12]
   120d4:	609a      	str	r2, [r3, #8]
   120d6:	1b73      	subs	r3, r6, r5
   120d8:	2b0f      	cmp	r3, #15
   120da:	d822      	bhi.n	12122 <_realloc_r+0x146>
   120dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   120e0:	f003 0301 	and.w	r3, r3, #1
   120e4:	4333      	orrs	r3, r6
   120e6:	444e      	add	r6, r9
   120e8:	f8c9 3004 	str.w	r3, [r9, #4]
   120ec:	6873      	ldr	r3, [r6, #4]
   120ee:	f043 0301 	orr.w	r3, r3, #1
   120f2:	6073      	str	r3, [r6, #4]
   120f4:	4640      	mov	r0, r8
   120f6:	4627      	mov	r7, r4
   120f8:	f7ff f9d0 	bl	1149c <__malloc_unlock>
   120fc:	4638      	mov	r0, r7
   120fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12102:	07c9      	lsls	r1, r1, #31
   12104:	d4ad      	bmi.n	12062 <_realloc_r+0x86>
   12106:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1210a:	eba9 0a03 	sub.w	sl, r9, r3
   1210e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12112:	f021 0103 	bic.w	r1, r1, #3
   12116:	e7a0      	b.n	1205a <_realloc_r+0x7e>
   12118:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1211c:	4611      	mov	r1, r2
   1211e:	f7fe bd4d 	b.w	10bbc <_malloc_r>
   12122:	f8d9 2004 	ldr.w	r2, [r9, #4]
   12126:	eb09 0105 	add.w	r1, r9, r5
   1212a:	f002 0201 	and.w	r2, r2, #1
   1212e:	444e      	add	r6, r9
   12130:	f043 0301 	orr.w	r3, r3, #1
   12134:	432a      	orrs	r2, r5
   12136:	f8c9 2004 	str.w	r2, [r9, #4]
   1213a:	604b      	str	r3, [r1, #4]
   1213c:	6873      	ldr	r3, [r6, #4]
   1213e:	f043 0301 	orr.w	r3, r3, #1
   12142:	3108      	adds	r1, #8
   12144:	6073      	str	r3, [r6, #4]
   12146:	4640      	mov	r0, r8
   12148:	f000 f984 	bl	12454 <_free_r>
   1214c:	e7d2      	b.n	120f4 <_realloc_r+0x118>
   1214e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12152:	f020 0b03 	bic.w	fp, r0, #3
   12156:	eb06 0c0b 	add.w	ip, r6, fp
   1215a:	f105 0010 	add.w	r0, r5, #16
   1215e:	4584      	cmp	ip, r0
   12160:	da4d      	bge.n	121fe <_realloc_r+0x222>
   12162:	07c9      	lsls	r1, r1, #31
   12164:	f53f af7d 	bmi.w	12062 <_realloc_r+0x86>
   12168:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1216c:	eba9 0a01 	sub.w	sl, r9, r1
   12170:	f8da 1004 	ldr.w	r1, [sl, #4]
   12174:	f021 0103 	bic.w	r1, r1, #3
   12178:	448b      	add	fp, r1
   1217a:	44b3      	add	fp, r6
   1217c:	4558      	cmp	r0, fp
   1217e:	f73f af6c 	bgt.w	1205a <_realloc_r+0x7e>
   12182:	4657      	mov	r7, sl
   12184:	f8da 100c 	ldr.w	r1, [sl, #12]
   12188:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1218c:	1f32      	subs	r2, r6, #4
   1218e:	2a24      	cmp	r2, #36	; 0x24
   12190:	60c1      	str	r1, [r0, #12]
   12192:	6088      	str	r0, [r1, #8]
   12194:	f200 80db 	bhi.w	1234e <_realloc_r+0x372>
   12198:	2a13      	cmp	r2, #19
   1219a:	f240 80d6 	bls.w	1234a <_realloc_r+0x36e>
   1219e:	6821      	ldr	r1, [r4, #0]
   121a0:	f8ca 1008 	str.w	r1, [sl, #8]
   121a4:	6861      	ldr	r1, [r4, #4]
   121a6:	f8ca 100c 	str.w	r1, [sl, #12]
   121aa:	2a1b      	cmp	r2, #27
   121ac:	f200 80df 	bhi.w	1236e <_realloc_r+0x392>
   121b0:	3408      	adds	r4, #8
   121b2:	f10a 0210 	add.w	r2, sl, #16
   121b6:	6821      	ldr	r1, [r4, #0]
   121b8:	6011      	str	r1, [r2, #0]
   121ba:	6861      	ldr	r1, [r4, #4]
   121bc:	6051      	str	r1, [r2, #4]
   121be:	68a1      	ldr	r1, [r4, #8]
   121c0:	6091      	str	r1, [r2, #8]
   121c2:	eb0a 0105 	add.w	r1, sl, r5
   121c6:	ebab 0205 	sub.w	r2, fp, r5
   121ca:	f042 0201 	orr.w	r2, r2, #1
   121ce:	6099      	str	r1, [r3, #8]
   121d0:	604a      	str	r2, [r1, #4]
   121d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   121d6:	f003 0301 	and.w	r3, r3, #1
   121da:	432b      	orrs	r3, r5
   121dc:	4640      	mov	r0, r8
   121de:	f8ca 3004 	str.w	r3, [sl, #4]
   121e2:	f7ff f95b 	bl	1149c <__malloc_unlock>
   121e6:	e76e      	b.n	120c6 <_realloc_r+0xea>
   121e8:	6823      	ldr	r3, [r4, #0]
   121ea:	6003      	str	r3, [r0, #0]
   121ec:	6863      	ldr	r3, [r4, #4]
   121ee:	6043      	str	r3, [r0, #4]
   121f0:	2a1b      	cmp	r2, #27
   121f2:	d868      	bhi.n	122c6 <_realloc_r+0x2ea>
   121f4:	f104 0208 	add.w	r2, r4, #8
   121f8:	f100 0308 	add.w	r3, r0, #8
   121fc:	e74a      	b.n	12094 <_realloc_r+0xb8>
   121fe:	eb09 0205 	add.w	r2, r9, r5
   12202:	609a      	str	r2, [r3, #8]
   12204:	ebac 0305 	sub.w	r3, ip, r5
   12208:	f043 0301 	orr.w	r3, r3, #1
   1220c:	6053      	str	r3, [r2, #4]
   1220e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12212:	f003 0301 	and.w	r3, r3, #1
   12216:	432b      	orrs	r3, r5
   12218:	4640      	mov	r0, r8
   1221a:	f844 3c04 	str.w	r3, [r4, #-4]
   1221e:	f7ff f93d 	bl	1149c <__malloc_unlock>
   12222:	4627      	mov	r7, r4
   12224:	e74f      	b.n	120c6 <_realloc_r+0xea>
   12226:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1222a:	f023 0303 	bic.w	r3, r3, #3
   1222e:	441e      	add	r6, r3
   12230:	e751      	b.n	120d6 <_realloc_r+0xfa>
   12232:	4657      	mov	r7, sl
   12234:	f8da 100c 	ldr.w	r1, [sl, #12]
   12238:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1223c:	1f32      	subs	r2, r6, #4
   1223e:	2a24      	cmp	r2, #36	; 0x24
   12240:	60c1      	str	r1, [r0, #12]
   12242:	6088      	str	r0, [r1, #8]
   12244:	d84c      	bhi.n	122e0 <_realloc_r+0x304>
   12246:	2a13      	cmp	r2, #19
   12248:	d948      	bls.n	122dc <_realloc_r+0x300>
   1224a:	6821      	ldr	r1, [r4, #0]
   1224c:	f8ca 1008 	str.w	r1, [sl, #8]
   12250:	6861      	ldr	r1, [r4, #4]
   12252:	f8ca 100c 	str.w	r1, [sl, #12]
   12256:	2a1b      	cmp	r2, #27
   12258:	d856      	bhi.n	12308 <_realloc_r+0x32c>
   1225a:	3408      	adds	r4, #8
   1225c:	f10a 0210 	add.w	r2, sl, #16
   12260:	461e      	mov	r6, r3
   12262:	6823      	ldr	r3, [r4, #0]
   12264:	6013      	str	r3, [r2, #0]
   12266:	6863      	ldr	r3, [r4, #4]
   12268:	6053      	str	r3, [r2, #4]
   1226a:	68a3      	ldr	r3, [r4, #8]
   1226c:	6093      	str	r3, [r2, #8]
   1226e:	46d1      	mov	r9, sl
   12270:	463c      	mov	r4, r7
   12272:	e730      	b.n	120d6 <_realloc_r+0xfa>
   12274:	4621      	mov	r1, r4
   12276:	f7fe ff81 	bl	1117c <memmove>
   1227a:	e711      	b.n	120a0 <_realloc_r+0xc4>
   1227c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   12280:	4657      	mov	r7, sl
   12282:	60cb      	str	r3, [r1, #12]
   12284:	6099      	str	r1, [r3, #8]
   12286:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1228a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1228e:	60cb      	str	r3, [r1, #12]
   12290:	1f32      	subs	r2, r6, #4
   12292:	2a24      	cmp	r2, #36	; 0x24
   12294:	6099      	str	r1, [r3, #8]
   12296:	d82d      	bhi.n	122f4 <_realloc_r+0x318>
   12298:	2a13      	cmp	r2, #19
   1229a:	d929      	bls.n	122f0 <_realloc_r+0x314>
   1229c:	6823      	ldr	r3, [r4, #0]
   1229e:	f8ca 3008 	str.w	r3, [sl, #8]
   122a2:	6863      	ldr	r3, [r4, #4]
   122a4:	f8ca 300c 	str.w	r3, [sl, #12]
   122a8:	2a1b      	cmp	r2, #27
   122aa:	d842      	bhi.n	12332 <_realloc_r+0x356>
   122ac:	3408      	adds	r4, #8
   122ae:	f10a 0310 	add.w	r3, sl, #16
   122b2:	6822      	ldr	r2, [r4, #0]
   122b4:	601a      	str	r2, [r3, #0]
   122b6:	6862      	ldr	r2, [r4, #4]
   122b8:	605a      	str	r2, [r3, #4]
   122ba:	68a2      	ldr	r2, [r4, #8]
   122bc:	609a      	str	r2, [r3, #8]
   122be:	4666      	mov	r6, ip
   122c0:	46d1      	mov	r9, sl
   122c2:	463c      	mov	r4, r7
   122c4:	e707      	b.n	120d6 <_realloc_r+0xfa>
   122c6:	68a3      	ldr	r3, [r4, #8]
   122c8:	6083      	str	r3, [r0, #8]
   122ca:	68e3      	ldr	r3, [r4, #12]
   122cc:	60c3      	str	r3, [r0, #12]
   122ce:	2a24      	cmp	r2, #36	; 0x24
   122d0:	d026      	beq.n	12320 <_realloc_r+0x344>
   122d2:	f104 0210 	add.w	r2, r4, #16
   122d6:	f100 0310 	add.w	r3, r0, #16
   122da:	e6db      	b.n	12094 <_realloc_r+0xb8>
   122dc:	463a      	mov	r2, r7
   122de:	e7bf      	b.n	12260 <_realloc_r+0x284>
   122e0:	4621      	mov	r1, r4
   122e2:	4638      	mov	r0, r7
   122e4:	461e      	mov	r6, r3
   122e6:	46d1      	mov	r9, sl
   122e8:	f7fe ff48 	bl	1117c <memmove>
   122ec:	463c      	mov	r4, r7
   122ee:	e6f2      	b.n	120d6 <_realloc_r+0xfa>
   122f0:	463b      	mov	r3, r7
   122f2:	e7de      	b.n	122b2 <_realloc_r+0x2d6>
   122f4:	4621      	mov	r1, r4
   122f6:	4638      	mov	r0, r7
   122f8:	4666      	mov	r6, ip
   122fa:	46d1      	mov	r9, sl
   122fc:	f7fe ff3e 	bl	1117c <memmove>
   12300:	463c      	mov	r4, r7
   12302:	e6e8      	b.n	120d6 <_realloc_r+0xfa>
   12304:	2000335c 	.word	0x2000335c
   12308:	68a1      	ldr	r1, [r4, #8]
   1230a:	f8ca 1010 	str.w	r1, [sl, #16]
   1230e:	68e1      	ldr	r1, [r4, #12]
   12310:	f8ca 1014 	str.w	r1, [sl, #20]
   12314:	2a24      	cmp	r2, #36	; 0x24
   12316:	d020      	beq.n	1235a <_realloc_r+0x37e>
   12318:	3410      	adds	r4, #16
   1231a:	f10a 0218 	add.w	r2, sl, #24
   1231e:	e79f      	b.n	12260 <_realloc_r+0x284>
   12320:	6923      	ldr	r3, [r4, #16]
   12322:	6103      	str	r3, [r0, #16]
   12324:	6961      	ldr	r1, [r4, #20]
   12326:	6141      	str	r1, [r0, #20]
   12328:	f104 0218 	add.w	r2, r4, #24
   1232c:	f100 0318 	add.w	r3, r0, #24
   12330:	e6b0      	b.n	12094 <_realloc_r+0xb8>
   12332:	68a3      	ldr	r3, [r4, #8]
   12334:	f8ca 3010 	str.w	r3, [sl, #16]
   12338:	68e3      	ldr	r3, [r4, #12]
   1233a:	f8ca 3014 	str.w	r3, [sl, #20]
   1233e:	2a24      	cmp	r2, #36	; 0x24
   12340:	d021      	beq.n	12386 <_realloc_r+0x3aa>
   12342:	3410      	adds	r4, #16
   12344:	f10a 0318 	add.w	r3, sl, #24
   12348:	e7b3      	b.n	122b2 <_realloc_r+0x2d6>
   1234a:	463a      	mov	r2, r7
   1234c:	e733      	b.n	121b6 <_realloc_r+0x1da>
   1234e:	4621      	mov	r1, r4
   12350:	4638      	mov	r0, r7
   12352:	f7fe ff13 	bl	1117c <memmove>
   12356:	4b16      	ldr	r3, [pc, #88]	; (123b0 <_realloc_r+0x3d4>)
   12358:	e733      	b.n	121c2 <_realloc_r+0x1e6>
   1235a:	6922      	ldr	r2, [r4, #16]
   1235c:	f8ca 2018 	str.w	r2, [sl, #24]
   12360:	6962      	ldr	r2, [r4, #20]
   12362:	f8ca 201c 	str.w	r2, [sl, #28]
   12366:	3418      	adds	r4, #24
   12368:	f10a 0220 	add.w	r2, sl, #32
   1236c:	e778      	b.n	12260 <_realloc_r+0x284>
   1236e:	68a1      	ldr	r1, [r4, #8]
   12370:	f8ca 1010 	str.w	r1, [sl, #16]
   12374:	68e1      	ldr	r1, [r4, #12]
   12376:	f8ca 1014 	str.w	r1, [sl, #20]
   1237a:	2a24      	cmp	r2, #36	; 0x24
   1237c:	d00d      	beq.n	1239a <_realloc_r+0x3be>
   1237e:	3410      	adds	r4, #16
   12380:	f10a 0218 	add.w	r2, sl, #24
   12384:	e717      	b.n	121b6 <_realloc_r+0x1da>
   12386:	6923      	ldr	r3, [r4, #16]
   12388:	f8ca 3018 	str.w	r3, [sl, #24]
   1238c:	6963      	ldr	r3, [r4, #20]
   1238e:	f8ca 301c 	str.w	r3, [sl, #28]
   12392:	3418      	adds	r4, #24
   12394:	f10a 0320 	add.w	r3, sl, #32
   12398:	e78b      	b.n	122b2 <_realloc_r+0x2d6>
   1239a:	6922      	ldr	r2, [r4, #16]
   1239c:	f8ca 2018 	str.w	r2, [sl, #24]
   123a0:	6962      	ldr	r2, [r4, #20]
   123a2:	f8ca 201c 	str.w	r2, [sl, #28]
   123a6:	3418      	adds	r4, #24
   123a8:	f10a 0220 	add.w	r2, sl, #32
   123ac:	e703      	b.n	121b6 <_realloc_r+0x1da>
   123ae:	bf00      	nop
   123b0:	2000335c 	.word	0x2000335c

000123b4 <_malloc_trim_r>:
   123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123b6:	4f24      	ldr	r7, [pc, #144]	; (12448 <_malloc_trim_r+0x94>)
   123b8:	460c      	mov	r4, r1
   123ba:	4606      	mov	r6, r0
   123bc:	f7ff f868 	bl	11490 <__malloc_lock>
   123c0:	68bb      	ldr	r3, [r7, #8]
   123c2:	685d      	ldr	r5, [r3, #4]
   123c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   123c8:	310f      	adds	r1, #15
   123ca:	f025 0503 	bic.w	r5, r5, #3
   123ce:	194b      	adds	r3, r1, r5
   123d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   123d4:	f023 030f 	bic.w	r3, r3, #15
   123d8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   123dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   123e0:	db07      	blt.n	123f2 <_malloc_trim_r+0x3e>
   123e2:	2100      	movs	r1, #0
   123e4:	4630      	mov	r0, r6
   123e6:	f000 f9a3 	bl	12730 <_sbrk_r>
   123ea:	68bb      	ldr	r3, [r7, #8]
   123ec:	442b      	add	r3, r5
   123ee:	4298      	cmp	r0, r3
   123f0:	d004      	beq.n	123fc <_malloc_trim_r+0x48>
   123f2:	4630      	mov	r0, r6
   123f4:	f7ff f852 	bl	1149c <__malloc_unlock>
   123f8:	2000      	movs	r0, #0
   123fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123fc:	4261      	negs	r1, r4
   123fe:	4630      	mov	r0, r6
   12400:	f000 f996 	bl	12730 <_sbrk_r>
   12404:	3001      	adds	r0, #1
   12406:	d00d      	beq.n	12424 <_malloc_trim_r+0x70>
   12408:	4a10      	ldr	r2, [pc, #64]	; (1244c <_malloc_trim_r+0x98>)
   1240a:	68bb      	ldr	r3, [r7, #8]
   1240c:	1b2d      	subs	r5, r5, r4
   1240e:	f045 0501 	orr.w	r5, r5, #1
   12412:	605d      	str	r5, [r3, #4]
   12414:	6813      	ldr	r3, [r2, #0]
   12416:	4630      	mov	r0, r6
   12418:	1b1b      	subs	r3, r3, r4
   1241a:	6013      	str	r3, [r2, #0]
   1241c:	f7ff f83e 	bl	1149c <__malloc_unlock>
   12420:	2001      	movs	r0, #1
   12422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12424:	2100      	movs	r1, #0
   12426:	4630      	mov	r0, r6
   12428:	f000 f982 	bl	12730 <_sbrk_r>
   1242c:	68ba      	ldr	r2, [r7, #8]
   1242e:	1a83      	subs	r3, r0, r2
   12430:	2b0f      	cmp	r3, #15
   12432:	ddde      	ble.n	123f2 <_malloc_trim_r+0x3e>
   12434:	f043 0301 	orr.w	r3, r3, #1
   12438:	6053      	str	r3, [r2, #4]
   1243a:	4b05      	ldr	r3, [pc, #20]	; (12450 <_malloc_trim_r+0x9c>)
   1243c:	4903      	ldr	r1, [pc, #12]	; (1244c <_malloc_trim_r+0x98>)
   1243e:	681b      	ldr	r3, [r3, #0]
   12440:	1ac0      	subs	r0, r0, r3
   12442:	6008      	str	r0, [r1, #0]
   12444:	e7d5      	b.n	123f2 <_malloc_trim_r+0x3e>
   12446:	bf00      	nop
   12448:	2000335c 	.word	0x2000335c
   1244c:	20004d54 	.word	0x20004d54
   12450:	20003764 	.word	0x20003764

00012454 <_free_r>:
   12454:	2900      	cmp	r1, #0
   12456:	d061      	beq.n	1251c <_free_r+0xc8>
   12458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1245a:	460c      	mov	r4, r1
   1245c:	4606      	mov	r6, r0
   1245e:	f7ff f817 	bl	11490 <__malloc_lock>
   12462:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12466:	4f7b      	ldr	r7, [pc, #492]	; (12654 <_free_r+0x200>)
   12468:	f1a4 0508 	sub.w	r5, r4, #8
   1246c:	f022 0101 	bic.w	r1, r2, #1
   12470:	eb05 0c01 	add.w	ip, r5, r1
   12474:	68b8      	ldr	r0, [r7, #8]
   12476:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1247a:	4560      	cmp	r0, ip
   1247c:	f023 0303 	bic.w	r3, r3, #3
   12480:	f000 808b 	beq.w	1259a <_free_r+0x146>
   12484:	07d2      	lsls	r2, r2, #31
   12486:	f8cc 3004 	str.w	r3, [ip, #4]
   1248a:	d432      	bmi.n	124f2 <_free_r+0x9e>
   1248c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12490:	1aad      	subs	r5, r5, r2
   12492:	4411      	add	r1, r2
   12494:	68aa      	ldr	r2, [r5, #8]
   12496:	f107 0008 	add.w	r0, r7, #8
   1249a:	4282      	cmp	r2, r0
   1249c:	d06a      	beq.n	12574 <_free_r+0x120>
   1249e:	eb0c 0403 	add.w	r4, ip, r3
   124a2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   124a6:	68ec      	ldr	r4, [r5, #12]
   124a8:	60d4      	str	r4, [r2, #12]
   124aa:	f01e 0f01 	tst.w	lr, #1
   124ae:	60a2      	str	r2, [r4, #8]
   124b0:	f000 8097 	beq.w	125e2 <_free_r+0x18e>
   124b4:	f041 0301 	orr.w	r3, r1, #1
   124b8:	606b      	str	r3, [r5, #4]
   124ba:	f8cc 1000 	str.w	r1, [ip]
   124be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   124c2:	d235      	bcs.n	12530 <_free_r+0xdc>
   124c4:	6878      	ldr	r0, [r7, #4]
   124c6:	08cb      	lsrs	r3, r1, #3
   124c8:	2201      	movs	r2, #1
   124ca:	0949      	lsrs	r1, r1, #5
   124cc:	3301      	adds	r3, #1
   124ce:	408a      	lsls	r2, r1
   124d0:	4302      	orrs	r2, r0
   124d2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   124d6:	607a      	str	r2, [r7, #4]
   124d8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   124dc:	3a08      	subs	r2, #8
   124de:	e9c5 1202 	strd	r1, r2, [r5, #8]
   124e2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   124e6:	60cd      	str	r5, [r1, #12]
   124e8:	4630      	mov	r0, r6
   124ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   124ee:	f7fe bfd5 	b.w	1149c <__malloc_unlock>
   124f2:	eb0c 0203 	add.w	r2, ip, r3
   124f6:	6852      	ldr	r2, [r2, #4]
   124f8:	07d0      	lsls	r0, r2, #31
   124fa:	d410      	bmi.n	1251e <_free_r+0xca>
   124fc:	4419      	add	r1, r3
   124fe:	f107 0008 	add.w	r0, r7, #8
   12502:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12506:	4283      	cmp	r3, r0
   12508:	d073      	beq.n	125f2 <_free_r+0x19e>
   1250a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1250e:	60da      	str	r2, [r3, #12]
   12510:	6093      	str	r3, [r2, #8]
   12512:	f041 0301 	orr.w	r3, r1, #1
   12516:	606b      	str	r3, [r5, #4]
   12518:	5069      	str	r1, [r5, r1]
   1251a:	e7d0      	b.n	124be <_free_r+0x6a>
   1251c:	4770      	bx	lr
   1251e:	f041 0301 	orr.w	r3, r1, #1
   12522:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12526:	f844 3c04 	str.w	r3, [r4, #-4]
   1252a:	f8cc 1000 	str.w	r1, [ip]
   1252e:	d3c9      	bcc.n	124c4 <_free_r+0x70>
   12530:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12534:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12538:	d248      	bcs.n	125cc <_free_r+0x178>
   1253a:	098b      	lsrs	r3, r1, #6
   1253c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12540:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12544:	00c3      	lsls	r3, r0, #3
   12546:	18f8      	adds	r0, r7, r3
   12548:	58fb      	ldr	r3, [r7, r3]
   1254a:	3808      	subs	r0, #8
   1254c:	4298      	cmp	r0, r3
   1254e:	d059      	beq.n	12604 <_free_r+0x1b0>
   12550:	685a      	ldr	r2, [r3, #4]
   12552:	f022 0203 	bic.w	r2, r2, #3
   12556:	428a      	cmp	r2, r1
   12558:	d902      	bls.n	12560 <_free_r+0x10c>
   1255a:	689b      	ldr	r3, [r3, #8]
   1255c:	4298      	cmp	r0, r3
   1255e:	d1f7      	bne.n	12550 <_free_r+0xfc>
   12560:	68d8      	ldr	r0, [r3, #12]
   12562:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12566:	6085      	str	r5, [r0, #8]
   12568:	60dd      	str	r5, [r3, #12]
   1256a:	4630      	mov	r0, r6
   1256c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12570:	f7fe bf94 	b.w	1149c <__malloc_unlock>
   12574:	eb0c 0203 	add.w	r2, ip, r3
   12578:	6852      	ldr	r2, [r2, #4]
   1257a:	07d2      	lsls	r2, r2, #31
   1257c:	d463      	bmi.n	12646 <_free_r+0x1f2>
   1257e:	440b      	add	r3, r1
   12580:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12584:	60ca      	str	r2, [r1, #12]
   12586:	6091      	str	r1, [r2, #8]
   12588:	f043 0201 	orr.w	r2, r3, #1
   1258c:	606a      	str	r2, [r5, #4]
   1258e:	4630      	mov	r0, r6
   12590:	50eb      	str	r3, [r5, r3]
   12592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12596:	f7fe bf81 	b.w	1149c <__malloc_unlock>
   1259a:	440b      	add	r3, r1
   1259c:	07d1      	lsls	r1, r2, #31
   1259e:	d407      	bmi.n	125b0 <_free_r+0x15c>
   125a0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   125a4:	1aad      	subs	r5, r5, r2
   125a6:	4413      	add	r3, r2
   125a8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   125ac:	60ca      	str	r2, [r1, #12]
   125ae:	6091      	str	r1, [r2, #8]
   125b0:	f043 0201 	orr.w	r2, r3, #1
   125b4:	606a      	str	r2, [r5, #4]
   125b6:	4a28      	ldr	r2, [pc, #160]	; (12658 <_free_r+0x204>)
   125b8:	60bd      	str	r5, [r7, #8]
   125ba:	6812      	ldr	r2, [r2, #0]
   125bc:	429a      	cmp	r2, r3
   125be:	d893      	bhi.n	124e8 <_free_r+0x94>
   125c0:	4b26      	ldr	r3, [pc, #152]	; (1265c <_free_r+0x208>)
   125c2:	4630      	mov	r0, r6
   125c4:	6819      	ldr	r1, [r3, #0]
   125c6:	f7ff fef5 	bl	123b4 <_malloc_trim_r>
   125ca:	e78d      	b.n	124e8 <_free_r+0x94>
   125cc:	2b14      	cmp	r3, #20
   125ce:	d90a      	bls.n	125e6 <_free_r+0x192>
   125d0:	2b54      	cmp	r3, #84	; 0x54
   125d2:	d81f      	bhi.n	12614 <_free_r+0x1c0>
   125d4:	0b0b      	lsrs	r3, r1, #12
   125d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   125da:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   125de:	00c3      	lsls	r3, r0, #3
   125e0:	e7b1      	b.n	12546 <_free_r+0xf2>
   125e2:	4419      	add	r1, r3
   125e4:	e78d      	b.n	12502 <_free_r+0xae>
   125e6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   125ea:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   125ee:	00c3      	lsls	r3, r0, #3
   125f0:	e7a9      	b.n	12546 <_free_r+0xf2>
   125f2:	f041 0301 	orr.w	r3, r1, #1
   125f6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   125fa:	e9c5 0002 	strd	r0, r0, [r5, #8]
   125fe:	606b      	str	r3, [r5, #4]
   12600:	5069      	str	r1, [r5, r1]
   12602:	e771      	b.n	124e8 <_free_r+0x94>
   12604:	6879      	ldr	r1, [r7, #4]
   12606:	1092      	asrs	r2, r2, #2
   12608:	2401      	movs	r4, #1
   1260a:	fa04 f202 	lsl.w	r2, r4, r2
   1260e:	430a      	orrs	r2, r1
   12610:	607a      	str	r2, [r7, #4]
   12612:	e7a6      	b.n	12562 <_free_r+0x10e>
   12614:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12618:	d806      	bhi.n	12628 <_free_r+0x1d4>
   1261a:	0bcb      	lsrs	r3, r1, #15
   1261c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12620:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12624:	00c3      	lsls	r3, r0, #3
   12626:	e78e      	b.n	12546 <_free_r+0xf2>
   12628:	f240 5254 	movw	r2, #1364	; 0x554
   1262c:	4293      	cmp	r3, r2
   1262e:	d806      	bhi.n	1263e <_free_r+0x1ea>
   12630:	0c8b      	lsrs	r3, r1, #18
   12632:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12636:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1263a:	00c3      	lsls	r3, r0, #3
   1263c:	e783      	b.n	12546 <_free_r+0xf2>
   1263e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12642:	227e      	movs	r2, #126	; 0x7e
   12644:	e77f      	b.n	12546 <_free_r+0xf2>
   12646:	f041 0301 	orr.w	r3, r1, #1
   1264a:	606b      	str	r3, [r5, #4]
   1264c:	f8cc 1000 	str.w	r1, [ip]
   12650:	e74a      	b.n	124e8 <_free_r+0x94>
   12652:	bf00      	nop
   12654:	2000335c 	.word	0x2000335c
   12658:	20003768 	.word	0x20003768
   1265c:	20004d84 	.word	0x20004d84

00012660 <fiprintf>:
   12660:	b40e      	push	{r1, r2, r3}
   12662:	b510      	push	{r4, lr}
   12664:	b083      	sub	sp, #12
   12666:	ab05      	add	r3, sp, #20
   12668:	4c06      	ldr	r4, [pc, #24]	; (12684 <fiprintf+0x24>)
   1266a:	f853 2b04 	ldr.w	r2, [r3], #4
   1266e:	9301      	str	r3, [sp, #4]
   12670:	4601      	mov	r1, r0
   12672:	6820      	ldr	r0, [r4, #0]
   12674:	f000 f8e4 	bl	12840 <_vfiprintf_r>
   12678:	b003      	add	sp, #12
   1267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1267e:	b003      	add	sp, #12
   12680:	4770      	bx	lr
   12682:	bf00      	nop
   12684:	20003778 	.word	0x20003778

00012688 <__sread>:
   12688:	b510      	push	{r4, lr}
   1268a:	460c      	mov	r4, r1
   1268c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12690:	f002 fb12 	bl	14cb8 <_read_r>
   12694:	2800      	cmp	r0, #0
   12696:	db03      	blt.n	126a0 <__sread+0x18>
   12698:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1269a:	4403      	add	r3, r0
   1269c:	6523      	str	r3, [r4, #80]	; 0x50
   1269e:	bd10      	pop	{r4, pc}
   126a0:	89a3      	ldrh	r3, [r4, #12]
   126a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   126a6:	81a3      	strh	r3, [r4, #12]
   126a8:	bd10      	pop	{r4, pc}
   126aa:	bf00      	nop

000126ac <__swrite>:
   126ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126b0:	460c      	mov	r4, r1
   126b2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   126b6:	461f      	mov	r7, r3
   126b8:	05cb      	lsls	r3, r1, #23
   126ba:	4605      	mov	r5, r0
   126bc:	4616      	mov	r6, r2
   126be:	d40b      	bmi.n	126d8 <__swrite+0x2c>
   126c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   126c4:	81a1      	strh	r1, [r4, #12]
   126c6:	463b      	mov	r3, r7
   126c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   126cc:	4632      	mov	r2, r6
   126ce:	4628      	mov	r0, r5
   126d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   126d4:	f000 b862 	b.w	1279c <_write_r>
   126d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   126dc:	2302      	movs	r3, #2
   126de:	2200      	movs	r2, #0
   126e0:	f002 fad4 	bl	14c8c <_lseek_r>
   126e4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   126e8:	e7ea      	b.n	126c0 <__swrite+0x14>
   126ea:	bf00      	nop

000126ec <__sseek>:
   126ec:	b510      	push	{r4, lr}
   126ee:	460c      	mov	r4, r1
   126f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   126f4:	f002 faca 	bl	14c8c <_lseek_r>
   126f8:	89a3      	ldrh	r3, [r4, #12]
   126fa:	1c42      	adds	r2, r0, #1
   126fc:	bf0e      	itee	eq
   126fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12706:	6520      	strne	r0, [r4, #80]	; 0x50
   12708:	81a3      	strh	r3, [r4, #12]
   1270a:	bd10      	pop	{r4, pc}

0001270c <__sclose>:
   1270c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12710:	f002 b9c0 	b.w	14a94 <_close_r>

00012714 <__ascii_wctomb>:
   12714:	b149      	cbz	r1, 1272a <__ascii_wctomb+0x16>
   12716:	2aff      	cmp	r2, #255	; 0xff
   12718:	d802      	bhi.n	12720 <__ascii_wctomb+0xc>
   1271a:	700a      	strb	r2, [r1, #0]
   1271c:	2001      	movs	r0, #1
   1271e:	4770      	bx	lr
   12720:	238a      	movs	r3, #138	; 0x8a
   12722:	6003      	str	r3, [r0, #0]
   12724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12728:	4770      	bx	lr
   1272a:	4608      	mov	r0, r1
   1272c:	4770      	bx	lr
   1272e:	bf00      	nop

00012730 <_sbrk_r>:
   12730:	b538      	push	{r3, r4, r5, lr}
   12732:	4d07      	ldr	r5, [pc, #28]	; (12750 <_sbrk_r+0x20>)
   12734:	2200      	movs	r2, #0
   12736:	4604      	mov	r4, r0
   12738:	4608      	mov	r0, r1
   1273a:	602a      	str	r2, [r5, #0]
   1273c:	f7fb fae2 	bl	dd04 <_sbrk>
   12740:	1c43      	adds	r3, r0, #1
   12742:	d000      	beq.n	12746 <_sbrk_r+0x16>
   12744:	bd38      	pop	{r3, r4, r5, pc}
   12746:	682b      	ldr	r3, [r5, #0]
   12748:	2b00      	cmp	r3, #0
   1274a:	d0fb      	beq.n	12744 <_sbrk_r+0x14>
   1274c:	6023      	str	r3, [r4, #0]
   1274e:	bd38      	pop	{r3, r4, r5, pc}
   12750:	20004f8c 	.word	0x20004f8c

00012754 <_fwalk_sglue>:
   12754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12758:	4680      	mov	r8, r0
   1275a:	460f      	mov	r7, r1
   1275c:	4616      	mov	r6, r2
   1275e:	f04f 0900 	mov.w	r9, #0
   12762:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12766:	3d01      	subs	r5, #1
   12768:	d411      	bmi.n	1278e <_fwalk_sglue+0x3a>
   1276a:	89a3      	ldrh	r3, [r4, #12]
   1276c:	2b01      	cmp	r3, #1
   1276e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12772:	d908      	bls.n	12786 <_fwalk_sglue+0x32>
   12774:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12778:	3301      	adds	r3, #1
   1277a:	4621      	mov	r1, r4
   1277c:	d003      	beq.n	12786 <_fwalk_sglue+0x32>
   1277e:	4640      	mov	r0, r8
   12780:	47b8      	blx	r7
   12782:	ea49 0900 	orr.w	r9, r9, r0
   12786:	1c6b      	adds	r3, r5, #1
   12788:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1278c:	d1ed      	bne.n	1276a <_fwalk_sglue+0x16>
   1278e:	6836      	ldr	r6, [r6, #0]
   12790:	2e00      	cmp	r6, #0
   12792:	d1e6      	bne.n	12762 <_fwalk_sglue+0xe>
   12794:	4648      	mov	r0, r9
   12796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1279a:	bf00      	nop

0001279c <_write_r>:
   1279c:	b538      	push	{r3, r4, r5, lr}
   1279e:	460c      	mov	r4, r1
   127a0:	4d08      	ldr	r5, [pc, #32]	; (127c4 <_write_r+0x28>)
   127a2:	4684      	mov	ip, r0
   127a4:	4611      	mov	r1, r2
   127a6:	4620      	mov	r0, r4
   127a8:	461a      	mov	r2, r3
   127aa:	2300      	movs	r3, #0
   127ac:	602b      	str	r3, [r5, #0]
   127ae:	4664      	mov	r4, ip
   127b0:	f7f9 fed8 	bl	c564 <_write>
   127b4:	1c43      	adds	r3, r0, #1
   127b6:	d000      	beq.n	127ba <_write_r+0x1e>
   127b8:	bd38      	pop	{r3, r4, r5, pc}
   127ba:	682b      	ldr	r3, [r5, #0]
   127bc:	2b00      	cmp	r3, #0
   127be:	d0fb      	beq.n	127b8 <_write_r+0x1c>
   127c0:	6023      	str	r3, [r4, #0]
   127c2:	bd38      	pop	{r3, r4, r5, pc}
   127c4:	20004f8c 	.word	0x20004f8c

000127c8 <__sprint_r.part.0>:
   127c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   127ce:	049c      	lsls	r4, r3, #18
   127d0:	4690      	mov	r8, r2
   127d2:	d52d      	bpl.n	12830 <__sprint_r.part.0+0x68>
   127d4:	6893      	ldr	r3, [r2, #8]
   127d6:	6812      	ldr	r2, [r2, #0]
   127d8:	b343      	cbz	r3, 1282c <__sprint_r.part.0+0x64>
   127da:	468b      	mov	fp, r1
   127dc:	4606      	mov	r6, r0
   127de:	f102 0908 	add.w	r9, r2, #8
   127e2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   127e6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   127ea:	d015      	beq.n	12818 <__sprint_r.part.0+0x50>
   127ec:	3d04      	subs	r5, #4
   127ee:	2400      	movs	r4, #0
   127f0:	e001      	b.n	127f6 <__sprint_r.part.0+0x2e>
   127f2:	42a7      	cmp	r7, r4
   127f4:	d00e      	beq.n	12814 <__sprint_r.part.0+0x4c>
   127f6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   127fa:	465a      	mov	r2, fp
   127fc:	4630      	mov	r0, r6
   127fe:	f002 fac7 	bl	14d90 <_fputwc_r>
   12802:	1c43      	adds	r3, r0, #1
   12804:	f104 0401 	add.w	r4, r4, #1
   12808:	d1f3      	bne.n	127f2 <__sprint_r.part.0+0x2a>
   1280a:	2300      	movs	r3, #0
   1280c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12814:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12818:	f02a 0a03 	bic.w	sl, sl, #3
   1281c:	eba3 030a 	sub.w	r3, r3, sl
   12820:	f8c8 3008 	str.w	r3, [r8, #8]
   12824:	f109 0908 	add.w	r9, r9, #8
   12828:	2b00      	cmp	r3, #0
   1282a:	d1da      	bne.n	127e2 <__sprint_r.part.0+0x1a>
   1282c:	2000      	movs	r0, #0
   1282e:	e7ec      	b.n	1280a <__sprint_r.part.0+0x42>
   12830:	f002 fae2 	bl	14df8 <__sfvwrite_r>
   12834:	2300      	movs	r3, #0
   12836:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1283a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1283e:	bf00      	nop

00012840 <_vfiprintf_r>:
   12840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	ed2d 8b02 	vpush	{d8}
   12848:	b0c5      	sub	sp, #276	; 0x114
   1284a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1284e:	4683      	mov	fp, r0
   12850:	ee08 1a10 	vmov	s16, r1
   12854:	4616      	mov	r6, r2
   12856:	2100      	movs	r1, #0
   12858:	2208      	movs	r2, #8
   1285a:	4650      	mov	r0, sl
   1285c:	461c      	mov	r4, r3
   1285e:	9307      	str	r3, [sp, #28]
   12860:	f7fe fd28 	bl	112b4 <memset>
   12864:	f1bb 0f00 	cmp.w	fp, #0
   12868:	d004      	beq.n	12874 <_vfiprintf_r+0x34>
   1286a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1286e:	2b00      	cmp	r3, #0
   12870:	f000 86a0 	beq.w	135b4 <_vfiprintf_r+0xd74>
   12874:	ee18 2a10 	vmov	r2, s16
   12878:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1287a:	07db      	lsls	r3, r3, #31
   1287c:	f140 8513 	bpl.w	132a6 <_vfiprintf_r+0xa66>
   12880:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12884:	b28a      	uxth	r2, r1
   12886:	0495      	lsls	r5, r2, #18
   12888:	d40b      	bmi.n	128a2 <_vfiprintf_r+0x62>
   1288a:	ee18 3a10 	vmov	r3, s16
   1288e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12892:	8199      	strh	r1, [r3, #12]
   12894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12896:	b28a      	uxth	r2, r1
   12898:	ee18 1a10 	vmov	r1, s16
   1289c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   128a0:	664b      	str	r3, [r1, #100]	; 0x64
   128a2:	0710      	lsls	r0, r2, #28
   128a4:	f140 8105 	bpl.w	12ab2 <_vfiprintf_r+0x272>
   128a8:	ee18 3a10 	vmov	r3, s16
   128ac:	691b      	ldr	r3, [r3, #16]
   128ae:	2b00      	cmp	r3, #0
   128b0:	f000 80ff 	beq.w	12ab2 <_vfiprintf_r+0x272>
   128b4:	f002 031a 	and.w	r3, r2, #26
   128b8:	2b0a      	cmp	r3, #10
   128ba:	f000 810a 	beq.w	12ad2 <_vfiprintf_r+0x292>
   128be:	2300      	movs	r3, #0
   128c0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   128c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   128c8:	aa1b      	add	r2, sp, #108	; 0x6c
   128ca:	930c      	str	r3, [sp, #48]	; 0x30
   128cc:	9218      	str	r2, [sp, #96]	; 0x60
   128ce:	4691      	mov	r9, r2
   128d0:	930b      	str	r3, [sp, #44]	; 0x2c
   128d2:	9305      	str	r3, [sp, #20]
   128d4:	46b0      	mov	r8, r6
   128d6:	4644      	mov	r4, r8
   128d8:	4ba8      	ldr	r3, [pc, #672]	; (12b7c <_vfiprintf_r+0x33c>)
   128da:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   128de:	f7fe fd73 	bl	113c8 <__locale_mb_cur_max>
   128e2:	4622      	mov	r2, r4
   128e4:	4603      	mov	r3, r0
   128e6:	a912      	add	r1, sp, #72	; 0x48
   128e8:	f8cd a000 	str.w	sl, [sp]
   128ec:	4658      	mov	r0, fp
   128ee:	47a8      	blx	r5
   128f0:	2800      	cmp	r0, #0
   128f2:	f000 8145 	beq.w	12b80 <_vfiprintf_r+0x340>
   128f6:	f2c0 8139 	blt.w	12b6c <_vfiprintf_r+0x32c>
   128fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   128fc:	2a25      	cmp	r2, #37	; 0x25
   128fe:	4603      	mov	r3, r0
   12900:	d001      	beq.n	12906 <_vfiprintf_r+0xc6>
   12902:	441c      	add	r4, r3
   12904:	e7e8      	b.n	128d8 <_vfiprintf_r+0x98>
   12906:	ebb4 0608 	subs.w	r6, r4, r8
   1290a:	4605      	mov	r5, r0
   1290c:	f040 813c 	bne.w	12b88 <_vfiprintf_r+0x348>
   12910:	2300      	movs	r3, #0
   12912:	7861      	ldrb	r1, [r4, #1]
   12914:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12918:	f104 0801 	add.w	r8, r4, #1
   1291c:	9306      	str	r3, [sp, #24]
   1291e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12922:	461e      	mov	r6, r3
   12924:	242b      	movs	r4, #43	; 0x2b
   12926:	f108 0801 	add.w	r8, r8, #1
   1292a:	f1a1 0320 	sub.w	r3, r1, #32
   1292e:	2b5a      	cmp	r3, #90	; 0x5a
   12930:	f200 8178 	bhi.w	12c24 <_vfiprintf_r+0x3e4>
   12934:	e8df f013 	tbh	[pc, r3, lsl #1]
   12938:	017602b5 	.word	0x017602b5
   1293c:	02b00176 	.word	0x02b00176
   12940:	01760176 	.word	0x01760176
   12944:	006a0176 	.word	0x006a0176
   12948:	01760176 	.word	0x01760176
   1294c:	028d027d 	.word	0x028d027d
   12950:	02880176 	.word	0x02880176
   12954:	01760297 	.word	0x01760297
   12958:	005b0292 	.word	0x005b0292
   1295c:	005b005b 	.word	0x005b005b
   12960:	005b005b 	.word	0x005b005b
   12964:	005b005b 	.word	0x005b005b
   12968:	005b005b 	.word	0x005b005b
   1296c:	01760176 	.word	0x01760176
   12970:	01760176 	.word	0x01760176
   12974:	01760176 	.word	0x01760176
   12978:	01760176 	.word	0x01760176
   1297c:	025c0176 	.word	0x025c0176
   12980:	01760084 	.word	0x01760084
   12984:	01760176 	.word	0x01760176
   12988:	01760176 	.word	0x01760176
   1298c:	01760176 	.word	0x01760176
   12990:	01760176 	.word	0x01760176
   12994:	00e80176 	.word	0x00e80176
   12998:	01760176 	.word	0x01760176
   1299c:	02330176 	.word	0x02330176
   129a0:	02da0176 	.word	0x02da0176
   129a4:	01760176 	.word	0x01760176
   129a8:	0176058b 	.word	0x0176058b
   129ac:	01760176 	.word	0x01760176
   129b0:	01760176 	.word	0x01760176
   129b4:	01760176 	.word	0x01760176
   129b8:	01760176 	.word	0x01760176
   129bc:	025c0176 	.word	0x025c0176
   129c0:	01760086 	.word	0x01760086
   129c4:	01760176 	.word	0x01760176
   129c8:	008602cd 	.word	0x008602cd
   129cc:	0176007f 	.word	0x0176007f
   129d0:	017602c0 	.word	0x017602c0
   129d4:	00ea02fd 	.word	0x00ea02fd
   129d8:	007f02ed 	.word	0x007f02ed
   129dc:	02330176 	.word	0x02330176
   129e0:	0569007c 	.word	0x0569007c
   129e4:	01760176 	.word	0x01760176
   129e8:	0176056b 	.word	0x0176056b
   129ec:	007c      	.short	0x007c
   129ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   129f2:	2200      	movs	r2, #0
   129f4:	f818 1b01 	ldrb.w	r1, [r8], #1
   129f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   129fc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12a00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12a04:	2b09      	cmp	r3, #9
   12a06:	d9f5      	bls.n	129f4 <_vfiprintf_r+0x1b4>
   12a08:	9206      	str	r2, [sp, #24]
   12a0a:	e78e      	b.n	1292a <_vfiprintf_r+0xea>
   12a0c:	4658      	mov	r0, fp
   12a0e:	f000 ffef 	bl	139f0 <_localeconv_r>
   12a12:	6843      	ldr	r3, [r0, #4]
   12a14:	930d      	str	r3, [sp, #52]	; 0x34
   12a16:	4618      	mov	r0, r3
   12a18:	f7ff fa72 	bl	11f00 <strlen>
   12a1c:	900e      	str	r0, [sp, #56]	; 0x38
   12a1e:	4605      	mov	r5, r0
   12a20:	4658      	mov	r0, fp
   12a22:	f000 ffe5 	bl	139f0 <_localeconv_r>
   12a26:	6883      	ldr	r3, [r0, #8]
   12a28:	930b      	str	r3, [sp, #44]	; 0x2c
   12a2a:	2d00      	cmp	r5, #0
   12a2c:	f040 84d6 	bne.w	133dc <_vfiprintf_r+0xb9c>
   12a30:	f898 1000 	ldrb.w	r1, [r8]
   12a34:	e777      	b.n	12926 <_vfiprintf_r+0xe6>
   12a36:	f898 1000 	ldrb.w	r1, [r8]
   12a3a:	f046 0620 	orr.w	r6, r6, #32
   12a3e:	e772      	b.n	12926 <_vfiprintf_r+0xe6>
   12a40:	f046 0610 	orr.w	r6, r6, #16
   12a44:	06b4      	lsls	r4, r6, #26
   12a46:	f140 818e 	bpl.w	12d66 <_vfiprintf_r+0x526>
   12a4a:	9b07      	ldr	r3, [sp, #28]
   12a4c:	3307      	adds	r3, #7
   12a4e:	f023 0307 	bic.w	r3, r3, #7
   12a52:	461a      	mov	r2, r3
   12a54:	6859      	ldr	r1, [r3, #4]
   12a56:	f852 3b08 	ldr.w	r3, [r2], #8
   12a5a:	9207      	str	r2, [sp, #28]
   12a5c:	460a      	mov	r2, r1
   12a5e:	2900      	cmp	r1, #0
   12a60:	f2c0 8470 	blt.w	13344 <_vfiprintf_r+0xb04>
   12a64:	1c79      	adds	r1, r7, #1
   12a66:	f000 85a2 	beq.w	135ae <_vfiprintf_r+0xd6e>
   12a6a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12a6e:	9103      	str	r1, [sp, #12]
   12a70:	ea53 0102 	orrs.w	r1, r3, r2
   12a74:	f000 843f 	beq.w	132f6 <_vfiprintf_r+0xab6>
   12a78:	2b0a      	cmp	r3, #10
   12a7a:	f172 0100 	sbcs.w	r1, r2, #0
   12a7e:	f080 8541 	bcs.w	13504 <_vfiprintf_r+0xcc4>
   12a82:	3330      	adds	r3, #48	; 0x30
   12a84:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a88:	9e03      	ldr	r6, [sp, #12]
   12a8a:	2301      	movs	r3, #1
   12a8c:	9304      	str	r3, [sp, #16]
   12a8e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12a92:	9b04      	ldr	r3, [sp, #16]
   12a94:	42bb      	cmp	r3, r7
   12a96:	bfb8      	it	lt
   12a98:	463b      	movlt	r3, r7
   12a9a:	9303      	str	r3, [sp, #12]
   12a9c:	2300      	movs	r3, #0
   12a9e:	9308      	str	r3, [sp, #32]
   12aa0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	f000 80cb 	beq.w	12c40 <_vfiprintf_r+0x400>
   12aaa:	9b03      	ldr	r3, [sp, #12]
   12aac:	3301      	adds	r3, #1
   12aae:	9303      	str	r3, [sp, #12]
   12ab0:	e0c6      	b.n	12c40 <_vfiprintf_r+0x400>
   12ab2:	ee18 1a10 	vmov	r1, s16
   12ab6:	4658      	mov	r0, fp
   12ab8:	ee18 5a10 	vmov	r5, s16
   12abc:	f001 f800 	bl	13ac0 <__swsetup_r>
   12ac0:	2800      	cmp	r0, #0
   12ac2:	f040 8652 	bne.w	1376a <_vfiprintf_r+0xf2a>
   12ac6:	89aa      	ldrh	r2, [r5, #12]
   12ac8:	f002 031a 	and.w	r3, r2, #26
   12acc:	2b0a      	cmp	r3, #10
   12ace:	f47f aef6 	bne.w	128be <_vfiprintf_r+0x7e>
   12ad2:	ee18 1a10 	vmov	r1, s16
   12ad6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12ada:	2b00      	cmp	r3, #0
   12adc:	f6ff aeef 	blt.w	128be <_vfiprintf_r+0x7e>
   12ae0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12ae2:	07db      	lsls	r3, r3, #31
   12ae4:	d402      	bmi.n	12aec <_vfiprintf_r+0x2ac>
   12ae6:	0597      	lsls	r7, r2, #22
   12ae8:	f140 8612 	bpl.w	13710 <_vfiprintf_r+0xed0>
   12aec:	ee18 1a10 	vmov	r1, s16
   12af0:	4623      	mov	r3, r4
   12af2:	4632      	mov	r2, r6
   12af4:	4658      	mov	r0, fp
   12af6:	f000 fe69 	bl	137cc <__sbprintf>
   12afa:	9005      	str	r0, [sp, #20]
   12afc:	9805      	ldr	r0, [sp, #20]
   12afe:	b045      	add	sp, #276	; 0x114
   12b00:	ecbd 8b02 	vpop	{d8}
   12b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b08:	f046 0610 	orr.w	r6, r6, #16
   12b0c:	f016 0220 	ands.w	r2, r6, #32
   12b10:	f000 8136 	beq.w	12d80 <_vfiprintf_r+0x540>
   12b14:	9b07      	ldr	r3, [sp, #28]
   12b16:	3307      	adds	r3, #7
   12b18:	f023 0307 	bic.w	r3, r3, #7
   12b1c:	4619      	mov	r1, r3
   12b1e:	685a      	ldr	r2, [r3, #4]
   12b20:	f851 3b08 	ldr.w	r3, [r1], #8
   12b24:	9107      	str	r1, [sp, #28]
   12b26:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12b2a:	9103      	str	r1, [sp, #12]
   12b2c:	2100      	movs	r1, #0
   12b2e:	2000      	movs	r0, #0
   12b30:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12b34:	1c78      	adds	r0, r7, #1
   12b36:	f000 8210 	beq.w	12f5a <_vfiprintf_r+0x71a>
   12b3a:	9803      	ldr	r0, [sp, #12]
   12b3c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12b40:	ea53 0002 	orrs.w	r0, r3, r2
   12b44:	f040 8208 	bne.w	12f58 <_vfiprintf_r+0x718>
   12b48:	2f00      	cmp	r7, #0
   12b4a:	f040 8538 	bne.w	135be <_vfiprintf_r+0xd7e>
   12b4e:	2900      	cmp	r1, #0
   12b50:	f040 83d5 	bne.w	132fe <_vfiprintf_r+0xabe>
   12b54:	9b03      	ldr	r3, [sp, #12]
   12b56:	f013 0301 	ands.w	r3, r3, #1
   12b5a:	9304      	str	r3, [sp, #16]
   12b5c:	f000 8411 	beq.w	13382 <_vfiprintf_r+0xb42>
   12b60:	2330      	movs	r3, #48	; 0x30
   12b62:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12b66:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12b6a:	e792      	b.n	12a92 <_vfiprintf_r+0x252>
   12b6c:	2208      	movs	r2, #8
   12b6e:	2100      	movs	r1, #0
   12b70:	4650      	mov	r0, sl
   12b72:	f7fe fb9f 	bl	112b4 <memset>
   12b76:	2301      	movs	r3, #1
   12b78:	441c      	add	r4, r3
   12b7a:	e6ad      	b.n	128d8 <_vfiprintf_r+0x98>
   12b7c:	200031f0 	.word	0x200031f0
   12b80:	ebb4 0608 	subs.w	r6, r4, r8
   12b84:	4605      	mov	r5, r0
   12b86:	d01b      	beq.n	12bc0 <_vfiprintf_r+0x380>
   12b88:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12b8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12b8c:	3301      	adds	r3, #1
   12b8e:	4432      	add	r2, r6
   12b90:	2b07      	cmp	r3, #7
   12b92:	e9c9 8600 	strd	r8, r6, [r9]
   12b96:	921a      	str	r2, [sp, #104]	; 0x68
   12b98:	9319      	str	r3, [sp, #100]	; 0x64
   12b9a:	dd1c      	ble.n	12bd6 <_vfiprintf_r+0x396>
   12b9c:	2a00      	cmp	r2, #0
   12b9e:	f000 83a6 	beq.w	132ee <_vfiprintf_r+0xaae>
   12ba2:	ee18 1a10 	vmov	r1, s16
   12ba6:	aa18      	add	r2, sp, #96	; 0x60
   12ba8:	4658      	mov	r0, fp
   12baa:	f7ff fe0d 	bl	127c8 <__sprint_r.part.0>
   12bae:	bb20      	cbnz	r0, 12bfa <_vfiprintf_r+0x3ba>
   12bb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bb4:	9b05      	ldr	r3, [sp, #20]
   12bb6:	4433      	add	r3, r6
   12bb8:	9305      	str	r3, [sp, #20]
   12bba:	2d00      	cmp	r5, #0
   12bbc:	f47f aea8 	bne.w	12910 <_vfiprintf_r+0xd0>
   12bc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	f040 85c1 	bne.w	1374a <_vfiprintf_r+0xf0a>
   12bc8:	ee18 3a10 	vmov	r3, s16
   12bcc:	2200      	movs	r2, #0
   12bce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12bd2:	9219      	str	r2, [sp, #100]	; 0x64
   12bd4:	e015      	b.n	12c02 <_vfiprintf_r+0x3c2>
   12bd6:	f109 0908 	add.w	r9, r9, #8
   12bda:	e7eb      	b.n	12bb4 <_vfiprintf_r+0x374>
   12bdc:	ee18 1a10 	vmov	r1, s16
   12be0:	aa18      	add	r2, sp, #96	; 0x60
   12be2:	4658      	mov	r0, fp
   12be4:	f7ff fdf0 	bl	127c8 <__sprint_r.part.0>
   12be8:	2800      	cmp	r0, #0
   12bea:	f000 80a6 	beq.w	12d3a <_vfiprintf_r+0x4fa>
   12bee:	9b08      	ldr	r3, [sp, #32]
   12bf0:	b11b      	cbz	r3, 12bfa <_vfiprintf_r+0x3ba>
   12bf2:	9908      	ldr	r1, [sp, #32]
   12bf4:	4658      	mov	r0, fp
   12bf6:	f7ff fc2d 	bl	12454 <_free_r>
   12bfa:	ee18 3a10 	vmov	r3, s16
   12bfe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12c02:	ee18 2a10 	vmov	r2, s16
   12c06:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12c08:	f012 0f01 	tst.w	r2, #1
   12c0c:	b29a      	uxth	r2, r3
   12c0e:	f000 80a0 	beq.w	12d52 <_vfiprintf_r+0x512>
   12c12:	0650      	lsls	r0, r2, #25
   12c14:	f100 85b2 	bmi.w	1377c <_vfiprintf_r+0xf3c>
   12c18:	9805      	ldr	r0, [sp, #20]
   12c1a:	b045      	add	sp, #276	; 0x114
   12c1c:	ecbd 8b02 	vpop	{d8}
   12c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c24:	2900      	cmp	r1, #0
   12c26:	d0cb      	beq.n	12bc0 <_vfiprintf_r+0x380>
   12c28:	2300      	movs	r3, #0
   12c2a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c2e:	2301      	movs	r3, #1
   12c30:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12c34:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12c38:	ac2b      	add	r4, sp, #172	; 0xac
   12c3a:	2300      	movs	r3, #0
   12c3c:	9308      	str	r3, [sp, #32]
   12c3e:	461f      	mov	r7, r3
   12c40:	f016 0302 	ands.w	r3, r6, #2
   12c44:	9309      	str	r3, [sp, #36]	; 0x24
   12c46:	d002      	beq.n	12c4e <_vfiprintf_r+0x40e>
   12c48:	9b03      	ldr	r3, [sp, #12]
   12c4a:	3302      	adds	r3, #2
   12c4c:	9303      	str	r3, [sp, #12]
   12c4e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12c52:	930a      	str	r3, [sp, #40]	; 0x28
   12c54:	d105      	bne.n	12c62 <_vfiprintf_r+0x422>
   12c56:	9b06      	ldr	r3, [sp, #24]
   12c58:	9a03      	ldr	r2, [sp, #12]
   12c5a:	1a9d      	subs	r5, r3, r2
   12c5c:	2d00      	cmp	r5, #0
   12c5e:	f300 827b 	bgt.w	13158 <_vfiprintf_r+0x918>
   12c62:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c66:	1c41      	adds	r1, r0, #1
   12c68:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12c6c:	b182      	cbz	r2, 12c90 <_vfiprintf_r+0x450>
   12c6e:	2201      	movs	r2, #1
   12c70:	3301      	adds	r3, #1
   12c72:	f8c9 2004 	str.w	r2, [r9, #4]
   12c76:	2907      	cmp	r1, #7
   12c78:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12c7c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12c80:	f8c9 2000 	str.w	r2, [r9]
   12c84:	f300 824a 	bgt.w	1311c <_vfiprintf_r+0x8dc>
   12c88:	4608      	mov	r0, r1
   12c8a:	f109 0908 	add.w	r9, r9, #8
   12c8e:	3101      	adds	r1, #1
   12c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c92:	b1e2      	cbz	r2, 12cce <_vfiprintf_r+0x48e>
   12c94:	aa11      	add	r2, sp, #68	; 0x44
   12c96:	3302      	adds	r3, #2
   12c98:	f8c9 2000 	str.w	r2, [r9]
   12c9c:	2907      	cmp	r1, #7
   12c9e:	f04f 0202 	mov.w	r2, #2
   12ca2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12ca6:	f8c9 2004 	str.w	r2, [r9, #4]
   12caa:	f340 8250 	ble.w	1314e <_vfiprintf_r+0x90e>
   12cae:	2b00      	cmp	r3, #0
   12cb0:	f000 8343 	beq.w	1333a <_vfiprintf_r+0xafa>
   12cb4:	ee18 1a10 	vmov	r1, s16
   12cb8:	aa18      	add	r2, sp, #96	; 0x60
   12cba:	4658      	mov	r0, fp
   12cbc:	f7ff fd84 	bl	127c8 <__sprint_r.part.0>
   12cc0:	2800      	cmp	r0, #0
   12cc2:	d194      	bne.n	12bee <_vfiprintf_r+0x3ae>
   12cc4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12cc8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ccc:	1c41      	adds	r1, r0, #1
   12cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12cd0:	2a80      	cmp	r2, #128	; 0x80
   12cd2:	f000 8184 	beq.w	12fde <_vfiprintf_r+0x79e>
   12cd6:	9a04      	ldr	r2, [sp, #16]
   12cd8:	1abd      	subs	r5, r7, r2
   12cda:	2d00      	cmp	r5, #0
   12cdc:	f300 81d7 	bgt.w	1308e <_vfiprintf_r+0x84e>
   12ce0:	9a04      	ldr	r2, [sp, #16]
   12ce2:	f8c9 4000 	str.w	r4, [r9]
   12ce6:	4413      	add	r3, r2
   12ce8:	2907      	cmp	r1, #7
   12cea:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12cee:	f8c9 2004 	str.w	r2, [r9, #4]
   12cf2:	f340 816e 	ble.w	12fd2 <_vfiprintf_r+0x792>
   12cf6:	2b00      	cmp	r3, #0
   12cf8:	f000 8275 	beq.w	131e6 <_vfiprintf_r+0x9a6>
   12cfc:	ee18 1a10 	vmov	r1, s16
   12d00:	aa18      	add	r2, sp, #96	; 0x60
   12d02:	4658      	mov	r0, fp
   12d04:	f7ff fd60 	bl	127c8 <__sprint_r.part.0>
   12d08:	2800      	cmp	r0, #0
   12d0a:	f47f af70 	bne.w	12bee <_vfiprintf_r+0x3ae>
   12d0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12d10:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d14:	0775      	lsls	r5, r6, #29
   12d16:	d505      	bpl.n	12d24 <_vfiprintf_r+0x4e4>
   12d18:	9a06      	ldr	r2, [sp, #24]
   12d1a:	9903      	ldr	r1, [sp, #12]
   12d1c:	1a54      	subs	r4, r2, r1
   12d1e:	2c00      	cmp	r4, #0
   12d20:	f300 826b 	bgt.w	131fa <_vfiprintf_r+0x9ba>
   12d24:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12d28:	9803      	ldr	r0, [sp, #12]
   12d2a:	4281      	cmp	r1, r0
   12d2c:	bfac      	ite	ge
   12d2e:	1852      	addge	r2, r2, r1
   12d30:	1812      	addlt	r2, r2, r0
   12d32:	9205      	str	r2, [sp, #20]
   12d34:	2b00      	cmp	r3, #0
   12d36:	f47f af51 	bne.w	12bdc <_vfiprintf_r+0x39c>
   12d3a:	9908      	ldr	r1, [sp, #32]
   12d3c:	2300      	movs	r3, #0
   12d3e:	9319      	str	r3, [sp, #100]	; 0x64
   12d40:	2900      	cmp	r1, #0
   12d42:	f000 8149 	beq.w	12fd8 <_vfiprintf_r+0x798>
   12d46:	4658      	mov	r0, fp
   12d48:	f7ff fb84 	bl	12454 <_free_r>
   12d4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d50:	e5c1      	b.n	128d6 <_vfiprintf_r+0x96>
   12d52:	059c      	lsls	r4, r3, #22
   12d54:	f53f af5d 	bmi.w	12c12 <_vfiprintf_r+0x3d2>
   12d58:	ee18 4a10 	vmov	r4, s16
   12d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12d5e:	f7fe fb31 	bl	113c4 <__retarget_lock_release_recursive>
   12d62:	89a2      	ldrh	r2, [r4, #12]
   12d64:	e755      	b.n	12c12 <_vfiprintf_r+0x3d2>
   12d66:	06f0      	lsls	r0, r6, #27
   12d68:	9a07      	ldr	r2, [sp, #28]
   12d6a:	f100 831f 	bmi.w	133ac <_vfiprintf_r+0xb6c>
   12d6e:	0671      	lsls	r1, r6, #25
   12d70:	f140 8319 	bpl.w	133a6 <_vfiprintf_r+0xb66>
   12d74:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12d78:	9207      	str	r2, [sp, #28]
   12d7a:	17da      	asrs	r2, r3, #31
   12d7c:	4611      	mov	r1, r2
   12d7e:	e66e      	b.n	12a5e <_vfiprintf_r+0x21e>
   12d80:	f016 0310 	ands.w	r3, r6, #16
   12d84:	9907      	ldr	r1, [sp, #28]
   12d86:	f040 8309 	bne.w	1339c <_vfiprintf_r+0xb5c>
   12d8a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12d8e:	f000 8301 	beq.w	13394 <_vfiprintf_r+0xb54>
   12d92:	461a      	mov	r2, r3
   12d94:	f851 3b04 	ldr.w	r3, [r1], #4
   12d98:	9107      	str	r1, [sp, #28]
   12d9a:	b29b      	uxth	r3, r3
   12d9c:	e6c3      	b.n	12b26 <_vfiprintf_r+0x2e6>
   12d9e:	9b07      	ldr	r3, [sp, #28]
   12da0:	461a      	mov	r2, r3
   12da2:	2300      	movs	r3, #0
   12da4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12da8:	4613      	mov	r3, r2
   12daa:	f853 4b04 	ldr.w	r4, [r3], #4
   12dae:	9303      	str	r3, [sp, #12]
   12db0:	2c00      	cmp	r4, #0
   12db2:	f000 8412 	beq.w	135da <_vfiprintf_r+0xd9a>
   12db6:	2953      	cmp	r1, #83	; 0x53
   12db8:	f000 8365 	beq.w	13486 <_vfiprintf_r+0xc46>
   12dbc:	f016 0510 	ands.w	r5, r6, #16
   12dc0:	f040 8361 	bne.w	13486 <_vfiprintf_r+0xc46>
   12dc4:	1c7b      	adds	r3, r7, #1
   12dc6:	f000 84b3 	beq.w	13730 <_vfiprintf_r+0xef0>
   12dca:	463a      	mov	r2, r7
   12dcc:	4629      	mov	r1, r5
   12dce:	4620      	mov	r0, r4
   12dd0:	f7ff f82e 	bl	11e30 <memchr>
   12dd4:	9008      	str	r0, [sp, #32]
   12dd6:	2800      	cmp	r0, #0
   12dd8:	f000 849f 	beq.w	1371a <_vfiprintf_r+0xeda>
   12ddc:	1b03      	subs	r3, r0, r4
   12dde:	9a03      	ldr	r2, [sp, #12]
   12de0:	9304      	str	r3, [sp, #16]
   12de2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12de6:	462f      	mov	r7, r5
   12de8:	9207      	str	r2, [sp, #28]
   12dea:	9303      	str	r3, [sp, #12]
   12dec:	9508      	str	r5, [sp, #32]
   12dee:	e657      	b.n	12aa0 <_vfiprintf_r+0x260>
   12df0:	2943      	cmp	r1, #67	; 0x43
   12df2:	d002      	beq.n	12dfa <_vfiprintf_r+0x5ba>
   12df4:	06f5      	lsls	r5, r6, #27
   12df6:	f140 832d 	bpl.w	13454 <_vfiprintf_r+0xc14>
   12dfa:	9d07      	ldr	r5, [sp, #28]
   12dfc:	2208      	movs	r2, #8
   12dfe:	2100      	movs	r1, #0
   12e00:	a816      	add	r0, sp, #88	; 0x58
   12e02:	ac2b      	add	r4, sp, #172	; 0xac
   12e04:	f7fe fa56 	bl	112b4 <memset>
   12e08:	ab16      	add	r3, sp, #88	; 0x58
   12e0a:	f855 2b04 	ldr.w	r2, [r5], #4
   12e0e:	4621      	mov	r1, r4
   12e10:	4658      	mov	r0, fp
   12e12:	f000 fdc7 	bl	139a4 <_wcrtomb_r>
   12e16:	4603      	mov	r3, r0
   12e18:	3301      	adds	r3, #1
   12e1a:	9004      	str	r0, [sp, #16]
   12e1c:	f000 84b3 	beq.w	13786 <_vfiprintf_r+0xf46>
   12e20:	9b04      	ldr	r3, [sp, #16]
   12e22:	9507      	str	r5, [sp, #28]
   12e24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12e28:	9303      	str	r3, [sp, #12]
   12e2a:	2300      	movs	r3, #0
   12e2c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e30:	e703      	b.n	12c3a <_vfiprintf_r+0x3fa>
   12e32:	9b07      	ldr	r3, [sp, #28]
   12e34:	f853 2b04 	ldr.w	r2, [r3], #4
   12e38:	9206      	str	r2, [sp, #24]
   12e3a:	2a00      	cmp	r2, #0
   12e3c:	f280 829c 	bge.w	13378 <_vfiprintf_r+0xb38>
   12e40:	9a06      	ldr	r2, [sp, #24]
   12e42:	4252      	negs	r2, r2
   12e44:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12e48:	f898 1000 	ldrb.w	r1, [r8]
   12e4c:	f046 0604 	orr.w	r6, r6, #4
   12e50:	e569      	b.n	12926 <_vfiprintf_r+0xe6>
   12e52:	f898 1000 	ldrb.w	r1, [r8]
   12e56:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12e5a:	e564      	b.n	12926 <_vfiprintf_r+0xe6>
   12e5c:	f898 1000 	ldrb.w	r1, [r8]
   12e60:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12e64:	e55f      	b.n	12926 <_vfiprintf_r+0xe6>
   12e66:	4642      	mov	r2, r8
   12e68:	f812 1b01 	ldrb.w	r1, [r2], #1
   12e6c:	292a      	cmp	r1, #42	; 0x2a
   12e6e:	f000 8496 	beq.w	1379e <_vfiprintf_r+0xf5e>
   12e72:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e76:	2b09      	cmp	r3, #9
   12e78:	4690      	mov	r8, r2
   12e7a:	f04f 0700 	mov.w	r7, #0
   12e7e:	f63f ad54 	bhi.w	1292a <_vfiprintf_r+0xea>
   12e82:	f818 1b01 	ldrb.w	r1, [r8], #1
   12e86:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12e8a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12e8e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12e92:	2b09      	cmp	r3, #9
   12e94:	d9f5      	bls.n	12e82 <_vfiprintf_r+0x642>
   12e96:	e548      	b.n	1292a <_vfiprintf_r+0xea>
   12e98:	f898 1000 	ldrb.w	r1, [r8]
   12e9c:	f046 0601 	orr.w	r6, r6, #1
   12ea0:	e541      	b.n	12926 <_vfiprintf_r+0xe6>
   12ea2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	f47f adc2 	bne.w	12a30 <_vfiprintf_r+0x1f0>
   12eac:	2320      	movs	r3, #32
   12eae:	f898 1000 	ldrb.w	r1, [r8]
   12eb2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12eb6:	e536      	b.n	12926 <_vfiprintf_r+0xe6>
   12eb8:	f898 1000 	ldrb.w	r1, [r8]
   12ebc:	296c      	cmp	r1, #108	; 0x6c
   12ebe:	bf03      	ittte	eq
   12ec0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12ec4:	f046 0620 	orreq.w	r6, r6, #32
   12ec8:	f108 0801 	addeq.w	r8, r8, #1
   12ecc:	f046 0610 	orrne.w	r6, r6, #16
   12ed0:	e529      	b.n	12926 <_vfiprintf_r+0xe6>
   12ed2:	f898 1000 	ldrb.w	r1, [r8]
   12ed6:	2968      	cmp	r1, #104	; 0x68
   12ed8:	bf03      	ittte	eq
   12eda:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12ede:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12ee2:	f108 0801 	addeq.w	r8, r8, #1
   12ee6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12eea:	e51c      	b.n	12926 <_vfiprintf_r+0xe6>
   12eec:	f046 0310 	orr.w	r3, r6, #16
   12ef0:	9303      	str	r3, [sp, #12]
   12ef2:	9b03      	ldr	r3, [sp, #12]
   12ef4:	f013 0220 	ands.w	r2, r3, #32
   12ef8:	f000 8206 	beq.w	13308 <_vfiprintf_r+0xac8>
   12efc:	9b07      	ldr	r3, [sp, #28]
   12efe:	3307      	adds	r3, #7
   12f00:	f023 0307 	bic.w	r3, r3, #7
   12f04:	4619      	mov	r1, r3
   12f06:	685a      	ldr	r2, [r3, #4]
   12f08:	f851 3b08 	ldr.w	r3, [r1], #8
   12f0c:	9107      	str	r1, [sp, #28]
   12f0e:	2101      	movs	r1, #1
   12f10:	e60d      	b.n	12b2e <_vfiprintf_r+0x2ee>
   12f12:	9a07      	ldr	r2, [sp, #28]
   12f14:	f046 0302 	orr.w	r3, r6, #2
   12f18:	9303      	str	r3, [sp, #12]
   12f1a:	f852 3b04 	ldr.w	r3, [r2], #4
   12f1e:	9207      	str	r2, [sp, #28]
   12f20:	f647 0230 	movw	r2, #30768	; 0x7830
   12f24:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12f28:	4ab8      	ldr	r2, [pc, #736]	; (1320c <_vfiprintf_r+0x9cc>)
   12f2a:	920c      	str	r2, [sp, #48]	; 0x30
   12f2c:	2102      	movs	r1, #2
   12f2e:	2200      	movs	r2, #0
   12f30:	e5fd      	b.n	12b2e <_vfiprintf_r+0x2ee>
   12f32:	06b7      	lsls	r7, r6, #26
   12f34:	f100 8248 	bmi.w	133c8 <_vfiprintf_r+0xb88>
   12f38:	06f5      	lsls	r5, r6, #27
   12f3a:	f100 8346 	bmi.w	135ca <_vfiprintf_r+0xd8a>
   12f3e:	0674      	lsls	r4, r6, #25
   12f40:	f100 83d5 	bmi.w	136ee <_vfiprintf_r+0xeae>
   12f44:	05b0      	lsls	r0, r6, #22
   12f46:	f140 8340 	bpl.w	135ca <_vfiprintf_r+0xd8a>
   12f4a:	9b07      	ldr	r3, [sp, #28]
   12f4c:	9905      	ldr	r1, [sp, #20]
   12f4e:	f853 2b04 	ldr.w	r2, [r3], #4
   12f52:	9307      	str	r3, [sp, #28]
   12f54:	7011      	strb	r1, [r2, #0]
   12f56:	e4be      	b.n	128d6 <_vfiprintf_r+0x96>
   12f58:	9603      	str	r6, [sp, #12]
   12f5a:	2901      	cmp	r1, #1
   12f5c:	f43f ad8c 	beq.w	12a78 <_vfiprintf_r+0x238>
   12f60:	2902      	cmp	r1, #2
   12f62:	ac44      	add	r4, sp, #272	; 0x110
   12f64:	d111      	bne.n	12f8a <_vfiprintf_r+0x74a>
   12f66:	980c      	ldr	r0, [sp, #48]	; 0x30
   12f68:	f003 010f 	and.w	r1, r3, #15
   12f6c:	091b      	lsrs	r3, r3, #4
   12f6e:	5c41      	ldrb	r1, [r0, r1]
   12f70:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12f74:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12f78:	0912      	lsrs	r2, r2, #4
   12f7a:	ea53 0102 	orrs.w	r1, r3, r2
   12f7e:	d1f3      	bne.n	12f68 <_vfiprintf_r+0x728>
   12f80:	9e03      	ldr	r6, [sp, #12]
   12f82:	ab44      	add	r3, sp, #272	; 0x110
   12f84:	1b1b      	subs	r3, r3, r4
   12f86:	9304      	str	r3, [sp, #16]
   12f88:	e583      	b.n	12a92 <_vfiprintf_r+0x252>
   12f8a:	f003 0107 	and.w	r1, r3, #7
   12f8e:	08db      	lsrs	r3, r3, #3
   12f90:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12f94:	08d2      	lsrs	r2, r2, #3
   12f96:	3130      	adds	r1, #48	; 0x30
   12f98:	ea53 0502 	orrs.w	r5, r3, r2
   12f9c:	4620      	mov	r0, r4
   12f9e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12fa2:	d1f2      	bne.n	12f8a <_vfiprintf_r+0x74a>
   12fa4:	9e03      	ldr	r6, [sp, #12]
   12fa6:	07f3      	lsls	r3, r6, #31
   12fa8:	d5eb      	bpl.n	12f82 <_vfiprintf_r+0x742>
   12faa:	2930      	cmp	r1, #48	; 0x30
   12fac:	d0e8      	beq.n	12f80 <_vfiprintf_r+0x740>
   12fae:	2330      	movs	r3, #48	; 0x30
   12fb0:	3802      	subs	r0, #2
   12fb2:	f804 3c01 	strb.w	r3, [r4, #-1]
   12fb6:	ab44      	add	r3, sp, #272	; 0x110
   12fb8:	1a1b      	subs	r3, r3, r0
   12fba:	9e03      	ldr	r6, [sp, #12]
   12fbc:	9304      	str	r3, [sp, #16]
   12fbe:	4604      	mov	r4, r0
   12fc0:	e567      	b.n	12a92 <_vfiprintf_r+0x252>
   12fc2:	9b04      	ldr	r3, [sp, #16]
   12fc4:	941b      	str	r4, [sp, #108]	; 0x6c
   12fc6:	2201      	movs	r2, #1
   12fc8:	931c      	str	r3, [sp, #112]	; 0x70
   12fca:	931a      	str	r3, [sp, #104]	; 0x68
   12fcc:	9219      	str	r2, [sp, #100]	; 0x64
   12fce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fd2:	f109 0908 	add.w	r9, r9, #8
   12fd6:	e69d      	b.n	12d14 <_vfiprintf_r+0x4d4>
   12fd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fdc:	e47b      	b.n	128d6 <_vfiprintf_r+0x96>
   12fde:	9a06      	ldr	r2, [sp, #24]
   12fe0:	9d03      	ldr	r5, [sp, #12]
   12fe2:	1b55      	subs	r5, r2, r5
   12fe4:	2d00      	cmp	r5, #0
   12fe6:	f77f ae76 	ble.w	12cd6 <_vfiprintf_r+0x496>
   12fea:	2d10      	cmp	r5, #16
   12fec:	f340 83bb 	ble.w	13766 <_vfiprintf_r+0xf26>
   12ff0:	9409      	str	r4, [sp, #36]	; 0x24
   12ff2:	ee18 4a10 	vmov	r4, s16
   12ff6:	e007      	b.n	13008 <_vfiprintf_r+0x7c8>
   12ff8:	f100 0c02 	add.w	ip, r0, #2
   12ffc:	f109 0908 	add.w	r9, r9, #8
   13000:	4610      	mov	r0, r2
   13002:	3d10      	subs	r5, #16
   13004:	2d10      	cmp	r5, #16
   13006:	dd1e      	ble.n	13046 <_vfiprintf_r+0x806>
   13008:	4981      	ldr	r1, [pc, #516]	; (13210 <_vfiprintf_r+0x9d0>)
   1300a:	f8c9 1000 	str.w	r1, [r9]
   1300e:	1c42      	adds	r2, r0, #1
   13010:	3310      	adds	r3, #16
   13012:	2110      	movs	r1, #16
   13014:	2a07      	cmp	r2, #7
   13016:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1301a:	f8c9 1004 	str.w	r1, [r9, #4]
   1301e:	ddeb      	ble.n	12ff8 <_vfiprintf_r+0x7b8>
   13020:	aa18      	add	r2, sp, #96	; 0x60
   13022:	2b00      	cmp	r3, #0
   13024:	d074      	beq.n	13110 <_vfiprintf_r+0x8d0>
   13026:	4621      	mov	r1, r4
   13028:	4658      	mov	r0, fp
   1302a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1302e:	f7ff fbcb 	bl	127c8 <__sprint_r.part.0>
   13032:	2800      	cmp	r0, #0
   13034:	f47f addb 	bne.w	12bee <_vfiprintf_r+0x3ae>
   13038:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1303c:	3d10      	subs	r5, #16
   1303e:	2d10      	cmp	r5, #16
   13040:	f100 0c01 	add.w	ip, r0, #1
   13044:	dce0      	bgt.n	13008 <_vfiprintf_r+0x7c8>
   13046:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13048:	4a71      	ldr	r2, [pc, #452]	; (13210 <_vfiprintf_r+0x9d0>)
   1304a:	f8c9 5004 	str.w	r5, [r9, #4]
   1304e:	442b      	add	r3, r5
   13050:	f1bc 0f07 	cmp.w	ip, #7
   13054:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13058:	f8c9 2000 	str.w	r2, [r9]
   1305c:	f340 8194 	ble.w	13388 <_vfiprintf_r+0xb48>
   13060:	2b00      	cmp	r3, #0
   13062:	f000 831f 	beq.w	136a4 <_vfiprintf_r+0xe64>
   13066:	ee18 1a10 	vmov	r1, s16
   1306a:	aa18      	add	r2, sp, #96	; 0x60
   1306c:	4658      	mov	r0, fp
   1306e:	f7ff fbab 	bl	127c8 <__sprint_r.part.0>
   13072:	2800      	cmp	r0, #0
   13074:	f47f adbb 	bne.w	12bee <_vfiprintf_r+0x3ae>
   13078:	9a04      	ldr	r2, [sp, #16]
   1307a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1307e:	1abd      	subs	r5, r7, r2
   13080:	2d00      	cmp	r5, #0
   13082:	f100 0101 	add.w	r1, r0, #1
   13086:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1308a:	f77f ae29 	ble.w	12ce0 <_vfiprintf_r+0x4a0>
   1308e:	2d10      	cmp	r5, #16
   13090:	dd29      	ble.n	130e6 <_vfiprintf_r+0x8a6>
   13092:	9409      	str	r4, [sp, #36]	; 0x24
   13094:	2710      	movs	r7, #16
   13096:	ee18 4a10 	vmov	r4, s16
   1309a:	e007      	b.n	130ac <_vfiprintf_r+0x86c>
   1309c:	f100 0c02 	add.w	ip, r0, #2
   130a0:	f109 0908 	add.w	r9, r9, #8
   130a4:	4610      	mov	r0, r2
   130a6:	3d10      	subs	r5, #16
   130a8:	2d10      	cmp	r5, #16
   130aa:	dd1a      	ble.n	130e2 <_vfiprintf_r+0x8a2>
   130ac:	1c42      	adds	r2, r0, #1
   130ae:	4958      	ldr	r1, [pc, #352]	; (13210 <_vfiprintf_r+0x9d0>)
   130b0:	3310      	adds	r3, #16
   130b2:	2a07      	cmp	r2, #7
   130b4:	e9c9 1700 	strd	r1, r7, [r9]
   130b8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   130bc:	ddee      	ble.n	1309c <_vfiprintf_r+0x85c>
   130be:	aa18      	add	r2, sp, #96	; 0x60
   130c0:	b303      	cbz	r3, 13104 <_vfiprintf_r+0x8c4>
   130c2:	4621      	mov	r1, r4
   130c4:	4658      	mov	r0, fp
   130c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130ca:	f7ff fb7d 	bl	127c8 <__sprint_r.part.0>
   130ce:	2800      	cmp	r0, #0
   130d0:	f47f ad8d 	bne.w	12bee <_vfiprintf_r+0x3ae>
   130d4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   130d8:	3d10      	subs	r5, #16
   130da:	2d10      	cmp	r5, #16
   130dc:	f100 0c01 	add.w	ip, r0, #1
   130e0:	dce4      	bgt.n	130ac <_vfiprintf_r+0x86c>
   130e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   130e4:	4661      	mov	r1, ip
   130e6:	4a4a      	ldr	r2, [pc, #296]	; (13210 <_vfiprintf_r+0x9d0>)
   130e8:	f8c9 5004 	str.w	r5, [r9, #4]
   130ec:	442b      	add	r3, r5
   130ee:	2907      	cmp	r1, #7
   130f0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   130f4:	f8c9 2000 	str.w	r2, [r9]
   130f8:	f300 80e7 	bgt.w	132ca <_vfiprintf_r+0xa8a>
   130fc:	f109 0908 	add.w	r9, r9, #8
   13100:	3101      	adds	r1, #1
   13102:	e5ed      	b.n	12ce0 <_vfiprintf_r+0x4a0>
   13104:	f04f 0c01 	mov.w	ip, #1
   13108:	4618      	mov	r0, r3
   1310a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1310e:	e7ca      	b.n	130a6 <_vfiprintf_r+0x866>
   13110:	f04f 0c01 	mov.w	ip, #1
   13114:	4618      	mov	r0, r3
   13116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311a:	e772      	b.n	13002 <_vfiprintf_r+0x7c2>
   1311c:	2b00      	cmp	r3, #0
   1311e:	f000 8104 	beq.w	1332a <_vfiprintf_r+0xaea>
   13122:	ee18 1a10 	vmov	r1, s16
   13126:	aa18      	add	r2, sp, #96	; 0x60
   13128:	4658      	mov	r0, fp
   1312a:	f7ff fb4d 	bl	127c8 <__sprint_r.part.0>
   1312e:	2800      	cmp	r0, #0
   13130:	f47f ad5d 	bne.w	12bee <_vfiprintf_r+0x3ae>
   13134:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13138:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1313c:	1c41      	adds	r1, r0, #1
   1313e:	e5a7      	b.n	12c90 <_vfiprintf_r+0x450>
   13140:	2302      	movs	r3, #2
   13142:	aa11      	add	r2, sp, #68	; 0x44
   13144:	931c      	str	r3, [sp, #112]	; 0x70
   13146:	921b      	str	r2, [sp, #108]	; 0x6c
   13148:	2101      	movs	r1, #1
   1314a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1314e:	4608      	mov	r0, r1
   13150:	f109 0908 	add.w	r9, r9, #8
   13154:	1c41      	adds	r1, r0, #1
   13156:	e5ba      	b.n	12cce <_vfiprintf_r+0x48e>
   13158:	2d10      	cmp	r5, #16
   1315a:	f340 82e5 	ble.w	13728 <_vfiprintf_r+0xee8>
   1315e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13162:	940f      	str	r4, [sp, #60]	; 0x3c
   13164:	4608      	mov	r0, r1
   13166:	ee18 4a10 	vmov	r4, s16
   1316a:	e007      	b.n	1317c <_vfiprintf_r+0x93c>
   1316c:	f100 0c02 	add.w	ip, r0, #2
   13170:	f109 0908 	add.w	r9, r9, #8
   13174:	4610      	mov	r0, r2
   13176:	3d10      	subs	r5, #16
   13178:	2d10      	cmp	r5, #16
   1317a:	dd1d      	ble.n	131b8 <_vfiprintf_r+0x978>
   1317c:	4925      	ldr	r1, [pc, #148]	; (13214 <_vfiprintf_r+0x9d4>)
   1317e:	f8c9 1000 	str.w	r1, [r9]
   13182:	1c42      	adds	r2, r0, #1
   13184:	3310      	adds	r3, #16
   13186:	2110      	movs	r1, #16
   13188:	2a07      	cmp	r2, #7
   1318a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1318e:	f8c9 1004 	str.w	r1, [r9, #4]
   13192:	ddeb      	ble.n	1316c <_vfiprintf_r+0x92c>
   13194:	aa18      	add	r2, sp, #96	; 0x60
   13196:	b303      	cbz	r3, 131da <_vfiprintf_r+0x99a>
   13198:	4621      	mov	r1, r4
   1319a:	4658      	mov	r0, fp
   1319c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131a0:	f7ff fb12 	bl	127c8 <__sprint_r.part.0>
   131a4:	2800      	cmp	r0, #0
   131a6:	f47f ad22 	bne.w	12bee <_vfiprintf_r+0x3ae>
   131aa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   131ae:	3d10      	subs	r5, #16
   131b0:	2d10      	cmp	r5, #16
   131b2:	f100 0c01 	add.w	ip, r0, #1
   131b6:	dce1      	bgt.n	1317c <_vfiprintf_r+0x93c>
   131b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   131ba:	4660      	mov	r0, ip
   131bc:	4a15      	ldr	r2, [pc, #84]	; (13214 <_vfiprintf_r+0x9d4>)
   131be:	f8c9 5004 	str.w	r5, [r9, #4]
   131c2:	442b      	add	r3, r5
   131c4:	2807      	cmp	r0, #7
   131c6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   131ca:	f8c9 2000 	str.w	r2, [r9]
   131ce:	f300 80c1 	bgt.w	13354 <_vfiprintf_r+0xb14>
   131d2:	f109 0908 	add.w	r9, r9, #8
   131d6:	1c41      	adds	r1, r0, #1
   131d8:	e546      	b.n	12c68 <_vfiprintf_r+0x428>
   131da:	4618      	mov	r0, r3
   131dc:	f04f 0c01 	mov.w	ip, #1
   131e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131e4:	e7c7      	b.n	13176 <_vfiprintf_r+0x936>
   131e6:	0776      	lsls	r6, r6, #29
   131e8:	9319      	str	r3, [sp, #100]	; 0x64
   131ea:	d553      	bpl.n	13294 <_vfiprintf_r+0xa54>
   131ec:	9a06      	ldr	r2, [sp, #24]
   131ee:	9903      	ldr	r1, [sp, #12]
   131f0:	1a54      	subs	r4, r2, r1
   131f2:	2c00      	cmp	r4, #0
   131f4:	dd4e      	ble.n	13294 <_vfiprintf_r+0xa54>
   131f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131fa:	2c10      	cmp	r4, #16
   131fc:	f340 82b0 	ble.w	13760 <_vfiprintf_r+0xf20>
   13200:	9919      	ldr	r1, [sp, #100]	; 0x64
   13202:	ee18 6a10 	vmov	r6, s16
   13206:	2510      	movs	r5, #16
   13208:	e00d      	b.n	13226 <_vfiprintf_r+0x9e6>
   1320a:	bf00      	nop
   1320c:	20002684 	.word	0x20002684
   13210:	20002fd8 	.word	0x20002fd8
   13214:	200026c0 	.word	0x200026c0
   13218:	1c88      	adds	r0, r1, #2
   1321a:	f109 0908 	add.w	r9, r9, #8
   1321e:	4611      	mov	r1, r2
   13220:	3c10      	subs	r4, #16
   13222:	2c10      	cmp	r4, #16
   13224:	dd1a      	ble.n	1325c <_vfiprintf_r+0xa1c>
   13226:	1c4a      	adds	r2, r1, #1
   13228:	48b3      	ldr	r0, [pc, #716]	; (134f8 <_vfiprintf_r+0xcb8>)
   1322a:	3310      	adds	r3, #16
   1322c:	2a07      	cmp	r2, #7
   1322e:	e9c9 0500 	strd	r0, r5, [r9]
   13232:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13236:	ddef      	ble.n	13218 <_vfiprintf_r+0x9d8>
   13238:	aa18      	add	r2, sp, #96	; 0x60
   1323a:	b333      	cbz	r3, 1328a <_vfiprintf_r+0xa4a>
   1323c:	4631      	mov	r1, r6
   1323e:	4658      	mov	r0, fp
   13240:	f7ff fac2 	bl	127c8 <__sprint_r.part.0>
   13244:	2800      	cmp	r0, #0
   13246:	f47f acd2 	bne.w	12bee <_vfiprintf_r+0x3ae>
   1324a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1324e:	3c10      	subs	r4, #16
   13250:	2c10      	cmp	r4, #16
   13252:	f101 0001 	add.w	r0, r1, #1
   13256:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1325a:	dce4      	bgt.n	13226 <_vfiprintf_r+0x9e6>
   1325c:	4aa6      	ldr	r2, [pc, #664]	; (134f8 <_vfiprintf_r+0xcb8>)
   1325e:	f8c9 4004 	str.w	r4, [r9, #4]
   13262:	4423      	add	r3, r4
   13264:	2807      	cmp	r0, #7
   13266:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1326a:	f8c9 2000 	str.w	r2, [r9]
   1326e:	f77f ad59 	ble.w	12d24 <_vfiprintf_r+0x4e4>
   13272:	b17b      	cbz	r3, 13294 <_vfiprintf_r+0xa54>
   13274:	ee18 1a10 	vmov	r1, s16
   13278:	aa18      	add	r2, sp, #96	; 0x60
   1327a:	4658      	mov	r0, fp
   1327c:	f7ff faa4 	bl	127c8 <__sprint_r.part.0>
   13280:	2800      	cmp	r0, #0
   13282:	f47f acb4 	bne.w	12bee <_vfiprintf_r+0x3ae>
   13286:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13288:	e54c      	b.n	12d24 <_vfiprintf_r+0x4e4>
   1328a:	2001      	movs	r0, #1
   1328c:	4619      	mov	r1, r3
   1328e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13292:	e7c5      	b.n	13220 <_vfiprintf_r+0x9e0>
   13294:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13298:	9903      	ldr	r1, [sp, #12]
   1329a:	428a      	cmp	r2, r1
   1329c:	bfac      	ite	ge
   1329e:	189b      	addge	r3, r3, r2
   132a0:	185b      	addlt	r3, r3, r1
   132a2:	9305      	str	r3, [sp, #20]
   132a4:	e549      	b.n	12d3a <_vfiprintf_r+0x4fa>
   132a6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   132aa:	058f      	lsls	r7, r1, #22
   132ac:	ee18 3a10 	vmov	r3, s16
   132b0:	b28a      	uxth	r2, r1
   132b2:	f53f aae8 	bmi.w	12886 <_vfiprintf_r+0x46>
   132b6:	ee18 5a10 	vmov	r5, s16
   132ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
   132bc:	f7fe f880 	bl	113c0 <__retarget_lock_acquire_recursive>
   132c0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   132c4:	b28a      	uxth	r2, r1
   132c6:	f7ff bade 	b.w	12886 <_vfiprintf_r+0x46>
   132ca:	2b00      	cmp	r3, #0
   132cc:	f43f ae79 	beq.w	12fc2 <_vfiprintf_r+0x782>
   132d0:	ee18 1a10 	vmov	r1, s16
   132d4:	aa18      	add	r2, sp, #96	; 0x60
   132d6:	4658      	mov	r0, fp
   132d8:	f7ff fa76 	bl	127c8 <__sprint_r.part.0>
   132dc:	2800      	cmp	r0, #0
   132de:	f47f ac86 	bne.w	12bee <_vfiprintf_r+0x3ae>
   132e2:	9919      	ldr	r1, [sp, #100]	; 0x64
   132e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   132e6:	3101      	adds	r1, #1
   132e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132ec:	e4f8      	b.n	12ce0 <_vfiprintf_r+0x4a0>
   132ee:	9219      	str	r2, [sp, #100]	; 0x64
   132f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132f4:	e45e      	b.n	12bb4 <_vfiprintf_r+0x374>
   132f6:	2f00      	cmp	r7, #0
   132f8:	f47f abc3 	bne.w	12a82 <_vfiprintf_r+0x242>
   132fc:	9e03      	ldr	r6, [sp, #12]
   132fe:	2700      	movs	r7, #0
   13300:	9704      	str	r7, [sp, #16]
   13302:	ac44      	add	r4, sp, #272	; 0x110
   13304:	f7ff bbc5 	b.w	12a92 <_vfiprintf_r+0x252>
   13308:	9b03      	ldr	r3, [sp, #12]
   1330a:	f013 0310 	ands.w	r3, r3, #16
   1330e:	d154      	bne.n	133ba <_vfiprintf_r+0xb7a>
   13310:	9a03      	ldr	r2, [sp, #12]
   13312:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13316:	f000 816b 	beq.w	135f0 <_vfiprintf_r+0xdb0>
   1331a:	9907      	ldr	r1, [sp, #28]
   1331c:	461a      	mov	r2, r3
   1331e:	f851 3b04 	ldr.w	r3, [r1], #4
   13322:	9107      	str	r1, [sp, #28]
   13324:	b29b      	uxth	r3, r3
   13326:	2101      	movs	r1, #1
   13328:	e401      	b.n	12b2e <_vfiprintf_r+0x2ee>
   1332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1332c:	2a00      	cmp	r2, #0
   1332e:	d164      	bne.n	133fa <_vfiprintf_r+0xbba>
   13330:	4618      	mov	r0, r3
   13332:	2101      	movs	r1, #1
   13334:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13338:	e4c9      	b.n	12cce <_vfiprintf_r+0x48e>
   1333a:	2101      	movs	r1, #1
   1333c:	4618      	mov	r0, r3
   1333e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13342:	e4c4      	b.n	12cce <_vfiprintf_r+0x48e>
   13344:	425b      	negs	r3, r3
   13346:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1334a:	9603      	str	r6, [sp, #12]
   1334c:	202d      	movs	r0, #45	; 0x2d
   1334e:	2101      	movs	r1, #1
   13350:	f7ff bbee 	b.w	12b30 <_vfiprintf_r+0x2f0>
   13354:	2b00      	cmp	r3, #0
   13356:	f000 8088 	beq.w	1346a <_vfiprintf_r+0xc2a>
   1335a:	ee18 1a10 	vmov	r1, s16
   1335e:	aa18      	add	r2, sp, #96	; 0x60
   13360:	4658      	mov	r0, fp
   13362:	f7ff fa31 	bl	127c8 <__sprint_r.part.0>
   13366:	2800      	cmp	r0, #0
   13368:	f47f ac41 	bne.w	12bee <_vfiprintf_r+0x3ae>
   1336c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13370:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13374:	1c41      	adds	r1, r0, #1
   13376:	e477      	b.n	12c68 <_vfiprintf_r+0x428>
   13378:	f898 1000 	ldrb.w	r1, [r8]
   1337c:	9307      	str	r3, [sp, #28]
   1337e:	f7ff bad2 	b.w	12926 <_vfiprintf_r+0xe6>
   13382:	ac44      	add	r4, sp, #272	; 0x110
   13384:	f7ff bb85 	b.w	12a92 <_vfiprintf_r+0x252>
   13388:	f109 0908 	add.w	r9, r9, #8
   1338c:	f10c 0101 	add.w	r1, ip, #1
   13390:	4660      	mov	r0, ip
   13392:	e4a0      	b.n	12cd6 <_vfiprintf_r+0x496>
   13394:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13398:	f040 8197 	bne.w	136ca <_vfiprintf_r+0xe8a>
   1339c:	f851 3b04 	ldr.w	r3, [r1], #4
   133a0:	9107      	str	r1, [sp, #28]
   133a2:	f7ff bbc0 	b.w	12b26 <_vfiprintf_r+0x2e6>
   133a6:	05b3      	lsls	r3, r6, #22
   133a8:	f100 8188 	bmi.w	136bc <_vfiprintf_r+0xe7c>
   133ac:	f852 3b04 	ldr.w	r3, [r2], #4
   133b0:	9207      	str	r2, [sp, #28]
   133b2:	17da      	asrs	r2, r3, #31
   133b4:	4611      	mov	r1, r2
   133b6:	f7ff bb52 	b.w	12a5e <_vfiprintf_r+0x21e>
   133ba:	9907      	ldr	r1, [sp, #28]
   133bc:	f851 3b04 	ldr.w	r3, [r1], #4
   133c0:	9107      	str	r1, [sp, #28]
   133c2:	2101      	movs	r1, #1
   133c4:	f7ff bbb3 	b.w	12b2e <_vfiprintf_r+0x2ee>
   133c8:	9b07      	ldr	r3, [sp, #28]
   133ca:	9805      	ldr	r0, [sp, #20]
   133cc:	f853 1b04 	ldr.w	r1, [r3], #4
   133d0:	9307      	str	r3, [sp, #28]
   133d2:	17c2      	asrs	r2, r0, #31
   133d4:	e9c1 0200 	strd	r0, r2, [r1]
   133d8:	f7ff ba7d 	b.w	128d6 <_vfiprintf_r+0x96>
   133dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   133de:	2b00      	cmp	r3, #0
   133e0:	f43f ab26 	beq.w	12a30 <_vfiprintf_r+0x1f0>
   133e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   133e6:	781b      	ldrb	r3, [r3, #0]
   133e8:	2b00      	cmp	r3, #0
   133ea:	f43f ab21 	beq.w	12a30 <_vfiprintf_r+0x1f0>
   133ee:	f898 1000 	ldrb.w	r1, [r8]
   133f2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   133f6:	f7ff ba96 	b.w	12926 <_vfiprintf_r+0xe6>
   133fa:	2302      	movs	r3, #2
   133fc:	aa11      	add	r2, sp, #68	; 0x44
   133fe:	931c      	str	r3, [sp, #112]	; 0x70
   13400:	921b      	str	r2, [sp, #108]	; 0x6c
   13402:	2001      	movs	r0, #1
   13404:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13408:	e6a2      	b.n	13150 <_vfiprintf_r+0x910>
   1340a:	9603      	str	r6, [sp, #12]
   1340c:	e571      	b.n	12ef2 <_vfiprintf_r+0x6b2>
   1340e:	4b3b      	ldr	r3, [pc, #236]	; (134fc <_vfiprintf_r+0xcbc>)
   13410:	930c      	str	r3, [sp, #48]	; 0x30
   13412:	f016 0220 	ands.w	r2, r6, #32
   13416:	d059      	beq.n	134cc <_vfiprintf_r+0xc8c>
   13418:	9b07      	ldr	r3, [sp, #28]
   1341a:	3307      	adds	r3, #7
   1341c:	f023 0307 	bic.w	r3, r3, #7
   13420:	4618      	mov	r0, r3
   13422:	685a      	ldr	r2, [r3, #4]
   13424:	f850 3b08 	ldr.w	r3, [r0], #8
   13428:	9007      	str	r0, [sp, #28]
   1342a:	07f4      	lsls	r4, r6, #31
   1342c:	d509      	bpl.n	13442 <_vfiprintf_r+0xc02>
   1342e:	ea53 0002 	orrs.w	r0, r3, r2
   13432:	d006      	beq.n	13442 <_vfiprintf_r+0xc02>
   13434:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13438:	2130      	movs	r1, #48	; 0x30
   1343a:	f046 0602 	orr.w	r6, r6, #2
   1343e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13442:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13446:	9103      	str	r1, [sp, #12]
   13448:	2102      	movs	r1, #2
   1344a:	f7ff bb70 	b.w	12b2e <_vfiprintf_r+0x2ee>
   1344e:	4b2c      	ldr	r3, [pc, #176]	; (13500 <_vfiprintf_r+0xcc0>)
   13450:	930c      	str	r3, [sp, #48]	; 0x30
   13452:	e7de      	b.n	13412 <_vfiprintf_r+0xbd2>
   13454:	9b07      	ldr	r3, [sp, #28]
   13456:	2101      	movs	r1, #1
   13458:	f853 2b04 	ldr.w	r2, [r3], #4
   1345c:	9103      	str	r1, [sp, #12]
   1345e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13462:	9307      	str	r3, [sp, #28]
   13464:	9104      	str	r1, [sp, #16]
   13466:	ac2b      	add	r4, sp, #172	; 0xac
   13468:	e4df      	b.n	12e2a <_vfiprintf_r+0x5ea>
   1346a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1346e:	2a00      	cmp	r2, #0
   13470:	f040 8132 	bne.w	136d8 <_vfiprintf_r+0xe98>
   13474:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13476:	2a00      	cmp	r2, #0
   13478:	f47f ae62 	bne.w	13140 <_vfiprintf_r+0x900>
   1347c:	4618      	mov	r0, r3
   1347e:	2101      	movs	r1, #1
   13480:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13484:	e427      	b.n	12cd6 <_vfiprintf_r+0x496>
   13486:	2100      	movs	r1, #0
   13488:	2208      	movs	r2, #8
   1348a:	a816      	add	r0, sp, #88	; 0x58
   1348c:	9413      	str	r4, [sp, #76]	; 0x4c
   1348e:	f7fd ff11 	bl	112b4 <memset>
   13492:	1c79      	adds	r1, r7, #1
   13494:	f000 80bc 	beq.w	13610 <_vfiprintf_r+0xdd0>
   13498:	2500      	movs	r5, #0
   1349a:	9407      	str	r4, [sp, #28]
   1349c:	462c      	mov	r4, r5
   1349e:	e00c      	b.n	134ba <_vfiprintf_r+0xc7a>
   134a0:	a92b      	add	r1, sp, #172	; 0xac
   134a2:	4658      	mov	r0, fp
   134a4:	f000 fa7e 	bl	139a4 <_wcrtomb_r>
   134a8:	1c42      	adds	r2, r0, #1
   134aa:	4420      	add	r0, r4
   134ac:	f000 816b 	beq.w	13786 <_vfiprintf_r+0xf46>
   134b0:	42b8      	cmp	r0, r7
   134b2:	dc08      	bgt.n	134c6 <_vfiprintf_r+0xc86>
   134b4:	f000 8170 	beq.w	13798 <_vfiprintf_r+0xf58>
   134b8:	4604      	mov	r4, r0
   134ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   134bc:	5952      	ldr	r2, [r2, r5]
   134be:	ab16      	add	r3, sp, #88	; 0x58
   134c0:	3504      	adds	r5, #4
   134c2:	2a00      	cmp	r2, #0
   134c4:	d1ec      	bne.n	134a0 <_vfiprintf_r+0xc60>
   134c6:	9404      	str	r4, [sp, #16]
   134c8:	9c07      	ldr	r4, [sp, #28]
   134ca:	e0af      	b.n	1362c <_vfiprintf_r+0xdec>
   134cc:	f016 0310 	ands.w	r3, r6, #16
   134d0:	9807      	ldr	r0, [sp, #28]
   134d2:	d10c      	bne.n	134ee <_vfiprintf_r+0xcae>
   134d4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   134d8:	d005      	beq.n	134e6 <_vfiprintf_r+0xca6>
   134da:	461a      	mov	r2, r3
   134dc:	f850 3b04 	ldr.w	r3, [r0], #4
   134e0:	9007      	str	r0, [sp, #28]
   134e2:	b29b      	uxth	r3, r3
   134e4:	e7a1      	b.n	1342a <_vfiprintf_r+0xbea>
   134e6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   134ea:	f040 80e1 	bne.w	136b0 <_vfiprintf_r+0xe70>
   134ee:	f850 3b04 	ldr.w	r3, [r0], #4
   134f2:	9007      	str	r0, [sp, #28]
   134f4:	e799      	b.n	1342a <_vfiprintf_r+0xbea>
   134f6:	bf00      	nop
   134f8:	200026c0 	.word	0x200026c0
   134fc:	20002684 	.word	0x20002684
   13500:	20002670 	.word	0x20002670
   13504:	9903      	ldr	r1, [sp, #12]
   13506:	9704      	str	r7, [sp, #16]
   13508:	ac44      	add	r4, sp, #272	; 0x110
   1350a:	469e      	mov	lr, r3
   1350c:	ee08 ba90 	vmov	s17, fp
   13510:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13514:	f04f 0c00 	mov.w	ip, #0
   13518:	4623      	mov	r3, r4
   1351a:	e006      	b.n	1352a <_vfiprintf_r+0xcea>
   1351c:	f1be 0f0a 	cmp.w	lr, #10
   13520:	f172 0200 	sbcs.w	r2, r2, #0
   13524:	d339      	bcc.n	1359a <_vfiprintf_r+0xd5a>
   13526:	46a6      	mov	lr, r4
   13528:	462a      	mov	r2, r5
   1352a:	49a6      	ldr	r1, [pc, #664]	; (137c4 <_vfiprintf_r+0xf84>)
   1352c:	eb1e 0002 	adds.w	r0, lr, r2
   13530:	f140 0000 	adc.w	r0, r0, #0
   13534:	460f      	mov	r7, r1
   13536:	fba1 1400 	umull	r1, r4, r1, r0
   1353a:	f024 0103 	bic.w	r1, r4, #3
   1353e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13542:	1a40      	subs	r0, r0, r1
   13544:	ebbe 0100 	subs.w	r1, lr, r0
   13548:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1354c:	f162 0400 	sbc.w	r4, r2, #0
   13550:	fb05 f501 	mul.w	r5, r5, r1
   13554:	fb07 5504 	mla	r5, r7, r4, r5
   13558:	fba1 4107 	umull	r4, r1, r1, r7
   1355c:	440d      	add	r5, r1
   1355e:	2705      	movs	r7, #5
   13560:	f004 0101 	and.w	r1, r4, #1
   13564:	fba1 1b07 	umull	r1, fp, r1, r7
   13568:	1809      	adds	r1, r1, r0
   1356a:	0864      	lsrs	r4, r4, #1
   1356c:	3130      	adds	r1, #48	; 0x30
   1356e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13572:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13576:	f10c 0c01 	add.w	ip, ip, #1
   1357a:	3b01      	subs	r3, #1
   1357c:	086d      	lsrs	r5, r5, #1
   1357e:	2e00      	cmp	r6, #0
   13580:	d0cc      	beq.n	1351c <_vfiprintf_r+0xcdc>
   13582:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13584:	7809      	ldrb	r1, [r1, #0]
   13586:	4561      	cmp	r1, ip
   13588:	d1c8      	bne.n	1351c <_vfiprintf_r+0xcdc>
   1358a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1358e:	d0c5      	beq.n	1351c <_vfiprintf_r+0xcdc>
   13590:	f1be 0f0a 	cmp.w	lr, #10
   13594:	f172 0200 	sbcs.w	r2, r2, #0
   13598:	d26c      	bcs.n	13674 <_vfiprintf_r+0xe34>
   1359a:	461c      	mov	r4, r3
   1359c:	ab44      	add	r3, sp, #272	; 0x110
   1359e:	1b1b      	subs	r3, r3, r4
   135a0:	9f04      	ldr	r7, [sp, #16]
   135a2:	9e03      	ldr	r6, [sp, #12]
   135a4:	9304      	str	r3, [sp, #16]
   135a6:	ee18 ba90 	vmov	fp, s17
   135aa:	f7ff ba72 	b.w	12a92 <_vfiprintf_r+0x252>
   135ae:	9603      	str	r6, [sp, #12]
   135b0:	f7ff ba62 	b.w	12a78 <_vfiprintf_r+0x238>
   135b4:	4658      	mov	r0, fp
   135b6:	f7fe fc11 	bl	11ddc <__sinit>
   135ba:	f7ff b95b 	b.w	12874 <_vfiprintf_r+0x34>
   135be:	2901      	cmp	r1, #1
   135c0:	9603      	str	r6, [sp, #12]
   135c2:	f47f accd 	bne.w	12f60 <_vfiprintf_r+0x720>
   135c6:	f7ff ba5c 	b.w	12a82 <_vfiprintf_r+0x242>
   135ca:	9b07      	ldr	r3, [sp, #28]
   135cc:	9905      	ldr	r1, [sp, #20]
   135ce:	f853 2b04 	ldr.w	r2, [r3], #4
   135d2:	6011      	str	r1, [r2, #0]
   135d4:	9307      	str	r3, [sp, #28]
   135d6:	f7ff b97e 	b.w	128d6 <_vfiprintf_r+0x96>
   135da:	2f06      	cmp	r7, #6
   135dc:	463b      	mov	r3, r7
   135de:	9a03      	ldr	r2, [sp, #12]
   135e0:	4c79      	ldr	r4, [pc, #484]	; (137c8 <_vfiprintf_r+0xf88>)
   135e2:	9207      	str	r2, [sp, #28]
   135e4:	bf28      	it	cs
   135e6:	2306      	movcs	r3, #6
   135e8:	9304      	str	r3, [sp, #16]
   135ea:	9303      	str	r3, [sp, #12]
   135ec:	f7ff bb25 	b.w	12c3a <_vfiprintf_r+0x3fa>
   135f0:	9b03      	ldr	r3, [sp, #12]
   135f2:	9907      	ldr	r1, [sp, #28]
   135f4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   135f8:	bf14      	ite	ne
   135fa:	f851 3b04 	ldrne.w	r3, [r1], #4
   135fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   13602:	9107      	str	r1, [sp, #28]
   13604:	bf1c      	itt	ne
   13606:	4602      	movne	r2, r0
   13608:	b2db      	uxtbne	r3, r3
   1360a:	2101      	movs	r1, #1
   1360c:	f7ff ba8f 	b.w	12b2e <_vfiprintf_r+0x2ee>
   13610:	ab16      	add	r3, sp, #88	; 0x58
   13612:	9300      	str	r3, [sp, #0]
   13614:	2300      	movs	r3, #0
   13616:	4619      	mov	r1, r3
   13618:	aa13      	add	r2, sp, #76	; 0x4c
   1361a:	4658      	mov	r0, fp
   1361c:	f000 fb22 	bl	13c64 <_wcsrtombs_r>
   13620:	4603      	mov	r3, r0
   13622:	3301      	adds	r3, #1
   13624:	9004      	str	r0, [sp, #16]
   13626:	f000 80ae 	beq.w	13786 <_vfiprintf_r+0xf46>
   1362a:	9413      	str	r4, [sp, #76]	; 0x4c
   1362c:	9b04      	ldr	r3, [sp, #16]
   1362e:	2b00      	cmp	r3, #0
   13630:	d030      	beq.n	13694 <_vfiprintf_r+0xe54>
   13632:	2b63      	cmp	r3, #99	; 0x63
   13634:	dc63      	bgt.n	136fe <_vfiprintf_r+0xebe>
   13636:	2300      	movs	r3, #0
   13638:	9308      	str	r3, [sp, #32]
   1363a:	ac2b      	add	r4, sp, #172	; 0xac
   1363c:	2208      	movs	r2, #8
   1363e:	2100      	movs	r1, #0
   13640:	a816      	add	r0, sp, #88	; 0x58
   13642:	f7fd fe37 	bl	112b4 <memset>
   13646:	9d04      	ldr	r5, [sp, #16]
   13648:	ab16      	add	r3, sp, #88	; 0x58
   1364a:	9300      	str	r3, [sp, #0]
   1364c:	aa13      	add	r2, sp, #76	; 0x4c
   1364e:	462b      	mov	r3, r5
   13650:	4621      	mov	r1, r4
   13652:	4658      	mov	r0, fp
   13654:	f000 fb06 	bl	13c64 <_wcsrtombs_r>
   13658:	4285      	cmp	r5, r0
   1365a:	f040 80ab 	bne.w	137b4 <_vfiprintf_r+0xf74>
   1365e:	9b03      	ldr	r3, [sp, #12]
   13660:	9a04      	ldr	r2, [sp, #16]
   13662:	9307      	str	r3, [sp, #28]
   13664:	2300      	movs	r3, #0
   13666:	54a3      	strb	r3, [r4, r2]
   13668:	461f      	mov	r7, r3
   1366a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1366e:	9303      	str	r3, [sp, #12]
   13670:	f7ff ba16 	b.w	12aa0 <_vfiprintf_r+0x260>
   13674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13676:	990d      	ldr	r1, [sp, #52]	; 0x34
   13678:	1a9b      	subs	r3, r3, r2
   1367a:	4618      	mov	r0, r3
   1367c:	9308      	str	r3, [sp, #32]
   1367e:	f7fd fa3f 	bl	10b00 <strncpy>
   13682:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13684:	9b08      	ldr	r3, [sp, #32]
   13686:	784a      	ldrb	r2, [r1, #1]
   13688:	b10a      	cbz	r2, 1368e <_vfiprintf_r+0xe4e>
   1368a:	3101      	adds	r1, #1
   1368c:	910b      	str	r1, [sp, #44]	; 0x2c
   1368e:	f04f 0c00 	mov.w	ip, #0
   13692:	e748      	b.n	13526 <_vfiprintf_r+0xce6>
   13694:	9b03      	ldr	r3, [sp, #12]
   13696:	9307      	str	r3, [sp, #28]
   13698:	9b04      	ldr	r3, [sp, #16]
   1369a:	9303      	str	r3, [sp, #12]
   1369c:	461f      	mov	r7, r3
   1369e:	9308      	str	r3, [sp, #32]
   136a0:	f7ff b9fe 	b.w	12aa0 <_vfiprintf_r+0x260>
   136a4:	2101      	movs	r1, #1
   136a6:	4618      	mov	r0, r3
   136a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136ac:	f7ff bb13 	b.w	12cd6 <_vfiprintf_r+0x496>
   136b0:	f850 3b04 	ldr.w	r3, [r0], #4
   136b4:	9007      	str	r0, [sp, #28]
   136b6:	4622      	mov	r2, r4
   136b8:	b2db      	uxtb	r3, r3
   136ba:	e6b6      	b.n	1342a <_vfiprintf_r+0xbea>
   136bc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   136c0:	9207      	str	r2, [sp, #28]
   136c2:	17da      	asrs	r2, r3, #31
   136c4:	4611      	mov	r1, r2
   136c6:	f7ff b9ca 	b.w	12a5e <_vfiprintf_r+0x21e>
   136ca:	f851 3b04 	ldr.w	r3, [r1], #4
   136ce:	9107      	str	r1, [sp, #28]
   136d0:	4602      	mov	r2, r0
   136d2:	b2db      	uxtb	r3, r3
   136d4:	f7ff ba27 	b.w	12b26 <_vfiprintf_r+0x2e6>
   136d8:	2301      	movs	r3, #1
   136da:	931c      	str	r3, [sp, #112]	; 0x70
   136dc:	2101      	movs	r1, #1
   136de:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   136e2:	931b      	str	r3, [sp, #108]	; 0x6c
   136e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136e8:	460b      	mov	r3, r1
   136ea:	f7ff bacd 	b.w	12c88 <_vfiprintf_r+0x448>
   136ee:	9b07      	ldr	r3, [sp, #28]
   136f0:	9905      	ldr	r1, [sp, #20]
   136f2:	f853 2b04 	ldr.w	r2, [r3], #4
   136f6:	9307      	str	r3, [sp, #28]
   136f8:	8011      	strh	r1, [r2, #0]
   136fa:	f7ff b8ec 	b.w	128d6 <_vfiprintf_r+0x96>
   136fe:	1c59      	adds	r1, r3, #1
   13700:	4658      	mov	r0, fp
   13702:	f7fd fa5b 	bl	10bbc <_malloc_r>
   13706:	4604      	mov	r4, r0
   13708:	2800      	cmp	r0, #0
   1370a:	d03c      	beq.n	13786 <_vfiprintf_r+0xf46>
   1370c:	9008      	str	r0, [sp, #32]
   1370e:	e795      	b.n	1363c <_vfiprintf_r+0xdfc>
   13710:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13712:	f7fd fe57 	bl	113c4 <__retarget_lock_release_recursive>
   13716:	f7ff b9e9 	b.w	12aec <_vfiprintf_r+0x2ac>
   1371a:	9b03      	ldr	r3, [sp, #12]
   1371c:	9307      	str	r3, [sp, #28]
   1371e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13722:	9f08      	ldr	r7, [sp, #32]
   13724:	f7ff b9bc 	b.w	12aa0 <_vfiprintf_r+0x260>
   13728:	9819      	ldr	r0, [sp, #100]	; 0x64
   1372a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1372c:	3001      	adds	r0, #1
   1372e:	e545      	b.n	131bc <_vfiprintf_r+0x97c>
   13730:	9b03      	ldr	r3, [sp, #12]
   13732:	9307      	str	r3, [sp, #28]
   13734:	4620      	mov	r0, r4
   13736:	f7fe fbe3 	bl	11f00 <strlen>
   1373a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1373e:	462f      	mov	r7, r5
   13740:	9004      	str	r0, [sp, #16]
   13742:	9303      	str	r3, [sp, #12]
   13744:	9508      	str	r5, [sp, #32]
   13746:	f7ff b9ab 	b.w	12aa0 <_vfiprintf_r+0x260>
   1374a:	ee18 1a10 	vmov	r1, s16
   1374e:	aa18      	add	r2, sp, #96	; 0x60
   13750:	4658      	mov	r0, fp
   13752:	f7ff f839 	bl	127c8 <__sprint_r.part.0>
   13756:	2800      	cmp	r0, #0
   13758:	f43f aa36 	beq.w	12bc8 <_vfiprintf_r+0x388>
   1375c:	f7ff ba4d 	b.w	12bfa <_vfiprintf_r+0x3ba>
   13760:	9819      	ldr	r0, [sp, #100]	; 0x64
   13762:	3001      	adds	r0, #1
   13764:	e57a      	b.n	1325c <_vfiprintf_r+0xa1c>
   13766:	468c      	mov	ip, r1
   13768:	e46e      	b.n	13048 <_vfiprintf_r+0x808>
   1376a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1376c:	07d9      	lsls	r1, r3, #31
   1376e:	d405      	bmi.n	1377c <_vfiprintf_r+0xf3c>
   13770:	89ab      	ldrh	r3, [r5, #12]
   13772:	059a      	lsls	r2, r3, #22
   13774:	d402      	bmi.n	1377c <_vfiprintf_r+0xf3c>
   13776:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13778:	f7fd fe24 	bl	113c4 <__retarget_lock_release_recursive>
   1377c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13780:	9305      	str	r3, [sp, #20]
   13782:	f7ff ba49 	b.w	12c18 <_vfiprintf_r+0x3d8>
   13786:	ee18 2a10 	vmov	r2, s16
   1378a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1378e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13792:	8193      	strh	r3, [r2, #12]
   13794:	f7ff ba35 	b.w	12c02 <_vfiprintf_r+0x3c2>
   13798:	9c07      	ldr	r4, [sp, #28]
   1379a:	9704      	str	r7, [sp, #16]
   1379c:	e746      	b.n	1362c <_vfiprintf_r+0xdec>
   1379e:	9b07      	ldr	r3, [sp, #28]
   137a0:	f898 1001 	ldrb.w	r1, [r8, #1]
   137a4:	f853 7b04 	ldr.w	r7, [r3], #4
   137a8:	9307      	str	r3, [sp, #28]
   137aa:	4690      	mov	r8, r2
   137ac:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   137b0:	f7ff b8b9 	b.w	12926 <_vfiprintf_r+0xe6>
   137b4:	ee18 2a10 	vmov	r2, s16
   137b8:	8993      	ldrh	r3, [r2, #12]
   137ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   137be:	8193      	strh	r3, [r2, #12]
   137c0:	f7ff ba15 	b.w	12bee <_vfiprintf_r+0x3ae>
   137c4:	cccccccd 	.word	0xcccccccd
   137c8:	20002698 	.word	0x20002698

000137cc <__sbprintf>:
   137cc:	b570      	push	{r4, r5, r6, lr}
   137ce:	460c      	mov	r4, r1
   137d0:	8989      	ldrh	r1, [r1, #12]
   137d2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   137d6:	f021 0102 	bic.w	r1, r1, #2
   137da:	f8ad 1014 	strh.w	r1, [sp, #20]
   137de:	6e61      	ldr	r1, [r4, #100]	; 0x64
   137e0:	911b      	str	r1, [sp, #108]	; 0x6c
   137e2:	89e1      	ldrh	r1, [r4, #14]
   137e4:	f8ad 1016 	strh.w	r1, [sp, #22]
   137e8:	69e1      	ldr	r1, [r4, #28]
   137ea:	9109      	str	r1, [sp, #36]	; 0x24
   137ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   137ee:	910b      	str	r1, [sp, #44]	; 0x2c
   137f0:	a91c      	add	r1, sp, #112	; 0x70
   137f2:	9102      	str	r1, [sp, #8]
   137f4:	9106      	str	r1, [sp, #24]
   137f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   137fa:	4606      	mov	r6, r0
   137fc:	9104      	str	r1, [sp, #16]
   137fe:	9107      	str	r1, [sp, #28]
   13800:	a818      	add	r0, sp, #96	; 0x60
   13802:	2100      	movs	r1, #0
   13804:	e9cd 3200 	strd	r3, r2, [sp]
   13808:	9108      	str	r1, [sp, #32]
   1380a:	f7fd fdd5 	bl	113b8 <__retarget_lock_init_recursive>
   1380e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13812:	a902      	add	r1, sp, #8
   13814:	4630      	mov	r0, r6
   13816:	f7ff f813 	bl	12840 <_vfiprintf_r>
   1381a:	1e05      	subs	r5, r0, #0
   1381c:	db07      	blt.n	1382e <__sbprintf+0x62>
   1381e:	a902      	add	r1, sp, #8
   13820:	4630      	mov	r0, r6
   13822:	f001 f9e1 	bl	14be8 <_fflush_r>
   13826:	2800      	cmp	r0, #0
   13828:	bf18      	it	ne
   1382a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   1382e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13832:	065b      	lsls	r3, r3, #25
   13834:	d503      	bpl.n	1383e <__sbprintf+0x72>
   13836:	89a3      	ldrh	r3, [r4, #12]
   13838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1383c:	81a3      	strh	r3, [r4, #12]
   1383e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13840:	f7fd fdbc 	bl	113bc <__retarget_lock_close_recursive>
   13844:	4628      	mov	r0, r5
   13846:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1384a:	bd70      	pop	{r4, r5, r6, pc}

0001384c <__register_exitproc>:
   1384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13850:	f8df a07c 	ldr.w	sl, [pc, #124]	; 138d0 <__register_exitproc+0x84>
   13854:	4606      	mov	r6, r0
   13856:	f8da 0000 	ldr.w	r0, [sl]
   1385a:	4698      	mov	r8, r3
   1385c:	460f      	mov	r7, r1
   1385e:	4691      	mov	r9, r2
   13860:	f7fd fdae 	bl	113c0 <__retarget_lock_acquire_recursive>
   13864:	4b18      	ldr	r3, [pc, #96]	; (138c8 <__register_exitproc+0x7c>)
   13866:	681c      	ldr	r4, [r3, #0]
   13868:	b324      	cbz	r4, 138b4 <__register_exitproc+0x68>
   1386a:	6865      	ldr	r5, [r4, #4]
   1386c:	2d1f      	cmp	r5, #31
   1386e:	dc24      	bgt.n	138ba <__register_exitproc+0x6e>
   13870:	b95e      	cbnz	r6, 1388a <__register_exitproc+0x3e>
   13872:	1c6b      	adds	r3, r5, #1
   13874:	3502      	adds	r5, #2
   13876:	f8da 0000 	ldr.w	r0, [sl]
   1387a:	6063      	str	r3, [r4, #4]
   1387c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13880:	f7fd fda0 	bl	113c4 <__retarget_lock_release_recursive>
   13884:	2000      	movs	r0, #0
   13886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1388a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1388e:	2301      	movs	r3, #1
   13890:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13894:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13898:	40ab      	lsls	r3, r5
   1389a:	431a      	orrs	r2, r3
   1389c:	2e02      	cmp	r6, #2
   1389e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   138a2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   138a6:	d1e4      	bne.n	13872 <__register_exitproc+0x26>
   138a8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   138ac:	431a      	orrs	r2, r3
   138ae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   138b2:	e7de      	b.n	13872 <__register_exitproc+0x26>
   138b4:	4c05      	ldr	r4, [pc, #20]	; (138cc <__register_exitproc+0x80>)
   138b6:	601c      	str	r4, [r3, #0]
   138b8:	e7d7      	b.n	1386a <__register_exitproc+0x1e>
   138ba:	f8da 0000 	ldr.w	r0, [sl]
   138be:	f7fd fd81 	bl	113c4 <__retarget_lock_release_recursive>
   138c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   138c6:	e7de      	b.n	13886 <__register_exitproc+0x3a>
   138c8:	20004bb4 	.word	0x20004bb4
   138cc:	20004bb8 	.word	0x20004bb8
   138d0:	200031e4 	.word	0x200031e4

000138d4 <__ascii_mbtowc>:
   138d4:	b082      	sub	sp, #8
   138d6:	b149      	cbz	r1, 138ec <__ascii_mbtowc+0x18>
   138d8:	b15a      	cbz	r2, 138f2 <__ascii_mbtowc+0x1e>
   138da:	b16b      	cbz	r3, 138f8 <__ascii_mbtowc+0x24>
   138dc:	7813      	ldrb	r3, [r2, #0]
   138de:	600b      	str	r3, [r1, #0]
   138e0:	7812      	ldrb	r2, [r2, #0]
   138e2:	1e10      	subs	r0, r2, #0
   138e4:	bf18      	it	ne
   138e6:	2001      	movne	r0, #1
   138e8:	b002      	add	sp, #8
   138ea:	4770      	bx	lr
   138ec:	a901      	add	r1, sp, #4
   138ee:	2a00      	cmp	r2, #0
   138f0:	d1f3      	bne.n	138da <__ascii_mbtowc+0x6>
   138f2:	4610      	mov	r0, r2
   138f4:	b002      	add	sp, #8
   138f6:	4770      	bx	lr
   138f8:	f06f 0001 	mvn.w	r0, #1
   138fc:	e7f4      	b.n	138e8 <__ascii_mbtowc+0x14>
   138fe:	bf00      	nop

00013900 <fcvtbuf>:
   13900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13904:	460e      	mov	r6, r1
   13906:	4926      	ldr	r1, [pc, #152]	; (139a0 <fcvtbuf+0xa0>)
   13908:	b087      	sub	sp, #28
   1390a:	680f      	ldr	r7, [r1, #0]
   1390c:	4604      	mov	r4, r0
   1390e:	4690      	mov	r8, r2
   13910:	461d      	mov	r5, r3
   13912:	b353      	cbz	r3, 1396a <fcvtbuf+0x6a>
   13914:	aa05      	add	r2, sp, #20
   13916:	4633      	mov	r3, r6
   13918:	9201      	str	r2, [sp, #4]
   1391a:	2103      	movs	r1, #3
   1391c:	4622      	mov	r2, r4
   1391e:	f8cd 8000 	str.w	r8, [sp]
   13922:	4638      	mov	r0, r7
   13924:	f000 fa40 	bl	13da8 <_dtoa_r>
   13928:	9b05      	ldr	r3, [sp, #20]
   1392a:	6832      	ldr	r2, [r6, #0]
   1392c:	4298      	cmp	r0, r3
   1392e:	4684      	mov	ip, r0
   13930:	f1c2 0200 	rsb	r2, r2, #0
   13934:	4629      	mov	r1, r5
   13936:	d209      	bcs.n	1394c <fcvtbuf+0x4c>
   13938:	1a10      	subs	r0, r2, r0
   1393a:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1393e:	f801 3b01 	strb.w	r3, [r1], #1
   13942:	9b05      	ldr	r3, [sp, #20]
   13944:	4563      	cmp	r3, ip
   13946:	eb00 020c 	add.w	r2, r0, ip
   1394a:	d8f6      	bhi.n	1393a <fcvtbuf+0x3a>
   1394c:	4294      	cmp	r4, r2
   1394e:	dd24      	ble.n	1399a <fcvtbuf+0x9a>
   13950:	1aa2      	subs	r2, r4, r2
   13952:	440a      	add	r2, r1
   13954:	2330      	movs	r3, #48	; 0x30
   13956:	f801 3b01 	strb.w	r3, [r1], #1
   1395a:	4291      	cmp	r1, r2
   1395c:	d1fb      	bne.n	13956 <fcvtbuf+0x56>
   1395e:	2300      	movs	r3, #0
   13960:	7013      	strb	r3, [r2, #0]
   13962:	4628      	mov	r0, r5
   13964:	b007      	add	sp, #28
   13966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1396c:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13970:	429a      	cmp	r2, r3
   13972:	dd01      	ble.n	13978 <fcvtbuf+0x78>
   13974:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13976:	e7cd      	b.n	13914 <fcvtbuf+0x14>
   13978:	f100 0924 	add.w	r9, r0, #36	; 0x24
   1397c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1397e:	464a      	mov	r2, r9
   13980:	4638      	mov	r0, r7
   13982:	ed8d 0b02 	vstr	d0, [sp, #8]
   13986:	f7fe fb29 	bl	11fdc <_realloc_r>
   1398a:	4605      	mov	r5, r0
   1398c:	2800      	cmp	r0, #0
   1398e:	d0e8      	beq.n	13962 <fcvtbuf+0x62>
   13990:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13994:	ed9d 0b02 	vldr	d0, [sp, #8]
   13998:	e7bc      	b.n	13914 <fcvtbuf+0x14>
   1399a:	460a      	mov	r2, r1
   1399c:	e7df      	b.n	1395e <fcvtbuf+0x5e>
   1399e:	bf00      	nop
   139a0:	20003778 	.word	0x20003778

000139a4 <_wcrtomb_r>:
   139a4:	b570      	push	{r4, r5, r6, lr}
   139a6:	4605      	mov	r5, r0
   139a8:	b084      	sub	sp, #16
   139aa:	b15b      	cbz	r3, 139c4 <_wcrtomb_r+0x20>
   139ac:	461c      	mov	r4, r3
   139ae:	b169      	cbz	r1, 139cc <_wcrtomb_r+0x28>
   139b0:	4b0e      	ldr	r3, [pc, #56]	; (139ec <_wcrtomb_r+0x48>)
   139b2:	4628      	mov	r0, r5
   139b4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   139b8:	4623      	mov	r3, r4
   139ba:	47b0      	blx	r6
   139bc:	1c43      	adds	r3, r0, #1
   139be:	d00f      	beq.n	139e0 <_wcrtomb_r+0x3c>
   139c0:	b004      	add	sp, #16
   139c2:	bd70      	pop	{r4, r5, r6, pc}
   139c4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   139c8:	2900      	cmp	r1, #0
   139ca:	d1f1      	bne.n	139b0 <_wcrtomb_r+0xc>
   139cc:	4a07      	ldr	r2, [pc, #28]	; (139ec <_wcrtomb_r+0x48>)
   139ce:	4623      	mov	r3, r4
   139d0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   139d4:	4628      	mov	r0, r5
   139d6:	460a      	mov	r2, r1
   139d8:	a901      	add	r1, sp, #4
   139da:	47b0      	blx	r6
   139dc:	1c43      	adds	r3, r0, #1
   139de:	d1ef      	bne.n	139c0 <_wcrtomb_r+0x1c>
   139e0:	2200      	movs	r2, #0
   139e2:	238a      	movs	r3, #138	; 0x8a
   139e4:	6022      	str	r2, [r4, #0]
   139e6:	602b      	str	r3, [r5, #0]
   139e8:	b004      	add	sp, #16
   139ea:	bd70      	pop	{r4, r5, r6, pc}
   139ec:	200031f0 	.word	0x200031f0

000139f0 <_localeconv_r>:
   139f0:	4800      	ldr	r0, [pc, #0]	; (139f4 <_localeconv_r+0x4>)
   139f2:	4770      	bx	lr
   139f4:	200032e0 	.word	0x200032e0

000139f8 <_fclose_r>:
   139f8:	b570      	push	{r4, r5, r6, lr}
   139fa:	2900      	cmp	r1, #0
   139fc:	d04b      	beq.n	13a96 <_fclose_r+0x9e>
   139fe:	4606      	mov	r6, r0
   13a00:	460c      	mov	r4, r1
   13a02:	b110      	cbz	r0, 13a0a <_fclose_r+0x12>
   13a04:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13a06:	2b00      	cmp	r3, #0
   13a08:	d048      	beq.n	13a9c <_fclose_r+0xa4>
   13a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13a0c:	07d8      	lsls	r0, r3, #31
   13a0e:	d534      	bpl.n	13a7a <_fclose_r+0x82>
   13a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a14:	2b00      	cmp	r3, #0
   13a16:	d03e      	beq.n	13a96 <_fclose_r+0x9e>
   13a18:	4621      	mov	r1, r4
   13a1a:	4630      	mov	r0, r6
   13a1c:	f001 f84c 	bl	14ab8 <__sflush_r>
   13a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13a22:	4605      	mov	r5, r0
   13a24:	b133      	cbz	r3, 13a34 <_fclose_r+0x3c>
   13a26:	69e1      	ldr	r1, [r4, #28]
   13a28:	4630      	mov	r0, r6
   13a2a:	4798      	blx	r3
   13a2c:	2800      	cmp	r0, #0
   13a2e:	bfb8      	it	lt
   13a30:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   13a34:	89a3      	ldrh	r3, [r4, #12]
   13a36:	061a      	lsls	r2, r3, #24
   13a38:	d43c      	bmi.n	13ab4 <_fclose_r+0xbc>
   13a3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13a3c:	b141      	cbz	r1, 13a50 <_fclose_r+0x58>
   13a3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13a42:	4299      	cmp	r1, r3
   13a44:	d002      	beq.n	13a4c <_fclose_r+0x54>
   13a46:	4630      	mov	r0, r6
   13a48:	f7fe fd04 	bl	12454 <_free_r>
   13a4c:	2300      	movs	r3, #0
   13a4e:	6323      	str	r3, [r4, #48]	; 0x30
   13a50:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13a52:	b121      	cbz	r1, 13a5e <_fclose_r+0x66>
   13a54:	4630      	mov	r0, r6
   13a56:	f7fe fcfd 	bl	12454 <_free_r>
   13a5a:	2300      	movs	r3, #0
   13a5c:	6463      	str	r3, [r4, #68]	; 0x44
   13a5e:	f7fe f9db 	bl	11e18 <__sfp_lock_acquire>
   13a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13a64:	2200      	movs	r2, #0
   13a66:	07db      	lsls	r3, r3, #31
   13a68:	81a2      	strh	r2, [r4, #12]
   13a6a:	d51f      	bpl.n	13aac <_fclose_r+0xb4>
   13a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a6e:	f7fd fca5 	bl	113bc <__retarget_lock_close_recursive>
   13a72:	f7fe f9d7 	bl	11e24 <__sfp_lock_release>
   13a76:	4628      	mov	r0, r5
   13a78:	bd70      	pop	{r4, r5, r6, pc}
   13a7a:	89a3      	ldrh	r3, [r4, #12]
   13a7c:	0599      	lsls	r1, r3, #22
   13a7e:	d4cb      	bmi.n	13a18 <_fclose_r+0x20>
   13a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a82:	f7fd fc9d 	bl	113c0 <__retarget_lock_acquire_recursive>
   13a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a8a:	2b00      	cmp	r3, #0
   13a8c:	d1c4      	bne.n	13a18 <_fclose_r+0x20>
   13a8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   13a90:	f015 0501 	ands.w	r5, r5, #1
   13a94:	d005      	beq.n	13aa2 <_fclose_r+0xaa>
   13a96:	2500      	movs	r5, #0
   13a98:	4628      	mov	r0, r5
   13a9a:	bd70      	pop	{r4, r5, r6, pc}
   13a9c:	f7fe f99e 	bl	11ddc <__sinit>
   13aa0:	e7b3      	b.n	13a0a <_fclose_r+0x12>
   13aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13aa4:	f7fd fc8e 	bl	113c4 <__retarget_lock_release_recursive>
   13aa8:	4628      	mov	r0, r5
   13aaa:	bd70      	pop	{r4, r5, r6, pc}
   13aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13aae:	f7fd fc89 	bl	113c4 <__retarget_lock_release_recursive>
   13ab2:	e7db      	b.n	13a6c <_fclose_r+0x74>
   13ab4:	6921      	ldr	r1, [r4, #16]
   13ab6:	4630      	mov	r0, r6
   13ab8:	f7fe fccc 	bl	12454 <_free_r>
   13abc:	e7bd      	b.n	13a3a <_fclose_r+0x42>
   13abe:	bf00      	nop

00013ac0 <__swsetup_r>:
   13ac0:	b538      	push	{r3, r4, r5, lr}
   13ac2:	4b31      	ldr	r3, [pc, #196]	; (13b88 <__swsetup_r+0xc8>)
   13ac4:	681b      	ldr	r3, [r3, #0]
   13ac6:	4605      	mov	r5, r0
   13ac8:	460c      	mov	r4, r1
   13aca:	b113      	cbz	r3, 13ad2 <__swsetup_r+0x12>
   13acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13ace:	2a00      	cmp	r2, #0
   13ad0:	d04e      	beq.n	13b70 <__swsetup_r+0xb0>
   13ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ad6:	0718      	lsls	r0, r3, #28
   13ad8:	b29a      	uxth	r2, r3
   13ada:	d51c      	bpl.n	13b16 <__swsetup_r+0x56>
   13adc:	6921      	ldr	r1, [r4, #16]
   13ade:	b329      	cbz	r1, 13b2c <__swsetup_r+0x6c>
   13ae0:	f012 0001 	ands.w	r0, r2, #1
   13ae4:	d007      	beq.n	13af6 <__swsetup_r+0x36>
   13ae6:	2000      	movs	r0, #0
   13ae8:	60a0      	str	r0, [r4, #8]
   13aea:	6960      	ldr	r0, [r4, #20]
   13aec:	4240      	negs	r0, r0
   13aee:	61a0      	str	r0, [r4, #24]
   13af0:	b139      	cbz	r1, 13b02 <__swsetup_r+0x42>
   13af2:	2000      	movs	r0, #0
   13af4:	bd38      	pop	{r3, r4, r5, pc}
   13af6:	0795      	lsls	r5, r2, #30
   13af8:	bf58      	it	pl
   13afa:	6960      	ldrpl	r0, [r4, #20]
   13afc:	60a0      	str	r0, [r4, #8]
   13afe:	2900      	cmp	r1, #0
   13b00:	d1f7      	bne.n	13af2 <__swsetup_r+0x32>
   13b02:	0612      	lsls	r2, r2, #24
   13b04:	bf58      	it	pl
   13b06:	4608      	movpl	r0, r1
   13b08:	d5f4      	bpl.n	13af4 <__swsetup_r+0x34>
   13b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b0e:	81a3      	strh	r3, [r4, #12]
   13b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b14:	bd38      	pop	{r3, r4, r5, pc}
   13b16:	06d1      	lsls	r1, r2, #27
   13b18:	d52e      	bpl.n	13b78 <__swsetup_r+0xb8>
   13b1a:	0752      	lsls	r2, r2, #29
   13b1c:	d414      	bmi.n	13b48 <__swsetup_r+0x88>
   13b1e:	6921      	ldr	r1, [r4, #16]
   13b20:	f043 0308 	orr.w	r3, r3, #8
   13b24:	81a3      	strh	r3, [r4, #12]
   13b26:	b29a      	uxth	r2, r3
   13b28:	2900      	cmp	r1, #0
   13b2a:	d1d9      	bne.n	13ae0 <__swsetup_r+0x20>
   13b2c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13b30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13b34:	d0d4      	beq.n	13ae0 <__swsetup_r+0x20>
   13b36:	4621      	mov	r1, r4
   13b38:	4628      	mov	r0, r5
   13b3a:	f000 f827 	bl	13b8c <__smakebuf_r>
   13b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b42:	6921      	ldr	r1, [r4, #16]
   13b44:	b29a      	uxth	r2, r3
   13b46:	e7cb      	b.n	13ae0 <__swsetup_r+0x20>
   13b48:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13b4a:	b151      	cbz	r1, 13b62 <__swsetup_r+0xa2>
   13b4c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13b50:	4291      	cmp	r1, r2
   13b52:	d004      	beq.n	13b5e <__swsetup_r+0x9e>
   13b54:	4628      	mov	r0, r5
   13b56:	f7fe fc7d 	bl	12454 <_free_r>
   13b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b5e:	2200      	movs	r2, #0
   13b60:	6322      	str	r2, [r4, #48]	; 0x30
   13b62:	6921      	ldr	r1, [r4, #16]
   13b64:	2200      	movs	r2, #0
   13b66:	e9c4 1200 	strd	r1, r2, [r4]
   13b6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13b6e:	e7d7      	b.n	13b20 <__swsetup_r+0x60>
   13b70:	4618      	mov	r0, r3
   13b72:	f7fe f933 	bl	11ddc <__sinit>
   13b76:	e7ac      	b.n	13ad2 <__swsetup_r+0x12>
   13b78:	2209      	movs	r2, #9
   13b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b7e:	602a      	str	r2, [r5, #0]
   13b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b84:	81a3      	strh	r3, [r4, #12]
   13b86:	bd38      	pop	{r3, r4, r5, pc}
   13b88:	20003778 	.word	0x20003778

00013b8c <__smakebuf_r>:
   13b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b90:	898b      	ldrh	r3, [r1, #12]
   13b92:	460c      	mov	r4, r1
   13b94:	0799      	lsls	r1, r3, #30
   13b96:	b096      	sub	sp, #88	; 0x58
   13b98:	d508      	bpl.n	13bac <__smakebuf_r+0x20>
   13b9a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13b9e:	2201      	movs	r2, #1
   13ba0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13ba4:	6023      	str	r3, [r4, #0]
   13ba6:	b016      	add	sp, #88	; 0x58
   13ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13bb0:	2900      	cmp	r1, #0
   13bb2:	4606      	mov	r6, r0
   13bb4:	db25      	blt.n	13c02 <__smakebuf_r+0x76>
   13bb6:	466a      	mov	r2, sp
   13bb8:	f001 f840 	bl	14c3c <_fstat_r>
   13bbc:	2800      	cmp	r0, #0
   13bbe:	db1f      	blt.n	13c00 <__smakebuf_r+0x74>
   13bc0:	9d01      	ldr	r5, [sp, #4]
   13bc2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13bc6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13bca:	fab5 f585 	clz	r5, r5
   13bce:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13bd2:	096d      	lsrs	r5, r5, #5
   13bd4:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13bd8:	4641      	mov	r1, r8
   13bda:	4630      	mov	r0, r6
   13bdc:	f7fc ffee 	bl	10bbc <_malloc_r>
   13be0:	b1e0      	cbz	r0, 13c1c <__smakebuf_r+0x90>
   13be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13be6:	f8c4 8014 	str.w	r8, [r4, #20]
   13bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13bee:	6020      	str	r0, [r4, #0]
   13bf0:	6120      	str	r0, [r4, #16]
   13bf2:	81a3      	strh	r3, [r4, #12]
   13bf4:	bb35      	cbnz	r5, 13c44 <__smakebuf_r+0xb8>
   13bf6:	433b      	orrs	r3, r7
   13bf8:	81a3      	strh	r3, [r4, #12]
   13bfa:	b016      	add	sp, #88	; 0x58
   13bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c00:	89a3      	ldrh	r3, [r4, #12]
   13c02:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13c06:	d019      	beq.n	13c3c <__smakebuf_r+0xb0>
   13c08:	f04f 0840 	mov.w	r8, #64	; 0x40
   13c0c:	2500      	movs	r5, #0
   13c0e:	4641      	mov	r1, r8
   13c10:	4630      	mov	r0, r6
   13c12:	462f      	mov	r7, r5
   13c14:	f7fc ffd2 	bl	10bbc <_malloc_r>
   13c18:	2800      	cmp	r0, #0
   13c1a:	d1e2      	bne.n	13be2 <__smakebuf_r+0x56>
   13c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c20:	059a      	lsls	r2, r3, #22
   13c22:	d4c0      	bmi.n	13ba6 <__smakebuf_r+0x1a>
   13c24:	f023 0303 	bic.w	r3, r3, #3
   13c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13c2c:	f043 0302 	orr.w	r3, r3, #2
   13c30:	2101      	movs	r1, #1
   13c32:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13c36:	81a3      	strh	r3, [r4, #12]
   13c38:	6022      	str	r2, [r4, #0]
   13c3a:	e7b4      	b.n	13ba6 <__smakebuf_r+0x1a>
   13c3c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13c40:	462f      	mov	r7, r5
   13c42:	e7c9      	b.n	13bd8 <__smakebuf_r+0x4c>
   13c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13c48:	4630      	mov	r0, r6
   13c4a:	f001 f80d 	bl	14c68 <_isatty_r>
   13c4e:	b910      	cbnz	r0, 13c56 <__smakebuf_r+0xca>
   13c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c54:	e7cf      	b.n	13bf6 <__smakebuf_r+0x6a>
   13c56:	89a3      	ldrh	r3, [r4, #12]
   13c58:	f023 0303 	bic.w	r3, r3, #3
   13c5c:	f043 0301 	orr.w	r3, r3, #1
   13c60:	b21b      	sxth	r3, r3
   13c62:	e7c8      	b.n	13bf6 <__smakebuf_r+0x6a>

00013c64 <_wcsrtombs_r>:
   13c64:	b510      	push	{r4, lr}
   13c66:	b082      	sub	sp, #8
   13c68:	9c04      	ldr	r4, [sp, #16]
   13c6a:	e9cd 3400 	strd	r3, r4, [sp]
   13c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c72:	f001 fb17 	bl	152a4 <_wcsnrtombs_r>
   13c76:	b002      	add	sp, #8
   13c78:	bd10      	pop	{r4, pc}
   13c7a:	bf00      	nop

00013c7c <quorem>:
   13c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c80:	6903      	ldr	r3, [r0, #16]
   13c82:	690c      	ldr	r4, [r1, #16]
   13c84:	42a3      	cmp	r3, r4
   13c86:	b083      	sub	sp, #12
   13c88:	f2c0 8087 	blt.w	13d9a <quorem+0x11e>
   13c8c:	3c01      	subs	r4, #1
   13c8e:	f101 0514 	add.w	r5, r1, #20
   13c92:	00a3      	lsls	r3, r4, #2
   13c94:	f100 0814 	add.w	r8, r0, #20
   13c98:	9300      	str	r3, [sp, #0]
   13c9a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13c9e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13ca2:	3301      	adds	r3, #1
   13ca4:	4681      	mov	r9, r0
   13ca6:	429a      	cmp	r2, r3
   13ca8:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   13cac:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   13cb0:	9001      	str	r0, [sp, #4]
   13cb2:	fbb2 f6f3 	udiv	r6, r2, r3
   13cb6:	d33b      	bcc.n	13d30 <quorem+0xb4>
   13cb8:	f04f 0c00 	mov.w	ip, #0
   13cbc:	46ae      	mov	lr, r5
   13cbe:	4640      	mov	r0, r8
   13cc0:	46e2      	mov	sl, ip
   13cc2:	4663      	mov	r3, ip
   13cc4:	f85e bb04 	ldr.w	fp, [lr], #4
   13cc8:	6802      	ldr	r2, [r0, #0]
   13cca:	fa1f fc8b 	uxth.w	ip, fp
   13cce:	fb06 330c 	mla	r3, r6, ip, r3
   13cd2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13cd6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   13cda:	fb06 cc0b 	mla	ip, r6, fp, ip
   13cde:	b29b      	uxth	r3, r3
   13ce0:	ebaa 0303 	sub.w	r3, sl, r3
   13ce4:	fa1f fa8c 	uxth.w	sl, ip
   13ce8:	fa13 f382 	uxtah	r3, r3, r2
   13cec:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   13cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   13cf4:	b29b      	uxth	r3, r3
   13cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13cfa:	4577      	cmp	r7, lr
   13cfc:	f840 3b04 	str.w	r3, [r0], #4
   13d00:	ea4f 4a22 	mov.w	sl, r2, asr #16
   13d04:	ea4f 431c 	mov.w	r3, ip, lsr #16
   13d08:	d2dc      	bcs.n	13cc4 <quorem+0x48>
   13d0a:	9b00      	ldr	r3, [sp, #0]
   13d0c:	f858 3003 	ldr.w	r3, [r8, r3]
   13d10:	b973      	cbnz	r3, 13d30 <quorem+0xb4>
   13d12:	9b01      	ldr	r3, [sp, #4]
   13d14:	3b04      	subs	r3, #4
   13d16:	4598      	cmp	r8, r3
   13d18:	d304      	bcc.n	13d24 <quorem+0xa8>
   13d1a:	e007      	b.n	13d2c <quorem+0xb0>
   13d1c:	4598      	cmp	r8, r3
   13d1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13d22:	d203      	bcs.n	13d2c <quorem+0xb0>
   13d24:	f853 2904 	ldr.w	r2, [r3], #-4
   13d28:	2a00      	cmp	r2, #0
   13d2a:	d0f7      	beq.n	13d1c <quorem+0xa0>
   13d2c:	f8c9 4010 	str.w	r4, [r9, #16]
   13d30:	4648      	mov	r0, r9
   13d32:	f7fd fe3f 	bl	119b4 <__mcmp>
   13d36:	2800      	cmp	r0, #0
   13d38:	db2b      	blt.n	13d92 <quorem+0x116>
   13d3a:	3601      	adds	r6, #1
   13d3c:	4641      	mov	r1, r8
   13d3e:	2300      	movs	r3, #0
   13d40:	f855 0b04 	ldr.w	r0, [r5], #4
   13d44:	f8d1 c000 	ldr.w	ip, [r1]
   13d48:	b282      	uxth	r2, r0
   13d4a:	1a9a      	subs	r2, r3, r2
   13d4c:	0c03      	lsrs	r3, r0, #16
   13d4e:	fa12 f28c 	uxtah	r2, r2, ip
   13d52:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   13d56:	eb03 4322 	add.w	r3, r3, r2, asr #16
   13d5a:	b292      	uxth	r2, r2
   13d5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   13d60:	42af      	cmp	r7, r5
   13d62:	f841 2b04 	str.w	r2, [r1], #4
   13d66:	ea4f 4323 	mov.w	r3, r3, asr #16
   13d6a:	d2e9      	bcs.n	13d40 <quorem+0xc4>
   13d6c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13d70:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   13d74:	b96a      	cbnz	r2, 13d92 <quorem+0x116>
   13d76:	3b04      	subs	r3, #4
   13d78:	4598      	cmp	r8, r3
   13d7a:	d304      	bcc.n	13d86 <quorem+0x10a>
   13d7c:	e007      	b.n	13d8e <quorem+0x112>
   13d7e:	4598      	cmp	r8, r3
   13d80:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13d84:	d203      	bcs.n	13d8e <quorem+0x112>
   13d86:	f853 2904 	ldr.w	r2, [r3], #-4
   13d8a:	2a00      	cmp	r2, #0
   13d8c:	d0f7      	beq.n	13d7e <quorem+0x102>
   13d8e:	f8c9 4010 	str.w	r4, [r9, #16]
   13d92:	4630      	mov	r0, r6
   13d94:	b003      	add	sp, #12
   13d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9a:	2000      	movs	r0, #0
   13d9c:	b003      	add	sp, #12
   13d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da2:	bf00      	nop
   13da4:	0000      	movs	r0, r0
	...

00013da8 <_dtoa_r>:
   13da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dac:	ed2d 8b02 	vpush	{d8}
   13db0:	b08f      	sub	sp, #60	; 0x3c
   13db2:	ed8d 0b02 	vstr	d0, [sp, #8]
   13db6:	9101      	str	r1, [sp, #4]
   13db8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13dba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   13dbc:	9305      	str	r3, [sp, #20]
   13dbe:	ec57 6b10 	vmov	r6, r7, d0
   13dc2:	4604      	mov	r4, r0
   13dc4:	4693      	mov	fp, r2
   13dc6:	b141      	cbz	r1, 13dda <_dtoa_r+0x32>
   13dc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   13dca:	604a      	str	r2, [r1, #4]
   13dcc:	2301      	movs	r3, #1
   13dce:	4093      	lsls	r3, r2
   13dd0:	608b      	str	r3, [r1, #8]
   13dd2:	f7fd fb8f 	bl	114f4 <_Bfree>
   13dd6:	2300      	movs	r3, #0
   13dd8:	63a3      	str	r3, [r4, #56]	; 0x38
   13dda:	f1b7 0800 	subs.w	r8, r7, #0
   13dde:	bfb4      	ite	lt
   13de0:	2301      	movlt	r3, #1
   13de2:	2300      	movge	r3, #0
   13de4:	602b      	str	r3, [r5, #0]
   13de6:	4bbe      	ldr	r3, [pc, #760]	; (140e0 <_dtoa_r+0x338>)
   13de8:	bfbc      	itt	lt
   13dea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   13dee:	f8cd 800c 	strlt.w	r8, [sp, #12]
   13df2:	ea33 0308 	bics.w	r3, r3, r8
   13df6:	f000 809f 	beq.w	13f38 <_dtoa_r+0x190>
   13dfa:	ed9d 8b02 	vldr	d8, [sp, #8]
   13dfe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13e06:	d111      	bne.n	13e2c <_dtoa_r+0x84>
   13e08:	9a05      	ldr	r2, [sp, #20]
   13e0a:	2301      	movs	r3, #1
   13e0c:	6013      	str	r3, [r2, #0]
   13e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13e10:	2b00      	cmp	r3, #0
   13e12:	f000 823f 	beq.w	14294 <_dtoa_r+0x4ec>
   13e16:	4bb3      	ldr	r3, [pc, #716]	; (140e4 <_dtoa_r+0x33c>)
   13e18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e1a:	6013      	str	r3, [r2, #0]
   13e1c:	3b01      	subs	r3, #1
   13e1e:	9300      	str	r3, [sp, #0]
   13e20:	9800      	ldr	r0, [sp, #0]
   13e22:	b00f      	add	sp, #60	; 0x3c
   13e24:	ecbd 8b02 	vpop	{d8}
   13e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e2c:	aa0c      	add	r2, sp, #48	; 0x30
   13e2e:	a90d      	add	r1, sp, #52	; 0x34
   13e30:	4620      	mov	r0, r4
   13e32:	eeb0 0b48 	vmov.f64	d0, d8
   13e36:	f7fd fe89 	bl	11b4c <__d2b>
   13e3a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   13e3e:	4605      	mov	r5, r0
   13e40:	f040 8092 	bne.w	13f68 <_dtoa_r+0x1c0>
   13e44:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   13e48:	440b      	add	r3, r1
   13e4a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   13e4e:	2a20      	cmp	r2, #32
   13e50:	f340 82fa 	ble.w	14448 <_dtoa_r+0x6a0>
   13e54:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   13e58:	fa08 f802 	lsl.w	r8, r8, r2
   13e5c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   13e60:	40d6      	lsrs	r6, r2
   13e62:	ea48 0206 	orr.w	r2, r8, r6
   13e66:	ee07 2a10 	vmov	s14, r2
   13e6a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   13e6e:	1e58      	subs	r0, r3, #1
   13e70:	ee17 6a90 	vmov	r6, s15
   13e74:	ec53 2b17 	vmov	r2, r3, d7
   13e78:	f04f 0a01 	mov.w	sl, #1
   13e7c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   13e80:	ed9f 3b91 	vldr	d3, [pc, #580]	; 140c8 <_dtoa_r+0x320>
   13e84:	ed9f 7b92 	vldr	d7, [pc, #584]	; 140d0 <_dtoa_r+0x328>
   13e88:	ed9f 5b93 	vldr	d5, [pc, #588]	; 140d8 <_dtoa_r+0x330>
   13e8c:	ee06 0a90 	vmov	s13, r0
   13e90:	ec43 2b12 	vmov	d2, r2, r3
   13e94:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   13e98:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13e9c:	ee32 6b46 	vsub.f64	d6, d2, d6
   13ea0:	eea6 7b03 	vfma.f64	d7, d6, d3
   13ea4:	eea4 7b05 	vfma.f64	d7, d4, d5
   13ea8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13eac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   13eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13eb4:	ee16 7a90 	vmov	r7, s13
   13eb8:	d508      	bpl.n	13ecc <_dtoa_r+0x124>
   13eba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   13ebe:	eeb4 6b47 	vcmp.f64	d6, d7
   13ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ec6:	bf18      	it	ne
   13ec8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   13ecc:	2f16      	cmp	r7, #22
   13ece:	f200 8145 	bhi.w	1415c <_dtoa_r+0x3b4>
   13ed2:	4b85      	ldr	r3, [pc, #532]	; (140e8 <_dtoa_r+0x340>)
   13ed4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   13ed8:	ed93 7b00 	vldr	d7, [r3]
   13edc:	eeb4 8bc7 	vcmpe.f64	d8, d7
   13ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ee4:	d557      	bpl.n	13f96 <_dtoa_r+0x1ee>
   13ee6:	1a09      	subs	r1, r1, r0
   13ee8:	2300      	movs	r3, #0
   13eea:	f1b1 0801 	subs.w	r8, r1, #1
   13eee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   13ef2:	930a      	str	r3, [sp, #40]	; 0x28
   13ef4:	f100 8139 	bmi.w	1416a <_dtoa_r+0x3c2>
   13ef8:	2300      	movs	r3, #0
   13efa:	9306      	str	r3, [sp, #24]
   13efc:	2f00      	cmp	r7, #0
   13efe:	da52      	bge.n	13fa6 <_dtoa_r+0x1fe>
   13f00:	9b06      	ldr	r3, [sp, #24]
   13f02:	9704      	str	r7, [sp, #16]
   13f04:	1bdb      	subs	r3, r3, r7
   13f06:	9306      	str	r3, [sp, #24]
   13f08:	427b      	negs	r3, r7
   13f0a:	9308      	str	r3, [sp, #32]
   13f0c:	9b01      	ldr	r3, [sp, #4]
   13f0e:	2b09      	cmp	r3, #9
   13f10:	f04f 0700 	mov.w	r7, #0
   13f14:	d84e      	bhi.n	13fb4 <_dtoa_r+0x20c>
   13f16:	2b05      	cmp	r3, #5
   13f18:	f340 829d 	ble.w	14456 <_dtoa_r+0x6ae>
   13f1c:	3b04      	subs	r3, #4
   13f1e:	9301      	str	r3, [sp, #4]
   13f20:	2600      	movs	r6, #0
   13f22:	9b01      	ldr	r3, [sp, #4]
   13f24:	1e9a      	subs	r2, r3, #2
   13f26:	2a03      	cmp	r2, #3
   13f28:	f200 8125 	bhi.w	14176 <_dtoa_r+0x3ce>
   13f2c:	e8df f012 	tbh	[pc, r2, lsl #1]
   13f30:	03a703aa 	.word	0x03a703aa
   13f34:	037e039d 	.word	0x037e039d
   13f38:	9a05      	ldr	r2, [sp, #20]
   13f3a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   13f3e:	f242 730f 	movw	r3, #9999	; 0x270f
   13f42:	ea58 0806 	orrs.w	r8, r8, r6
   13f46:	6013      	str	r3, [r2, #0]
   13f48:	d11e      	bne.n	13f88 <_dtoa_r+0x1e0>
   13f4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	f000 8591 	beq.w	14a74 <_dtoa_r+0xccc>
   13f52:	4b66      	ldr	r3, [pc, #408]	; (140ec <_dtoa_r+0x344>)
   13f54:	9300      	str	r3, [sp, #0]
   13f56:	3308      	adds	r3, #8
   13f58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13f5a:	9800      	ldr	r0, [sp, #0]
   13f5c:	6013      	str	r3, [r2, #0]
   13f5e:	b00f      	add	sp, #60	; 0x3c
   13f60:	ecbd 8b02 	vpop	{d8}
   13f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	ee18 6a90 	vmov	r6, s17
   13f6c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   13f70:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   13f74:	ec53 2b18 	vmov	r2, r3, d8
   13f78:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   13f7c:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f7e:	f04f 0a00 	mov.w	sl, #0
   13f82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   13f86:	e77b      	b.n	13e80 <_dtoa_r+0xd8>
   13f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13f8a:	2b00      	cmp	r3, #0
   13f8c:	f040 833b 	bne.w	14606 <_dtoa_r+0x85e>
   13f90:	4b57      	ldr	r3, [pc, #348]	; (140f0 <_dtoa_r+0x348>)
   13f92:	9300      	str	r3, [sp, #0]
   13f94:	e744      	b.n	13e20 <_dtoa_r+0x78>
   13f96:	1a09      	subs	r1, r1, r0
   13f98:	2300      	movs	r3, #0
   13f9a:	f1b1 0801 	subs.w	r8, r1, #1
   13f9e:	930a      	str	r3, [sp, #40]	; 0x28
   13fa0:	f100 80e3 	bmi.w	1416a <_dtoa_r+0x3c2>
   13fa4:	9306      	str	r3, [sp, #24]
   13fa6:	2300      	movs	r3, #0
   13fa8:	9308      	str	r3, [sp, #32]
   13faa:	9b01      	ldr	r3, [sp, #4]
   13fac:	9704      	str	r7, [sp, #16]
   13fae:	2b09      	cmp	r3, #9
   13fb0:	44b8      	add	r8, r7
   13fb2:	d9b0      	bls.n	13f16 <_dtoa_r+0x16e>
   13fb4:	2300      	movs	r3, #0
   13fb6:	2601      	movs	r6, #1
   13fb8:	9301      	str	r3, [sp, #4]
   13fba:	9607      	str	r6, [sp, #28]
   13fbc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13fc0:	469b      	mov	fp, r3
   13fc2:	2100      	movs	r1, #0
   13fc4:	63e1      	str	r1, [r4, #60]	; 0x3c
   13fc6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   13fca:	4620      	mov	r0, r4
   13fcc:	f7fd fa6c 	bl	114a8 <_Balloc>
   13fd0:	9000      	str	r0, [sp, #0]
   13fd2:	2800      	cmp	r0, #0
   13fd4:	f000 8540 	beq.w	14a58 <_dtoa_r+0xcb0>
   13fd8:	9b00      	ldr	r3, [sp, #0]
   13fda:	63a3      	str	r3, [r4, #56]	; 0x38
   13fdc:	f1b9 0f0e 	cmp.w	r9, #14
   13fe0:	f200 80dc 	bhi.w	1419c <_dtoa_r+0x3f4>
   13fe4:	2e00      	cmp	r6, #0
   13fe6:	f000 80d9 	beq.w	1419c <_dtoa_r+0x3f4>
   13fea:	9b04      	ldr	r3, [sp, #16]
   13fec:	2b00      	cmp	r3, #0
   13fee:	f340 83de 	ble.w	147ae <_dtoa_r+0xa06>
   13ff2:	4a3d      	ldr	r2, [pc, #244]	; (140e8 <_dtoa_r+0x340>)
   13ff4:	f003 010f 	and.w	r1, r3, #15
   13ff8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   13ffc:	ed92 7b00 	vldr	d7, [r2]
   14000:	111a      	asrs	r2, r3, #4
   14002:	05db      	lsls	r3, r3, #23
   14004:	f140 8382 	bpl.w	1470c <_dtoa_r+0x964>
   14008:	493a      	ldr	r1, [pc, #232]	; (140f4 <_dtoa_r+0x34c>)
   1400a:	ed91 6b08 	vldr	d6, [r1, #32]
   1400e:	f002 020f 	and.w	r2, r2, #15
   14012:	2003      	movs	r0, #3
   14014:	ee88 5b06 	vdiv.f64	d5, d8, d6
   14018:	b15a      	cbz	r2, 14032 <_dtoa_r+0x28a>
   1401a:	4936      	ldr	r1, [pc, #216]	; (140f4 <_dtoa_r+0x34c>)
   1401c:	07d6      	lsls	r6, r2, #31
   1401e:	d504      	bpl.n	1402a <_dtoa_r+0x282>
   14020:	ed91 6b00 	vldr	d6, [r1]
   14024:	3001      	adds	r0, #1
   14026:	ee27 7b06 	vmul.f64	d7, d7, d6
   1402a:	1052      	asrs	r2, r2, #1
   1402c:	f101 0108 	add.w	r1, r1, #8
   14030:	d1f4      	bne.n	1401c <_dtoa_r+0x274>
   14032:	ee85 6b07 	vdiv.f64	d6, d5, d7
   14036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14038:	b13b      	cbz	r3, 1404a <_dtoa_r+0x2a2>
   1403a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1403e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14046:	f100 84ae 	bmi.w	149a6 <_dtoa_r+0xbfe>
   1404a:	ee07 0a90 	vmov	s15, r0
   1404e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14052:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14056:	eea5 7b06 	vfma.f64	d7, d5, d6
   1405a:	ee17 2a90 	vmov	r2, s15
   1405e:	ec51 0b17 	vmov	r0, r1, d7
   14062:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   14066:	f1b9 0f00 	cmp.w	r9, #0
   1406a:	f000 8388 	beq.w	1477e <_dtoa_r+0x9d6>
   1406e:	9e04      	ldr	r6, [sp, #16]
   14070:	464a      	mov	r2, r9
   14072:	9b07      	ldr	r3, [sp, #28]
   14074:	2b00      	cmp	r3, #0
   14076:	f000 8447 	beq.w	14908 <_dtoa_r+0xb60>
   1407a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1407e:	4b1a      	ldr	r3, [pc, #104]	; (140e8 <_dtoa_r+0x340>)
   14080:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   14084:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14088:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1408c:	ee36 7b47 	vsub.f64	d7, d6, d7
   14090:	ed1c 6b02 	vldr	d6, [ip, #-8]
   14094:	ee83 5b06 	vdiv.f64	d5, d3, d6
   14098:	ec41 0b16 	vmov	d6, r0, r1
   1409c:	ee14 0a90 	vmov	r0, s9
   140a0:	ee35 5b46 	vsub.f64	d5, d5, d6
   140a4:	9900      	ldr	r1, [sp, #0]
   140a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   140aa:	3030      	adds	r0, #48	; 0x30
   140ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140b0:	f801 0b01 	strb.w	r0, [r1], #1
   140b4:	f300 84ac 	bgt.w	14a10 <_dtoa_r+0xc68>
   140b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   140bc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   140c0:	f04f 0c00 	mov.w	ip, #0
   140c4:	e031      	b.n	1412a <_dtoa_r+0x382>
   140c6:	bf00      	nop
   140c8:	636f4361 	.word	0x636f4361
   140cc:	3fd287a7 	.word	0x3fd287a7
   140d0:	8b60c8b3 	.word	0x8b60c8b3
   140d4:	3fc68a28 	.word	0x3fc68a28
   140d8:	509f79fb 	.word	0x509f79fb
   140dc:	3fd34413 	.word	0x3fd34413
   140e0:	7ff00000 	.word	0x7ff00000
   140e4:	20002a41 	.word	0x20002a41
   140e8:	20000b58 	.word	0x20000b58
   140ec:	20002604 	.word	0x20002604
   140f0:	20002610 	.word	0x20002610
   140f4:	20000b30 	.word	0x20000b30
   140f8:	f10c 0c01 	add.w	ip, ip, #1
   140fc:	4594      	cmp	ip, r2
   140fe:	da4d      	bge.n	1419c <_dtoa_r+0x3f4>
   14100:	ee27 7b04 	vmul.f64	d7, d7, d4
   14104:	ee25 5b04 	vmul.f64	d5, d5, d4
   14108:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1410c:	ee16 3a90 	vmov	r3, s13
   14110:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   14114:	3330      	adds	r3, #48	; 0x30
   14116:	ee37 7b43 	vsub.f64	d7, d7, d3
   1411a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14122:	f801 3b01 	strb.w	r3, [r1], #1
   14126:	f100 8473 	bmi.w	14a10 <_dtoa_r+0xc68>
   1412a:	ee32 6b47 	vsub.f64	d6, d2, d7
   1412e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   14132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14136:	d5df      	bpl.n	140f8 <_dtoa_r+0x350>
   14138:	9a00      	ldr	r2, [sp, #0]
   1413a:	9604      	str	r6, [sp, #16]
   1413c:	e002      	b.n	14144 <_dtoa_r+0x39c>
   1413e:	428a      	cmp	r2, r1
   14140:	f000 8450 	beq.w	149e4 <_dtoa_r+0xc3c>
   14144:	4689      	mov	r9, r1
   14146:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1414a:	2b39      	cmp	r3, #57	; 0x39
   1414c:	d0f7      	beq.n	1413e <_dtoa_r+0x396>
   1414e:	3301      	adds	r3, #1
   14150:	b2db      	uxtb	r3, r3
   14152:	700b      	strb	r3, [r1, #0]
   14154:	9b04      	ldr	r3, [sp, #16]
   14156:	3301      	adds	r3, #1
   14158:	9304      	str	r3, [sp, #16]
   1415a:	e155      	b.n	14408 <_dtoa_r+0x660>
   1415c:	1a09      	subs	r1, r1, r0
   1415e:	2301      	movs	r3, #1
   14160:	f1b1 0801 	subs.w	r8, r1, #1
   14164:	930a      	str	r3, [sp, #40]	; 0x28
   14166:	f57f aec7 	bpl.w	13ef8 <_dtoa_r+0x150>
   1416a:	f1c1 0301 	rsb	r3, r1, #1
   1416e:	9306      	str	r3, [sp, #24]
   14170:	f04f 0800 	mov.w	r8, #0
   14174:	e6c2      	b.n	13efc <_dtoa_r+0x154>
   14176:	2600      	movs	r6, #0
   14178:	63e6      	str	r6, [r4, #60]	; 0x3c
   1417a:	4631      	mov	r1, r6
   1417c:	4620      	mov	r0, r4
   1417e:	f7fd f993 	bl	114a8 <_Balloc>
   14182:	9000      	str	r0, [sp, #0]
   14184:	2800      	cmp	r0, #0
   14186:	f000 8467 	beq.w	14a58 <_dtoa_r+0xcb0>
   1418a:	9b00      	ldr	r3, [sp, #0]
   1418c:	63a3      	str	r3, [r4, #56]	; 0x38
   1418e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14192:	930b      	str	r3, [sp, #44]	; 0x2c
   14194:	4699      	mov	r9, r3
   14196:	2301      	movs	r3, #1
   14198:	46b3      	mov	fp, r6
   1419a:	9307      	str	r3, [sp, #28]
   1419c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1419e:	2a00      	cmp	r2, #0
   141a0:	db55      	blt.n	1424e <_dtoa_r+0x4a6>
   141a2:	9904      	ldr	r1, [sp, #16]
   141a4:	290e      	cmp	r1, #14
   141a6:	dc52      	bgt.n	1424e <_dtoa_r+0x4a6>
   141a8:	4bb7      	ldr	r3, [pc, #732]	; (14488 <_dtoa_r+0x6e0>)
   141aa:	f1bb 0f00 	cmp.w	fp, #0
   141ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   141b2:	ed93 6b00 	vldr	d6, [r3]
   141b6:	da15      	bge.n	141e4 <_dtoa_r+0x43c>
   141b8:	f1b9 0f00 	cmp.w	r9, #0
   141bc:	dc12      	bgt.n	141e4 <_dtoa_r+0x43c>
   141be:	f040 82f2 	bne.w	147a6 <_dtoa_r+0x9fe>
   141c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   141c6:	ee26 7b07 	vmul.f64	d7, d6, d7
   141ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
   141ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141d2:	46ca      	mov	sl, r9
   141d4:	464e      	mov	r6, r9
   141d6:	f200 826d 	bhi.w	146b4 <_dtoa_r+0x90c>
   141da:	f8dd 8000 	ldr.w	r8, [sp]
   141de:	ea6f 0b0b 	mvn.w	fp, fp
   141e2:	e270      	b.n	146c6 <_dtoa_r+0x91e>
   141e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   141e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   141ec:	9900      	ldr	r1, [sp, #0]
   141ee:	ee17 3a10 	vmov	r3, s14
   141f2:	f1b9 0f01 	cmp.w	r9, #1
   141f6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   141fa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   141fe:	f801 3b01 	strb.w	r3, [r1], #1
   14202:	eea5 8b46 	vfms.f64	d8, d5, d6
   14206:	f000 8334 	beq.w	14872 <_dtoa_r+0xaca>
   1420a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1420e:	2301      	movs	r3, #1
   14210:	e011      	b.n	14236 <_dtoa_r+0x48e>
   14212:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14216:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1421a:	3301      	adds	r3, #1
   1421c:	ee17 2a10 	vmov	r2, s14
   14220:	454b      	cmp	r3, r9
   14222:	f102 0230 	add.w	r2, r2, #48	; 0x30
   14226:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1422a:	f801 2b01 	strb.w	r2, [r1], #1
   1422e:	eea5 8b46 	vfms.f64	d8, d5, d6
   14232:	f000 831e 	beq.w	14872 <_dtoa_r+0xaca>
   14236:	ee28 8b04 	vmul.f64	d8, d8, d4
   1423a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14242:	d1e6      	bne.n	14212 <_dtoa_r+0x46a>
   14244:	9b04      	ldr	r3, [sp, #16]
   14246:	3301      	adds	r3, #1
   14248:	9304      	str	r3, [sp, #16]
   1424a:	4689      	mov	r9, r1
   1424c:	e0dc      	b.n	14408 <_dtoa_r+0x660>
   1424e:	9b07      	ldr	r3, [sp, #28]
   14250:	b343      	cbz	r3, 142a4 <_dtoa_r+0x4fc>
   14252:	9b01      	ldr	r3, [sp, #4]
   14254:	2b01      	cmp	r3, #1
   14256:	f340 8276 	ble.w	14746 <_dtoa_r+0x99e>
   1425a:	9b08      	ldr	r3, [sp, #32]
   1425c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   14260:	4553      	cmp	r3, sl
   14262:	f280 823f 	bge.w	146e4 <_dtoa_r+0x93c>
   14266:	9b08      	ldr	r3, [sp, #32]
   14268:	f8cd a020 	str.w	sl, [sp, #32]
   1426c:	ebaa 0203 	sub.w	r2, sl, r3
   14270:	4417      	add	r7, r2
   14272:	f04f 0a00 	mov.w	sl, #0
   14276:	f1b9 0f00 	cmp.w	r9, #0
   1427a:	f2c0 8325 	blt.w	148c8 <_dtoa_r+0xb20>
   1427e:	9b06      	ldr	r3, [sp, #24]
   14280:	9309      	str	r3, [sp, #36]	; 0x24
   14282:	444b      	add	r3, r9
   14284:	44c8      	add	r8, r9
   14286:	9306      	str	r3, [sp, #24]
   14288:	2101      	movs	r1, #1
   1428a:	4620      	mov	r0, r4
   1428c:	f7fd f9de 	bl	1164c <__i2b>
   14290:	4606      	mov	r6, r0
   14292:	e00c      	b.n	142ae <_dtoa_r+0x506>
   14294:	4b7d      	ldr	r3, [pc, #500]	; (1448c <_dtoa_r+0x6e4>)
   14296:	9300      	str	r3, [sp, #0]
   14298:	9800      	ldr	r0, [sp, #0]
   1429a:	b00f      	add	sp, #60	; 0x3c
   1429c:	ecbd 8b02 	vpop	{d8}
   142a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a4:	9b06      	ldr	r3, [sp, #24]
   142a6:	f8dd a020 	ldr.w	sl, [sp, #32]
   142aa:	9e07      	ldr	r6, [sp, #28]
   142ac:	9309      	str	r3, [sp, #36]	; 0x24
   142ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   142b0:	b16b      	cbz	r3, 142ce <_dtoa_r+0x526>
   142b2:	f1b8 0f00 	cmp.w	r8, #0
   142b6:	dd0a      	ble.n	142ce <_dtoa_r+0x526>
   142b8:	4543      	cmp	r3, r8
   142ba:	9906      	ldr	r1, [sp, #24]
   142bc:	461a      	mov	r2, r3
   142be:	bfa8      	it	ge
   142c0:	4642      	movge	r2, r8
   142c2:	1a89      	subs	r1, r1, r2
   142c4:	1a9b      	subs	r3, r3, r2
   142c6:	9106      	str	r1, [sp, #24]
   142c8:	9309      	str	r3, [sp, #36]	; 0x24
   142ca:	eba8 0802 	sub.w	r8, r8, r2
   142ce:	9b08      	ldr	r3, [sp, #32]
   142d0:	b163      	cbz	r3, 142ec <_dtoa_r+0x544>
   142d2:	9b07      	ldr	r3, [sp, #28]
   142d4:	2b00      	cmp	r3, #0
   142d6:	f000 82a7 	beq.w	14828 <_dtoa_r+0xa80>
   142da:	f1ba 0f00 	cmp.w	sl, #0
   142de:	f300 8204 	bgt.w	146ea <_dtoa_r+0x942>
   142e2:	9b08      	ldr	r3, [sp, #32]
   142e4:	ebb3 020a 	subs.w	r2, r3, sl
   142e8:	f040 82ff 	bne.w	148ea <_dtoa_r+0xb42>
   142ec:	2101      	movs	r1, #1
   142ee:	4620      	mov	r0, r4
   142f0:	f7fd f9ac 	bl	1164c <__i2b>
   142f4:	2f00      	cmp	r7, #0
   142f6:	4682      	mov	sl, r0
   142f8:	f300 80af 	bgt.w	1445a <_dtoa_r+0x6b2>
   142fc:	9b01      	ldr	r3, [sp, #4]
   142fe:	2b01      	cmp	r3, #1
   14300:	f340 8187 	ble.w	14612 <_dtoa_r+0x86a>
   14304:	2300      	movs	r3, #0
   14306:	9308      	str	r3, [sp, #32]
   14308:	2001      	movs	r0, #1
   1430a:	2f00      	cmp	r7, #0
   1430c:	f040 80b1 	bne.w	14472 <_dtoa_r+0x6ca>
   14310:	4440      	add	r0, r8
   14312:	f010 001f 	ands.w	r0, r0, #31
   14316:	f000 817a 	beq.w	1460e <_dtoa_r+0x866>
   1431a:	f1c0 0220 	rsb	r2, r0, #32
   1431e:	2a04      	cmp	r2, #4
   14320:	f300 8088 	bgt.w	14434 <_dtoa_r+0x68c>
   14324:	f040 81f6 	bne.w	14714 <_dtoa_r+0x96c>
   14328:	9b06      	ldr	r3, [sp, #24]
   1432a:	2b00      	cmp	r3, #0
   1432c:	dd05      	ble.n	1433a <_dtoa_r+0x592>
   1432e:	4629      	mov	r1, r5
   14330:	461a      	mov	r2, r3
   14332:	4620      	mov	r0, r4
   14334:	f7fd fac6 	bl	118c4 <__lshift>
   14338:	4605      	mov	r5, r0
   1433a:	f1b8 0f00 	cmp.w	r8, #0
   1433e:	dd05      	ble.n	1434c <_dtoa_r+0x5a4>
   14340:	4651      	mov	r1, sl
   14342:	4642      	mov	r2, r8
   14344:	4620      	mov	r0, r4
   14346:	f7fd fabd 	bl	118c4 <__lshift>
   1434a:	4682      	mov	sl, r0
   1434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1434e:	2b00      	cmp	r3, #0
   14350:	f040 813f 	bne.w	145d2 <_dtoa_r+0x82a>
   14354:	f1b9 0f00 	cmp.w	r9, #0
   14358:	f340 8125 	ble.w	145a6 <_dtoa_r+0x7fe>
   1435c:	9b07      	ldr	r3, [sp, #28]
   1435e:	2b00      	cmp	r3, #0
   14360:	f040 80a3 	bne.w	144aa <_dtoa_r+0x702>
   14364:	9b04      	ldr	r3, [sp, #16]
   14366:	3301      	adds	r3, #1
   14368:	9304      	str	r3, [sp, #16]
   1436a:	f8dd 8000 	ldr.w	r8, [sp]
   1436e:	2701      	movs	r7, #1
   14370:	e007      	b.n	14382 <_dtoa_r+0x5da>
   14372:	4629      	mov	r1, r5
   14374:	2300      	movs	r3, #0
   14376:	220a      	movs	r2, #10
   14378:	4620      	mov	r0, r4
   1437a:	f7fd f8c5 	bl	11508 <__multadd>
   1437e:	3701      	adds	r7, #1
   14380:	4605      	mov	r5, r0
   14382:	4651      	mov	r1, sl
   14384:	4628      	mov	r0, r5
   14386:	f7ff fc79 	bl	13c7c <quorem>
   1438a:	45b9      	cmp	r9, r7
   1438c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   14390:	f808 0b01 	strb.w	r0, [r8], #1
   14394:	dced      	bgt.n	14372 <_dtoa_r+0x5ca>
   14396:	f1b9 0f00 	cmp.w	r9, #0
   1439a:	9a00      	ldr	r2, [sp, #0]
   1439c:	bfcc      	ite	gt
   1439e:	46cb      	movgt	fp, r9
   143a0:	f04f 0b01 	movle.w	fp, #1
   143a4:	4603      	mov	r3, r0
   143a6:	4493      	add	fp, r2
   143a8:	2700      	movs	r7, #0
   143aa:	4629      	mov	r1, r5
   143ac:	2201      	movs	r2, #1
   143ae:	4620      	mov	r0, r4
   143b0:	9301      	str	r3, [sp, #4]
   143b2:	f7fd fa87 	bl	118c4 <__lshift>
   143b6:	4651      	mov	r1, sl
   143b8:	4605      	mov	r5, r0
   143ba:	f7fd fafb 	bl	119b4 <__mcmp>
   143be:	2800      	cmp	r0, #0
   143c0:	f340 81af 	ble.w	14722 <_dtoa_r+0x97a>
   143c4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   143c8:	9a00      	ldr	r2, [sp, #0]
   143ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   143ce:	e004      	b.n	143da <_dtoa_r+0x632>
   143d0:	455a      	cmp	r2, fp
   143d2:	f000 81b1 	beq.w	14738 <_dtoa_r+0x990>
   143d6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   143da:	2b39      	cmp	r3, #57	; 0x39
   143dc:	f10b 0901 	add.w	r9, fp, #1
   143e0:	d0f6      	beq.n	143d0 <_dtoa_r+0x628>
   143e2:	3301      	adds	r3, #1
   143e4:	f88b 3000 	strb.w	r3, [fp]
   143e8:	4651      	mov	r1, sl
   143ea:	4620      	mov	r0, r4
   143ec:	f7fd f882 	bl	114f4 <_Bfree>
   143f0:	b156      	cbz	r6, 14408 <_dtoa_r+0x660>
   143f2:	b12f      	cbz	r7, 14400 <_dtoa_r+0x658>
   143f4:	42b7      	cmp	r7, r6
   143f6:	d003      	beq.n	14400 <_dtoa_r+0x658>
   143f8:	4639      	mov	r1, r7
   143fa:	4620      	mov	r0, r4
   143fc:	f7fd f87a 	bl	114f4 <_Bfree>
   14400:	4631      	mov	r1, r6
   14402:	4620      	mov	r0, r4
   14404:	f7fd f876 	bl	114f4 <_Bfree>
   14408:	4629      	mov	r1, r5
   1440a:	4620      	mov	r0, r4
   1440c:	f7fd f872 	bl	114f4 <_Bfree>
   14410:	2300      	movs	r3, #0
   14412:	f889 3000 	strb.w	r3, [r9]
   14416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1441a:	601a      	str	r2, [r3, #0]
   1441c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1441e:	2b00      	cmp	r3, #0
   14420:	f43f acfe 	beq.w	13e20 <_dtoa_r+0x78>
   14424:	9800      	ldr	r0, [sp, #0]
   14426:	f8c3 9000 	str.w	r9, [r3]
   1442a:	b00f      	add	sp, #60	; 0x3c
   1442c:	ecbd 8b02 	vpop	{d8}
   14430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14434:	f1c0 001c 	rsb	r0, r0, #28
   14438:	9b06      	ldr	r3, [sp, #24]
   1443a:	4403      	add	r3, r0
   1443c:	9306      	str	r3, [sp, #24]
   1443e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14440:	4403      	add	r3, r0
   14442:	9309      	str	r3, [sp, #36]	; 0x24
   14444:	4480      	add	r8, r0
   14446:	e76f      	b.n	14328 <_dtoa_r+0x580>
   14448:	f1c2 0220 	rsb	r2, r2, #32
   1444c:	fa06 f202 	lsl.w	r2, r6, r2
   14450:	ee07 2a10 	vmov	s14, r2
   14454:	e509      	b.n	13e6a <_dtoa_r+0xc2>
   14456:	2601      	movs	r6, #1
   14458:	e563      	b.n	13f22 <_dtoa_r+0x17a>
   1445a:	4601      	mov	r1, r0
   1445c:	463a      	mov	r2, r7
   1445e:	4620      	mov	r0, r4
   14460:	f7fd f9d0 	bl	11804 <__pow5mult>
   14464:	9b01      	ldr	r3, [sp, #4]
   14466:	2b01      	cmp	r3, #1
   14468:	4682      	mov	sl, r0
   1446a:	f340 81c5 	ble.w	147f8 <_dtoa_r+0xa50>
   1446e:	2300      	movs	r3, #0
   14470:	9308      	str	r3, [sp, #32]
   14472:	f8da 2010 	ldr.w	r2, [sl, #16]
   14476:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   1447a:	6910      	ldr	r0, [r2, #16]
   1447c:	f7fd f896 	bl	115ac <__hi0bits>
   14480:	f1c0 0020 	rsb	r0, r0, #32
   14484:	e744      	b.n	14310 <_dtoa_r+0x568>
   14486:	bf00      	nop
   14488:	20000b58 	.word	0x20000b58
   1448c:	20002a40 	.word	0x20002a40
   14490:	4631      	mov	r1, r6
   14492:	2300      	movs	r3, #0
   14494:	220a      	movs	r2, #10
   14496:	4620      	mov	r0, r4
   14498:	f7fd f836 	bl	11508 <__multadd>
   1449c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1449e:	2b00      	cmp	r3, #0
   144a0:	4606      	mov	r6, r0
   144a2:	f340 82ce 	ble.w	14a42 <_dtoa_r+0xc9a>
   144a6:	9704      	str	r7, [sp, #16]
   144a8:	4699      	mov	r9, r3
   144aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   144ac:	2b00      	cmp	r3, #0
   144ae:	dd05      	ble.n	144bc <_dtoa_r+0x714>
   144b0:	4631      	mov	r1, r6
   144b2:	461a      	mov	r2, r3
   144b4:	4620      	mov	r0, r4
   144b6:	f7fd fa05 	bl	118c4 <__lshift>
   144ba:	4606      	mov	r6, r0
   144bc:	9b08      	ldr	r3, [sp, #32]
   144be:	2b00      	cmp	r3, #0
   144c0:	f040 81eb 	bne.w	1489a <_dtoa_r+0xaf2>
   144c4:	46b0      	mov	r8, r6
   144c6:	9b02      	ldr	r3, [sp, #8]
   144c8:	9f00      	ldr	r7, [sp, #0]
   144ca:	f003 0201 	and.w	r2, r3, #1
   144ce:	1e7b      	subs	r3, r7, #1
   144d0:	444b      	add	r3, r9
   144d2:	9308      	str	r3, [sp, #32]
   144d4:	9b01      	ldr	r3, [sp, #4]
   144d6:	920a      	str	r2, [sp, #40]	; 0x28
   144d8:	4313      	orrs	r3, r2
   144da:	9309      	str	r3, [sp, #36]	; 0x24
   144dc:	4651      	mov	r1, sl
   144de:	4628      	mov	r0, r5
   144e0:	f7ff fbcc 	bl	13c7c <quorem>
   144e4:	4631      	mov	r1, r6
   144e6:	4683      	mov	fp, r0
   144e8:	4628      	mov	r0, r5
   144ea:	f7fd fa63 	bl	119b4 <__mcmp>
   144ee:	4642      	mov	r2, r8
   144f0:	4651      	mov	r1, sl
   144f2:	4681      	mov	r9, r0
   144f4:	4620      	mov	r0, r4
   144f6:	f7fd fa7f 	bl	119f8 <__mdiff>
   144fa:	68c2      	ldr	r2, [r0, #12]
   144fc:	4601      	mov	r1, r0
   144fe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   14502:	2a00      	cmp	r2, #0
   14504:	d142      	bne.n	1458c <_dtoa_r+0x7e4>
   14506:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1450a:	4628      	mov	r0, r5
   1450c:	f7fd fa52 	bl	119b4 <__mcmp>
   14510:	9906      	ldr	r1, [sp, #24]
   14512:	9002      	str	r0, [sp, #8]
   14514:	4620      	mov	r0, r4
   14516:	f7fc ffed 	bl	114f4 <_Bfree>
   1451a:	9a02      	ldr	r2, [sp, #8]
   1451c:	9b07      	ldr	r3, [sp, #28]
   1451e:	b91a      	cbnz	r2, 14528 <_dtoa_r+0x780>
   14520:	9909      	ldr	r1, [sp, #36]	; 0x24
   14522:	2900      	cmp	r1, #0
   14524:	f000 827e 	beq.w	14a24 <_dtoa_r+0xc7c>
   14528:	f1b9 0f00 	cmp.w	r9, #0
   1452c:	f2c0 8183 	blt.w	14836 <_dtoa_r+0xa8e>
   14530:	9901      	ldr	r1, [sp, #4]
   14532:	ea49 0901 	orr.w	r9, r9, r1
   14536:	990a      	ldr	r1, [sp, #40]	; 0x28
   14538:	ea51 0909 	orrs.w	r9, r1, r9
   1453c:	f000 817b 	beq.w	14836 <_dtoa_r+0xa8e>
   14540:	2a00      	cmp	r2, #0
   14542:	f300 81c6 	bgt.w	148d2 <_dtoa_r+0xb2a>
   14546:	9a08      	ldr	r2, [sp, #32]
   14548:	703b      	strb	r3, [r7, #0]
   1454a:	f107 0901 	add.w	r9, r7, #1
   1454e:	4297      	cmp	r7, r2
   14550:	46cb      	mov	fp, r9
   14552:	f000 81c4 	beq.w	148de <_dtoa_r+0xb36>
   14556:	4629      	mov	r1, r5
   14558:	2300      	movs	r3, #0
   1455a:	220a      	movs	r2, #10
   1455c:	4620      	mov	r0, r4
   1455e:	f7fc ffd3 	bl	11508 <__multadd>
   14562:	4546      	cmp	r6, r8
   14564:	4605      	mov	r5, r0
   14566:	4631      	mov	r1, r6
   14568:	f04f 0300 	mov.w	r3, #0
   1456c:	f04f 020a 	mov.w	r2, #10
   14570:	4620      	mov	r0, r4
   14572:	d012      	beq.n	1459a <_dtoa_r+0x7f2>
   14574:	f7fc ffc8 	bl	11508 <__multadd>
   14578:	4641      	mov	r1, r8
   1457a:	4606      	mov	r6, r0
   1457c:	2300      	movs	r3, #0
   1457e:	220a      	movs	r2, #10
   14580:	4620      	mov	r0, r4
   14582:	f7fc ffc1 	bl	11508 <__multadd>
   14586:	464f      	mov	r7, r9
   14588:	4680      	mov	r8, r0
   1458a:	e7a7      	b.n	144dc <_dtoa_r+0x734>
   1458c:	4620      	mov	r0, r4
   1458e:	9302      	str	r3, [sp, #8]
   14590:	f7fc ffb0 	bl	114f4 <_Bfree>
   14594:	9b02      	ldr	r3, [sp, #8]
   14596:	2201      	movs	r2, #1
   14598:	e7c6      	b.n	14528 <_dtoa_r+0x780>
   1459a:	f7fc ffb5 	bl	11508 <__multadd>
   1459e:	464f      	mov	r7, r9
   145a0:	4606      	mov	r6, r0
   145a2:	4680      	mov	r8, r0
   145a4:	e79a      	b.n	144dc <_dtoa_r+0x734>
   145a6:	9b01      	ldr	r3, [sp, #4]
   145a8:	2b02      	cmp	r3, #2
   145aa:	dc71      	bgt.n	14690 <_dtoa_r+0x8e8>
   145ac:	9b07      	ldr	r3, [sp, #28]
   145ae:	2b00      	cmp	r3, #0
   145b0:	f47f af7b 	bne.w	144aa <_dtoa_r+0x702>
   145b4:	9b04      	ldr	r3, [sp, #16]
   145b6:	4651      	mov	r1, sl
   145b8:	3301      	adds	r3, #1
   145ba:	4628      	mov	r0, r5
   145bc:	9304      	str	r3, [sp, #16]
   145be:	f7ff fb5d 	bl	13c7c <quorem>
   145c2:	f8dd b000 	ldr.w	fp, [sp]
   145c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   145ca:	f80b 3b01 	strb.w	r3, [fp], #1
   145ce:	2700      	movs	r7, #0
   145d0:	e6eb      	b.n	143aa <_dtoa_r+0x602>
   145d2:	4651      	mov	r1, sl
   145d4:	4628      	mov	r0, r5
   145d6:	f7fd f9ed 	bl	119b4 <__mcmp>
   145da:	2800      	cmp	r0, #0
   145dc:	f6bf aeba 	bge.w	14354 <_dtoa_r+0x5ac>
   145e0:	4629      	mov	r1, r5
   145e2:	2300      	movs	r3, #0
   145e4:	220a      	movs	r2, #10
   145e6:	4620      	mov	r0, r4
   145e8:	f7fc ff8e 	bl	11508 <__multadd>
   145ec:	9b04      	ldr	r3, [sp, #16]
   145ee:	1e5f      	subs	r7, r3, #1
   145f0:	9b07      	ldr	r3, [sp, #28]
   145f2:	4605      	mov	r5, r0
   145f4:	2b00      	cmp	r3, #0
   145f6:	f47f af4b 	bne.w	14490 <_dtoa_r+0x6e8>
   145fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145fc:	2b00      	cmp	r3, #0
   145fe:	f340 8218 	ble.w	14a32 <_dtoa_r+0xc8a>
   14602:	4699      	mov	r9, r3
   14604:	e6b1      	b.n	1436a <_dtoa_r+0x5c2>
   14606:	4bbc      	ldr	r3, [pc, #752]	; (148f8 <_dtoa_r+0xb50>)
   14608:	9300      	str	r3, [sp, #0]
   1460a:	3303      	adds	r3, #3
   1460c:	e4a4      	b.n	13f58 <_dtoa_r+0x1b0>
   1460e:	201c      	movs	r0, #28
   14610:	e712      	b.n	14438 <_dtoa_r+0x690>
   14612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14616:	2800      	cmp	r0, #0
   14618:	f47f ae74 	bne.w	14304 <_dtoa_r+0x55c>
   1461c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14620:	2a00      	cmp	r2, #0
   14622:	f000 80f4 	beq.w	1480e <_dtoa_r+0xa66>
   14626:	9b02      	ldr	r3, [sp, #8]
   14628:	9308      	str	r3, [sp, #32]
   1462a:	e66d      	b.n	14308 <_dtoa_r+0x560>
   1462c:	2301      	movs	r3, #1
   1462e:	9307      	str	r3, [sp, #28]
   14630:	9b04      	ldr	r3, [sp, #16]
   14632:	445b      	add	r3, fp
   14634:	f103 0901 	add.w	r9, r3, #1
   14638:	f1b9 0f01 	cmp.w	r9, #1
   1463c:	46cc      	mov	ip, r9
   1463e:	930b      	str	r3, [sp, #44]	; 0x2c
   14640:	bfb8      	it	lt
   14642:	f04f 0c01 	movlt.w	ip, #1
   14646:	2100      	movs	r1, #0
   14648:	f1bc 0f17 	cmp.w	ip, #23
   1464c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1464e:	f77f acbc 	ble.w	13fca <_dtoa_r+0x222>
   14652:	2001      	movs	r0, #1
   14654:	2204      	movs	r2, #4
   14656:	0052      	lsls	r2, r2, #1
   14658:	f102 0314 	add.w	r3, r2, #20
   1465c:	4563      	cmp	r3, ip
   1465e:	4601      	mov	r1, r0
   14660:	f100 0001 	add.w	r0, r0, #1
   14664:	d9f7      	bls.n	14656 <_dtoa_r+0x8ae>
   14666:	63e1      	str	r1, [r4, #60]	; 0x3c
   14668:	e4af      	b.n	13fca <_dtoa_r+0x222>
   1466a:	2301      	movs	r3, #1
   1466c:	9307      	str	r3, [sp, #28]
   1466e:	f1bb 0f00 	cmp.w	fp, #0
   14672:	dd52      	ble.n	1471a <_dtoa_r+0x972>
   14674:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   14678:	46d9      	mov	r9, fp
   1467a:	46dc      	mov	ip, fp
   1467c:	e7e3      	b.n	14646 <_dtoa_r+0x89e>
   1467e:	2300      	movs	r3, #0
   14680:	9307      	str	r3, [sp, #28]
   14682:	e7d5      	b.n	14630 <_dtoa_r+0x888>
   14684:	2300      	movs	r3, #0
   14686:	9307      	str	r3, [sp, #28]
   14688:	e7f1      	b.n	1466e <_dtoa_r+0x8c6>
   1468a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1468e:	9704      	str	r7, [sp, #16]
   14690:	f1b9 0f00 	cmp.w	r9, #0
   14694:	f47f ada1 	bne.w	141da <_dtoa_r+0x432>
   14698:	4651      	mov	r1, sl
   1469a:	464b      	mov	r3, r9
   1469c:	2205      	movs	r2, #5
   1469e:	4620      	mov	r0, r4
   146a0:	f7fc ff32 	bl	11508 <__multadd>
   146a4:	4601      	mov	r1, r0
   146a6:	4682      	mov	sl, r0
   146a8:	4628      	mov	r0, r5
   146aa:	f7fd f983 	bl	119b4 <__mcmp>
   146ae:	2800      	cmp	r0, #0
   146b0:	f77f ad93 	ble.w	141da <_dtoa_r+0x432>
   146b4:	9b04      	ldr	r3, [sp, #16]
   146b6:	f103 0b01 	add.w	fp, r3, #1
   146ba:	9b00      	ldr	r3, [sp, #0]
   146bc:	2231      	movs	r2, #49	; 0x31
   146be:	4698      	mov	r8, r3
   146c0:	f803 2b01 	strb.w	r2, [r3], #1
   146c4:	9300      	str	r3, [sp, #0]
   146c6:	4651      	mov	r1, sl
   146c8:	4620      	mov	r0, r4
   146ca:	f7fc ff13 	bl	114f4 <_Bfree>
   146ce:	f10b 0301 	add.w	r3, fp, #1
   146d2:	f8dd 9000 	ldr.w	r9, [sp]
   146d6:	9304      	str	r3, [sp, #16]
   146d8:	f8cd 8000 	str.w	r8, [sp]
   146dc:	2e00      	cmp	r6, #0
   146de:	f47f ae8f 	bne.w	14400 <_dtoa_r+0x658>
   146e2:	e691      	b.n	14408 <_dtoa_r+0x660>
   146e4:	eba3 0a0a 	sub.w	sl, r3, sl
   146e8:	e5c5      	b.n	14276 <_dtoa_r+0x4ce>
   146ea:	4631      	mov	r1, r6
   146ec:	4652      	mov	r2, sl
   146ee:	4620      	mov	r0, r4
   146f0:	f7fd f888 	bl	11804 <__pow5mult>
   146f4:	462a      	mov	r2, r5
   146f6:	4601      	mov	r1, r0
   146f8:	4606      	mov	r6, r0
   146fa:	4620      	mov	r0, r4
   146fc:	f7fc ffd4 	bl	116a8 <__multiply>
   14700:	4629      	mov	r1, r5
   14702:	4605      	mov	r5, r0
   14704:	4620      	mov	r0, r4
   14706:	f7fc fef5 	bl	114f4 <_Bfree>
   1470a:	e5ea      	b.n	142e2 <_dtoa_r+0x53a>
   1470c:	2002      	movs	r0, #2
   1470e:	eeb0 5b48 	vmov.f64	d5, d8
   14712:	e481      	b.n	14018 <_dtoa_r+0x270>
   14714:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   14718:	e68e      	b.n	14438 <_dtoa_r+0x690>
   1471a:	f04f 0b01 	mov.w	fp, #1
   1471e:	46d9      	mov	r9, fp
   14720:	e44f      	b.n	13fc2 <_dtoa_r+0x21a>
   14722:	d103      	bne.n	1472c <_dtoa_r+0x984>
   14724:	9b01      	ldr	r3, [sp, #4]
   14726:	07db      	lsls	r3, r3, #31
   14728:	f53f ae4c 	bmi.w	143c4 <_dtoa_r+0x61c>
   1472c:	46d9      	mov	r9, fp
   1472e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14732:	2b30      	cmp	r3, #48	; 0x30
   14734:	d0fa      	beq.n	1472c <_dtoa_r+0x984>
   14736:	e657      	b.n	143e8 <_dtoa_r+0x640>
   14738:	9b04      	ldr	r3, [sp, #16]
   1473a:	9a00      	ldr	r2, [sp, #0]
   1473c:	3301      	adds	r3, #1
   1473e:	9304      	str	r3, [sp, #16]
   14740:	2331      	movs	r3, #49	; 0x31
   14742:	7013      	strb	r3, [r2, #0]
   14744:	e650      	b.n	143e8 <_dtoa_r+0x640>
   14746:	f1ba 0f00 	cmp.w	sl, #0
   1474a:	f000 8123 	beq.w	14994 <_dtoa_r+0xbec>
   1474e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14752:	9b06      	ldr	r3, [sp, #24]
   14754:	9309      	str	r3, [sp, #36]	; 0x24
   14756:	4413      	add	r3, r2
   14758:	f8dd a020 	ldr.w	sl, [sp, #32]
   1475c:	9306      	str	r3, [sp, #24]
   1475e:	4490      	add	r8, r2
   14760:	e592      	b.n	14288 <_dtoa_r+0x4e0>
   14762:	ee07 0a90 	vmov	s15, r0
   14766:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   1476a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1476e:	eea6 5b07 	vfma.f64	d5, d6, d7
   14772:	ee15 2a90 	vmov	r2, s11
   14776:	ec51 0b15 	vmov	r0, r1, d5
   1477a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1477e:	ec41 0b15 	vmov	d5, r0, r1
   14782:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14786:	ee36 7b47 	vsub.f64	d7, d6, d7
   1478a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14792:	f300 8137 	bgt.w	14a04 <_dtoa_r+0xc5c>
   14796:	eeb1 5b45 	vneg.f64	d5, d5
   1479a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   147a2:	f57f acfb 	bpl.w	1419c <_dtoa_r+0x3f4>
   147a6:	f04f 0a00 	mov.w	sl, #0
   147aa:	4656      	mov	r6, sl
   147ac:	e515      	b.n	141da <_dtoa_r+0x432>
   147ae:	f000 80f5 	beq.w	1499c <_dtoa_r+0xbf4>
   147b2:	9b04      	ldr	r3, [sp, #16]
   147b4:	4951      	ldr	r1, [pc, #324]	; (148fc <_dtoa_r+0xb54>)
   147b6:	425a      	negs	r2, r3
   147b8:	f002 000f 	and.w	r0, r2, #15
   147bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   147c0:	ed91 6b00 	vldr	d6, [r1]
   147c4:	1112      	asrs	r2, r2, #4
   147c6:	ee28 6b06 	vmul.f64	d6, d8, d6
   147ca:	f000 8142 	beq.w	14a52 <_dtoa_r+0xcaa>
   147ce:	eeb0 7b46 	vmov.f64	d7, d6
   147d2:	494b      	ldr	r1, [pc, #300]	; (14900 <_dtoa_r+0xb58>)
   147d4:	2600      	movs	r6, #0
   147d6:	2002      	movs	r0, #2
   147d8:	07d3      	lsls	r3, r2, #31
   147da:	d505      	bpl.n	147e8 <_dtoa_r+0xa40>
   147dc:	ed91 5b00 	vldr	d5, [r1]
   147e0:	3001      	adds	r0, #1
   147e2:	2601      	movs	r6, #1
   147e4:	ee27 7b05 	vmul.f64	d7, d7, d5
   147e8:	1052      	asrs	r2, r2, #1
   147ea:	f101 0108 	add.w	r1, r1, #8
   147ee:	d1f3      	bne.n	147d8 <_dtoa_r+0xa30>
   147f0:	2e00      	cmp	r6, #0
   147f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
   147f6:	e41e      	b.n	14036 <_dtoa_r+0x28e>
   147f8:	9b02      	ldr	r3, [sp, #8]
   147fa:	2b00      	cmp	r3, #0
   147fc:	f47f ae37 	bne.w	1446e <_dtoa_r+0x6c6>
   14800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14804:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14808:	2a00      	cmp	r2, #0
   1480a:	f040 8137 	bne.w	14a7c <_dtoa_r+0xcd4>
   1480e:	4a3d      	ldr	r2, [pc, #244]	; (14904 <_dtoa_r+0xb5c>)
   14810:	400a      	ands	r2, r1
   14812:	2a00      	cmp	r2, #0
   14814:	f000 80fa 	beq.w	14a0c <_dtoa_r+0xc64>
   14818:	9b06      	ldr	r3, [sp, #24]
   1481a:	3301      	adds	r3, #1
   1481c:	9306      	str	r3, [sp, #24]
   1481e:	2301      	movs	r3, #1
   14820:	f108 0801 	add.w	r8, r8, #1
   14824:	9308      	str	r3, [sp, #32]
   14826:	e56f      	b.n	14308 <_dtoa_r+0x560>
   14828:	4629      	mov	r1, r5
   1482a:	9a08      	ldr	r2, [sp, #32]
   1482c:	4620      	mov	r0, r4
   1482e:	f7fc ffe9 	bl	11804 <__pow5mult>
   14832:	4605      	mov	r5, r0
   14834:	e55a      	b.n	142ec <_dtoa_r+0x544>
   14836:	2a00      	cmp	r2, #0
   14838:	dd12      	ble.n	14860 <_dtoa_r+0xab8>
   1483a:	4629      	mov	r1, r5
   1483c:	2201      	movs	r2, #1
   1483e:	4620      	mov	r0, r4
   14840:	9301      	str	r3, [sp, #4]
   14842:	f7fd f83f 	bl	118c4 <__lshift>
   14846:	4651      	mov	r1, sl
   14848:	4605      	mov	r5, r0
   1484a:	f7fd f8b3 	bl	119b4 <__mcmp>
   1484e:	2800      	cmp	r0, #0
   14850:	9b01      	ldr	r3, [sp, #4]
   14852:	f340 80e1 	ble.w	14a18 <_dtoa_r+0xc70>
   14856:	2b39      	cmp	r3, #57	; 0x39
   14858:	f000 80ca 	beq.w	149f0 <_dtoa_r+0xc48>
   1485c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14860:	46b9      	mov	r9, r7
   14862:	f809 3b01 	strb.w	r3, [r9], #1
   14866:	9b04      	ldr	r3, [sp, #16]
   14868:	3301      	adds	r3, #1
   1486a:	4637      	mov	r7, r6
   1486c:	9304      	str	r3, [sp, #16]
   1486e:	4646      	mov	r6, r8
   14870:	e5ba      	b.n	143e8 <_dtoa_r+0x640>
   14872:	ee38 8b08 	vadd.f64	d8, d8, d8
   14876:	eeb4 8bc6 	vcmpe.f64	d8, d6
   1487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1487e:	dc0a      	bgt.n	14896 <_dtoa_r+0xaee>
   14880:	eeb4 8b46 	vcmp.f64	d8, d6
   14884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14888:	f47f acdc 	bne.w	14244 <_dtoa_r+0x49c>
   1488c:	ee17 3a10 	vmov	r3, s14
   14890:	07d8      	lsls	r0, r3, #31
   14892:	f57f acd7 	bpl.w	14244 <_dtoa_r+0x49c>
   14896:	9a00      	ldr	r2, [sp, #0]
   14898:	e454      	b.n	14144 <_dtoa_r+0x39c>
   1489a:	6871      	ldr	r1, [r6, #4]
   1489c:	4620      	mov	r0, r4
   1489e:	f7fc fe03 	bl	114a8 <_Balloc>
   148a2:	4607      	mov	r7, r0
   148a4:	2800      	cmp	r0, #0
   148a6:	f000 80de 	beq.w	14a66 <_dtoa_r+0xcbe>
   148aa:	6933      	ldr	r3, [r6, #16]
   148ac:	3302      	adds	r3, #2
   148ae:	009a      	lsls	r2, r3, #2
   148b0:	f106 010c 	add.w	r1, r6, #12
   148b4:	300c      	adds	r0, #12
   148b6:	f7f8 fc33 	bl	d120 <memcpy>
   148ba:	4639      	mov	r1, r7
   148bc:	2201      	movs	r2, #1
   148be:	4620      	mov	r0, r4
   148c0:	f7fd f800 	bl	118c4 <__lshift>
   148c4:	4680      	mov	r8, r0
   148c6:	e5fe      	b.n	144c6 <_dtoa_r+0x71e>
   148c8:	9b06      	ldr	r3, [sp, #24]
   148ca:	eba3 0309 	sub.w	r3, r3, r9
   148ce:	9309      	str	r3, [sp, #36]	; 0x24
   148d0:	e4da      	b.n	14288 <_dtoa_r+0x4e0>
   148d2:	2b39      	cmp	r3, #57	; 0x39
   148d4:	f000 808c 	beq.w	149f0 <_dtoa_r+0xc48>
   148d8:	46b9      	mov	r9, r7
   148da:	3301      	adds	r3, #1
   148dc:	e7c1      	b.n	14862 <_dtoa_r+0xaba>
   148de:	9a04      	ldr	r2, [sp, #16]
   148e0:	3201      	adds	r2, #1
   148e2:	4637      	mov	r7, r6
   148e4:	9204      	str	r2, [sp, #16]
   148e6:	4646      	mov	r6, r8
   148e8:	e55f      	b.n	143aa <_dtoa_r+0x602>
   148ea:	4629      	mov	r1, r5
   148ec:	4620      	mov	r0, r4
   148ee:	f7fc ff89 	bl	11804 <__pow5mult>
   148f2:	4605      	mov	r5, r0
   148f4:	e4fa      	b.n	142ec <_dtoa_r+0x544>
   148f6:	bf00      	nop
   148f8:	20002610 	.word	0x20002610
   148fc:	20000b58 	.word	0x20000b58
   14900:	20000b30 	.word	0x20000b30
   14904:	7ff00000 	.word	0x7ff00000
   14908:	4b5e      	ldr	r3, [pc, #376]	; (14a84 <_dtoa_r+0xcdc>)
   1490a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   1490e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14912:	ed1c 3b02 	vldr	d3, [ip, #-8]
   14916:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   1491a:	ee36 7b47 	vsub.f64	d7, d6, d7
   1491e:	ec41 0b16 	vmov	d6, r0, r1
   14922:	ee15 1a90 	vmov	r1, s11
   14926:	ee23 3b06 	vmul.f64	d3, d3, d6
   1492a:	9800      	ldr	r0, [sp, #0]
   1492c:	3130      	adds	r1, #48	; 0x30
   1492e:	2a01      	cmp	r2, #1
   14930:	f800 1b01 	strb.w	r1, [r0], #1
   14934:	f000 8083 	beq.w	14a3e <_dtoa_r+0xc96>
   14938:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1493c:	9b00      	ldr	r3, [sp, #0]
   1493e:	1899      	adds	r1, r3, r2
   14940:	ee27 7b04 	vmul.f64	d7, d7, d4
   14944:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14948:	ee16 3a90 	vmov	r3, s13
   1494c:	3330      	adds	r3, #48	; 0x30
   1494e:	f800 3b01 	strb.w	r3, [r0], #1
   14952:	4281      	cmp	r1, r0
   14954:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14958:	ee37 7b45 	vsub.f64	d7, d7, d5
   1495c:	d1f0      	bne.n	14940 <_dtoa_r+0xb98>
   1495e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14962:	ee33 5b06 	vadd.f64	d5, d3, d6
   14966:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1496e:	f53f abe3 	bmi.w	14138 <_dtoa_r+0x390>
   14972:	ee36 6b43 	vsub.f64	d6, d6, d3
   14976:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1497e:	f77f ac0d 	ble.w	1419c <_dtoa_r+0x3f4>
   14982:	4689      	mov	r9, r1
   14984:	3901      	subs	r1, #1
   14986:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1498a:	2b30      	cmp	r3, #48	; 0x30
   1498c:	d0f9      	beq.n	14982 <_dtoa_r+0xbda>
   1498e:	1c73      	adds	r3, r6, #1
   14990:	9304      	str	r3, [sp, #16]
   14992:	e539      	b.n	14408 <_dtoa_r+0x660>
   14994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14996:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1499a:	e6da      	b.n	14752 <_dtoa_r+0x9aa>
   1499c:	2002      	movs	r0, #2
   1499e:	eeb0 6b48 	vmov.f64	d6, d8
   149a2:	f7ff bb48 	b.w	14036 <_dtoa_r+0x28e>
   149a6:	f1b9 0f00 	cmp.w	r9, #0
   149aa:	f43f aeda 	beq.w	14762 <_dtoa_r+0x9ba>
   149ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   149b0:	2a00      	cmp	r2, #0
   149b2:	f77f abf3 	ble.w	1419c <_dtoa_r+0x3f4>
   149b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   149ba:	ee26 6b04 	vmul.f64	d6, d6, d4
   149be:	3001      	adds	r0, #1
   149c0:	ee07 0a90 	vmov	s15, r0
   149c4:	9b04      	ldr	r3, [sp, #16]
   149c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   149ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   149ce:	eea6 7b05 	vfma.f64	d7, d6, d5
   149d2:	ee17 ca90 	vmov	ip, s15
   149d6:	ec51 0b17 	vmov	r0, r1, d7
   149da:	1e5e      	subs	r6, r3, #1
   149dc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   149e0:	f7ff bb47 	b.w	14072 <_dtoa_r+0x2ca>
   149e4:	9b04      	ldr	r3, [sp, #16]
   149e6:	3301      	adds	r3, #1
   149e8:	9304      	str	r3, [sp, #16]
   149ea:	2331      	movs	r3, #49	; 0x31
   149ec:	f7ff bbb1 	b.w	14152 <_dtoa_r+0x3aa>
   149f0:	9b04      	ldr	r3, [sp, #16]
   149f2:	46bb      	mov	fp, r7
   149f4:	3301      	adds	r3, #1
   149f6:	9304      	str	r3, [sp, #16]
   149f8:	2339      	movs	r3, #57	; 0x39
   149fa:	4637      	mov	r7, r6
   149fc:	f80b 3b01 	strb.w	r3, [fp], #1
   14a00:	4646      	mov	r6, r8
   14a02:	e4e1      	b.n	143c8 <_dtoa_r+0x620>
   14a04:	f04f 0a00 	mov.w	sl, #0
   14a08:	4656      	mov	r6, sl
   14a0a:	e653      	b.n	146b4 <_dtoa_r+0x90c>
   14a0c:	9208      	str	r2, [sp, #32]
   14a0e:	e47b      	b.n	14308 <_dtoa_r+0x560>
   14a10:	1c73      	adds	r3, r6, #1
   14a12:	9304      	str	r3, [sp, #16]
   14a14:	4689      	mov	r9, r1
   14a16:	e4f7      	b.n	14408 <_dtoa_r+0x660>
   14a18:	f47f af22 	bne.w	14860 <_dtoa_r+0xab8>
   14a1c:	07da      	lsls	r2, r3, #31
   14a1e:	f57f af1f 	bpl.w	14860 <_dtoa_r+0xab8>
   14a22:	e718      	b.n	14856 <_dtoa_r+0xaae>
   14a24:	2b39      	cmp	r3, #57	; 0x39
   14a26:	d0e3      	beq.n	149f0 <_dtoa_r+0xc48>
   14a28:	f1b9 0f00 	cmp.w	r9, #0
   14a2c:	f73f af16 	bgt.w	1485c <_dtoa_r+0xab4>
   14a30:	e716      	b.n	14860 <_dtoa_r+0xab8>
   14a32:	9b01      	ldr	r3, [sp, #4]
   14a34:	2b02      	cmp	r3, #2
   14a36:	f73f ae28 	bgt.w	1468a <_dtoa_r+0x8e2>
   14a3a:	9704      	str	r7, [sp, #16]
   14a3c:	e5ba      	b.n	145b4 <_dtoa_r+0x80c>
   14a3e:	4601      	mov	r1, r0
   14a40:	e78d      	b.n	1495e <_dtoa_r+0xbb6>
   14a42:	9b01      	ldr	r3, [sp, #4]
   14a44:	2b02      	cmp	r3, #2
   14a46:	f73f ae20 	bgt.w	1468a <_dtoa_r+0x8e2>
   14a4a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14a4e:	9704      	str	r7, [sp, #16]
   14a50:	e52b      	b.n	144aa <_dtoa_r+0x702>
   14a52:	2002      	movs	r0, #2
   14a54:	f7ff baef 	b.w	14036 <_dtoa_r+0x28e>
   14a58:	4b0b      	ldr	r3, [pc, #44]	; (14a88 <_dtoa_r+0xce0>)
   14a5a:	480c      	ldr	r0, [pc, #48]	; (14a8c <_dtoa_r+0xce4>)
   14a5c:	2200      	movs	r2, #0
   14a5e:	f240 11af 	movw	r1, #431	; 0x1af
   14a62:	f7fc fc07 	bl	11274 <__assert_func>
   14a66:	4b08      	ldr	r3, [pc, #32]	; (14a88 <_dtoa_r+0xce0>)
   14a68:	4808      	ldr	r0, [pc, #32]	; (14a8c <_dtoa_r+0xce4>)
   14a6a:	463a      	mov	r2, r7
   14a6c:	f240 21ef 	movw	r1, #751	; 0x2ef
   14a70:	f7fc fc00 	bl	11274 <__assert_func>
   14a74:	4b06      	ldr	r3, [pc, #24]	; (14a90 <_dtoa_r+0xce8>)
   14a76:	9300      	str	r3, [sp, #0]
   14a78:	f7ff b9d2 	b.w	13e20 <_dtoa_r+0x78>
   14a7c:	9b02      	ldr	r3, [sp, #8]
   14a7e:	9308      	str	r3, [sp, #32]
   14a80:	e4f7      	b.n	14472 <_dtoa_r+0x6ca>
   14a82:	bf00      	nop
   14a84:	20000b58 	.word	0x20000b58
   14a88:	20002468 	.word	0x20002468
   14a8c:	20002614 	.word	0x20002614
   14a90:	20002604 	.word	0x20002604

00014a94 <_close_r>:
   14a94:	b538      	push	{r3, r4, r5, lr}
   14a96:	4d07      	ldr	r5, [pc, #28]	; (14ab4 <_close_r+0x20>)
   14a98:	2200      	movs	r2, #0
   14a9a:	4604      	mov	r4, r0
   14a9c:	4608      	mov	r0, r1
   14a9e:	602a      	str	r2, [r5, #0]
   14aa0:	f7f9 f94a 	bl	dd38 <_close>
   14aa4:	1c43      	adds	r3, r0, #1
   14aa6:	d000      	beq.n	14aaa <_close_r+0x16>
   14aa8:	bd38      	pop	{r3, r4, r5, pc}
   14aaa:	682b      	ldr	r3, [r5, #0]
   14aac:	2b00      	cmp	r3, #0
   14aae:	d0fb      	beq.n	14aa8 <_close_r+0x14>
   14ab0:	6023      	str	r3, [r4, #0]
   14ab2:	bd38      	pop	{r3, r4, r5, pc}
   14ab4:	20004f8c 	.word	0x20004f8c

00014ab8 <__sflush_r>:
   14ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ac0:	460c      	mov	r4, r1
   14ac2:	0711      	lsls	r1, r2, #28
   14ac4:	4680      	mov	r8, r0
   14ac6:	d447      	bmi.n	14b58 <__sflush_r+0xa0>
   14ac8:	6863      	ldr	r3, [r4, #4]
   14aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   14ace:	2b00      	cmp	r3, #0
   14ad0:	81a2      	strh	r2, [r4, #12]
   14ad2:	dd5e      	ble.n	14b92 <__sflush_r+0xda>
   14ad4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14ad6:	2d00      	cmp	r5, #0
   14ad8:	d058      	beq.n	14b8c <__sflush_r+0xd4>
   14ada:	2300      	movs	r3, #0
   14adc:	f8d8 6000 	ldr.w	r6, [r8]
   14ae0:	f8c8 3000 	str.w	r3, [r8]
   14ae4:	b293      	uxth	r3, r2
   14ae6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   14aea:	d156      	bne.n	14b9a <__sflush_r+0xe2>
   14aec:	2301      	movs	r3, #1
   14aee:	69e1      	ldr	r1, [r4, #28]
   14af0:	4640      	mov	r0, r8
   14af2:	47a8      	blx	r5
   14af4:	1c43      	adds	r3, r0, #1
   14af6:	d067      	beq.n	14bc8 <__sflush_r+0x110>
   14af8:	89a3      	ldrh	r3, [r4, #12]
   14afa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14afc:	075f      	lsls	r7, r3, #29
   14afe:	d505      	bpl.n	14b0c <__sflush_r+0x54>
   14b00:	6863      	ldr	r3, [r4, #4]
   14b02:	1ac0      	subs	r0, r0, r3
   14b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b06:	b10b      	cbz	r3, 14b0c <__sflush_r+0x54>
   14b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14b0a:	1ac0      	subs	r0, r0, r3
   14b0c:	69e1      	ldr	r1, [r4, #28]
   14b0e:	4602      	mov	r2, r0
   14b10:	2300      	movs	r3, #0
   14b12:	4640      	mov	r0, r8
   14b14:	47a8      	blx	r5
   14b16:	1c41      	adds	r1, r0, #1
   14b18:	d141      	bne.n	14b9e <__sflush_r+0xe6>
   14b1a:	f8d8 3000 	ldr.w	r3, [r8]
   14b1e:	2b00      	cmp	r3, #0
   14b20:	d03d      	beq.n	14b9e <__sflush_r+0xe6>
   14b22:	2b1d      	cmp	r3, #29
   14b24:	d001      	beq.n	14b2a <__sflush_r+0x72>
   14b26:	2b16      	cmp	r3, #22
   14b28:	d156      	bne.n	14bd8 <__sflush_r+0x120>
   14b2a:	89a3      	ldrh	r3, [r4, #12]
   14b2c:	6922      	ldr	r2, [r4, #16]
   14b2e:	6022      	str	r2, [r4, #0]
   14b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14b34:	2100      	movs	r1, #0
   14b36:	6061      	str	r1, [r4, #4]
   14b38:	81a3      	strh	r3, [r4, #12]
   14b3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14b3c:	f8c8 6000 	str.w	r6, [r8]
   14b40:	b321      	cbz	r1, 14b8c <__sflush_r+0xd4>
   14b42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14b46:	4299      	cmp	r1, r3
   14b48:	d002      	beq.n	14b50 <__sflush_r+0x98>
   14b4a:	4640      	mov	r0, r8
   14b4c:	f7fd fc82 	bl	12454 <_free_r>
   14b50:	2000      	movs	r0, #0
   14b52:	6320      	str	r0, [r4, #48]	; 0x30
   14b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b58:	6926      	ldr	r6, [r4, #16]
   14b5a:	b1be      	cbz	r6, 14b8c <__sflush_r+0xd4>
   14b5c:	b293      	uxth	r3, r2
   14b5e:	6825      	ldr	r5, [r4, #0]
   14b60:	6026      	str	r6, [r4, #0]
   14b62:	079a      	lsls	r2, r3, #30
   14b64:	bf0c      	ite	eq
   14b66:	6963      	ldreq	r3, [r4, #20]
   14b68:	2300      	movne	r3, #0
   14b6a:	1bad      	subs	r5, r5, r6
   14b6c:	60a3      	str	r3, [r4, #8]
   14b6e:	e00b      	b.n	14b88 <__sflush_r+0xd0>
   14b70:	462b      	mov	r3, r5
   14b72:	4632      	mov	r2, r6
   14b74:	69e1      	ldr	r1, [r4, #28]
   14b76:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14b78:	4640      	mov	r0, r8
   14b7a:	47b8      	blx	r7
   14b7c:	f1b0 0c00 	subs.w	ip, r0, #0
   14b80:	eba5 050c 	sub.w	r5, r5, ip
   14b84:	4466      	add	r6, ip
   14b86:	dd17      	ble.n	14bb8 <__sflush_r+0x100>
   14b88:	2d00      	cmp	r5, #0
   14b8a:	dcf1      	bgt.n	14b70 <__sflush_r+0xb8>
   14b8c:	2000      	movs	r0, #0
   14b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14b94:	2b00      	cmp	r3, #0
   14b96:	dc9d      	bgt.n	14ad4 <__sflush_r+0x1c>
   14b98:	e7f8      	b.n	14b8c <__sflush_r+0xd4>
   14b9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14b9c:	e7ae      	b.n	14afc <__sflush_r+0x44>
   14b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ba2:	6922      	ldr	r2, [r4, #16]
   14ba4:	6022      	str	r2, [r4, #0]
   14ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14baa:	81a3      	strh	r3, [r4, #12]
   14bac:	2200      	movs	r2, #0
   14bae:	04db      	lsls	r3, r3, #19
   14bb0:	6062      	str	r2, [r4, #4]
   14bb2:	d5c2      	bpl.n	14b3a <__sflush_r+0x82>
   14bb4:	6520      	str	r0, [r4, #80]	; 0x50
   14bb6:	e7c0      	b.n	14b3a <__sflush_r+0x82>
   14bb8:	89a3      	ldrh	r3, [r4, #12]
   14bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14bc2:	81a3      	strh	r3, [r4, #12]
   14bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14bc8:	f8d8 3000 	ldr.w	r3, [r8]
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d093      	beq.n	14af8 <__sflush_r+0x40>
   14bd0:	2b1d      	cmp	r3, #29
   14bd2:	d006      	beq.n	14be2 <__sflush_r+0x12a>
   14bd4:	2b16      	cmp	r3, #22
   14bd6:	d004      	beq.n	14be2 <__sflush_r+0x12a>
   14bd8:	89a3      	ldrh	r3, [r4, #12]
   14bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14bde:	81a3      	strh	r3, [r4, #12]
   14be0:	e7d5      	b.n	14b8e <__sflush_r+0xd6>
   14be2:	f8c8 6000 	str.w	r6, [r8]
   14be6:	e7d1      	b.n	14b8c <__sflush_r+0xd4>

00014be8 <_fflush_r>:
   14be8:	b538      	push	{r3, r4, r5, lr}
   14bea:	460c      	mov	r4, r1
   14bec:	4605      	mov	r5, r0
   14bee:	b108      	cbz	r0, 14bf4 <_fflush_r+0xc>
   14bf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14bf2:	b303      	cbz	r3, 14c36 <_fflush_r+0x4e>
   14bf4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14bf8:	b188      	cbz	r0, 14c1e <_fflush_r+0x36>
   14bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14bfc:	07db      	lsls	r3, r3, #31
   14bfe:	d401      	bmi.n	14c04 <_fflush_r+0x1c>
   14c00:	0581      	lsls	r1, r0, #22
   14c02:	d50f      	bpl.n	14c24 <_fflush_r+0x3c>
   14c04:	4628      	mov	r0, r5
   14c06:	4621      	mov	r1, r4
   14c08:	f7ff ff56 	bl	14ab8 <__sflush_r>
   14c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14c0e:	07da      	lsls	r2, r3, #31
   14c10:	4605      	mov	r5, r0
   14c12:	d402      	bmi.n	14c1a <_fflush_r+0x32>
   14c14:	89a3      	ldrh	r3, [r4, #12]
   14c16:	059b      	lsls	r3, r3, #22
   14c18:	d508      	bpl.n	14c2c <_fflush_r+0x44>
   14c1a:	4628      	mov	r0, r5
   14c1c:	bd38      	pop	{r3, r4, r5, pc}
   14c1e:	4605      	mov	r5, r0
   14c20:	4628      	mov	r0, r5
   14c22:	bd38      	pop	{r3, r4, r5, pc}
   14c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c26:	f7fc fbcb 	bl	113c0 <__retarget_lock_acquire_recursive>
   14c2a:	e7eb      	b.n	14c04 <_fflush_r+0x1c>
   14c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c2e:	f7fc fbc9 	bl	113c4 <__retarget_lock_release_recursive>
   14c32:	4628      	mov	r0, r5
   14c34:	bd38      	pop	{r3, r4, r5, pc}
   14c36:	f7fd f8d1 	bl	11ddc <__sinit>
   14c3a:	e7db      	b.n	14bf4 <_fflush_r+0xc>

00014c3c <_fstat_r>:
   14c3c:	b570      	push	{r4, r5, r6, lr}
   14c3e:	460c      	mov	r4, r1
   14c40:	4d08      	ldr	r5, [pc, #32]	; (14c64 <_fstat_r+0x28>)
   14c42:	4603      	mov	r3, r0
   14c44:	2600      	movs	r6, #0
   14c46:	4620      	mov	r0, r4
   14c48:	4611      	mov	r1, r2
   14c4a:	461c      	mov	r4, r3
   14c4c:	602e      	str	r6, [r5, #0]
   14c4e:	f7f9 f876 	bl	dd3e <_fstat>
   14c52:	1c43      	adds	r3, r0, #1
   14c54:	d000      	beq.n	14c58 <_fstat_r+0x1c>
   14c56:	bd70      	pop	{r4, r5, r6, pc}
   14c58:	682b      	ldr	r3, [r5, #0]
   14c5a:	2b00      	cmp	r3, #0
   14c5c:	d0fb      	beq.n	14c56 <_fstat_r+0x1a>
   14c5e:	6023      	str	r3, [r4, #0]
   14c60:	bd70      	pop	{r4, r5, r6, pc}
   14c62:	bf00      	nop
   14c64:	20004f8c 	.word	0x20004f8c

00014c68 <_isatty_r>:
   14c68:	b538      	push	{r3, r4, r5, lr}
   14c6a:	4d07      	ldr	r5, [pc, #28]	; (14c88 <_isatty_r+0x20>)
   14c6c:	2200      	movs	r2, #0
   14c6e:	4604      	mov	r4, r0
   14c70:	4608      	mov	r0, r1
   14c72:	602a      	str	r2, [r5, #0]
   14c74:	f7f9 f868 	bl	dd48 <_isatty>
   14c78:	1c43      	adds	r3, r0, #1
   14c7a:	d000      	beq.n	14c7e <_isatty_r+0x16>
   14c7c:	bd38      	pop	{r3, r4, r5, pc}
   14c7e:	682b      	ldr	r3, [r5, #0]
   14c80:	2b00      	cmp	r3, #0
   14c82:	d0fb      	beq.n	14c7c <_isatty_r+0x14>
   14c84:	6023      	str	r3, [r4, #0]
   14c86:	bd38      	pop	{r3, r4, r5, pc}
   14c88:	20004f8c 	.word	0x20004f8c

00014c8c <_lseek_r>:
   14c8c:	b538      	push	{r3, r4, r5, lr}
   14c8e:	460c      	mov	r4, r1
   14c90:	4d08      	ldr	r5, [pc, #32]	; (14cb4 <_lseek_r+0x28>)
   14c92:	4684      	mov	ip, r0
   14c94:	4611      	mov	r1, r2
   14c96:	4620      	mov	r0, r4
   14c98:	461a      	mov	r2, r3
   14c9a:	2300      	movs	r3, #0
   14c9c:	602b      	str	r3, [r5, #0]
   14c9e:	4664      	mov	r4, ip
   14ca0:	f7f9 f854 	bl	dd4c <_lseek>
   14ca4:	1c43      	adds	r3, r0, #1
   14ca6:	d000      	beq.n	14caa <_lseek_r+0x1e>
   14ca8:	bd38      	pop	{r3, r4, r5, pc}
   14caa:	682b      	ldr	r3, [r5, #0]
   14cac:	2b00      	cmp	r3, #0
   14cae:	d0fb      	beq.n	14ca8 <_lseek_r+0x1c>
   14cb0:	6023      	str	r3, [r4, #0]
   14cb2:	bd38      	pop	{r3, r4, r5, pc}
   14cb4:	20004f8c 	.word	0x20004f8c

00014cb8 <_read_r>:
   14cb8:	b538      	push	{r3, r4, r5, lr}
   14cba:	460c      	mov	r4, r1
   14cbc:	4d08      	ldr	r5, [pc, #32]	; (14ce0 <_read_r+0x28>)
   14cbe:	4684      	mov	ip, r0
   14cc0:	4611      	mov	r1, r2
   14cc2:	4620      	mov	r0, r4
   14cc4:	461a      	mov	r2, r3
   14cc6:	2300      	movs	r3, #0
   14cc8:	602b      	str	r3, [r5, #0]
   14cca:	4664      	mov	r4, ip
   14ccc:	f7f9 f832 	bl	dd34 <_read>
   14cd0:	1c43      	adds	r3, r0, #1
   14cd2:	d000      	beq.n	14cd6 <_read_r+0x1e>
   14cd4:	bd38      	pop	{r3, r4, r5, pc}
   14cd6:	682b      	ldr	r3, [r5, #0]
   14cd8:	2b00      	cmp	r3, #0
   14cda:	d0fb      	beq.n	14cd4 <_read_r+0x1c>
   14cdc:	6023      	str	r3, [r4, #0]
   14cde:	bd38      	pop	{r3, r4, r5, pc}
   14ce0:	20004f8c 	.word	0x20004f8c

00014ce4 <__fputwc>:
   14ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ce8:	b082      	sub	sp, #8
   14cea:	4682      	mov	sl, r0
   14cec:	4688      	mov	r8, r1
   14cee:	4614      	mov	r4, r2
   14cf0:	f7fc fb6a 	bl	113c8 <__locale_mb_cur_max>
   14cf4:	2801      	cmp	r0, #1
   14cf6:	d103      	bne.n	14d00 <__fputwc+0x1c>
   14cf8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   14cfc:	2bfe      	cmp	r3, #254	; 0xfe
   14cfe:	d936      	bls.n	14d6e <__fputwc+0x8a>
   14d00:	f10d 0904 	add.w	r9, sp, #4
   14d04:	4642      	mov	r2, r8
   14d06:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14d0a:	4649      	mov	r1, r9
   14d0c:	4650      	mov	r0, sl
   14d0e:	f7fe fe49 	bl	139a4 <_wcrtomb_r>
   14d12:	1c42      	adds	r2, r0, #1
   14d14:	4606      	mov	r6, r0
   14d16:	d032      	beq.n	14d7e <__fputwc+0x9a>
   14d18:	b320      	cbz	r0, 14d64 <__fputwc+0x80>
   14d1a:	f89d c004 	ldrb.w	ip, [sp, #4]
   14d1e:	2500      	movs	r5, #0
   14d20:	e009      	b.n	14d36 <__fputwc+0x52>
   14d22:	6823      	ldr	r3, [r4, #0]
   14d24:	1c5a      	adds	r2, r3, #1
   14d26:	6022      	str	r2, [r4, #0]
   14d28:	f883 c000 	strb.w	ip, [r3]
   14d2c:	3501      	adds	r5, #1
   14d2e:	42b5      	cmp	r5, r6
   14d30:	d218      	bcs.n	14d64 <__fputwc+0x80>
   14d32:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14d36:	68a3      	ldr	r3, [r4, #8]
   14d38:	3b01      	subs	r3, #1
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	60a3      	str	r3, [r4, #8]
   14d3e:	daf0      	bge.n	14d22 <__fputwc+0x3e>
   14d40:	69a7      	ldr	r7, [r4, #24]
   14d42:	42bb      	cmp	r3, r7
   14d44:	4661      	mov	r1, ip
   14d46:	4622      	mov	r2, r4
   14d48:	4650      	mov	r0, sl
   14d4a:	db02      	blt.n	14d52 <__fputwc+0x6e>
   14d4c:	f1bc 0f0a 	cmp.w	ip, #10
   14d50:	d1e7      	bne.n	14d22 <__fputwc+0x3e>
   14d52:	f000 f9cb 	bl	150ec <__swbuf_r>
   14d56:	1c43      	adds	r3, r0, #1
   14d58:	d1e8      	bne.n	14d2c <__fputwc+0x48>
   14d5a:	4606      	mov	r6, r0
   14d5c:	4630      	mov	r0, r6
   14d5e:	b002      	add	sp, #8
   14d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d64:	4646      	mov	r6, r8
   14d66:	4630      	mov	r0, r6
   14d68:	b002      	add	sp, #8
   14d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d6e:	fa5f fc88 	uxtb.w	ip, r8
   14d72:	f88d c004 	strb.w	ip, [sp, #4]
   14d76:	4606      	mov	r6, r0
   14d78:	f10d 0904 	add.w	r9, sp, #4
   14d7c:	e7cf      	b.n	14d1e <__fputwc+0x3a>
   14d7e:	89a3      	ldrh	r3, [r4, #12]
   14d80:	4630      	mov	r0, r6
   14d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14d86:	81a3      	strh	r3, [r4, #12]
   14d88:	b002      	add	sp, #8
   14d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d8e:	bf00      	nop

00014d90 <_fputwc_r>:
   14d90:	b530      	push	{r4, r5, lr}
   14d92:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14d94:	f013 0f01 	tst.w	r3, #1
   14d98:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14d9c:	4614      	mov	r4, r2
   14d9e:	b083      	sub	sp, #12
   14da0:	4605      	mov	r5, r0
   14da2:	b29a      	uxth	r2, r3
   14da4:	d101      	bne.n	14daa <_fputwc_r+0x1a>
   14da6:	0598      	lsls	r0, r3, #22
   14da8:	d51c      	bpl.n	14de4 <_fputwc_r+0x54>
   14daa:	0490      	lsls	r0, r2, #18
   14dac:	d406      	bmi.n	14dbc <_fputwc_r+0x2c>
   14dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14db8:	81a3      	strh	r3, [r4, #12]
   14dba:	6662      	str	r2, [r4, #100]	; 0x64
   14dbc:	4622      	mov	r2, r4
   14dbe:	4628      	mov	r0, r5
   14dc0:	f7ff ff90 	bl	14ce4 <__fputwc>
   14dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14dc6:	07da      	lsls	r2, r3, #31
   14dc8:	4605      	mov	r5, r0
   14dca:	d402      	bmi.n	14dd2 <_fputwc_r+0x42>
   14dcc:	89a3      	ldrh	r3, [r4, #12]
   14dce:	059b      	lsls	r3, r3, #22
   14dd0:	d502      	bpl.n	14dd8 <_fputwc_r+0x48>
   14dd2:	4628      	mov	r0, r5
   14dd4:	b003      	add	sp, #12
   14dd6:	bd30      	pop	{r4, r5, pc}
   14dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14dda:	f7fc faf3 	bl	113c4 <__retarget_lock_release_recursive>
   14dde:	4628      	mov	r0, r5
   14de0:	b003      	add	sp, #12
   14de2:	bd30      	pop	{r4, r5, pc}
   14de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14de6:	9101      	str	r1, [sp, #4]
   14de8:	f7fc faea 	bl	113c0 <__retarget_lock_acquire_recursive>
   14dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14df0:	9901      	ldr	r1, [sp, #4]
   14df2:	b29a      	uxth	r2, r3
   14df4:	e7d9      	b.n	14daa <_fputwc_r+0x1a>
   14df6:	bf00      	nop

00014df8 <__sfvwrite_r>:
   14df8:	6893      	ldr	r3, [r2, #8]
   14dfa:	2b00      	cmp	r3, #0
   14dfc:	f000 8085 	beq.w	14f0a <__sfvwrite_r+0x112>
   14e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e04:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   14e08:	460c      	mov	r4, r1
   14e0a:	0719      	lsls	r1, r3, #28
   14e0c:	4680      	mov	r8, r0
   14e0e:	b083      	sub	sp, #12
   14e10:	4617      	mov	r7, r2
   14e12:	b298      	uxth	r0, r3
   14e14:	d525      	bpl.n	14e62 <__sfvwrite_r+0x6a>
   14e16:	6923      	ldr	r3, [r4, #16]
   14e18:	b31b      	cbz	r3, 14e62 <__sfvwrite_r+0x6a>
   14e1a:	f010 0302 	ands.w	r3, r0, #2
   14e1e:	683d      	ldr	r5, [r7, #0]
   14e20:	d02d      	beq.n	14e7e <__sfvwrite_r+0x86>
   14e22:	f04f 0a00 	mov.w	sl, #0
   14e26:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 150e8 <__sfvwrite_r+0x2f0>
   14e2a:	4656      	mov	r6, sl
   14e2c:	46b9      	mov	r9, r7
   14e2e:	455e      	cmp	r6, fp
   14e30:	4633      	mov	r3, r6
   14e32:	4652      	mov	r2, sl
   14e34:	bf28      	it	cs
   14e36:	465b      	movcs	r3, fp
   14e38:	4640      	mov	r0, r8
   14e3a:	2e00      	cmp	r6, #0
   14e3c:	d052      	beq.n	14ee4 <__sfvwrite_r+0xec>
   14e3e:	69e1      	ldr	r1, [r4, #28]
   14e40:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14e42:	47b8      	blx	r7
   14e44:	2800      	cmp	r0, #0
   14e46:	dd56      	ble.n	14ef6 <__sfvwrite_r+0xfe>
   14e48:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14e4c:	1a1b      	subs	r3, r3, r0
   14e4e:	4482      	add	sl, r0
   14e50:	1a36      	subs	r6, r6, r0
   14e52:	f8c9 3008 	str.w	r3, [r9, #8]
   14e56:	2b00      	cmp	r3, #0
   14e58:	d1e9      	bne.n	14e2e <__sfvwrite_r+0x36>
   14e5a:	2000      	movs	r0, #0
   14e5c:	b003      	add	sp, #12
   14e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e62:	4621      	mov	r1, r4
   14e64:	4640      	mov	r0, r8
   14e66:	f7fe fe2b 	bl	13ac0 <__swsetup_r>
   14e6a:	2800      	cmp	r0, #0
   14e6c:	f040 8138 	bne.w	150e0 <__sfvwrite_r+0x2e8>
   14e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14e74:	683d      	ldr	r5, [r7, #0]
   14e76:	b298      	uxth	r0, r3
   14e78:	f010 0302 	ands.w	r3, r0, #2
   14e7c:	d1d1      	bne.n	14e22 <__sfvwrite_r+0x2a>
   14e7e:	f010 0901 	ands.w	r9, r0, #1
   14e82:	d144      	bne.n	14f0e <__sfvwrite_r+0x116>
   14e84:	464e      	mov	r6, r9
   14e86:	9700      	str	r7, [sp, #0]
   14e88:	b346      	cbz	r6, 14edc <__sfvwrite_r+0xe4>
   14e8a:	0582      	lsls	r2, r0, #22
   14e8c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   14e90:	f140 8085 	bpl.w	14f9e <__sfvwrite_r+0x1a6>
   14e94:	45b3      	cmp	fp, r6
   14e96:	465a      	mov	r2, fp
   14e98:	f200 80b4 	bhi.w	15004 <__sfvwrite_r+0x20c>
   14e9c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14ea0:	f040 80c1 	bne.w	15026 <__sfvwrite_r+0x22e>
   14ea4:	6820      	ldr	r0, [r4, #0]
   14ea6:	9201      	str	r2, [sp, #4]
   14ea8:	4649      	mov	r1, r9
   14eaa:	f7fc f967 	bl	1117c <memmove>
   14eae:	68a3      	ldr	r3, [r4, #8]
   14eb0:	9a01      	ldr	r2, [sp, #4]
   14eb2:	eba3 010b 	sub.w	r1, r3, fp
   14eb6:	6823      	ldr	r3, [r4, #0]
   14eb8:	60a1      	str	r1, [r4, #8]
   14eba:	4413      	add	r3, r2
   14ebc:	46b2      	mov	sl, r6
   14ebe:	6023      	str	r3, [r4, #0]
   14ec0:	2600      	movs	r6, #0
   14ec2:	9a00      	ldr	r2, [sp, #0]
   14ec4:	6893      	ldr	r3, [r2, #8]
   14ec6:	eba3 030a 	sub.w	r3, r3, sl
   14eca:	44d1      	add	r9, sl
   14ecc:	6093      	str	r3, [r2, #8]
   14ece:	2b00      	cmp	r3, #0
   14ed0:	d0c3      	beq.n	14e5a <__sfvwrite_r+0x62>
   14ed2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14ed6:	b280      	uxth	r0, r0
   14ed8:	2e00      	cmp	r6, #0
   14eda:	d1d6      	bne.n	14e8a <__sfvwrite_r+0x92>
   14edc:	e9d5 9600 	ldrd	r9, r6, [r5]
   14ee0:	3508      	adds	r5, #8
   14ee2:	e7d1      	b.n	14e88 <__sfvwrite_r+0x90>
   14ee4:	e9d5 a600 	ldrd	sl, r6, [r5]
   14ee8:	3508      	adds	r5, #8
   14eea:	e7a0      	b.n	14e2e <__sfvwrite_r+0x36>
   14eec:	4621      	mov	r1, r4
   14eee:	4640      	mov	r0, r8
   14ef0:	f7ff fe7a 	bl	14be8 <_fflush_r>
   14ef4:	b388      	cbz	r0, 14f5a <__sfvwrite_r+0x162>
   14ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f02:	81a3      	strh	r3, [r4, #12]
   14f04:	b003      	add	sp, #12
   14f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f0a:	2000      	movs	r0, #0
   14f0c:	4770      	bx	lr
   14f0e:	461e      	mov	r6, r3
   14f10:	46ba      	mov	sl, r7
   14f12:	4699      	mov	r9, r3
   14f14:	4618      	mov	r0, r3
   14f16:	9500      	str	r5, [sp, #0]
   14f18:	461f      	mov	r7, r3
   14f1a:	b366      	cbz	r6, 14f76 <__sfvwrite_r+0x17e>
   14f1c:	2800      	cmp	r0, #0
   14f1e:	d032      	beq.n	14f86 <__sfvwrite_r+0x18e>
   14f20:	464a      	mov	r2, r9
   14f22:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   14f26:	6820      	ldr	r0, [r4, #0]
   14f28:	68a5      	ldr	r5, [r4, #8]
   14f2a:	42b2      	cmp	r2, r6
   14f2c:	bf28      	it	cs
   14f2e:	4632      	movcs	r2, r6
   14f30:	4288      	cmp	r0, r1
   14f32:	d904      	bls.n	14f3e <__sfvwrite_r+0x146>
   14f34:	eb05 0b03 	add.w	fp, r5, r3
   14f38:	455a      	cmp	r2, fp
   14f3a:	f300 80a7 	bgt.w	1508c <__sfvwrite_r+0x294>
   14f3e:	4293      	cmp	r3, r2
   14f40:	dc64      	bgt.n	1500c <__sfvwrite_r+0x214>
   14f42:	69e1      	ldr	r1, [r4, #28]
   14f44:	6a65      	ldr	r5, [r4, #36]	; 0x24
   14f46:	463a      	mov	r2, r7
   14f48:	4640      	mov	r0, r8
   14f4a:	47a8      	blx	r5
   14f4c:	f1b0 0b00 	subs.w	fp, r0, #0
   14f50:	ddd1      	ble.n	14ef6 <__sfvwrite_r+0xfe>
   14f52:	ebb9 090b 	subs.w	r9, r9, fp
   14f56:	d0c9      	beq.n	14eec <__sfvwrite_r+0xf4>
   14f58:	2001      	movs	r0, #1
   14f5a:	f8da 3008 	ldr.w	r3, [sl, #8]
   14f5e:	eba3 030b 	sub.w	r3, r3, fp
   14f62:	445f      	add	r7, fp
   14f64:	eba6 060b 	sub.w	r6, r6, fp
   14f68:	f8ca 3008 	str.w	r3, [sl, #8]
   14f6c:	2b00      	cmp	r3, #0
   14f6e:	f43f af74 	beq.w	14e5a <__sfvwrite_r+0x62>
   14f72:	2e00      	cmp	r6, #0
   14f74:	d1d2      	bne.n	14f1c <__sfvwrite_r+0x124>
   14f76:	9a00      	ldr	r2, [sp, #0]
   14f78:	6856      	ldr	r6, [r2, #4]
   14f7a:	4613      	mov	r3, r2
   14f7c:	3208      	adds	r2, #8
   14f7e:	9200      	str	r2, [sp, #0]
   14f80:	2e00      	cmp	r6, #0
   14f82:	d0f8      	beq.n	14f76 <__sfvwrite_r+0x17e>
   14f84:	681f      	ldr	r7, [r3, #0]
   14f86:	4632      	mov	r2, r6
   14f88:	210a      	movs	r1, #10
   14f8a:	4638      	mov	r0, r7
   14f8c:	f7fc ff50 	bl	11e30 <memchr>
   14f90:	2800      	cmp	r0, #0
   14f92:	f000 809c 	beq.w	150ce <__sfvwrite_r+0x2d6>
   14f96:	3001      	adds	r0, #1
   14f98:	eba0 0907 	sub.w	r9, r0, r7
   14f9c:	e7c0      	b.n	14f20 <__sfvwrite_r+0x128>
   14f9e:	6820      	ldr	r0, [r4, #0]
   14fa0:	6923      	ldr	r3, [r4, #16]
   14fa2:	4298      	cmp	r0, r3
   14fa4:	d816      	bhi.n	14fd4 <__sfvwrite_r+0x1dc>
   14fa6:	6962      	ldr	r2, [r4, #20]
   14fa8:	42b2      	cmp	r2, r6
   14faa:	d813      	bhi.n	14fd4 <__sfvwrite_r+0x1dc>
   14fac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14fb0:	42b3      	cmp	r3, r6
   14fb2:	bf28      	it	cs
   14fb4:	4633      	movcs	r3, r6
   14fb6:	69e1      	ldr	r1, [r4, #28]
   14fb8:	fb93 f3f2 	sdiv	r3, r3, r2
   14fbc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14fbe:	fb02 f303 	mul.w	r3, r2, r3
   14fc2:	4640      	mov	r0, r8
   14fc4:	464a      	mov	r2, r9
   14fc6:	47b8      	blx	r7
   14fc8:	f1b0 0a00 	subs.w	sl, r0, #0
   14fcc:	dd93      	ble.n	14ef6 <__sfvwrite_r+0xfe>
   14fce:	eba6 060a 	sub.w	r6, r6, sl
   14fd2:	e776      	b.n	14ec2 <__sfvwrite_r+0xca>
   14fd4:	45b3      	cmp	fp, r6
   14fd6:	46da      	mov	sl, fp
   14fd8:	bf28      	it	cs
   14fda:	46b2      	movcs	sl, r6
   14fdc:	4652      	mov	r2, sl
   14fde:	4649      	mov	r1, r9
   14fe0:	f7fc f8cc 	bl	1117c <memmove>
   14fe4:	68a3      	ldr	r3, [r4, #8]
   14fe6:	6822      	ldr	r2, [r4, #0]
   14fe8:	eba3 030a 	sub.w	r3, r3, sl
   14fec:	4452      	add	r2, sl
   14fee:	60a3      	str	r3, [r4, #8]
   14ff0:	6022      	str	r2, [r4, #0]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d1eb      	bne.n	14fce <__sfvwrite_r+0x1d6>
   14ff6:	4621      	mov	r1, r4
   14ff8:	4640      	mov	r0, r8
   14ffa:	f7ff fdf5 	bl	14be8 <_fflush_r>
   14ffe:	2800      	cmp	r0, #0
   15000:	d0e5      	beq.n	14fce <__sfvwrite_r+0x1d6>
   15002:	e778      	b.n	14ef6 <__sfvwrite_r+0xfe>
   15004:	6820      	ldr	r0, [r4, #0]
   15006:	46b3      	mov	fp, r6
   15008:	4632      	mov	r2, r6
   1500a:	e74c      	b.n	14ea6 <__sfvwrite_r+0xae>
   1500c:	4639      	mov	r1, r7
   1500e:	9201      	str	r2, [sp, #4]
   15010:	f7fc f8b4 	bl	1117c <memmove>
   15014:	9a01      	ldr	r2, [sp, #4]
   15016:	68a3      	ldr	r3, [r4, #8]
   15018:	1a9b      	subs	r3, r3, r2
   1501a:	60a3      	str	r3, [r4, #8]
   1501c:	6823      	ldr	r3, [r4, #0]
   1501e:	4413      	add	r3, r2
   15020:	6023      	str	r3, [r4, #0]
   15022:	4693      	mov	fp, r2
   15024:	e795      	b.n	14f52 <__sfvwrite_r+0x15a>
   15026:	6823      	ldr	r3, [r4, #0]
   15028:	6921      	ldr	r1, [r4, #16]
   1502a:	eba3 0b01 	sub.w	fp, r3, r1
   1502e:	6963      	ldr	r3, [r4, #20]
   15030:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   15034:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   15038:	f10b 0301 	add.w	r3, fp, #1
   1503c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   15040:	4433      	add	r3, r6
   15042:	4553      	cmp	r3, sl
   15044:	4652      	mov	r2, sl
   15046:	bf84      	itt	hi
   15048:	469a      	movhi	sl, r3
   1504a:	4652      	movhi	r2, sl
   1504c:	0543      	lsls	r3, r0, #21
   1504e:	d52c      	bpl.n	150aa <__sfvwrite_r+0x2b2>
   15050:	4611      	mov	r1, r2
   15052:	4640      	mov	r0, r8
   15054:	f7fb fdb2 	bl	10bbc <_malloc_r>
   15058:	2800      	cmp	r0, #0
   1505a:	d03b      	beq.n	150d4 <__sfvwrite_r+0x2dc>
   1505c:	465a      	mov	r2, fp
   1505e:	6921      	ldr	r1, [r4, #16]
   15060:	9001      	str	r0, [sp, #4]
   15062:	f7f8 f85d 	bl	d120 <memcpy>
   15066:	89a2      	ldrh	r2, [r4, #12]
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1506e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15072:	81a2      	strh	r2, [r4, #12]
   15074:	eb03 000b 	add.w	r0, r3, fp
   15078:	6123      	str	r3, [r4, #16]
   1507a:	ebaa 030b 	sub.w	r3, sl, fp
   1507e:	f8c4 a014 	str.w	sl, [r4, #20]
   15082:	60a3      	str	r3, [r4, #8]
   15084:	6020      	str	r0, [r4, #0]
   15086:	46b3      	mov	fp, r6
   15088:	4632      	mov	r2, r6
   1508a:	e70c      	b.n	14ea6 <__sfvwrite_r+0xae>
   1508c:	4639      	mov	r1, r7
   1508e:	465a      	mov	r2, fp
   15090:	f7fc f874 	bl	1117c <memmove>
   15094:	6823      	ldr	r3, [r4, #0]
   15096:	445b      	add	r3, fp
   15098:	6023      	str	r3, [r4, #0]
   1509a:	4621      	mov	r1, r4
   1509c:	4640      	mov	r0, r8
   1509e:	f7ff fda3 	bl	14be8 <_fflush_r>
   150a2:	2800      	cmp	r0, #0
   150a4:	f43f af55 	beq.w	14f52 <__sfvwrite_r+0x15a>
   150a8:	e725      	b.n	14ef6 <__sfvwrite_r+0xfe>
   150aa:	4640      	mov	r0, r8
   150ac:	f7fc ff96 	bl	11fdc <_realloc_r>
   150b0:	4603      	mov	r3, r0
   150b2:	2800      	cmp	r0, #0
   150b4:	d1de      	bne.n	15074 <__sfvwrite_r+0x27c>
   150b6:	6921      	ldr	r1, [r4, #16]
   150b8:	4640      	mov	r0, r8
   150ba:	f7fd f9cb 	bl	12454 <_free_r>
   150be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150c2:	220c      	movs	r2, #12
   150c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   150c8:	f8c8 2000 	str.w	r2, [r8]
   150cc:	e715      	b.n	14efa <__sfvwrite_r+0x102>
   150ce:	1c72      	adds	r2, r6, #1
   150d0:	4691      	mov	r9, r2
   150d2:	e726      	b.n	14f22 <__sfvwrite_r+0x12a>
   150d4:	220c      	movs	r2, #12
   150d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150da:	f8c8 2000 	str.w	r2, [r8]
   150de:	e70c      	b.n	14efa <__sfvwrite_r+0x102>
   150e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   150e4:	e6ba      	b.n	14e5c <__sfvwrite_r+0x64>
   150e6:	bf00      	nop
   150e8:	7ffffc00 	.word	0x7ffffc00

000150ec <__swbuf_r>:
   150ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150ee:	460d      	mov	r5, r1
   150f0:	4614      	mov	r4, r2
   150f2:	4606      	mov	r6, r0
   150f4:	b110      	cbz	r0, 150fc <__swbuf_r+0x10>
   150f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   150f8:	2b00      	cmp	r3, #0
   150fa:	d04c      	beq.n	15196 <__swbuf_r+0xaa>
   150fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15100:	69a3      	ldr	r3, [r4, #24]
   15102:	60a3      	str	r3, [r4, #8]
   15104:	0717      	lsls	r7, r2, #28
   15106:	b290      	uxth	r0, r2
   15108:	d51b      	bpl.n	15142 <__swbuf_r+0x56>
   1510a:	6923      	ldr	r3, [r4, #16]
   1510c:	b1cb      	cbz	r3, 15142 <__swbuf_r+0x56>
   1510e:	b2ed      	uxtb	r5, r5
   15110:	0481      	lsls	r1, r0, #18
   15112:	462f      	mov	r7, r5
   15114:	d522      	bpl.n	1515c <__swbuf_r+0x70>
   15116:	6822      	ldr	r2, [r4, #0]
   15118:	6961      	ldr	r1, [r4, #20]
   1511a:	1ad3      	subs	r3, r2, r3
   1511c:	4299      	cmp	r1, r3
   1511e:	dd29      	ble.n	15174 <__swbuf_r+0x88>
   15120:	3301      	adds	r3, #1
   15122:	68a1      	ldr	r1, [r4, #8]
   15124:	3901      	subs	r1, #1
   15126:	60a1      	str	r1, [r4, #8]
   15128:	1c51      	adds	r1, r2, #1
   1512a:	6021      	str	r1, [r4, #0]
   1512c:	7015      	strb	r5, [r2, #0]
   1512e:	6962      	ldr	r2, [r4, #20]
   15130:	429a      	cmp	r2, r3
   15132:	d027      	beq.n	15184 <__swbuf_r+0x98>
   15134:	89a3      	ldrh	r3, [r4, #12]
   15136:	07db      	lsls	r3, r3, #31
   15138:	d501      	bpl.n	1513e <__swbuf_r+0x52>
   1513a:	2d0a      	cmp	r5, #10
   1513c:	d022      	beq.n	15184 <__swbuf_r+0x98>
   1513e:	4638      	mov	r0, r7
   15140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15142:	4621      	mov	r1, r4
   15144:	4630      	mov	r0, r6
   15146:	f7fe fcbb 	bl	13ac0 <__swsetup_r>
   1514a:	bb08      	cbnz	r0, 15190 <__swbuf_r+0xa4>
   1514c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15150:	6923      	ldr	r3, [r4, #16]
   15152:	b290      	uxth	r0, r2
   15154:	b2ed      	uxtb	r5, r5
   15156:	0481      	lsls	r1, r0, #18
   15158:	462f      	mov	r7, r5
   1515a:	d4dc      	bmi.n	15116 <__swbuf_r+0x2a>
   1515c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15160:	81a2      	strh	r2, [r4, #12]
   15162:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15164:	6961      	ldr	r1, [r4, #20]
   15166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1516a:	6662      	str	r2, [r4, #100]	; 0x64
   1516c:	6822      	ldr	r2, [r4, #0]
   1516e:	1ad3      	subs	r3, r2, r3
   15170:	4299      	cmp	r1, r3
   15172:	dcd5      	bgt.n	15120 <__swbuf_r+0x34>
   15174:	4621      	mov	r1, r4
   15176:	4630      	mov	r0, r6
   15178:	f7ff fd36 	bl	14be8 <_fflush_r>
   1517c:	b940      	cbnz	r0, 15190 <__swbuf_r+0xa4>
   1517e:	6822      	ldr	r2, [r4, #0]
   15180:	2301      	movs	r3, #1
   15182:	e7ce      	b.n	15122 <__swbuf_r+0x36>
   15184:	4621      	mov	r1, r4
   15186:	4630      	mov	r0, r6
   15188:	f7ff fd2e 	bl	14be8 <_fflush_r>
   1518c:	2800      	cmp	r0, #0
   1518e:	d0d6      	beq.n	1513e <__swbuf_r+0x52>
   15190:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15194:	e7d3      	b.n	1513e <__swbuf_r+0x52>
   15196:	f7fc fe21 	bl	11ddc <__sinit>
   1519a:	e7af      	b.n	150fc <__swbuf_r+0x10>

0001519c <_wcsnrtombs_l>:
   1519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a0:	b08b      	sub	sp, #44	; 0x2c
   151a2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   151a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   151a8:	9103      	str	r1, [sp, #12]
   151aa:	4681      	mov	r9, r0
   151ac:	9205      	str	r2, [sp, #20]
   151ae:	461e      	mov	r6, r3
   151b0:	f1b8 0f00 	cmp.w	r8, #0
   151b4:	d05c      	beq.n	15270 <_wcsnrtombs_l+0xd4>
   151b6:	9b03      	ldr	r3, [sp, #12]
   151b8:	2b00      	cmp	r3, #0
   151ba:	d05e      	beq.n	1527a <_wcsnrtombs_l+0xde>
   151bc:	9b05      	ldr	r3, [sp, #20]
   151be:	681d      	ldr	r5, [r3, #0]
   151c0:	2f00      	cmp	r7, #0
   151c2:	d06a      	beq.n	1529a <_wcsnrtombs_l+0xfe>
   151c4:	1e74      	subs	r4, r6, #1
   151c6:	b34e      	cbz	r6, 1521c <_wcsnrtombs_l+0x80>
   151c8:	9b03      	ldr	r3, [sp, #12]
   151ca:	9304      	str	r3, [sp, #16]
   151cc:	3d04      	subs	r5, #4
   151ce:	2600      	movs	r6, #0
   151d0:	9501      	str	r5, [sp, #4]
   151d2:	e00b      	b.n	151ec <_wcsnrtombs_l+0x50>
   151d4:	9b03      	ldr	r3, [sp, #12]
   151d6:	bb2b      	cbnz	r3, 15224 <_wcsnrtombs_l+0x88>
   151d8:	9b01      	ldr	r3, [sp, #4]
   151da:	681a      	ldr	r2, [r3, #0]
   151dc:	2a00      	cmp	r2, #0
   151de:	d03a      	beq.n	15256 <_wcsnrtombs_l+0xba>
   151e0:	45bc      	cmp	ip, r7
   151e2:	d25c      	bcs.n	1529e <_wcsnrtombs_l+0x102>
   151e4:	3c01      	subs	r4, #1
   151e6:	1c63      	adds	r3, r4, #1
   151e8:	4666      	mov	r6, ip
   151ea:	d017      	beq.n	1521c <_wcsnrtombs_l+0x80>
   151ec:	f8d8 3000 	ldr.w	r3, [r8]
   151f0:	9302      	str	r3, [sp, #8]
   151f2:	9b01      	ldr	r3, [sp, #4]
   151f4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   151f8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   151fc:	9301      	str	r3, [sp, #4]
   151fe:	a907      	add	r1, sp, #28
   15200:	4643      	mov	r3, r8
   15202:	4648      	mov	r0, r9
   15204:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15208:	47a8      	blx	r5
   1520a:	1c42      	adds	r2, r0, #1
   1520c:	d03a      	beq.n	15284 <_wcsnrtombs_l+0xe8>
   1520e:	eb00 0c06 	add.w	ip, r0, r6
   15212:	45bc      	cmp	ip, r7
   15214:	d9de      	bls.n	151d4 <_wcsnrtombs_l+0x38>
   15216:	9b02      	ldr	r3, [sp, #8]
   15218:	e9c8 3b00 	strd	r3, fp, [r8]
   1521c:	4630      	mov	r0, r6
   1521e:	b00b      	add	sp, #44	; 0x2c
   15220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15224:	2800      	cmp	r0, #0
   15226:	dd0e      	ble.n	15246 <_wcsnrtombs_l+0xaa>
   15228:	9b04      	ldr	r3, [sp, #16]
   1522a:	9d01      	ldr	r5, [sp, #4]
   1522c:	4418      	add	r0, r3
   1522e:	1e5a      	subs	r2, r3, #1
   15230:	a907      	add	r1, sp, #28
   15232:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   15236:	f811 3b01 	ldrb.w	r3, [r1], #1
   1523a:	f802 3f01 	strb.w	r3, [r2, #1]!
   1523e:	4572      	cmp	r2, lr
   15240:	d1f9      	bne.n	15236 <_wcsnrtombs_l+0x9a>
   15242:	9501      	str	r5, [sp, #4]
   15244:	9004      	str	r0, [sp, #16]
   15246:	9b05      	ldr	r3, [sp, #20]
   15248:	681a      	ldr	r2, [r3, #0]
   1524a:	3204      	adds	r2, #4
   1524c:	601a      	str	r2, [r3, #0]
   1524e:	9b01      	ldr	r3, [sp, #4]
   15250:	681a      	ldr	r2, [r3, #0]
   15252:	2a00      	cmp	r2, #0
   15254:	d1c4      	bne.n	151e0 <_wcsnrtombs_l+0x44>
   15256:	9b03      	ldr	r3, [sp, #12]
   15258:	b10b      	cbz	r3, 1525e <_wcsnrtombs_l+0xc2>
   1525a:	9b05      	ldr	r3, [sp, #20]
   1525c:	601a      	str	r2, [r3, #0]
   1525e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   15262:	2200      	movs	r2, #0
   15264:	4630      	mov	r0, r6
   15266:	f8c8 2000 	str.w	r2, [r8]
   1526a:	b00b      	add	sp, #44	; 0x2c
   1526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15270:	9b03      	ldr	r3, [sp, #12]
   15272:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   15276:	2b00      	cmp	r3, #0
   15278:	d1a0      	bne.n	151bc <_wcsnrtombs_l+0x20>
   1527a:	9b05      	ldr	r3, [sp, #20]
   1527c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15280:	681d      	ldr	r5, [r3, #0]
   15282:	e79f      	b.n	151c4 <_wcsnrtombs_l+0x28>
   15284:	4606      	mov	r6, r0
   15286:	218a      	movs	r1, #138	; 0x8a
   15288:	2200      	movs	r2, #0
   1528a:	4630      	mov	r0, r6
   1528c:	f8c9 1000 	str.w	r1, [r9]
   15290:	f8c8 2000 	str.w	r2, [r8]
   15294:	b00b      	add	sp, #44	; 0x2c
   15296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1529a:	463e      	mov	r6, r7
   1529c:	e7be      	b.n	1521c <_wcsnrtombs_l+0x80>
   1529e:	4666      	mov	r6, ip
   152a0:	e7bc      	b.n	1521c <_wcsnrtombs_l+0x80>
   152a2:	bf00      	nop

000152a4 <_wcsnrtombs_r>:
   152a4:	b510      	push	{r4, lr}
   152a6:	b084      	sub	sp, #16
   152a8:	4c05      	ldr	r4, [pc, #20]	; (152c0 <_wcsnrtombs_r+0x1c>)
   152aa:	9806      	ldr	r0, [sp, #24]
   152ac:	9000      	str	r0, [sp, #0]
   152ae:	9807      	ldr	r0, [sp, #28]
   152b0:	9001      	str	r0, [sp, #4]
   152b2:	4804      	ldr	r0, [pc, #16]	; (152c4 <_wcsnrtombs_r+0x20>)
   152b4:	6800      	ldr	r0, [r0, #0]
   152b6:	9402      	str	r4, [sp, #8]
   152b8:	f7ff ff70 	bl	1519c <_wcsnrtombs_l>
   152bc:	b004      	add	sp, #16
   152be:	bd10      	pop	{r4, pc}
   152c0:	200031f0 	.word	0x200031f0
   152c4:	20003778 	.word	0x20003778

000152c8 <___reboot_Teensyduino__veneer>:
   152c8:	f85f f000 	ldr.w	pc, [pc]	; 152cc <___reboot_Teensyduino__veneer+0x4>
   152cc:	60001ee5 	.word	0x60001ee5

000152d0 <___init_veneer>:
   152d0:	f85f f000 	ldr.w	pc, [pc]	; 152d4 <___init_veneer+0x4>
   152d4:	60001f39 	.word	0x60001f39

000152d8 <___ZN7TwoWire5beginEv_veneer>:
   152d8:	f85f f000 	ldr.w	pc, [pc]	; 152dc <___ZN7TwoWire5beginEv_veneer+0x4>
   152dc:	600017c9 	.word	0x600017c9

Disassembly of section .fini:

000152e0 <_fini>:
   152e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152e2:	bf00      	nop
